(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{524:function(module,exports){eval('module.exports = "<h1 id=\\"form-file-input\\"><span class=\\"bd-content-title\\">Form File Input</span></h1>\\n<p class=\\"bd-lead\\">Customized, cross-browser consistent, file input control that supports single file, multiple\\nfiles, and directory upload (for browsers that support directory mode)</p>\\n<pre class=\\"hljs html text-monospace p-2 notranslate\\" translate=\\"no\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n    <span class=\\"hljs-comment\\">&lt;!-- Styled --&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span>\\n      <span class=\\"hljs-attr\\">v-model</span>=<span class=\\"hljs-string\\">\\"file\\"</span>\\n      <span class=\\"hljs-attr\\">:state</span>=<span class=\\"hljs-string\\">\\"Boolean(file)\\"</span>\\n      <span class=\\"hljs-attr\\">placeholder</span>=<span class=\\"hljs-string\\">\\"Choose a file...\\"</span>\\n      <span class=\\"hljs-attr\\">drop-placeholder</span>=<span class=\\"hljs-string\\">\\"Drop file here...\\"</span>\\n    &gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"mt-3\\"</span>&gt;</span>Selected file: {{ file ? file.name : \'\' }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n\\n    <span class=\\"hljs-comment\\">&lt;!-- Plain mode --&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span> <span class=\\"hljs-attr\\">v-model</span>=<span class=\\"hljs-string\\">\\"file2\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"mt-3\\"</span> <span class=\\"hljs-attr\\">plain</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"mt-3\\"</span>&gt;</span>Selected file: {{ file2 ? file2.name : \'\' }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">template</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">script</span>&gt;</span><span class=\\"javascript\\">\\n  <span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n    data() {\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        <span class=\\"hljs-attr\\">file</span>: <span class=\\"hljs-literal\\">null</span>,\\n        <span class=\\"hljs-attr\\">file2</span>: <span class=\\"hljs-literal\\">null</span>\\n      }\\n    }\\n  }\\n</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">script</span>&gt;</span>\\n\\n<span class=\\"hljs-comment\\">&lt;!-- b-form-file.vue --&gt;</span></pre><p>For cross browser consistency, Form file defaults to the Bootstrap custom file input to replace the\\nbrowser defaults. They&#39;re built on top of semantic and accessible markup, so it is a solid\\nreplacement for the default file input.</p>\\n<h2 id=\\"single-file-default\\"><span class=\\"bd-content-title\\">Single file (default)<a class=\\"anchorjs-link\\" href=\\"#single-file-default\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>On single file mode, when no file is selected or user cancels Browse dialog, <code translate=\\"no\\" class=\\"notranslate\\">v-model</code> is <code translate=\\"no\\" class=\\"notranslate\\">null</code>\\nindicating no file selected. When a file is selected the return value will be a JavaScript\\n<a href=\\"https://developer.mozilla.org/en/docs/Web/API/File\\"><code translate=\\"no\\" class=\\"notranslate\\">File</code></a> object instance.</p>\\n<h2 id=\\"multiple-files\\"><span class=\\"bd-content-title\\">Multiple files<a class=\\"anchorjs-link\\" href=\\"#multiple-files\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>Multiple file uploading is supported by adding <code translate=\\"no\\" class=\\"notranslate\\">multiple</code> prop to component. In this case <code translate=\\"no\\" class=\\"notranslate\\">v-model</code>\\nis <em>always</em> an <code translate=\\"no\\" class=\\"notranslate\\">Array</code>. When no files are selected, an empty array will be returned. When a file or\\nfiles are selected the return value will be an array of JavaScript\\n<a href=\\"https://developer.mozilla.org/en/docs/Web/API/File\\"><code translate=\\"no\\" class=\\"notranslate\\">File</code></a> object instances.</p>\\n<h2 id=\\"directory-mode\\"><span class=\\"bd-content-title\\">Directory mode<a class=\\"anchorjs-link\\" href=\\"#directory-mode\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>By adding <code translate=\\"no\\" class=\\"notranslate\\">directory</code> prop, the user can select directories instead of files. When a directory is\\nselected, the directory and its entire hierarchy of contents are included in the set of selected\\nitems. The selected file system entries can be obtained using the <code translate=\\"no\\" class=\\"notranslate\\">webkitEntries</code> property.</p>\\n<p><strong>CAUTION</strong> This is a non standard feature while being supported by latest Firefox and Chrome\\nversions, and should not be relied for production.\\n<a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory\\">Read more on MDN</a></p>\\n<p>Directory mode is not supported when the file input is in plain mode.</p>\\n<h2 id=\\"drag-and-drop-support\\"><span class=\\"bd-content-title\\">Drag and Drop support<a class=\\"anchorjs-link\\" href=\\"#drag-and-drop-support\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>Drop mode is enabled by default. It can disabled by setting the <code translate=\\"no\\" class=\\"notranslate\\">no-drop</code> prop. <code translate=\\"no\\" class=\\"notranslate\\">no-drop</code>has no\\neffect in plain mode.</p>\\n<p>You can optionally set a different placeholder while dragging via the <code translate=\\"no\\" class=\\"notranslate\\">drop-placeholder</code> prop. The\\ndefault is no drop placeholder text. Only plain text is supported. HTML and components are not\\nsupported. The <code translate=\\"no\\" class=\\"notranslate\\">drop-placeholder</code> prop has no effect if <code translate=\\"no\\" class=\\"notranslate\\">no-drop</code>is set or in <code translate=\\"no\\" class=\\"notranslate\\">plain</code> mode,</p>\\n<h2 id=\\"limiting-to-certain-file-types\\"><span class=\\"bd-content-title\\">Limiting to certain file types<a class=\\"anchorjs-link\\" href=\\"#limiting-to-certain-file-types\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>You can limit the file types by setting the <code translate=\\"no\\" class=\\"notranslate\\">accept</code> prop to a string containing the allowed file\\ntype(s). To specify more than one type, separate the values with a comma.</p>\\n<pre class=\\"hljs html text-monospace p-2 notranslate\\" translate=\\"no\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n  <span class=\\"hljs-comment\\">&lt;!-- Accept all image formats by IANA media type wildcard--&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span> <span class=\\"hljs-attr\\">accept</span>=<span class=\\"hljs-string\\">\\"image/*\\"</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n\\n  <span class=\\"hljs-comment\\">&lt;!-- Accept specific image formats by IANA type --&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span> <span class=\\"hljs-attr\\">accept</span>=<span class=\\"hljs-string\\">\\"image/jpeg, image/png, image/gif\\"</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n\\n  <span class=\\"hljs-comment\\">&lt;!-- Accept specific image formats by extension --&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span> <span class=\\"hljs-attr\\">accept</span>=<span class=\\"hljs-string\\">\\".jpg, .png, .gif\\"</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></pre><p>To accept any file type, leave <code translate=\\"no\\" class=\\"notranslate\\">accept</code> as null (default). You can mix and match IANA media types\\nand extensions.</p>\\n<p>Refer to <a href=\\"http://www.iana.org/assignments/media-types/\\">IANA Media Types</a> for a complete list of\\nstandard media types.</p>\\n<p><strong>Note:</strong> Not all browsers support or respect the <code translate=\\"no\\" class=\\"notranslate\\">accept</code> attribute on file inputs.</p>\\n<h2 id=\\"customize-the-placeholder-text\\"><span class=\\"bd-content-title\\">Customize the placeholder text<a class=\\"anchorjs-link\\" href=\\"#customize-the-placeholder-text\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>Use the prop <code translate=\\"no\\" class=\\"notranslate\\">placeholder</code> to change the prompt text that is shown when no files are selected. Only\\nplain text is supported. HTML and components are not supported.</p>\\n<h2 id=\\"customize-browse-button-label\\"><span class=\\"bd-content-title\\">Customize browse button label<a class=\\"anchorjs-link\\" href=\\"#customize-browse-button-label\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>If you want to globally change <code translate=\\"no\\" class=\\"notranslate\\">Browse</code> label, you can add something like this to your global\\nstylesheets. Also it is advised to use\\n<a href=\\"https://developer.mozilla.org/en-US/docs/Web/CSS/:lang\\">:lang()</a> for multi-language sites.</p>\\n<pre class=\\"hljs css text-monospace p-2 notranslate\\" translate=\\"no\\"><span class=\\"hljs-selector-class\\">.custom-file-input</span><span class=\\"hljs-selector-pseudo\\">:lang(en)</span> ~ <span class=\\"hljs-selector-class\\">.custom-file-label</span><span class=\\"hljs-selector-pseudo\\">::after</span> {\\n  <span class=\\"hljs-attribute\\">content</span>: <span class=\\"hljs-string\\">\'Browse\'</span>;\\n}</pre><p>Alternatively you can set the content of the custom file browse button text via the <code translate=\\"no\\" class=\\"notranslate\\">browse-text</code>\\nprop. Note, only plain text is supported. HTML and components are not supported.</p>\\n<h2 id=\\"customize-the-formatting-of-the-selected-file-names\\"><span class=\\"bd-content-title\\">Customize the formatting of the selected file names<a class=\\"anchorjs-link\\" href=\\"#customize-the-formatting-of-the-selected-file-names\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>By default, the custom styled file input lists the file names separated by commas. You can customize\\nhow the file names are shown either via a custom formatter function or the <code translate=\\"no\\" class=\\"notranslate\\">file-name</code> scoped slot.</p>\\n<h3 id=\\"file-name-formatter-function\\"><span class=\\"bd-content-title\\">File name formatter function<a class=\\"anchorjs-link\\" href=\\"#file-name-formatter-function\\" aria-label=\\"Anchor\\"></a></span></h3>\\n<p>Set the prop <code translate=\\"no\\" class=\\"notranslate\\">file-name-formatter</code> to a function that accepts a single argument which is an array of\\n<a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/File\\"><code translate=\\"no\\" class=\\"notranslate\\">File</code></a> objects. The function should return\\na single formatted string (HTML is not supported). The formatter will not be called if no files are\\nselected.</p>\\n<p>Regardless of if the prop <code translate=\\"no\\" class=\\"notranslate\\">multiple</code> is set or not, the argument to the formatter will always be an\\narray.</p>\\n<pre class=\\"hljs html text-monospace p-2 notranslate\\" translate=\\"no\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span> <span class=\\"hljs-attr\\">multiple</span> <span class=\\"hljs-attr\\">:file-name-formatter</span>=<span class=\\"hljs-string\\">\\"formatNames\\"</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">template</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">script</span>&gt;</span><span class=\\"javascript\\">\\n  <span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n    <span class=\\"hljs-attr\\">methods</span>: {\\n      formatNames(files) {\\n        <span class=\\"hljs-keyword\\">if</span> (files.length === <span class=\\"hljs-number\\">1</span>) {\\n          <span class=\\"hljs-keyword\\">return</span> files[<span class=\\"hljs-number\\">0</span>].name\\n        } <span class=\\"hljs-keyword\\">else</span> {\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">`<span class=\\"hljs-subst\\">${files.length}</span> files selected`</span>\\n        }\\n      }\\n    }\\n  }\\n</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">script</span>&gt;</span>\\n\\n<span class=\\"hljs-comment\\">&lt;!-- file-formatter-function.vue --&gt;</span></pre><h3 id=\\"file-name-formatting-via-scoped-slot\\"><span class=\\"bd-content-title\\">File name formatting via scoped slot<a class=\\"anchorjs-link\\" href=\\"#file-name-formatting-via-scoped-slot\\" aria-label=\\"Anchor\\"></a></span></h3>\\n<p>Alternatively, you can use the scoped slot <code translate=\\"no\\" class=\\"notranslate\\">file-name</code> to render the file names. The scoped slot\\nwill receive the following properties:</p>\\n<div class=\\"table-responsive-sm\\"><table class=\\"b-table table table-bordered table-striped bv-docs-table\\">\\n<thead class=\\"thead-default\\">\\n<tr>\\n<th>Property</th>\\n<th>Type</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code translate=\\"no\\" class=\\"notranslate\\">files</code></td>\\n<td>Array</td>\\n<td>Array of <code translate=\\"no\\" class=\\"notranslate\\">File</code> objects</td>\\n</tr>\\n<tr>\\n<td><code translate=\\"no\\" class=\\"notranslate\\">names</code></td>\\n<td>Array</td>\\n<td>Array of file names</td>\\n</tr>\\n</tbody></table>\\n</div><p>Both properties are always arrays, regardless of the setting of the <code translate=\\"no\\" class=\\"notranslate\\">multiple</code> prop.</p>\\n<pre class=\\"hljs html text-monospace p-2 notranslate\\" translate=\\"no\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span> <span class=\\"hljs-attr\\">multiple</span>&gt;</span>\\n   <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">template</span> <span class=\\"hljs-attr\\">slot</span>=<span class=\\"hljs-string\\">\\"file-name\\"</span> <span class=\\"hljs-attr\\">slot-scope</span>=<span class=\\"hljs-string\\">\\"{ names }\\"</span>&gt;</span>\\n     <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-badge</span> <span class=\\"hljs-attr\\">variant</span>=<span class=\\"hljs-string\\">\\"dark\\"</span>&gt;</span>{{ names[0] }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-badge</span>&gt;</span>\\n     <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-badge</span> <span class=\\"hljs-attr\\">v-if</span>=<span class=\\"hljs-string\\">\\"names.length &gt; 1\\"</span> <span class=\\"hljs-attr\\">variant</span>=<span class=\\"hljs-string\\">\\"dark\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"ml-1\\"</span>&gt;</span>\\n       + {{ names.length - 1 }} More files\\n     <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-badge</span>&gt;</span>\\n   <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">template</span>&gt;</span>\\n\\n<span class=\\"hljs-comment\\">&lt;!-- file-formatter-slot.vue --&gt;</span></pre><p>When using the <code translate=\\"no\\" class=\\"notranslate\\">file-name</code> slot, the <code translate=\\"no\\" class=\\"notranslate\\">file-name-formatter</code> prop is ignored. Also, the slot will not\\nbe rendered when there are no file(s) selected.</p>\\n<h2 id=\\"non-custom-file-input\\"><span class=\\"bd-content-title\\">Non custom file input<a class=\\"anchorjs-link\\" href=\\"#non-custom-file-input\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>You can have <code translate=\\"no\\" class=\\"notranslate\\">&lt;b-form-file&gt;</code> render a browser native file input by setting the <code translate=\\"no\\" class=\\"notranslate\\">plain</code> prop. Note\\nthat many of the custom form-file features do not apply when <code translate=\\"no\\" class=\\"notranslate\\">plain</code> is set.</p>\\n<h2 id=\\"contextual-state-feedback\\"><span class=\\"bd-content-title\\">Contextual state feedback<a class=\\"anchorjs-link\\" href=\\"#contextual-state-feedback\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>Bootstrap includes validation styles for <code translate=\\"no\\" class=\\"notranslate\\">valid</code> and <code translate=\\"no\\" class=\\"notranslate\\">invalid</code> states on most form controls.</p>\\n<p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p>\\n<ul>\\n<li><code translate=\\"no\\" class=\\"notranslate\\">&#39;invalid&#39;</code> is great for when there&#39;s a blocking or required field. A user must fill in this field\\nproperly to submit the form.</li>\\n<li><code translate=\\"no\\" class=\\"notranslate\\">&#39;valid&#39;</code> is ideal for situations when you have per-field validation throughout a form and want to\\nencourage a user through the rest of the fields.</li>\\n<li><code translate=\\"no\\" class=\\"notranslate\\">null</code> Displays no validation state</li>\\n</ul>\\n<p>To apply one of the contextual state icons on <code translate=\\"no\\" class=\\"notranslate\\">&lt;b-form-file</code>, set the <code translate=\\"no\\" class=\\"notranslate\\">state</code> prop to <code translate=\\"no\\" class=\\"notranslate\\">&#39;invalid&#39;</code>\\n(or <code translate=\\"no\\" class=\\"notranslate\\">false</code>), <code translate=\\"no\\" class=\\"notranslate\\">&#39;valid&#39;</code> ( or <code translate=\\"no\\" class=\\"notranslate\\">true</code>), or <code translate=\\"no\\" class=\\"notranslate\\">null</code>.</p>\\n<h2 id=\\"autofocus\\"><span class=\\"bd-content-title\\">Autofocus<a class=\\"anchorjs-link\\" href=\\"#autofocus\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p><span class=\\"badge badge-info small\\">NEW in 2.0.0-rc.21</span></p>\\n<p>When the <code translate=\\"no\\" class=\\"notranslate\\">autofocus</code> prop is set on <code translate=\\"no\\" class=\\"notranslate\\">&lt;b-form-file&gt;</code>, the input will be auto-focused when it is\\ninserted into the document or re-activated when inside a Vue <code translate=\\"no\\" class=\\"notranslate\\">&lt;keep-alive&gt;</code> component. Note that\\nthis prop <strong>does not</strong> set the <code translate=\\"no\\" class=\\"notranslate\\">autofocus</code> attribute on the input.</p>\\n<h2 id=\\"accessibility\\"><span class=\\"bd-content-title\\">Accessibility<a class=\\"anchorjs-link\\" href=\\"#accessibility\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>When using the custom version of <code translate=\\"no\\" class=\\"notranslate\\">&lt;b-form-file&gt;</code> input which hides the original input, it is\\n<strong>highly recommended</strong> that you supply a document unique ID string via the <code translate=\\"no\\" class=\\"notranslate\\">id</code> prop. This will\\nautomatically render the extra ARIA attributes required to improve usability for persons using\\nassistive technologies.</p>\\n<h2 id=\\"clearing-the-file-selection\\"><span class=\\"bd-content-title\\">Clearing the file selection<a class=\\"anchorjs-link\\" href=\\"#clearing-the-file-selection\\" aria-label=\\"Anchor\\"></a></span></h2>\\n<p>With inputs of type file, normally the <code translate=\\"no\\" class=\\"notranslate\\">v-model</code> is uni-directional (meaning you cannot pre-set the\\nselected files). However, you can clear the file input&#39;s selected files by setting the <code translate=\\"no\\" class=\\"notranslate\\">v-model</code> to\\neither <code translate=\\"no\\" class=\\"notranslate\\">null</code>, an empty string, or an empty array).</p>\\n<p>Alternatively, <code translate=\\"no\\" class=\\"notranslate\\">&lt;b-form-file&gt;</code> provides a <code translate=\\"no\\" class=\\"notranslate\\">reset()</code> method that can be called to clear the file\\ninput. To take advantage of the <code translate=\\"no\\" class=\\"notranslate\\">reset()</code> method, you will need to obtain a reference to the\\n<code translate=\\"no\\" class=\\"notranslate\\">&lt;b-form-file&gt;</code> component.</p>\\n<pre class=\\"hljs html text-monospace p-2 notranslate\\" translate=\\"no\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">template</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">div</span>&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-form-file</span> <span class=\\"hljs-attr\\">v-model</span>=<span class=\\"hljs-string\\">\\"file\\"</span> <span class=\\"hljs-attr\\">ref</span>=<span class=\\"hljs-string\\">\\"file-input\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"mb-2\\"</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-form-file</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-button</span> @<span class=\\"hljs-attr\\">click</span>=<span class=\\"hljs-string\\">\\"clearFiles\\"</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"mr-2\\"</span>&gt;</span>Reset via method<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-button</span>&gt;</span>\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b-button</span> @<span class=\\"hljs-attr\\">click</span>=<span class=\\"hljs-string\\">\\"file = null\\"</span>&gt;</span>Reset via v-model<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b-button</span>&gt;</span>\\n\\n    <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">p</span> <span class=\\"hljs-attr\\">class</span>=<span class=\\"hljs-string\\">\\"mt-2\\"</span>&gt;</span>Selected file: <span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">b</span>&gt;</span>{{ file ? file.name : \'\' }}<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">b</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">p</span>&gt;</span>\\n  <span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span>\\n<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">template</span>&gt;</span>\\n\\n<span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">script</span>&gt;</span><span class=\\"javascript\\">\\n  <span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> {\\n    data() {\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        <span class=\\"hljs-attr\\">file</span>: <span class=\\"hljs-literal\\">null</span>\\n      }\\n    },\\n    <span class=\\"hljs-attr\\">methods</span>: {\\n      clearFiles() {\\n        <span class=\\"hljs-keyword\\">this</span>.$refs[<span class=\\"hljs-string\\">\'file-input\'</span>].reset()\\n      }\\n    }\\n  }\\n</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">script</span>&gt;</span>\\n\\n<span class=\\"hljs-comment\\">&lt;!-- b-form-file-reset.vue --&gt;</span></pre><p><strong>Implementation note:</strong> As not all browsers allow setting a value of a file input (even to null or\\nan empty string), <code translate=\\"no\\" class=\\"notranslate\\">b-form-input</code> employs a technique that works cross-browser that involves changing\\nthe input type to null and then back to type file.</p>\\n\x3c!-- Component reference added automatically from component package.json --\x3e\\n";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///524\n')}}]);