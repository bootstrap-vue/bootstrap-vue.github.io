(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{408:function(n,t){n.exports='<h1 id="modals" class="bv-no-focus-ring"><span class="bd-content-title">Modals</span></h1>\n<p class="bd-lead">Modals are streamlined, but flexible dialog prompts powered by JavaScript and CSS. They support a\nnumber of use cases from user notification to completely custom content and feature a handful of\nhelpful sub-components, sizes, variants, accessibility, and more.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-1</span>&gt;</span>Launch demo modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-1"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"BootstrapVue"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span>&gt;</span>Hello from modal!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal.vue --&gt;</span></pre><h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>, by default, has an <strong>OK</strong> and <strong>Cancel</strong> buttons in the footer. These buttons can be\ncustomized by setting various props on the component. You can customize the size of the buttons,\ndisable buttons, hide the <strong>Cancel</strong> button (i.e. <code translate="no" class="notranslate text-nowrap">ok-only</code>), choose a variant (e.g. <code translate="no" class="notranslate text-nowrap">danger</code> for a\nred OK button) using the <code translate="no" class="notranslate text-nowrap">ok-variant</code> and <code translate="no" class="notranslate text-nowrap">cancel-variant</code> props, and provide custom button content\nusing the <code translate="no" class="notranslate text-nowrap">ok-title</code> and <code translate="no" class="notranslate text-nowrap">cancel-title</code> props, or using the named slots <code translate="no" class="notranslate text-nowrap">modal-ok</code> and\n<code translate="no" class="notranslate text-nowrap">modal-cancel</code>.</p>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> supports close on ESC (enabled by default), close on backdrop click (enabled by\ndefault), and the <code translate="no" class="notranslate text-nowrap">X</code> close button in the header (enabled by default). These features may be\ndisabled by setting the props <code translate="no" class="notranslate text-nowrap">no-close-on-esc</code>, <code translate="no" class="notranslate text-nowrap">no-close-on-backdrop</code>, and <code translate="no" class="notranslate text-nowrap">hide-header-close</code>\nrespectively.</p>\n<p>You can override the modal title via the named slot <code translate="no" class="notranslate text-nowrap">modal-title</code>, override the header completely\nvia the <code translate="no" class="notranslate text-nowrap">modal-header</code> slot, and override the footer completely via the <code translate="no" class="notranslate text-nowrap">modal-footer</code> slot.</p>\n<p><strong>Note</strong>: when using the <code translate="no" class="notranslate text-nowrap">modal-footer</code> slot, the default <strong>OK</strong> and <strong>Cancel</strong> buttons will not be\npresent. Also, if you use the <code translate="no" class="notranslate text-nowrap">modal-header</code> slot, the default header <code translate="no" class="notranslate text-nowrap">X</code> close button will not be\npresent, nor can you use the <code translate="no" class="notranslate text-nowrap">modal-title</code> slot.</p>\n<p>Modals will not render their content in the document until they are shown (lazily rendered). Modals,\nwhen visible, are rendered <strong>appended to the <code translate="no" class="notranslate text-nowrap">&lt;body&gt;</code> element</strong>. The placement of the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>\ncomponent will not affect layout, as it always renders as a placeholder comment node (<code translate="no" class="notranslate text-nowrap">&lt;!----&gt;</code>).\nYou can revert to the behaviour of previous BootstrapVue versions via the use of the\n<a href="#lazy-loading-and-static-modals" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">static</code> prop</a>.</p>\n<h2 id="toggle-modal-visibility" class="bv-no-focus-ring"><span class="bd-content-title">Toggle modal visibility<a class="anchorjs-link" href="#toggle-modal-visibility" aria-labelledby="toggle-modal-visibility"></a></span></h2>\n<p>There are several methods that you can employ to toggle the visibility of <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>.</p>\n<h3 id="using-v-b-modal-directive" class="bv-no-focus-ring"><span class="bd-content-title">Using <code translate="no" class="notranslate text-nowrap">v-b-modal</code> directive<a class="anchorjs-link" href="#using-v-b-modal-directive" aria-labelledby="using-v-b-modal-directive"></a></span></h3>\n<p>Other elements can easily show modals using the <code translate="no" class="notranslate text-nowrap">v-b-modal</code> directive.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Using modifiers --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.my-modal</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Using value --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal</span>=<span class="hljs-string">"\'my-modal\'"</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- The modal --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"my-modal"</span>&gt;</span>Hello From My Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-directive.vue --&gt;</span></pre><p>This approach will automatically return focus to the trigger element once the modal closes (similar\nto default Bootstrap functionality). Other approaches for toggling modal visibility may require\nadditional code to implement this accessibility feature.</p>\n<p>See the <a href="#accessibility" class="font-weight-bold">Accessibility</a> section below for details.</p>\n<h3 id="using-thisbvmodalshow-and-thisbvmodalhide-instance-methods" class="bv-no-focus-ring"><span class="bd-content-title">Using <code translate="no" class="notranslate text-nowrap">this.$bvModal.show()</code> and <code translate="no" class="notranslate text-nowrap">this.$bvModal.hide()</code> instance methods<a class="anchorjs-link" href="#using-thisbvmodalshow-and-thisbvmodalhide-instance-methods" aria-labelledby="using-thisbvmodalshow-and-thisbvmodalhide-instance-methods"></a></span></h3>\n<p>When BootstrapVue is installed as a plugin, or the <code translate="no" class="notranslate text-nowrap">ModalPlugin</code> plugin is used, BootstrapVue will\ninject a <code translate="no" class="notranslate text-nowrap">$bvModal</code> object into every Vue instance (components, apps). <code translate="no" class="notranslate text-nowrap">this.$bvModal</code> exposes\nseveral methods, of which two are for showing and hiding modals:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">this.$bvModal.show(id)</code></td>\n<td>Show the modal with the specified <code translate="no" class="notranslate text-nowrap">id</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">this.$bvModal.hide(id)</code></td>\n<td>Hide the modal with the specified <code translate="no" class="notranslate text-nowrap">id</code></td>\n</tr>\n</tbody></table>\n</div><p>Both methods return immediately after being called.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"show-btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$bvModal.show(\'bv-modal-example\')"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bv-modal-example"</span> <span class="hljs-attr">hide-footer</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:modal-title</span>&gt;</span>\n      Using <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>$bvModal<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> Methods\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-block text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello From This Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span> <span class="hljs-attr">block</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$bvModal.hide(\'bv-modal-example\')"</span>&gt;</span>Close Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-bv-modal-hide-show.vue --&gt;</span></pre><p>The <code translate="no" class="notranslate text-nowrap">this.$bvModal</code> object is also used for displaying <a href="#modal-message-boxes" class="font-weight-bold">modal message boxes</a>.</p>\n<h3 id="using-show-hide-and-toggle-component-methods" class="bv-no-focus-ring"><span class="bd-content-title">Using <code translate="no" class="notranslate text-nowrap">show()</code>, <code translate="no" class="notranslate text-nowrap">hide()</code>, and <code translate="no" class="notranslate text-nowrap">toggle()</code> component methods<a class="anchorjs-link" href="#using-show-hide-and-toggle-component-methods" aria-labelledby="using-show-hide-and-toggle-component-methods"></a></span></h3>\n<p>You can access modal using <code translate="no" class="notranslate text-nowrap">ref</code> attribute and then call the <code translate="no" class="notranslate text-nowrap">show()</code>, <code translate="no" class="notranslate text-nowrap">hide()</code> or <code translate="no" class="notranslate text-nowrap">toggle()</code>\nmethods.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"show-btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showModal"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"toggle-btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span>&gt;</span>Toggle Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"my-modal"</span> <span class="hljs-attr">hide-footer</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Using Component Methods"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-block text-center"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello From My Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-danger"</span> <span class="hljs-attr">block</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hideModal"</span>&gt;</span>Close Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-warning"</span> <span class="hljs-attr">block</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span>&gt;</span>Toggle Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      showModal() {\n        <span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">\'my-modal\'</span>].show()\n      },\n      hideModal() {\n        <span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">\'my-modal\'</span>].hide()\n      },\n      toggleModal() {\n        <span class="hljs-comment">// We pass the ID of the button that we want to return focus to</span>\n        <span class="hljs-comment">// when the modal has hidden</span>\n        <span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">\'my-modal\'</span>].toggle(<span class="hljs-string">\'#toggle-btn\'</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-methods.vue --&gt;</span></pre><p>The <code translate="no" class="notranslate text-nowrap">hide()</code> method accepts an optional string <code translate="no" class="notranslate text-nowrap">trigger</code> argument for defining what triggered the\nmodal to close. See section <a href="#prevent-closing" class="font-weight-bold">Prevent Closing</a> below for details.</p>\n<p><strong>Note:</strong> It is recommended to use the <code translate="no" class="notranslate text-nowrap">this.$bvModal.show()</code> and <code translate="no" class="notranslate text-nowrap">this.$bvModal.hide()</code> methods\n(mentioned in the previous section) instead of using <code translate="no" class="notranslate text-nowrap">$ref</code> methods.</p>\n<h3 id="using-v-model-property" class="bv-no-focus-ring"><span class="bd-content-title">Using <code translate="no" class="notranslate text-nowrap">v-model</code> property<a class="anchorjs-link" href="#using-v-model-property" aria-labelledby="using-v-model-property"></a></span></h3>\n<p><code translate="no" class="notranslate text-nowrap">v-model</code> property is always automatically synced with <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> visible state and you can\nshow/hide using <code translate="no" class="notranslate text-nowrap">v-model</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"modalShow = !modalShow"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"modalShow"</span>&gt;</span>Hello From Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">modalShow</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-v-model.vue --&gt;</span></pre><p>When using the <code translate="no" class="notranslate text-nowrap">v-model</code> prop, <strong>do not</strong> use the <code translate="no" class="notranslate text-nowrap">visible</code> prop at the same time.</p>\n<h3 id="using-scoped-slot-scope-methods" class="bv-no-focus-ring"><span class="bd-content-title">Using scoped slot scope methods<a class="anchorjs-link" href="#using-scoped-slot-scope-methods" aria-labelledby="using-scoped-slot-scope-methods"></a></span></h3>\n<p>Refer to the <a href="#custom-rendering-with-slots" class="font-weight-bold">Custom rendering with slots</a> section on using the\nvarious methods passed to scoped slots for closing modals.</p>\n<h3 id="emitting-events-on-root" class="bv-no-focus-ring"><span class="bd-content-title">Emitting events on $root<a class="anchorjs-link" href="#emitting-events-on-root" aria-labelledby="emitting-events-on-root"></a></span></h3>\n<p>You can emit <code translate="no" class="notranslate text-nowrap">bv::show::modal</code>, <code translate="no" class="notranslate text-nowrap">bv::hide::modal</code>, and <code translate="no" class="notranslate text-nowrap">bv::toggle::modal</code> events on <code translate="no" class="notranslate text-nowrap">$root</code> with\nthe first argument set to the modal&#39;s id. An optional second argument can specify the element to\nreturn focus to once the modal is closed. The second argument can be a CSS selector, an element\nreference, or a component reference (the root element of the component will be focused).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showModal"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"btnShow"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"btnToggle"</span>&gt;</span>Toggle Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-block"</span>&gt;</span>Hello From My Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hideModal"</span>&gt;</span>Close Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span>&gt;</span>Toggle Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    showModal() {\n      <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::show::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#btnShow\'</span>)\n    },\n    hideModal() {\n      <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::hide::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#btnShow\'</span>)\n    },\n    toggleModal() {\n      <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::toggle::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#btnToggle\'</span>)\n    }\n  }\n}</pre><p><strong>Note:</strong> It is recommended to use the <code translate="no" class="notranslate text-nowrap">this.$bvModal.show()</code> and <code translate="no" class="notranslate text-nowrap">this.$bvModal.hide()</code> methods\n(mentioned in a previous section) instead of emitting <code translate="no" class="notranslate text-nowrap">$root</code> events.</p>\n<h3 id="prevent-closing" class="bv-no-focus-ring"><span class="bd-content-title">Prevent closing<a class="anchorjs-link" href="#prevent-closing" aria-labelledby="prevent-closing"></a></span></h3>\n<p>To prevent <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> from closing (for example when validation fails). you can call the\n<code translate="no" class="notranslate text-nowrap">.preventDefault()</code> method of the event object passed to your <code translate="no" class="notranslate text-nowrap">ok</code> (<strong>OK</strong> button), <code translate="no" class="notranslate text-nowrap">cancel</code>\n(<strong>Cancel</strong> button), <code translate="no" class="notranslate text-nowrap">close</code> (modal header close button) and <code translate="no" class="notranslate text-nowrap">hide</code> event handlers. Note that\n<code translate="no" class="notranslate text-nowrap">.preventDefault()</code>, when used, <strong>must</strong> be called synchronously, as async is not supported.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-prevent-closing</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>\n      Submitted Names:\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"submittedNames.length === 0"</span>&gt;</span>--<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0 pl-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"name in submittedNames"</span>&gt;</span>{{ name }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-prevent-closing"</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">"modal"</span>\n      <span class="hljs-attr">title</span>=<span class="hljs-string">"Submit Your Name"</span>\n      @<span class="hljs-attr">show</span>=<span class="hljs-string">"resetModal"</span>\n      @<span class="hljs-attr">hidden</span>=<span class="hljs-string">"resetModal"</span>\n      @<span class="hljs-attr">ok</span>=<span class="hljs-string">"handleOk"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"form"</span> @<span class="hljs-attr">submit.stop.prevent</span>=<span class="hljs-string">"handleSubmit"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">"nameState"</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Name"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"name-input"</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">"Name is required"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">"name-input"</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">"name"</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">"nameState"</span>\n            <span class="hljs-attr">required</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">nameState</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">submittedNames</span>: []\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      checkFormValidity() {\n        <span class="hljs-keyword">const</span> valid = <span class="hljs-keyword">this</span>.$refs.form.checkValidity()\n        <span class="hljs-keyword">this</span>.nameState = valid\n        <span class="hljs-keyword">return</span> valid\n      },\n      resetModal() {\n        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.nameState = <span class="hljs-literal">null</span>\n      },\n      handleOk(bvModalEvt) {\n        <span class="hljs-comment">// Prevent modal from closing</span>\n        bvModalEvt.preventDefault()\n        <span class="hljs-comment">// Trigger submit handler</span>\n        <span class="hljs-keyword">this</span>.handleSubmit()\n      },\n      handleSubmit() {\n        <span class="hljs-comment">// Exit when the form isn\'t valid</span>\n        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.checkFormValidity()) {\n          <span class="hljs-keyword">return</span>\n        }\n        <span class="hljs-comment">// Push the name to submitted names</span>\n        <span class="hljs-keyword">this</span>.submittedNames.push(<span class="hljs-keyword">this</span>.name)\n        <span class="hljs-comment">// Hide the modal manually</span>\n        <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          <span class="hljs-keyword">this</span>.$bvModal.hide(<span class="hljs-string">\'modal-prevent-closing\'</span>)\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-prevent-closing.vue --&gt;</span></pre><p><strong>Note</strong>: events <code translate="no" class="notranslate text-nowrap">ok</code>, <code translate="no" class="notranslate text-nowrap">cancel</code>, and <code translate="no" class="notranslate text-nowrap">close</code> are emitted by modal&#39;s built in <strong>OK</strong>, <strong>Cancel</strong>, and\nheader close (<strong>X</strong>) buttons respectively. These events will not be emitted, by default, if you have\nprovided your own buttons in the <code translate="no" class="notranslate text-nowrap">modal-footer</code> slot or have hidden the footer. In this case use the\n<code translate="no" class="notranslate text-nowrap">hide</code> event to control cancelling of the modal close. Event <code translate="no" class="notranslate text-nowrap">hide</code> is always emitted, even if <code translate="no" class="notranslate text-nowrap">ok</code>,\n<code translate="no" class="notranslate text-nowrap">cancel</code>, and <code translate="no" class="notranslate text-nowrap">close</code> are emitted.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">ok</code>, <code translate="no" class="notranslate text-nowrap">cancel</code>, <code translate="no" class="notranslate text-nowrap">close</code> and <code translate="no" class="notranslate text-nowrap">hide</code> event object (<code translate="no" class="notranslate text-nowrap">BvModalEvent</code>) contains several properties and\nmethods:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property or Method</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">preventDefault()</code></td>\n<td>Method</td>\n<td>When called prevents the modal from closing</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">trigger</code></td>\n<td>Property</td>\n<td>Will be one of: <code translate="no" class="notranslate text-nowrap">ok</code> (Default <strong>OK</strong> Clicked), <code translate="no" class="notranslate text-nowrap">cancel</code> (Default <strong>Cancel</strong> clicked), <code translate="no" class="notranslate text-nowrap">esc</code> (if the <kbd class="notranslate" translate="no">ESC</kbd> key was pressed), <code translate="no" class="notranslate text-nowrap">backdrop</code> (if the backdrop was clicked), <code translate="no" class="notranslate text-nowrap">headerclose</code> (if the header X button was clicked), the first argument provided to the <code translate="no" class="notranslate text-nowrap">hide()</code> method, or <code translate="no" class="notranslate text-nowrap">null</code> otherwise.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">target</code></td>\n<td>Property</td>\n<td>A reference to the modal element</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">vueTarget</code></td>\n<td>property</td>\n<td>A reference to the modal&#39;s Vue VM instance</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">componentId</code></td>\n<td>property</td>\n<td>The modal&#39;s ID</td>\n</tr>\n</tbody></table>\n</div><p>You can set the value of <code translate="no" class="notranslate text-nowrap">trigger</code> by passing an argument to the component&#39;s <code translate="no" class="notranslate text-nowrap">hide()</code> method for\nadvanced control (i.e. detecting what button or action triggered the modal to hide).</p>\n<p><strong>Note:</strong> <code translate="no" class="notranslate text-nowrap">ok</code>, <code translate="no" class="notranslate text-nowrap">cancel</code>, or <code translate="no" class="notranslate text-nowrap">close</code> events will be only emitted when the argument to <code translate="no" class="notranslate text-nowrap">hide()</code> is\nstrictly <code translate="no" class="notranslate text-nowrap">&#39;ok&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;cancel&#39;</code>, or <code translate="no" class="notranslate text-nowrap">&#39;headerclose&#39;</code> respectively. The argument passed to <code translate="no" class="notranslate text-nowrap">hide()</code> will\nbe placed into the <code translate="no" class="notranslate text-nowrap">trigger</code> property of the event object.</p>\n<h2 id="modal-content" class="bv-no-focus-ring"><span class="bd-content-title">Modal content<a class="anchorjs-link" href="#modal-content" aria-labelledby="modal-content"></a></span></h2>\n<h3 id="using-the-grid" class="bv-no-focus-ring"><span class="bd-content-title">Using the grid<a class="anchorjs-link" href="#using-the-grid" aria-labelledby="using-the-grid"></a></span></h3>\n<p>Utilize the Bootstrap grid system within a modal by nesting <code translate="no" class="notranslate text-nowrap">&lt;b-container fluid&gt;</code> within the\nmodal-body. Then, use the normal grid system <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> (or <code translate="no" class="notranslate text-nowrap">&lt;b-form-row&gt;</code>) and <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> as you\nwould anywhere else.</p>\n<h3 id="tooltips-and-popovers" class="bv-no-focus-ring"><span class="bd-content-title">Tooltips and popovers<a class="anchorjs-link" href="#tooltips-and-popovers" aria-labelledby="tooltips-and-popovers"></a></span></h3>\n<p>Tooltips and popovers can be placed within modals as needed. When modals are closed, any tooltips\nand popovers within are also automatically dismissed. Tooltips and popovers are automatically\nappended to the modal element (to ensure correct z-indexing), although you can override where they\nare appended by specifying a container ID (refer to tooltip and popover docs for details).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modalPopover</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modalPopover"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Modal with Popover"</span> <span class="hljs-attr">ok-only</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      This\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover</span>=<span class="hljs-string">"\'Popover inside a modal!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      triggers a popover on click.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      This <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">v-b-tooltip</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Tooltip in a modal!"</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> will show a tooltip on\n      hover.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-popover.vue --&gt;</span></pre><h2 id="lazy-loading-and-static-modals" class="bv-no-focus-ring"><span class="bd-content-title">Lazy loading and static modals<a class="anchorjs-link" href="#lazy-loading-and-static-modals" aria-labelledby="lazy-loading-and-static-modals"></a></span></h2>\n<p>By default, modals will not render their content in the document until they are shown (lazily\nrendered). Modals that, when visible, are rendered appended to the <code translate="no" class="notranslate text-nowrap">&lt;body&gt;</code> element. The <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>\ncomponent will not affect layout, as they render as a placeholder comment node (<code translate="no" class="notranslate text-nowrap">&lt;!----&gt;</code>) in the\nDOM position they are placed. Due to the portalling process, it can take two or more <code translate="no" class="notranslate text-nowrap">$nextTick</code>s to\nrender changes of the content into the target.</p>\n<p>Modals can be rendered <em>in-place</em> in the document (i.e. where the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> component is placed in\nthe document) by setting the <code translate="no" class="notranslate text-nowrap">static</code> prop to <code translate="no" class="notranslate text-nowrap">true</code>. Note that the content of the modal will be\nrendered in the DOM even if the modal is not visible/shown when <code translate="no" class="notranslate text-nowrap">static</code> is <code translate="no" class="notranslate text-nowrap">true</code>. To make <code translate="no" class="notranslate text-nowrap">static</code>\nmodals lazy rendered, also set the <code translate="no" class="notranslate text-nowrap">lazy</code> prop to <code translate="no" class="notranslate text-nowrap">true</code>. The modal will then appear in the document\n<em>only</em> when it is visible. Note, when in <code translate="no" class="notranslate text-nowrap">static</code> mode, placement of the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> component <em>may\naffect layout</em> of your document and the modal.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">lazy</code> prop will have no effect if the prop <code translate="no" class="notranslate text-nowrap">static</code> is not <code translate="no" class="notranslate text-nowrap">true</code> (non-static modals will\n<em>always</em> be lazily rendered).</p>\n<h2 id="styling-options-and-customization" class="bv-no-focus-ring"><span class="bd-content-title">Styling, options, and customization<a class="anchorjs-link" href="#styling-options-and-customization" aria-labelledby="styling-options-and-customization"></a></span></h2>\n<h3 id="modal-sizing" class="bv-no-focus-ring"><span class="bd-content-title">Modal sizing<a class="anchorjs-link" href="#modal-sizing" aria-labelledby="modal-sizing"></a></span></h3>\n<p>Modals have three optional sizes, available via the prop <code translate="no" class="notranslate text-nowrap">size</code>. These sizes kick in at certain\nbreakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are <code translate="no" class="notranslate text-nowrap">sm</code>,\n<code translate="no" class="notranslate text-nowrap">lg</code>, and <code translate="no" class="notranslate text-nowrap">xl</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-xl</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>xl modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-lg</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>lg modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-sm</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>sm modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-xl"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"xl"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Extra Large Modal"</span>&gt;</span>Hello Extra Large Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-lg"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Large Modal"</span>&gt;</span>Hello Large Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-sm"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Small Modal"</span>&gt;</span>Hello Small Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-sizes.vue --&gt;</span></pre><p>The <code translate="no" class="notranslate text-nowrap">size</code> prop maps the size to the <code translate="no" class="notranslate text-nowrap">.modal-&lt;size&gt;</code> classes.</p>\n<h3 id="scrolling-long-content" class="bv-no-focus-ring"><span class="bd-content-title">Scrolling long content<a class="anchorjs-link" href="#scrolling-long-content" aria-labelledby="scrolling-long-content"></a></span></h3>\n<p>When modals become too long for the user&#39;s viewport or device, they scroll independent of the page\nitself. Try the demo below to see what we mean.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-tall</span>&gt;</span>Launch overflowing modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-tall"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Overflowing Content"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"i in 20"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span>&gt;</span>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\n      in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-scroll-overflow.vue --&gt;</span></pre><p>You can also create a scrollable modal that allows the scrolling of the modal body by setting the\nprop <code translate="no" class="notranslate text-nowrap">scrollable</code> to <code translate="no" class="notranslate text-nowrap">true</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-scrollable</span>&gt;</span>Launch scrolling modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-scrollable"</span> <span class="hljs-attr">scrollable</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Scrollable Content"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"i in 20"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span>&gt;</span>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\n      in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-scrollable-content.vue --&gt;</span></pre><h3 id="vertically-centered-modal" class="bv-no-focus-ring"><span class="bd-content-title">Vertically centered modal<a class="anchorjs-link" href="#vertically-centered-modal" aria-labelledby="vertically-centered-modal"></a></span></h3>\n<p>Vertically center your modal in the viewport by setting the <code translate="no" class="notranslate text-nowrap">centered</code> prop.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-center</span>&gt;</span>Launch centered modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-center"</span> <span class="hljs-attr">centered</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"BootstrapVue"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span>&gt;</span>Vertically centered modal!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-center-vertically.vue --&gt;</span></pre><p>Feel free to mix vertically <code translate="no" class="notranslate text-nowrap">centered</code> with <code translate="no" class="notranslate text-nowrap">scrollable</code>.</p>\n<h3 id="variants" class="bv-no-focus-ring"><span class="bd-content-title">Variants<a class="anchorjs-link" href="#variants" aria-labelledby="variants"></a></span></h3>\n<p>Control the header, footer, and body background and text variants by setting the\n<code translate="no" class="notranslate text-nowrap">header-bg-variant</code>, <code translate="no" class="notranslate text-nowrap">header-text-variant</code>, <code translate="no" class="notranslate text-nowrap">body-bg-variant</code>, <code translate="no" class="notranslate text-nowrap">body-text-variant</code>,\n<code translate="no" class="notranslate text-nowrap">footer-bg-variant</code>, and <code translate="no" class="notranslate text-nowrap">footer-text-variant</code> props. Use any of the standard Bootstrap variants\nsuch as <code translate="no" class="notranslate text-nowrap">danger</code>, <code translate="no" class="notranslate text-nowrap">warning</code>, <code translate="no" class="notranslate text-nowrap">info</code>, <code translate="no" class="notranslate text-nowrap">success</code>, <code translate="no" class="notranslate text-nowrap">dark</code>, <code translate="no" class="notranslate text-nowrap">light</code>, etc.</p>\n<p>The variants for the bottom border of the header and top border of the footer can be controlled by\nthe <code translate="no" class="notranslate text-nowrap">header-border-variant</code> and <code translate="no" class="notranslate text-nowrap">footer-border-variant</code> props respectively.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"show=true"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"show"</span>\n      <span class="hljs-attr">title</span>=<span class="hljs-string">"Modal Variants"</span>\n      <span class="hljs-attr">:header-bg-variant</span>=<span class="hljs-string">"headerBgVariant"</span>\n      <span class="hljs-attr">:header-text-variant</span>=<span class="hljs-string">"headerTextVariant"</span>\n      <span class="hljs-attr">:body-bg-variant</span>=<span class="hljs-string">"bodyBgVariant"</span>\n      <span class="hljs-attr">:body-text-variant</span>=<span class="hljs-string">"bodyTextVariant"</span>\n      <span class="hljs-attr">:footer-bg-variant</span>=<span class="hljs-string">"footerBgVariant"</span>\n      <span class="hljs-attr">:footer-text-variant</span>=<span class="hljs-string">"footerTextVariant"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1 text-center"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Background<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span>Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"headerBgVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"headerTextVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span>Body<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"bodyBgVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"bodyTextVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span>Footer<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"footerBgVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"footerTextVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:modal-footer</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"w-100"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"float-left"</span>&gt;</span>Modal Footer Content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n            <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">"float-right"</span>\n            @<span class="hljs-attr">click</span>=<span class="hljs-string">"show=false"</span>\n          &gt;</span>\n            Close\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">variants</span>: [<span class="hljs-string">\'primary\'</span>, <span class="hljs-string">\'secondary\'</span>, <span class="hljs-string">\'success\'</span>, <span class="hljs-string">\'warning\'</span>, <span class="hljs-string">\'danger\'</span>, <span class="hljs-string">\'info\'</span>, <span class="hljs-string">\'light\'</span>, <span class="hljs-string">\'dark\'</span>],\n        <span class="hljs-attr">headerBgVariant</span>: <span class="hljs-string">\'dark\'</span>,\n        <span class="hljs-attr">headerTextVariant</span>: <span class="hljs-string">\'light\'</span>,\n        <span class="hljs-attr">bodyBgVariant</span>: <span class="hljs-string">\'light\'</span>,\n        <span class="hljs-attr">bodyTextVariant</span>: <span class="hljs-string">\'dark\'</span>,\n        <span class="hljs-attr">footerBgVariant</span>: <span class="hljs-string">\'warning\'</span>,\n        <span class="hljs-attr">footerTextVariant</span>: <span class="hljs-string">\'dark\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-variants.vue --&gt;</span></pre><p>You can also apply arbitrary classes to the modal dialog container, content (modal window itself),\nheader, body and footer via the <code translate="no" class="notranslate text-nowrap">modal-class</code>, <code translate="no" class="notranslate text-nowrap">content-class</code>, <code translate="no" class="notranslate text-nowrap">header-class</code>, <code translate="no" class="notranslate text-nowrap">body-class</code> and\n<code translate="no" class="notranslate text-nowrap">footer-class</code> props, respectively. The props accept either a string or array of strings.</p>\n<h3 id="hiding-the-backdrop" class="bv-no-focus-ring"><span class="bd-content-title">Hiding the backdrop<a class="anchorjs-link" href="#hiding-the-backdrop" aria-labelledby="hiding-the-backdrop"></a></span></h3>\n<p>Hide the modal&#39;s backdrop via setting the <code translate="no" class="notranslate text-nowrap">hide-backdrop</code> prop.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-no-backdrop</span>&gt;</span>Open modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-no-backdrop"</span> <span class="hljs-attr">hide-backdrop</span> <span class="hljs-attr">content-class</span>=<span class="hljs-string">"shadow"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"BootstrapVue"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-2"</span>&gt;</span>\n      We\'ve added the utility class <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>\'shadow\'<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span>\n      to the modal content for added effect.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- modal-no-backdrop.vue --&gt;</span></pre><p>Note that clicking outside of the modal will still close the modal even though the backdrop is\nhidden. You can disable this behaviour by setting the <code translate="no" class="notranslate text-nowrap">no-close-on-backdrop</code> prop on <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>.</p>\n<h3 id="disable-open-and-close-animation" class="bv-no-focus-ring"><span class="bd-content-title">Disable open and close animation<a class="anchorjs-link" href="#disable-open-and-close-animation" aria-labelledby="disable-open-and-close-animation"></a></span></h3>\n<p>To disable the fading transition/animation when modal opens and closes, just set the prop <code translate="no" class="notranslate text-nowrap">no-fade</code>\non the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> component.</p>\n<h3 id="footer-button-sizing" class="bv-no-focus-ring"><span class="bd-content-title">Footer button sizing<a class="anchorjs-link" href="#footer-button-sizing" aria-labelledby="footer-button-sizing"></a></span></h3>\n<p>Fancy smaller or larger buttons in the default footer? Simply set the <code translate="no" class="notranslate text-nowrap">button-size</code> prop to <code translate="no" class="notranslate text-nowrap">&#39;sm&#39;</code>\nfor small buttons, or <code translate="no" class="notranslate text-nowrap">&#39;lg&#39;</code> for larger buttons.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-footer-sm</span>&gt;</span>Small Footer Buttons<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-footer-lg</span>&gt;</span>Large Footer Buttons<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-footer-sm"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"BootstrapVue"</span> <span class="hljs-attr">button-size</span>=<span class="hljs-string">"sm"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-2"</span>&gt;</span>This modal has small footer buttons<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-footer-lg"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"BootstrapVue"</span> <span class="hljs-attr">button-size</span>=<span class="hljs-string">"lg"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-2"</span>&gt;</span>This modal has large footer buttons<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- modal-footer-btn-sizes.vue --&gt;</span></pre><p>The prop <code translate="no" class="notranslate text-nowrap">button-size</code> has no effect if you have provided your own footer via the\n<a href="#custom-rendering-with-slots" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">modal-footer</code></a> slot.</p>\n<h3 id="disabling-built-in-footer-buttons" class="bv-no-focus-ring"><span class="bd-content-title">Disabling built-in footer buttons<a class="anchorjs-link" href="#disabling-built-in-footer-buttons" aria-labelledby="disabling-built-in-footer-buttons"></a></span></h3>\n<p>You can disable the built-in footer buttons programmatically.</p>\n<p>You can disable the <strong>Cancel</strong> and <strong>OK</strong> buttons individually by setting the <code translate="no" class="notranslate text-nowrap">cancel-disabled</code> and\n<code translate="no" class="notranslate text-nowrap">ok-disabled</code> props, respectively, to <code translate="no" class="notranslate text-nowrap">true</code>. Set the prop to <code translate="no" class="notranslate text-nowrap">false</code> to re-enable the button.</p>\n<p>To disable both <strong>Cancel</strong> and <strong>OK</strong> buttons at the same time, simply set the <code translate="no" class="notranslate text-nowrap">busy</code> prop to\n<code translate="no" class="notranslate text-nowrap">true</code>. Set it to <code translate="no" class="notranslate text-nowrap">false</code> to re-enable both buttons.</p>\n<h3 id="custom-rendering-with-slots" class="bv-no-focus-ring"><span class="bd-content-title">Custom rendering with slots<a class="anchorjs-link" href="#custom-rendering-with-slots" aria-labelledby="custom-rendering-with-slots"></a></span></h3>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> provides several named slots (of which some are optionally scoped) that you can use to\ncustomize the content of various sections of the modal.</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Slot</th>\n<th>Optionally Scoped</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">default</code></td>\n<td>Yes</td>\n<td>Main content of the modal</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">modal-title</code></td>\n<td>Yes</td>\n<td>Content to place in the modal&#39;s title</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">modal-header</code></td>\n<td>Yes</td>\n<td>Content to place in the header. Replaces the entire header including the close button</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">modal-footer</code></td>\n<td>Yes</td>\n<td>Content to place in the footer. Replaces the entire footer including the button(s)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">modal-ok</code></td>\n<td>No</td>\n<td>Content to place inside the footer OK button</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">modal-cancel</code></td>\n<td>No</td>\n<td>Content to place inside the footer CANCEL button</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">modal-header-close</code></td>\n<td>No</td>\n<td>Content to place inside the header CLOSE (<code translate="no" class="notranslate text-nowrap">x</code>) button</td>\n</tr>\n</tbody></table>\n</div><p>The scope available to the slots that support optional scoping are:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method or Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">ok()</code></td>\n<td>Closes the modal and fires the <code translate="no" class="notranslate text-nowrap">ok</code> and <code translate="no" class="notranslate text-nowrap">hide</code> events, with <code translate="no" class="notranslate text-nowrap">bvModalEvent.trigger = &#39;ok&#39;</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">cancel()</code></td>\n<td>Closes the modal and fires the <code translate="no" class="notranslate text-nowrap">cancel</code> and <code translate="no" class="notranslate text-nowrap">hide</code> events, with <code translate="no" class="notranslate text-nowrap">bvModalEvent.trigger = &#39;cancel&#39;</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">close()</code></td>\n<td>Closes the modal and fires the <code translate="no" class="notranslate text-nowrap">close</code> and <code translate="no" class="notranslate text-nowrap">hide</code> events, with <code translate="no" class="notranslate text-nowrap">bvModalEvent.trigger = &#39;headerclose&#39;</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">hide(trigger)</code></td>\n<td>Closes the modal and fires the <code translate="no" class="notranslate text-nowrap">hide</code> event, with the <code translate="no" class="notranslate text-nowrap">bvModalEvent.trigger = trigger</code> (trigger is optional)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">visible</code></td>\n<td>The visibility state of the modal. <code translate="no" class="notranslate text-nowrap">true</code> if the modal is visible and <code translate="no" class="notranslate text-nowrap">false</code> if not visible</td>\n</tr>\n</tbody></table>\n</div><h4 id="example-modal-using-custom-scoped-slots" class="bv-no-focus-ring"><span class="bd-content-title">Example modal using custom scoped slots<a class="anchorjs-link" href="#example-modal-using-custom-scoped-slots" aria-labelledby="example-modal-using-custom-scoped-slots"></a></span></h4>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$bvModal.show(\'modal-scoped\')"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-scoped"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:modal-header</span>=<span class="hljs-string">"{ close }"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Emulate built in modal header close button action --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"close()"</span>&gt;</span>\n        Close Modal\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>Modal Header<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">"{ hide }"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Modal Body with button<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hide()"</span>&gt;</span>Hide Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:modal-footer</span>=<span class="hljs-string">"{ ok, cancel, hide }"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Custom Footer<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Emulate built in modal footer ok and cancel button actions --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"ok()"</span>&gt;</span>\n        OK\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"cancel()"</span>&gt;</span>\n        Cancel\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Button with custom close trigger value --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-secondary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hide(\'forget\')"</span>&gt;</span>\n        Forget it\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-scoped-slots.vue --&gt;</span></pre><h2 id="multiple-modal-support" class="bv-no-focus-ring"><span class="bd-content-title">Multiple modal support<a class="anchorjs-link" href="#multiple-modal-support" aria-labelledby="multiple-modal-support"></a></span></h2>\n<p>Unlike native Bootstrap v4, BootstrapVue supports multiple modals opened at the same time.</p>\n<p>To disable stacking for a specific modal, just set the prop <code translate="no" class="notranslate text-nowrap">no-stacking</code> on the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>\ncomponent. This will hide the modal before another modal is shown.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-multi-1</span>&gt;</span>Open First Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-multi-1"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"First Modal"</span> <span class="hljs-attr">ok-only</span> <span class="hljs-attr">no-stacking</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-2"</span>&gt;</span>First Modal<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-multi-2</span>&gt;</span>Open Second Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-multi-2"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Second Modal"</span> <span class="hljs-attr">ok-only</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-2"</span>&gt;</span>Second Modal<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-multi-3</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>&gt;</span>Open Third Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-multi-3"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Third Modal"</span> <span class="hljs-attr">ok-only</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>Third Modal<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-multiple.vue --&gt;</span></pre><p><strong>Notes:</strong></p>\n<ul>\n<li>Avoid nesting a <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> <em>inside</em> another <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>, as it may get &quot;constrained&quot; to the\nboundaries of the parent modal dialog (specifically when static modals are used).</li>\n<li>The opaque backdrop will appear progressively darker for each modal that is opened. This is\nexpected behaviour as each backdrop is opened over top the other modals and backdrops.</li>\n</ul>\n<h2 id="modal-message-boxes" class="bv-no-focus-ring"><span class="bd-content-title">Modal message boxes<a class="anchorjs-link" href="#modal-message-boxes" aria-labelledby="modal-message-boxes"></a></span></h2>\n<p>BootstrapVue provides a few built in Message Box methods on the exposed <code translate="no" class="notranslate text-nowrap">this.$bvModal</code> object.\nThese methods provide a way to generate simple OK and Confirm style modal messages, from anywhere in\nyour app without having to explicitly place a <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> component in your pages.</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">this.$bvModal.msgBoxOk(message, options)</code></td>\n<td>Open a modal with <code translate="no" class="notranslate text-nowrap">message</code> as the content and a single OK button</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">this.$bvModal.msgBoxConfirm(message, options)</code></td>\n<td>Open a modal with <code translate="no" class="notranslate text-nowrap">message</code> as the content and CANCEL and OK buttons</td>\n</tr>\n</tbody></table>\n</div><p>The <code translate="no" class="notranslate text-nowrap">options</code> argument is an optional configuration object for adding titles and styling the Message\nBox modal. The object properties correspond to <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> props, except in <samp class="notranslate" translate="no">camelCase</samp>\nformat instead of <samp class="notranslate" translate="no">kebab-case</samp>.</p>\n<p>Both methods return a <code translate="no" class="notranslate text-nowrap">Promise</code> (requires a polyfill for IE 11 and older browser support) which\nresolve into a value when the modal hides. <code translate="no" class="notranslate text-nowrap">.msgBoxOk()</code> always resolves to the value <code translate="no" class="notranslate text-nowrap">true</code>, while\n<code translate="no" class="notranslate text-nowrap">.msgBoxConfirm()</code> resolves to either <code translate="no" class="notranslate text-nowrap">true</code> (OK button pressed), <code translate="no" class="notranslate text-nowrap">false</code> (CANCEL button pressed),\nor <code translate="no" class="notranslate text-nowrap">null</code> (if the modal was closed via backdrop click, <kbd class="notranslate" translate="no">ESC</kbd> press, or some other means.</p>\n<p>If <code translate="no" class="notranslate text-nowrap">message</code> is not provided, both methods will return immediately with the value <code translate="no" class="notranslate text-nowrap">undefined</code>.</p>\n<p>You can use either the <code translate="no" class="notranslate text-nowrap">.then(..).catch(...)</code> or async <code translate="no" class="notranslate text-nowrap">await</code> code styles (async <code translate="no" class="notranslate text-nowrap">await</code> requires\nmodern browsers or a transpiler).</p>\n<h3 id="ok-message-box" class="bv-no-focus-ring"><span class="bd-content-title">OK message box<a class="anchorjs-link" href="#ok-message-box" aria-labelledby="ok-message-box"></a></span></h3>\n<p>Example OK Message boxes</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxOne"</span>&gt;</span>Simple msgBoxOk<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxOne) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxTwo"</span>&gt;</span>msgBoxOk with options<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxTwo) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">boxOne</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">boxTwo</span>: <span class="hljs-string">\'\'</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      showMsgBoxOne() {\n        <span class="hljs-keyword">this</span>.boxOne = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxOk(<span class="hljs-string">\'Action completed\'</span>)\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxOne = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      },\n      showMsgBoxTwo() {\n        <span class="hljs-keyword">this</span>.boxTwo = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxOk(<span class="hljs-string">\'Data was submitted successfully\'</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">\'Confirmation\'</span>,\n          <span class="hljs-attr">size</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">buttonSize</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">okVariant</span>: <span class="hljs-string">\'success\'</span>,\n          <span class="hljs-attr">headerClass</span>: <span class="hljs-string">\'p-2 border-bottom-0\'</span>,\n          <span class="hljs-attr">footerClass</span>: <span class="hljs-string">\'p-2 border-top-0\'</span>,\n          <span class="hljs-attr">centered</span>: <span class="hljs-literal">true</span>\n        })\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxTwo = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-msg-box-ok.vue --&gt;</span></pre><h3 id="confirm-message-box" class="bv-no-focus-ring"><span class="bd-content-title">Confirm message box<a class="anchorjs-link" href="#confirm-message-box" aria-labelledby="confirm-message-box"></a></span></h3>\n<p>Example Confirm Message boxes</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxOne"</span>&gt;</span>Simple msgBoxConfirm<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxOne) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxTwo"</span>&gt;</span>msgBoxConfirm with options<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxTwo) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">boxOne</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">boxTwo</span>: <span class="hljs-string">\'\'</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      showMsgBoxOne() {\n        <span class="hljs-keyword">this</span>.boxOne = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxConfirm(<span class="hljs-string">\'Are you sure?\'</span>)\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxOne = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      },\n      showMsgBoxTwo() {\n        <span class="hljs-keyword">this</span>.boxTwo = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxConfirm(<span class="hljs-string">\'Please confirm that you want to delete everything.\'</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">\'Please Confirm\'</span>,\n          <span class="hljs-attr">size</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">buttonSize</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">okVariant</span>: <span class="hljs-string">\'danger\'</span>,\n          <span class="hljs-attr">okTitle</span>: <span class="hljs-string">\'YES\'</span>,\n          <span class="hljs-attr">cancelTitle</span>: <span class="hljs-string">\'NO\'</span>,\n          <span class="hljs-attr">footerClass</span>: <span class="hljs-string">\'p-2\'</span>,\n          <span class="hljs-attr">hideHeaderClose</span>: <span class="hljs-literal">false</span>,\n          <span class="hljs-attr">centered</span>: <span class="hljs-literal">true</span>\n        })\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxTwo = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-msg-box-confirm.vue --&gt;</span></pre><h3 id="message-box-notes" class="bv-no-focus-ring"><span class="bd-content-title">Message box notes<a class="anchorjs-link" href="#message-box-notes" aria-labelledby="message-box-notes"></a></span></h3>\n<ul>\n<li>The <code translate="no" class="notranslate text-nowrap">this.$bvModal</code> injection is only available when using the full <code translate="no" class="notranslate text-nowrap">BootstrapVue</code> plugin or the\n<code translate="no" class="notranslate text-nowrap">ModalPlugin</code> plugin. It is not available if importing just the <code translate="no" class="notranslate text-nowrap">b-modal</code> component. To just\nimport the injection, use the <code translate="no" class="notranslate text-nowrap">BVModalPlugin</code> plugin.</li>\n<li>A new <code translate="no" class="notranslate text-nowrap">$bvModal</code> injection (mixin) is created for each Vue virtual machine (i.e. each instantiated\ncomponent), and is not usable via direct access to the <code translate="no" class="notranslate text-nowrap">Vue.prototype</code>, as it needs access to the\ninstance&#39;s <code translate="no" class="notranslate text-nowrap">this</code> and <code translate="no" class="notranslate text-nowrap">$root</code> contexts.</li>\n<li>Message Boxes require <code translate="no" class="notranslate text-nowrap">Promise</code> support in the browser. If targeting your app for older browsers,\nsuch as IE 11, please include a polyfill that provides <code translate="no" class="notranslate text-nowrap">Promise</code> support. If <code translate="no" class="notranslate text-nowrap">Promise</code> support is\nnot detected, then the message box methods will immediately return <code translate="no" class="notranslate text-nowrap">undefined</code>.</li>\n<li>Message Boxes are an extension of the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> component, and hence support the majority of\n<code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> props (using <samp class="notranslate" translate="no">camelCase</samp> format), with the exception of the following\nprops: <code translate="no" class="notranslate text-nowrap">lazy</code>, <code translate="no" class="notranslate text-nowrap">static</code>, <code translate="no" class="notranslate text-nowrap">busy</code>, <code translate="no" class="notranslate text-nowrap">visible</code>, <code translate="no" class="notranslate text-nowrap">noStacking</code>, <code translate="no" class="notranslate text-nowrap">okOnly</code>, <code translate="no" class="notranslate text-nowrap">okDisabled</code>, and\n<code translate="no" class="notranslate text-nowrap">cancelDisabled</code>.</li>\n<li>When a <code translate="no" class="notranslate text-nowrap">title</code> (or <code translate="no" class="notranslate text-nowrap">titleHtml</code>) <em>is not</em> provided in the options, the header will not be shown.</li>\n<li>When a <code translate="no" class="notranslate text-nowrap">title</code> (or <code translate="no" class="notranslate text-nowrap">titleHtml</code>) <em>is</em> provided in the options, the header close button is not shown\nby default. You can enable the header close button by setting <code translate="no" class="notranslate text-nowrap">hideHeaderClose: false</code> in the\noptions.</li>\n<li>Message Boxes will throw an error (promise rejection) if they are closed/destroyed before they are\nhidden. Always include a <code translate="no" class="notranslate text-nowrap">.catch(errHandler)</code> reject handler, event if using the async <code translate="no" class="notranslate text-nowrap">await</code>\nstyle code.</li>\n<li>When using Vue Router (or similar), Message Boxes will close and reject if the route changes\nbefore the modal hides. If you wish for the message box to remain open when the route changes, use\n<code translate="no" class="notranslate text-nowrap">this.$root.$bvModal</code> instead of <code translate="no" class="notranslate text-nowrap">this.$bvModal</code>.</li>\n<li>Message boxes cannot be generated during Server Side Rendering (SSR).</li>\n<li>The Message Box <code translate="no" class="notranslate text-nowrap">message</code> currently does not support HTML strings, however, you can pass an\n<em>array</em> of <code translate="no" class="notranslate text-nowrap">VNodes</code> as the <code translate="no" class="notranslate text-nowrap">message</code> for fine grained control of the markup. You can use Vue&#39;s\n<a href="https://vuejs.org/v2/guide/render-function.html#createElement-Arguments" target="_blank" rel="noopener"><code translate="no" class="notranslate text-nowrap">this.$createElement</code></a>\nmethod to generate VNodes. This can also be done for the modal title (by passing VNodes to the\n<code translate="no" class="notranslate text-nowrap">title</code> option), OK button text (via the <code translate="no" class="notranslate text-nowrap">okTitle</code> option), and the CANCEL button text (via the\n<code translate="no" class="notranslate text-nowrap">cancelTitle</code> option).</li>\n</ul>\n<h3 id="message-box-advanced-usage" class="bv-no-focus-ring"><span class="bd-content-title">Message box advanced usage<a class="anchorjs-link" href="#message-box-advanced-usage" aria-labelledby="message-box-advanced-usage"></a></span></h3>\n<p>When using the <code translate="no" class="notranslate text-nowrap">this.$bvModal.msgBoxOk(...)</code> or <code translate="no" class="notranslate text-nowrap">this.$bvModal.msgBoxConfirm(...)</code> methods for\ngenerating modals, you may want the modal content to be more than just a string message. As\nmentioned in the <a href="#message-box-notes" class="font-weight-bold">message box notes</a> section above, you can pass <em>arrays</em> of\nVNodes as the message and title for more complex content.</p>\n<p>Use Vue&#39;s\n<a href="https://vuejs.org/v2/guide/render-function.html#createElement-Arguments" target="_blank" rel="noopener"><code translate="no" class="notranslate text-nowrap">this.$createElement</code></a>\nmethod to generate VNodes.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgOk"</span>&gt;</span>Show OK message box with custom content<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      showMsgOk() {\n        <span class="hljs-keyword">const</span> h = <span class="hljs-keyword">this</span>.$createElement\n        <span class="hljs-comment">// Using HTML string</span>\n        <span class="hljs-keyword">const</span> titleVNode = h(<span class="hljs-string">\'div\'</span>, { <span class="hljs-attr">domProps</span>: { <span class="hljs-attr">innerHTML</span>: <span class="hljs-string">\'Title from &lt;i&gt;HTML&lt;i&gt; string\'</span> } })\n        <span class="hljs-comment">// More complex structure</span>\n        <span class="hljs-keyword">const</span> messageVNode = h(<span class="hljs-string">\'div\'</span>, { <span class="hljs-attr">class</span>: [<span class="hljs-string">\'foobar\'</span>] }, [\n          h(<span class="hljs-string">\'p\'</span>, { <span class="hljs-attr">class</span>: [<span class="hljs-string">\'text-center\'</span>] }, [\n            <span class="hljs-string">\' Flashy \'</span>,\n            h(<span class="hljs-string">\'strong\'</span>, <span class="hljs-string">\'msgBoxOk\'</span>),\n            <span class="hljs-string">\' message \'</span>,\n          ]),\n          h(<span class="hljs-string">\'p\'</span>, { <span class="hljs-attr">class</span>: [<span class="hljs-string">\'text-center\'</span>] }, [h(<span class="hljs-string">\'b-spinner\'</span>)]),\n          h(<span class="hljs-string">\'b-img\'</span>, {\n            <span class="hljs-attr">props</span>: {\n              <span class="hljs-attr">src</span>: <span class="hljs-string">\'https://picsum.photos/id/20/250/250\'</span>,\n              <span class="hljs-attr">thumbnail</span>: <span class="hljs-literal">true</span>,\n              <span class="hljs-attr">center</span>: <span class="hljs-literal">true</span>,\n              <span class="hljs-attr">fluid</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">rounded</span>: <span class="hljs-string">\'circle\'</span>\n            }\n          })\n        ])\n        <span class="hljs-comment">// We must pass the generated VNodes as arrays</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxOk([messageVNode], {\n          <span class="hljs-attr">title</span>: [titleVNode],\n          <span class="hljs-attr">buttonSize</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">centered</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">size</span>: <span class="hljs-string">\'sm\'</span>\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- modal-msg-box-advanced.vue --&gt;</span></pre><h2 id="listening-to-modal-changes-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Listening to modal changes via $root events<a class="anchorjs-link" href="#listening-to-modal-changes-via-root-events" aria-labelledby="listening-to-modal-changes-via-root-events"></a></span></h2>\n<p>To listen to any modal opening, use:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  mounted() {\n    <span class="hljs-keyword">this</span>.$root.$on(<span class="hljs-string">\'bv::modal::show\'</span>, (bvEvent, modalId) =&gt; {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Modal is about to be shown\'</span>, bvEvent, modalId)\n    })\n  }\n}</pre><p>Refer to the <a href="#comp-ref-b-modal" class="font-weight-bold">Events</a> section of this documentation for the full list of events\nemitted.</p>\n<h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> provides several accessibility features, including auto focus, return focus, keyboard\n(tab) <em>focus containment</em>, and automated <code translate="no" class="notranslate text-nowrap">aria-*</code> attributes.</p>\n<h3 id="modal-aria-attributes" class="bv-no-focus-ring"><span class="bd-content-title">Modal ARIA attributes<a class="anchorjs-link" href="#modal-aria-attributes" aria-labelledby="modal-aria-attributes"></a></span></h3>\n<p>The <code translate="no" class="notranslate text-nowrap">aria-labelledby</code> and <code translate="no" class="notranslate text-nowrap">aria-describedby</code> attributes will appear on the modal automatically in\nmost cases.</p>\n<ul>\n<li>The <code translate="no" class="notranslate text-nowrap">aria-labelledby</code> attribute will <strong>not</strong> be present if you have the header hidden, or supplied\nyour own header, or have not supplied a modal title. It is recommended to supply a title for your\nmodals (when using the built in header). You can visually hide the header title, but still make it\navailable to screen readers by setting the <code translate="no" class="notranslate text-nowrap">title-sr-only</code> prop. If you do not have a header, you\ncan supply a label for the modal by passing a string to the <code translate="no" class="notranslate text-nowrap">aria-label</code> prop.</li>\n<li>The <code translate="no" class="notranslate text-nowrap">aria-describedby</code> attribute will always point to the modal&#39;s body content.</li>\n<li>If the <code translate="no" class="notranslate text-nowrap">aria-label</code> prop is specified with a string value, the <code translate="no" class="notranslate text-nowrap">aria-labelledby</code> attribute will\nnot be rendered, even if you have a title/header for your modal.</li>\n</ul>\n<p>The <code translate="no" class="notranslate text-nowrap">aria-label</code> and <code translate="no" class="notranslate text-nowrap">title-sr-only</code> props were added in version 2.0.0-rc.27.</p>\n<h3 id="auto-focus-on-open" class="bv-no-focus-ring"><span class="bd-content-title">Auto focus on open<a class="anchorjs-link" href="#auto-focus-on-open" aria-labelledby="auto-focus-on-open"></a></span></h3>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> will autofocus the modal container when opened.</p>\n<p>You can pre-focus an element within the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> by listening to the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> <code translate="no" class="notranslate text-nowrap">shown</code> event,\nand call the element&#39;s <code translate="no" class="notranslate text-nowrap">focus()</code> method. <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> will not attempt to autofocus if an element\nalready has focus within the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> @<span class="hljs-attr">shown</span>=<span class="hljs-string">"focusMyElement"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>&gt;</span>I Don\'t Have Focus<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Element to gain focus when modal is opened --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"focusThis"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span></pre><pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    focusMyElement() {\n      <span class="hljs-keyword">this</span>.$refs.focusThis.focus()\n    }\n  }\n}</pre><p>Alternatively, if using <code translate="no" class="notranslate text-nowrap">b-form-*</code> form controls, you can use the <code translate="no" class="notranslate text-nowrap">autofocus</code> prop to automatically\nfocus a form control when the modal opens. Note that the <code translate="no" class="notranslate text-nowrap">autofocus</code> prop will not work with\n<code translate="no" class="notranslate text-nowrap">b-modal</code> if the <code translate="no" class="notranslate text-nowrap">static</code> prop is used without the <code translate="no" class="notranslate text-nowrap">lazy</code> prop set, as <code translate="no" class="notranslate text-nowrap">autofocus</code> happens when the\n<code translate="no" class="notranslate text-nowrap">b-form-*</code> controls are <em>mounted in the DOM</em>.</p>\n<p>If you want to auto focus one of the <em>built-in</em> modal buttons (<code translate="no" class="notranslate text-nowrap">ok</code>, <code translate="no" class="notranslate text-nowrap">cancel</code> or the header <code translate="no" class="notranslate text-nowrap">close</code>\nbutton, you can set the prop <code translate="no" class="notranslate text-nowrap">auto-focus-button</code> to one of the values <code translate="no" class="notranslate text-nowrap">&#39;ok&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;cancel&#39;</code> or\n<code translate="no" class="notranslate text-nowrap">&#39;close&#39;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> will focus the specified button if it exists. This feature is also\navailable for modal message boxes.</p>\n<p class="alert alert-warning">\n  <strong>Note:</strong> it is <strong>not recommended</strong> to autofocus an input or control\n  inside of a modal for accessibility reasons, as screen reader users will not know the context of\n  where the input is (the announcement of the modal may not be spoken). It is best to let\n  <code class="notranslate" translate="no">&lt;b-modal&gt;</code> focus the modal\'s container, allowing the modal information to be\n  spoken to the user, and then allow the user to tab into the input.\n</p>\n\n<h3 id="returning-focus-to-the-triggering-element" class="bv-no-focus-ring"><span class="bd-content-title">Returning focus to the triggering element<a class="anchorjs-link" href="#returning-focus-to-the-triggering-element" aria-labelledby="returning-focus-to-the-triggering-element"></a></span></h3>\n<p>For accessibility reasons, it is desirable to return focus to the element that triggered the opening\nof the modal, when the modal closes.</p>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> will try and automatically determine which element had focus before the modal was\nopened, and will return the focus to that element when the modal has hidden if possible. However,\nseveral methods and options are provided to allow you to specify the element to return focus to once\nthe modal has hidden.</p>\n<h4 id="specify-return-focus-element-via-the-return-focus-prop" class="bv-no-focus-ring"><span class="bd-content-title">Specify return focus element via the <code translate="no" class="notranslate text-nowrap">return-focus</code> prop<a class="anchorjs-link" href="#specify-return-focus-element-via-the-return-focus-prop" aria-labelledby="specify-return-focus-element-via-the-return-focus-prop"></a></span></h4>\n<p>You can also specify an element to return focus to, when modal closes, by setting the <code translate="no" class="notranslate text-nowrap">return-focus</code>\nprop to one of the following:</p>\n<ul>\n<li>A CSS Query Selector string (or an element ID prepended with <code translate="no" class="notranslate text-nowrap">#</code>)</li>\n<li>A component reference (which is mounted on a focusable element, such as <code translate="no" class="notranslate text-nowrap">&lt;b-button&gt;</code>)</li>\n<li>A reference to a DOM element that is focusable</li>\n</ul>\n<p>If the passed in element is not focusable, then the browser will determine what has focus (usually\n<code translate="no" class="notranslate text-nowrap">&lt;body&gt;</code>, which is not desirable)</p>\n<p>This method for returning focus is handy when you use the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> methods <code translate="no" class="notranslate text-nowrap">show()</code> and <code translate="no" class="notranslate text-nowrap">hide()</code>,\nor the <code translate="no" class="notranslate text-nowrap">v-model</code> prop. Note this property takes precedence over other methods of specifying the\nreturn focus element.</p>\n<h4 id="auto-return-focus" class="bv-no-focus-ring"><span class="bd-content-title">Auto return focus<a class="anchorjs-link" href="#auto-return-focus" aria-labelledby="auto-return-focus"></a></span></h4>\n<p>When <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> is opened via the <code translate="no" class="notranslate text-nowrap">v-b-modal</code> directive on an element, focus will be returned to\nthis element automatically when <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> closes, unless an element has been specified via the\n<code translate="no" class="notranslate text-nowrap">return-focus</code> prop.</p>\n<h4 id="specify-return-focus-via-event" class="bv-no-focus-ring"><span class="bd-content-title">Specify return focus via event<a class="anchorjs-link" href="#specify-return-focus-via-event" aria-labelledby="specify-return-focus-via-event"></a></span></h4>\n<p>When using the <code translate="no" class="notranslate text-nowrap">bv::show::modal</code> event (emitted on <code translate="no" class="notranslate text-nowrap">$root</code>), you can specify a second argument which\nis the element to return focus to. This argument accepts the same types as the <code translate="no" class="notranslate text-nowrap">return-focus</code> prop.</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::show::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#focusThisOnClose\'</span>)</pre><p><em>Tip:</em> if using a click event (or similar) to trigger modal to open, pass the event&#39;s <code translate="no" class="notranslate text-nowrap">target</code>\nproperty:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$root.$emit(\'bv::show::modal\', \'modal-1\', $event.target)"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><p><strong>Note:</strong> If the <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> has the <code translate="no" class="notranslate text-nowrap">return-focus</code> prop set, then the element specified via the\nevent will be ignored.</p>\n<h3 id="keyboard-navigation" class="bv-no-focus-ring"><span class="bd-content-title">Keyboard navigation<a class="anchorjs-link" href="#keyboard-navigation" aria-labelledby="keyboard-navigation"></a></span></h3>\n<p>When tabbing through elements within a <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code>, if focus attempts to leave the modal into the\ndocument, it will be brought back into the modal.</p>\n<p>Avoid setting <code translate="no" class="notranslate text-nowrap">tabindex</code> on elements within the modal to any value other than <code translate="no" class="notranslate text-nowrap">0</code> or <code translate="no" class="notranslate text-nowrap">-1</code>. Doing so\nwill make it difficult for people who rely on assistive technology to navigate and operate page\ncontent and can make some of your elements unreachable via keyboard navigation.</p>\n<p>If some elements outside the modal need to be focusable (i.e. for TinyMCE), you can add them as CSS\nselectors to the <code translate="no" class="notranslate text-nowrap">ignore-enforce-focus-selector</code> prop\n<span class="badge badge-secondary">2.4.0+</span>, e.g.:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span>\n  <span class="hljs-attr">id</span>=<span class="hljs-string">"some-modal-id"</span>\n  <span class="hljs-attr">title</span>=<span class="hljs-string">"Modal with TinyMCE Editor"</span>\n  <span class="hljs-attr">ignore-enforce-focus-selector</span>=<span class="hljs-string">".tox-tinymce-aux, .moxman-window, .tam-assetmanager-root"</span>\n&gt;</span>\n  <span class="hljs-comment">&lt;!-- Modal content with TinyMCE editor here --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span></pre><p>In some circumstances, you may need to disable the enforce focus feature completely. You can do this\nby setting the prop <code translate="no" class="notranslate text-nowrap">no-enforce-focus</code>, although this is <em>highly discouraged</em> for accessibility\nreasons.</p>\n<h3 id="v-b-modal-directive-accessibility" class="bv-no-focus-ring"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">v-b-modal</code> directive accessibility<a class="anchorjs-link" href="#v-b-modal-directive-accessibility" aria-labelledby="v-b-modal-directive-accessibility"></a></span></h3>\n<p>Notes on <code translate="no" class="notranslate text-nowrap">v-b-modal</code> directive accessibility:</p>\n<ul>\n<li>If the element is anything other than a <code translate="no" class="notranslate text-nowrap">&lt;button&gt;</code> (or component that renders a <code translate="no" class="notranslate text-nowrap">&lt;button&gt;</code>), the\nARIA <code translate="no" class="notranslate text-nowrap">role</code> will be set to <code translate="no" class="notranslate text-nowrap">button</code>, and a keydown event listeners for <kbd class="notranslate" translate="no">ENTER</kbd> and\n<kbd class="notranslate" translate="no">SPACE</kbd> will be added, along with a <code translate="no" class="notranslate text-nowrap">click</code> listener.</li>\n<li>If the element is anything other than a <code translate="no" class="notranslate text-nowrap">&lt;button&gt;</code> or <code translate="no" class="notranslate text-nowrap">&lt;a&gt;</code> (or a component that renders either),\nthen a <code translate="no" class="notranslate text-nowrap">tabindex</code> of <code translate="no" class="notranslate text-nowrap">0</code> will be added to the element to ensure accessibility, unless there is\nalready a <code translate="no" class="notranslate text-nowrap">tabindex</code> set.</li>\n</ul>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);