(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{365:function(n,t){n.exports='<h1 id="popovers" class="bv-no-focus-ring"><span class="bd-content-title">Popovers</span></h1>\n<p class="bd-lead">Documentation and examples for adding BootstrapVue popovers to any element on your site, using\nBootstrap v4 CSS for styling and animations. Popovers can be triggered by hovering, focusing, or\nclicking an element, and can contain both content and a title heading. Popovers are tooltips on\nsteroids.</p>\n<p>Use the <code translate="no" class="notranslate text-nowrap">v-b-popover</code> directive on any <strong>element</strong> or <strong>component</strong> where you would like a popover\nto appear.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center my-3"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"\'I am popover content!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover Title"</span>&gt;</span>Hover Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover.vue --&gt;</span></pre><h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2>\n<p>Things to know when using the popover directive:</p>\n<ul>\n<li>Popovers rely on the 3rd party library <a href="https://popper.js.org/" target="_blank" rel="noopener">Popper.js</a> for positioning.</li>\n<li>Popovers require BootstrapVue&#39;s custom SCSS/CSS in order to function correctly, and for variants.</li>\n<li>If both title and content is not provided (or are an empty string), the popover will not show.</li>\n<li>Specify container: &#39;body&#39; (default) to avoid rendering problems in more complex components (like\ninput groups, button groups, etc).</li>\n<li>Triggering popovers on hidden elements will not work.</li>\n<li>Popovers for <code translate="no" class="notranslate text-nowrap">disabled</code> elements must be triggered on a wrapper element.</li>\n<li>When triggered from hyperlinks that span multiple lines, popovers will be centered. Use\nwhite-space: nowrap; on your <code translate="no" class="notranslate text-nowrap">&lt;a&gt;</code>s, <code translate="no" class="notranslate text-nowrap">&lt;b-link&gt;</code>s or <code translate="no" class="notranslate text-nowrap">&lt;router-link&gt;</code>s b to avoid this behavior.</li>\n<li>Elements that trigger popovers should be in the document tab sequence. Add <code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code> if\nrequired.</li>\n</ul>\n<h2 id="positioning" class="bv-no-focus-ring"><span class="bd-content-title">Positioning<a class="anchorjs-link" href="#positioning" aria-labelledby="positioning"></a></span></h2>\n<p>Twelve options are available for positioning: <code translate="no" class="notranslate text-nowrap">top</code>, <code translate="no" class="notranslate text-nowrap">topleft</code>, <code translate="no" class="notranslate text-nowrap">topright</code>, <code translate="no" class="notranslate text-nowrap">right</code>, <code translate="no" class="notranslate text-nowrap">righttop</code>,\n<code translate="no" class="notranslate text-nowrap">rightbottom</code>, <code translate="no" class="notranslate text-nowrap">bottom</code>, <code translate="no" class="notranslate text-nowrap">bottomleft</code>, <code translate="no" class="notranslate text-nowrap">bottomright</code>, <code translate="no" class="notranslate text-nowrap">left</code>, <code translate="no" class="notranslate text-nowrap">lefttop</code>, and <code translate="no" class="notranslate text-nowrap">leftbottom</code> aligned.\nPositioning is relative to the trigger element.</p>\n<div class="bd-example bd-example-popover-static">\n  <div class="popover b-popover bs-popover-top bs-popover-top-docs">\n    <div class="arrow" style="left: calc(50% - 8px)"></div>\n    <h3 class="popover-header">Popover top</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-top bs-popover-top-docs">\n    <div class="arrow" style="right: 0px"></div>\n    <h3 class="popover-header">Popover topleft</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-top bs-popover-top-docs">\n    <div class="arrow" style="left: 0px"></div>\n    <h3 class="popover-header">Popover topright</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="popover b-popover bs-popover-right bs-popover-right-docs">\n    <div class="arrow" style="top: calc(50% - 4px)"></div>\n    <h3 class="popover-header">Popover right</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-right bs-popover-right-docs">\n    <div class="arrow" style="bottom: 0px"></div>\n    <h3 class="popover-header">Popover righttop</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-right bs-popover-right-docs">\n    <div class="arrow" style="top: 0px"></div>\n    <h3 class="popover-header">Popover rightbottom</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs">\n    <div class="arrow" style="left: calc(50% - 8px)"></div>\n    <h3 class="popover-header">Popover bottom</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs">\n    <div class="arrow" style="right: 0px"></div>\n    <h3 class="popover-header">Popover bottomleft</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs">\n    <div class="arrow" style="left: 0px"></div>\n    <h3 class="popover-header">Popover bottomright</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="popover b-popover bs-popover-left bs-popover-left-docs">\n    <div class="arrow" style="top: calc(50% - 4px)"></div>\n    <h3 class="popover-header">Popover left</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-left bs-popover-left-docs">\n    <div class="arrow" style="bottom: 0px"></div>\n    <h3 class="popover-header">Popover lefttop</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-left bs-popover-left-docs">\n    <div class="arrow" style="top: 0px"></div>\n    <h3 class="popover-header">Popover leftbottom</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="clearfix"></div>\n</div>\n\n<p><strong>Live example</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.top</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Top<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.right</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.left</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.bottom</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Bottom<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-positioning.vue --&gt;</span></pre><h2 id="triggers" class="bv-no-focus-ring"><span class="bd-content-title">Triggers<a class="anchorjs-link" href="#triggers" aria-labelledby="triggers"></a></span></h2>\n<p>Popovers can be triggered (opened/closed) via any combination of <code translate="no" class="notranslate text-nowrap">click</code>, <code translate="no" class="notranslate text-nowrap">hover</code> and <code translate="no" class="notranslate text-nowrap">focus</code>. The\ndefault trigger is <code translate="no" class="notranslate text-nowrap">click</code>. Or a trigger of <code translate="no" class="notranslate text-nowrap">manual</code> can be specified, where the popover can only be\nopened or closed <a href="#hiding-and-showing-popovers-via-root-events" class="font-weight-bold">programmatically</a>.</p>\n<p>If a popover has more than one trigger, then all triggers must be cleared before the popover will\nclose. I.e. if a popover has the trigger <code translate="no" class="notranslate text-nowrap">focus click</code>, and it was opened by <code translate="no" class="notranslate text-nowrap">focus</code>, and the user\nthen clicks the trigger element, they must click it again <strong>and</strong> move focus to close the popover.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>Triggers<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-success"</span>&gt;</span>Click (default)<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-success"</span>&gt;</span>Hover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.focus</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-success"</span>&gt;</span>Focus<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.focus</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-success"</span>&gt;</span>Hover + Focus<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-triggers.vue --&gt;</span></pre><h3 id="making-popovers-work-for-keyboard-and-assistive-technology-users" class="bv-no-focus-ring"><span class="bd-content-title">Making popovers work for keyboard and assistive technology users<a class="anchorjs-link" href="#making-popovers-work-for-keyboard-and-assistive-technology-users" aria-labelledby="making-popovers-work-for-keyboard-and-assistive-technology-users"></a></span></h3>\n<p>You should only add popovers to HTML elements that are traditionally keyboard-focusable and\ninteractive (such as links, buttons, or form controls). Although arbitrary HTML elements (such as\n<code translate="no" class="notranslate text-nowrap">&lt;span&gt;</code>s) can be made focusable by adding the <code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code> attribute, this will add potentially\nannoying and confusing tab stops on non-interactive elements for keyboard users. In addition, most\nassistive technologies currently do not announce the popover in this situation.</p>\n<p>Additionally, do not rely solely on <code translate="no" class="notranslate text-nowrap">hover</code> as the trigger for your popover, as this will make your\npopovers <em>impossible to trigger for keyboard-only users</em>.</p>\n<h3 id="caveats-with-focus-trigger-on-button-elements" class="bv-no-focus-ring"><span class="bd-content-title">Caveats with <code translate="no" class="notranslate text-nowrap">focus</code> trigger on <code translate="no" class="notranslate text-nowrap">&lt;button&gt;</code> elements<a class="anchorjs-link" href="#caveats-with-focus-trigger-on-button-elements" aria-labelledby="caveats-with-focus-trigger-on-button-elements"></a></span></h3>\n<p>For proper cross-browser and cross-platform behavior when using only the <code translate="no" class="notranslate text-nowrap">focus</code> trigger, you must\nuse an element that renders the <code translate="no" class="notranslate text-nowrap">&lt;a&gt;</code> tag, not the <code translate="no" class="notranslate text-nowrap">&lt;button&gt;</code> tag, and you also must include a\n<code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code> attribute.</p>\n<p>The following will generate an <code translate="no" class="notranslate text-nowrap">&lt;a&gt;</code> that looks like a button:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n  <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>\n  <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"0"</span>\n  <span class="hljs-attr">v-b-popover.focus</span>=<span class="hljs-string">"\'Popover content\'"</span>\n  <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover title"</span>\n&gt;</span>\n  Link button with popover directive\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span></pre><h3 id="dismiss-on-next-click-self-dismissing" class="bv-no-focus-ring"><span class="bd-content-title">Dismiss on next click (self dismissing)<a class="anchorjs-link" href="#dismiss-on-next-click-self-dismissing" aria-labelledby="dismiss-on-next-click-self-dismissing"></a></span></h3>\n<p>Use the <code translate="no" class="notranslate text-nowrap">focus</code> trigger by itself to dismiss popovers on the next click that the user makes. <code translate="no" class="notranslate text-nowrap">focus</code>\nalso makes the popover activate on both <code translate="no" class="notranslate text-nowrap">focus</code> and <code translate="no" class="notranslate text-nowrap">click</code> (as a click makes the element receive\nfocus, assuming it is in the tab sequence of the page).</p>\n<p>You can, however, specify your trigger as <code translate="no" class="notranslate text-nowrap">click blur</code>, which will make only a click activate the\npopover, and either a click on the element - <em>or losing focus to another element or part of the\ndocument</em> - will close the popover.</p>\n<p>This <code translate="no" class="notranslate text-nowrap">blur</code> trigger must be used in combination with the <code translate="no" class="notranslate text-nowrap">click</code> trigger.</p>\n<p>The following example shows the <code translate="no" class="notranslate text-nowrap">click blur</code> use case. Popovers will only open on click of the\nbutton, and will close either on click of the button, or a click anywhere else (or a focus change\nvia pressing the <kbd class="notranslate" translate="no">TAB</kbd> key). Some call this behavior <em>self dismissing</em>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.click.blur</span>=<span class="hljs-string">"\'Content\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.click.blur</span>=<span class="hljs-string">"\'Content\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.click.blur</span>=<span class="hljs-string">"\'Content\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.click.blur</span>=<span class="hljs-string">"\'Content\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-dismiss-next-click.vue --&gt;</span></pre><h2 id="heading-and-content" class="bv-no-focus-ring"><span class="bd-content-title">Heading and content<a class="anchorjs-link" href="#heading-and-content" aria-labelledby="heading-and-content"></a></span></h2>\n<p>There are several options for provisioning the title and content of a popover.</p>\n<p>By default, popover will use the <code translate="no" class="notranslate text-nowrap">title</code> attribute of the element as the popover heading, and the\ncontent is passed as a string to the <code translate="no" class="notranslate text-nowrap">v-b-popover</code> directive. The title and content can also be\npassed as an object to <code translate="no" class="notranslate text-nowrap">v-b-popover</code> in the form of</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">\'This is the title\'</span>,\n  <span class="hljs-attr">content</span>: <span class="hljs-string">\'This is the content\'</span>\n}</pre><p>If your content has basic HTML markup, then you will also need to set the <code translate="no" class="notranslate text-nowrap">html</code> property to true,\nor use the directive modifier <code translate="no" class="notranslate text-nowrap">html</code></p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-comment">// Object format with HTML:</span>\n<span class="hljs-keyword">const</span> options = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">\'This is the &lt;strong&gt;title&lt;/strong&gt;\'</span>,\n  <span class="hljs-attr">content</span>: <span class="hljs-string">\'This is the &lt;em&gt;content&lt;em&gt;\'</span>,\n  <span class="hljs-attr">html</span>: <span class="hljs-literal">true</span>\n}</pre><p>Title and content can also be function references, which are called each time the popover is opened.\nTo make a value returned by the function reactive while open, set the title or content to a <em>new</em>\nfunction reference whenever the content changes.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"\'Content!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Title from title attribute"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>\n          Title + Content\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n          <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"{title:\'Popover\', content:\'This is the content of popover\'}"</span>\n          <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>\n        &gt;</span>\n          Config Object\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"popoverData"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>Config from data<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.html</span>=<span class="hljs-string">"popoverMethod"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover with HTML"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>\n          Method\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"12"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"popoverConfig"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>Config Object<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),\n        <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">timer</span>: <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      popoverConfig() {\n        <span class="hljs-comment">// Both title and content specified as a function in this example</span>\n        <span class="hljs-comment">// and will be called the each time the popover is opened</span>\n        <span class="hljs-keyword">return</span> {\n          <span class="hljs-attr">html</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n            <span class="hljs-comment">// Note this is called only when the popover is opened</span>\n            <span class="hljs-keyword">return</span> <span class="hljs-string">\'Hello &lt;b&gt;Popover:&lt;/b&gt; \'</span> + ++<span class="hljs-keyword">this</span>.counter\n          },\n          <span class="hljs-attr">content</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n            <span class="hljs-comment">// Note this is called only when the popover is opened</span>\n            <span class="hljs-keyword">return</span> <span class="hljs-string">\'The date is:&lt;br&gt;&lt;em&gt;\'</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() + <span class="hljs-string">\'&lt;/em&gt;\'</span>\n          }\n        }\n      },\n      popoverData() {\n        <span class="hljs-keyword">return</span> {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">\'Popover Title\'</span>,\n          <span class="hljs-attr">content</span>: <span class="hljs-string">\'The date is \'</span> + <span class="hljs-keyword">this</span>.date\n        }\n      }\n    },\n    mounted() {\n      <span class="hljs-keyword">this</span>.timer = setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n        <span class="hljs-keyword">this</span>.date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()\n      }, <span class="hljs-number">1000</span>)\n    },\n    beforeDestroy() {\n      clearInterval(<span class="hljs-keyword">this</span>.timer)\n    },\n    <span class="hljs-attr">methods</span>: {\n      popoverMethod() {\n        <span class="hljs-comment">// Returns the content as a string</span>\n        <span class="hljs-comment">// Will be called each time the popover is opened</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'&lt;strong&gt;\'</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() + <span class="hljs-string">\'&lt;/strong&gt;\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-content.vue --&gt;</span></pre><h2 id="variants-and-custom-class" class="bv-no-focus-ring"><span class="bd-content-title">Variants and custom class<a class="anchorjs-link" href="#variants-and-custom-class" aria-labelledby="variants-and-custom-class"></a></span></h2>\n<p>BootstrapVue&#39;s popovers support contextual color variants via our custom CSS, either by using\ndirective modifiers or config options:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n          <span class="hljs-attr">v-b-popover.hover.v-danger</span>=<span class="hljs-string">"{ content: \'Popover content\' }"</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">"Danger variant"</span>\n        &gt;</span>\n          Danger Modifier\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n          <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"{ variant: \'info\',  content: \'Popover content\' }"</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">"Info variant"</span>\n        &gt;</span>\n          Info Config\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-variants.vue --&gt;</span></pre><p>Bootstrap default theme variants are: <code translate="no" class="notranslate text-nowrap">danger</code>, <code translate="no" class="notranslate text-nowrap">warning</code>, <code translate="no" class="notranslate text-nowrap">success</code>, <code translate="no" class="notranslate text-nowrap">primary</code>, <code translate="no" class="notranslate text-nowrap">secondary</code>,\n<code translate="no" class="notranslate text-nowrap">info</code>, <code translate="no" class="notranslate text-nowrap">light</code>, and <code translate="no" class="notranslate text-nowrap">dark</code>. You can change or add additional variants via Bootstrap\n<a href="/docs/reference/theming" class="font-weight-bold">SCSS variables</a></p>\n<p>A custom class can be applied to the popover outer wrapper <div> by using the customClass option\nproperty:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n  <span class="hljs-attr">v-b-popover.hover</span>=<span class="hljs-string">"{ customClass: \'my-popover-class\', content: \'Popover content\' }"</span>\n  <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>\n&gt;</span>\n  Button\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span></pre><h2 id="directive-syntax-and-usage" class="bv-no-focus-ring"><span class="bd-content-title">Directive syntax and usage<a class="anchorjs-link" href="#directive-syntax-and-usage" aria-labelledby="directive-syntax-and-usage"></a></span></h2>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover:</span>[<span class="hljs-attr">container</span>]<span class="hljs-attr">.</span>[<span class="hljs-attr">mod</span>]<span class="hljs-attr">.</span>[<span class="hljs-attr">mod</span>]<span class="hljs-attr">.</span>[<span class="hljs-attr">...</span>]<span class="hljs-attr">.</span>[<span class="hljs-attr">mod</span>]=<span class="hljs-string">"&lt;value&gt;"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span></pre><p>Where <code translate="no" class="notranslate text-nowrap">[container]</code> can be (optional):</p>\n<ul>\n<li>An element ID (minus the <code translate="no" class="notranslate text-nowrap">#</code>) to place the popover markup in, when visible</li>\n<li>If not provided, popovers are appended to the <code translate="no" class="notranslate text-nowrap">&lt;body&gt;</code> when visible</li>\n</ul>\n<p>Where <code translate="no" class="notranslate text-nowrap">[mod]</code> can be (all optional):</p>\n<ul>\n<li>Positioning: <code translate="no" class="notranslate text-nowrap">top</code>, <code translate="no" class="notranslate text-nowrap">bottom</code>, <code translate="no" class="notranslate text-nowrap">left</code>, <code translate="no" class="notranslate text-nowrap">right</code>, <code translate="no" class="notranslate text-nowrap">auto</code>; or the offset alignment positions\n<code translate="no" class="notranslate text-nowrap">topleft</code>, <code translate="no" class="notranslate text-nowrap">topright</code>, <code translate="no" class="notranslate text-nowrap">bottomleft</code>, <code translate="no" class="notranslate text-nowrap">bottomright</code>, <code translate="no" class="notranslate text-nowrap">lefttop</code>, <code translate="no" class="notranslate text-nowrap">leftbottom</code>, <code translate="no" class="notranslate text-nowrap">righttop</code>, or\n<code translate="no" class="notranslate text-nowrap">rightbottom</code> (last one found wins, defaults to <code translate="no" class="notranslate text-nowrap">right</code>).</li>\n<li>Event trigger: <code translate="no" class="notranslate text-nowrap">click</code>, <code translate="no" class="notranslate text-nowrap">hover</code>, <code translate="no" class="notranslate text-nowrap">focus</code>, <code translate="no" class="notranslate text-nowrap">blur</code> (if none specified, defaults to <code translate="no" class="notranslate text-nowrap">click</code>. The\n<code translate="no" class="notranslate text-nowrap">blur</code> trigger is a close handler only, and if specified by itself, will be converted to <code translate="no" class="notranslate text-nowrap">focus</code>).\nUse <code translate="no" class="notranslate text-nowrap">manual</code> if you only want to control the visibility manually.</li>\n<li><code translate="no" class="notranslate text-nowrap">nofade</code> to turn off animation.</li>\n<li><code translate="no" class="notranslate text-nowrap">html</code> to enable rendering raw HTML. by default HTML is escaped and converted to text.</li>\n<li>A delay value in the format of <code translate="no" class="notranslate text-nowrap">d###</code> (where <code translate="no" class="notranslate text-nowrap">###</code> is in ms, defaults to <code translate="no" class="notranslate text-nowrap">50</code>), applied to both\n<code translate="no" class="notranslate text-nowrap">hide</code> and <code translate="no" class="notranslate text-nowrap">show</code>.</li>\n<li>A show delay value in the format of <code translate="no" class="notranslate text-nowrap">ds###</code> (where <code translate="no" class="notranslate text-nowrap">###</code> is in ms, defaults to <code translate="no" class="notranslate text-nowrap">50</code>), applied to\n<code translate="no" class="notranslate text-nowrap">show</code> trigger only.</li>\n<li>A hide delay value in the format of <code translate="no" class="notranslate text-nowrap">dh###</code> (where <code translate="no" class="notranslate text-nowrap">###</code> is in ms, defaults to <code translate="no" class="notranslate text-nowrap">50</code>), applied to\n<code translate="no" class="notranslate text-nowrap">hide</code> trigger only.</li>\n<li>An offset value in pixels in the format of <code translate="no" class="notranslate text-nowrap">o###</code> (where <code translate="no" class="notranslate text-nowrap">###</code> is the number of pixels, defaults\nto <code translate="no" class="notranslate text-nowrap">0</code>. Negative values are allowed). Note if an offset is supplied, then the alignment positions\nwill fallback to one of <code translate="no" class="notranslate text-nowrap">top</code>, <code translate="no" class="notranslate text-nowrap">bottom</code>, <code translate="no" class="notranslate text-nowrap">left</code>, or <code translate="no" class="notranslate text-nowrap">right</code>.</li>\n<li>A boundary setting of <code translate="no" class="notranslate text-nowrap">window</code> or <code translate="no" class="notranslate text-nowrap">viewport</code>. The element to constrain the visual placement of the\npopover. If not specified, the boundary defaults to the trigger element&#39;s scroll parent (in most\ncases this will suffice).</li>\n<li>A contextual variant in the form of <code translate="no" class="notranslate text-nowrap">v-XXX</code> (where <code translate="no" class="notranslate text-nowrap">XXX</code> is the color variant name).</li>\n</ul>\n<p>Where <code translate="no" class="notranslate text-nowrap">&lt;value&gt;</code> can be (optional):</p>\n<ul>\n<li>A string containing the <strong>content</strong> of the popover</li>\n<li>A function reference to generate the <strong>content</strong> of the popover (receives one argument which is a\nreference to the DOM element triggering the popover)</li>\n<li>An object containing more complex configuration of popover, See below for available options.</li>\n</ul>\n<p><strong>Options configuration object properties:</strong></p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">animation</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">true</code></td>\n<td>Apply a CSS fade transition to the popover.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">container</code></td>\n<td>String ID or HTMLElement or <code translate="no" class="notranslate text-nowrap">false</code></td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>Appends the popover to a specific element. Example: <code translate="no" class="notranslate text-nowrap">container: &#39;#body&#39;</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element - which will prevent the popover from floating away from the triggering element during a window resize. When set to <code translate="no" class="notranslate text-nowrap">false</code> the popover will be appended to <code translate="no" class="notranslate text-nowrap">body</code>, or if the trigger element is inside a modal it will append to the modal&#39;s container.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">delay</code></td>\n<td>Number or Object</td>\n<td><code translate="no" class="notranslate text-nowrap">50</code></td>\n<td>Delay showing and hiding the popover (ms). If a number is supplied, delay is applied to both hide/show. Object structure is: <code translate="no" class="notranslate text-nowrap">delay: { &quot;show&quot;: 500, &quot;hide&quot;: 100 }</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">html</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>Allow HTML in the popover. If true, HTML tags in the popover&#39;s title and content will be rendered in the tooltip. If false, the title and content will be inserted as plain text. Use text if you&#39;re worried about XSS attacks.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">placement</code></td>\n<td>String or Function</td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;top&#39;</code></td>\n<td>How to position the popover - <code translate="no" class="notranslate text-nowrap">auto</code>, <code translate="no" class="notranslate text-nowrap">top</code>, <code translate="no" class="notranslate text-nowrap">bottom</code>, <code translate="no" class="notranslate text-nowrap">left</code>, <code translate="no" class="notranslate text-nowrap">right</code>, <code translate="no" class="notranslate text-nowrap">topleft</code>, <code translate="no" class="notranslate text-nowrap">topright</code>, <code translate="no" class="notranslate text-nowrap">bottomleft</code>, <code translate="no" class="notranslate text-nowrap">bottomright</code>, <code translate="no" class="notranslate text-nowrap">lefttop</code>, <code translate="no" class="notranslate text-nowrap">leftbottom</code>, <code translate="no" class="notranslate text-nowrap">righttop</code>, or <code translate="no" class="notranslate text-nowrap">rightbottom</code>. When <code translate="no" class="notranslate text-nowrap">auto</code> is specified, it will dynamically reorient the tooltip.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">title</code></td>\n<td>String or Function</td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;&#39;</code></td>\n<td>Default title value if title attribute isn&#39;t present. If a function is given, it must return a string.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">content</code></td>\n<td>String or Function</td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;&#39;</code></td>\n<td>Default content value. If a function is given, it must return a string.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">trigger</code></td>\n<td>String</td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;hover focus&#39;</code></td>\n<td>How tooltip is triggered: <code translate="no" class="notranslate text-nowrap">click</code>, <code translate="no" class="notranslate text-nowrap">hover</code>, <code translate="no" class="notranslate text-nowrap">focus</code>. You may pass multiple triggers; separate them with a space. Specify <code translate="no" class="notranslate text-nowrap">&#39;manual&#39;</code> if you are only going to show and hide the tooltip programmatically.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">offset</code></td>\n<td>Number or String</td>\n<td><code translate="no" class="notranslate text-nowrap">0</code></td>\n<td>Offset of the popover relative to its target. For more information refer to Popper.js&#39;s offset docs.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">fallbackPlacement</code></td>\n<td>String or Array</td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;flip&#39;</code></td>\n<td>Allow to specify which position Popper will use on fallback. Can be <code translate="no" class="notranslate text-nowrap">flip</code>, <code translate="no" class="notranslate text-nowrap">clockwise</code>, <code translate="no" class="notranslate text-nowrap">counterclockwise</code> or an array of placements. For more information refer to Popper.js&#39;s behavior docs.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">boundary</code></td>\n<td>String ID or HTMLElement</td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;scrollParent&#39;</code></td>\n<td>The container that the popover will be constrained visually. The default should suffice in most cases, but you may need to change this if your target element is in a small container with overflow scroll. Supported values: <code translate="no" class="notranslate text-nowrap">&#39;scrollParent&#39;</code> (default), <code translate="no" class="notranslate text-nowrap">&#39;viewport&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;window&#39;</code>, or a reference to an HTML element.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">boundaryPadding</code></td>\n<td>Number</td>\n<td><code translate="no" class="notranslate text-nowrap">5</code></td>\n<td>Amount of pixel used to define a minimum distance between the boundaries and the popover. This makes sure the popover always has a little padding between the edges of its container.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">variant</code></td>\n<td>String</td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>Contextual color variant for the popover.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">customClass</code></td>\n<td>String</td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>A custom classname to apply to the popover outer wrapper element.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">id</code></td>\n<td>String</td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>An ID to use on the popover root element. If none is provided, one will automatically be generated. If you do provide an ID, it <em>must</em> be guaranteed to be unique on the rendered page.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">disabled</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>Set to <code translate="no" class="notranslate text-nowrap">true</code> to disable the popover</td>\n</tr>\n</tbody></table>\n</div><h3 id="usage" class="bv-no-focus-ring"><span class="bd-content-title">Usage<a class="anchorjs-link" href="#usage" aria-labelledby="usage"></a></span></h3>\n<p><strong>Simplest usage:</strong></p>\n<pre class="hljs  text-monospace p-2 notranslate" translate="no">v-b-popover="\'This is a Popover!\'"</pre><p>or use the element&#39;s <code translate="no" class="notranslate text-nowrap">title</code> attribute for the popover header:</p>\n<pre class="hljs  text-monospace p-2 notranslate" translate="no">v-b-popover title="This is a popover header"\nv-b-popover="\'This is popover content\'" title="This is popover header"</pre><p>or provide an object for title and content:</p>\n<pre class="hljs  text-monospace p-2 notranslate" translate="no">v-b-popover="{title:\'Popover header\', content:\'Popover content\'}"</pre><p><strong>Enable HTML content/title:</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no">v-b-popover.html="\'<span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>Emphasis<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> in content\'" title="<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Bolded title<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>"</pre><p><strong>Placement examples:</strong></p>\n<pre class="hljs  text-monospace p-2 notranslate" translate="no">v-b-popover.top</pre><p><strong>Trigger examples:</strong></p>\n<pre class="hljs  text-monospace p-2 notranslate" translate="no">v-b-popover => Default of click\nv-b-popover.hover => Hover only\nv-b-popover.click => Click only\nv-b-popover.hover.focus => Both hover and focus</pre><p><strong>Combo:</strong></p>\n<pre class="hljs  text-monospace p-2 notranslate" translate="no">v-b-popover.hover.bottom => Show on hover and place at bottom\nv-b-popover.bottom.hover => Same as above\nv-b-popover.bottom.click.html => Show on click and place at bottom with HTML content</pre><h2 id="hiding-and-showing-popovers-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Hiding and showing popovers via $root events<a class="anchorjs-link" href="#hiding-and-showing-popovers-via-root-events" aria-labelledby="hiding-and-showing-popovers-via-root-events"></a></span></h2>\n<p>You can close (hide) <strong>all open popovers</strong> by emitting the <code translate="no" class="notranslate text-nowrap">bv::hide::popover</code> event on $root:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::hide::popover\'</span>)</pre><p>To close a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover (if one\nwas provided in the config object) as the first argument:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::hide::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To open a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover (if one\nwas provided in the config object) as the first argument when emitting the <code translate="no" class="notranslate text-nowrap">bv::show::popover</code>\nevent:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::show::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To open all popovers simultaneously, omit the <code translate="no" class="notranslate text-nowrap">id</code> argument when emitting the <code translate="no" class="notranslate text-nowrap">bv::show::popover</code>\nevent.</p>\n<p>These events work for both the component <strong>and</strong> directive versions of popover.</p>\n<p>Note the <strong>trigger element</strong> must exist in the DOM and be in a visible state in order for the\npopover to instantiate and show.</p>\n<h2 id="disabling-and-enabling-popovers-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Disabling and enabling popovers via $root events<a class="anchorjs-link" href="#disabling-and-enabling-popovers-via-root-events" aria-labelledby="disabling-and-enabling-popovers-via-root-events"></a></span></h2>\n<p>You can disable <strong>all</strong> popovers by emitting the <code translate="no" class="notranslate text-nowrap">bv::disable::popover</code> event on $root:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::disable::popover\'</span>)</pre><p>To disable a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover (if\none was provided in the config object) as the first argument:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::disable::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To enable a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover (if\none was provided in the config object) as the first argument when emitting the <code translate="no" class="notranslate text-nowrap">bv::enable::popover</code>\nevent:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::enable::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To enable all popovers simultaneously, omit the <code translate="no" class="notranslate text-nowrap">id</code> argument when emitting the\n<code translate="no" class="notranslate text-nowrap">bv::enable::popover</code> event.</p>\n<p>These events work for both the component and directive versions of popover.</p>\n<p>Note the <strong>trigger element</strong> must exist in the DOM in order for the popover to be enabled or\ndisabled.</p>\n<h2 id="see-also" class="bv-no-focus-ring"><span class="bd-content-title">See also<a class="anchorjs-link" href="#see-also" aria-labelledby="see-also"></a></span></h2>\n<ul>\n<li><a href="/docs/directives/tooltip" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">v-b-tooltip</code> directive</a></li>\n<li><a href="/docs/components/popover" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code> component</a></li>\n<li><a href="/docs/components/tooltip" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-tooltip&gt;</code> component</a></li>\n</ul>\n\x3c!-- Directive reference section auto generated from directive package.json --\x3e\n'}}]);