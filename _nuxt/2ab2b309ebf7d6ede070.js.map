{"version":3,"sources":["webpack:///./src/components/collapse/README.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"2ab2b309ebf7d6ede070.js","sourcesContent":["module.exports = \"<h1 id=\\\"collapse\\\"><span class=\\\"bd-content-title\\\">Collapse</span></h1>\\n<p>toggle content visibility on your pages. Includes support for making accordions.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">v-b-toggle.collapse1</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"primary\\\"</span>&gt;</span>Toggle Collapse<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"collapse1\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mt-2\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">p</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"card-text\\\"</span>&gt;</span>Collapse contents Here<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">p</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">v-b-toggle.collapse1_inner</span> <span class=\\\"hljs-attr\\\">size</span>=<span class=\\\"hljs-string\\\">\\\"sm\\\"</span>&gt;</span>Toggle Inner Collapse<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"collapse1_inner\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mt-2\\\"</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>Hello!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-collapse.vue --&gt;</span></pre><h2 id=\\\"usage\\\"><span class=\\\"bd-content-title\\\">Usage<a class=\\\"anchorjs-link\\\" href=\\\"#usage\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>Other elements can easily toggle <code>&lt;b-collapse&gt;</code> components using the <code>v-b-toggle</code> directive.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Using modifiers --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">v-b-toggle.collapse2</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"m-1\\\"</span>&gt;</span>Toggle Collapse<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Using value --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">v-b-toggle</span>=<span class=\\\"hljs-string\\\">\\\"'collapse2'\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"m-1\\\"</span>&gt;</span>Toggle Collapse<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Element to collapse --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"collapse2\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>I am collapsible content!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-collapse-usage.vue --&gt;</span></pre><h2 id=\\\"initial-visibility-start-expanded\\\"><span class=\\\"bd-content-title\\\">Initial visibility (start expanded)<a class=\\\"anchorjs-link\\\" href=\\\"#initial-visibility-start-expanded\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>To make the <code>&lt;b-collapse&gt;</code> show initially, set the <code>visible</code> prop:</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">v-b-toggle.collapse3</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"m-1\\\"</span>&gt;</span>Toggle Collapse<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">visible</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"collapse3\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>I should start open!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-collapse-visible.vue --&gt;</span></pre><h2 id=\\\"v-model-support\\\"><span class=\\\"bd-content-title\\\"><code>v-model</code> support<a class=\\\"anchorjs-link\\\" href=\\\"#v-model-support\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>The component&#39;s collapsed (visible) state can also be set with <code>v-model</code> which binds internally to\\nthe <code>visible</code> prop.</p>\\n<p>Note, when using <code>v-model</code> to control <code>&lt;b-collapse&gt;</code>, the <code>aria-*</code> attributes and class <code>collapsed</code>\\nare not automatically placed on the trigger button (as is the case when using the <code>v-b-toggle</code>\\ndirective). In this example we must control them ourselves.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span>\\n      @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"showCollapse = !showCollapse\\\"</span>\\n      <span class=\\\"hljs-attr\\\">:class</span>=<span class=\\\"hljs-string\\\">\\\"showCollapse ? 'collapsed' : null\\\"</span>\\n      <span class=\\\"hljs-attr\\\">aria-controls</span>=<span class=\\\"hljs-string\\\">\\\"collapse4\\\"</span>\\n      <span class=\\\"hljs-attr\\\">:aria-expanded</span>=<span class=\\\"hljs-string\\\">\\\"showCollapse ? 'true' : 'false'\\\"</span>\\n    &gt;</span>\\n      Toggle Collapse\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mt-2\\\"</span> <span class=\\\"hljs-attr\\\">v-model</span>=<span class=\\\"hljs-string\\\">\\\"showCollapse\\\"</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"collapse4\\\"</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>I should start open!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"javascript\\\">\\n  <span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n    data() {\\n      <span class=\\\"hljs-keyword\\\">return</span> {\\n        <span class=\\\"hljs-attr\\\">showCollapse</span>: <span class=\\\"hljs-literal\\\">true</span>\\n      }\\n    }\\n  }\\n</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-collapse-v-model.vue --&gt;</span></pre><h2 id=\\\"trigger-multiple-collapse-elements\\\"><span class=\\\"bd-content-title\\\">Trigger multiple collapse elements<a class=\\\"anchorjs-link\\\" href=\\\"#trigger-multiple-collapse-elements\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>You can even collapse multiple <code>&lt;b-collapse&gt;</code> components via a single <code>v-b-toggle</code> by providing\\nmultiple target IDs using modifiers:</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Single button triggers two \\\"&lt;b-collapse&gt;\\\" components --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">v-b-toggle.collapseA.collapseB</span>&gt;</span>Toggle Both Collapse A and B<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Elements to collapse --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"collapseA\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mt-2\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>I am collapsible content A!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"collapseB\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mt-2\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>I am collapsible content B!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-collapse-trigger-multiple.vue --&gt;</span></pre><h2 id=\\\"accordion-support\\\"><span class=\\\"bd-content-title\\\">Accordion Support<a class=\\\"anchorjs-link\\\" href=\\\"#accordion-support\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>Turn a group of <code>&lt;b-collapse&gt;</code> components into an accordion by supplying an accordion group\\nidentifier via the <code>accordion</code> prop:</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\">&lt;template&gt;\\n  &lt;div role=\\\"tablist\\\"&gt;\\n    &lt;b-card no-body class=\\\"mb-1\\\"&gt;\\n      &lt;b-card-header header-tag=\\\"header\\\" class=\\\"p-1\\\" role=\\\"tab\\\"&gt;\\n        &lt;b-button block href=\\\"#\\\" v-b-toggle.accordion1 variant=\\\"info\\\"&gt;Accordion 1&lt;/b-button&gt;\\n      &lt;/b-card-header&gt;\\n      &lt;b-collapse id=\\\"accordion1\\\" visible accordion=\\\"my-accordion\\\" role=\\\"tabpanel\\\"&gt;\\n        &lt;b-card-body&gt;\\n          &lt;p class=\\\"card-text\\\"&gt;I start opened because &lt;code&gt;visible&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;&lt;/p&gt;\\n          &lt;p class=\\\"card-text\\\"&gt;{{ text }}&lt;/p&gt;\\n        &lt;/b-card-body&gt;\\n      &lt;/b-collapse&gt;\\n    &lt;/b-card&gt;\\n\\n    &lt;b-card no-body class=\\\"mb-1\\\"&gt;\\n      &lt;b-card-header header-tag=\\\"header\\\" class=\\\"p-1\\\" role=\\\"tab\\\"&gt;\\n        &lt;b-button block href=\\\"#\\\" v-b-toggle.accordion2 variant=\\\"info\\\"&gt;Accordion 2&lt;/b-button&gt;\\n      &lt;/b-card-header&gt;\\n      &lt;b-collapse id=\\\"accordion2\\\" accordion=\\\"my-accordion\\\" role=\\\"tabpanel\\\"&gt;\\n        &lt;b-card-body&lt;p class=\\\"card-text\\\"&gt;{{ text }}&lt;/p&gt;&lt;/b-card-body&gt;\\n      &lt;/b-collapse&gt;\\n    &lt;/b-card&gt;\\n\\n    &lt;b-card no-body class=\\\"mb-1\\\"&gt;\\n      &lt;b-card-header header-tag=\\\"header\\\" class=\\\"p-1\\\" role=\\\"tab\\\"&gt;\\n        &lt;b-button block href=\\\"#\\\" v-b-toggle.accordion3 variant=\\\"info\\\"&gt;Accordion 3&lt;/b-button&gt;\\n      &lt;/b-card-header&gt;\\n      &lt;b-collapse id=\\\"accordion3\\\" accordion=\\\"my-accordion\\\" role=\\\"tabpanel\\\"&gt;\\n        &lt;b-card-body&gt;&lt;p class=\\\"card-text\\\"&gt;{{ text }}&lt;/p&gt;&lt;/b-card-body&gt;\\n      &lt;/b-collapse&gt;\\n    &lt;/b-card&gt;\\n  &lt;/div&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\n  export default {\\n    data() {\\n      return {\\n        text: `\\n          Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\\n          richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor\\n          brunch. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon\\n          tempor, sunt aliqua put a bird on it squid single-origin coffee nulla\\n          assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore\\n          wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher\\n          vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic\\n          synth nesciunt you probably haven't heard of them accusamus labore VHS.\\n        `\\n      }\\n    }\\n  }\\n&lt;/script&gt;\\n\\n&lt;!-- b-accordion.vue --&gt;</pre><p><strong>Notes:</strong></p>\\n<ul>\\n<li>When using accordion mode, make sure you place the trigger elements and <code>&lt;b-collapse&gt;</code> components\\ninside an element with <code>role=&quot;tablist&quot;</code> and set <code>role=&quot;tab&quot;</code> on each trigger element&#39;s container\\n(each trigger element should be wrapped) in order to help screen reader users navigate the\\naccordion group.</li>\\n<li>If using the <code>v-model</code> feature of <code>&lt;b-collapse&gt;</code> in accordion mode, do not bind the <code>v-model</code> or\\n<code>visible</code> prop of all the collapses in the accordion group to the same variable!</li>\\n<li>Ensure, at most, only one <code>&lt;b-collapse&gt;</code> in the accordion group has the <code>visible</code> prop and/or\\n<code>v-model</code> set to <code>true</code>.</li>\\n</ul>\\n<h2 id=\\\"hiding-and-showing-content-in-the-toggle-button-based-on-collapse-state\\\"><span class=\\\"bd-content-title\\\">Hiding and showing content in the toggle button based on collapse state<a class=\\\"anchorjs-link\\\" href=\\\"#hiding-and-showing-content-in-the-toggle-button-based-on-collapse-state\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>When using the <code>v-b-toggle</code> directive, the class <code>collapsed</code> will automatically be placed on the\\ntrigger element when the collapse is closed, and removed when open. You can use this class to\\ndisplay or hide content within the toggle via custom CSS:</p>\\n<p><strong>Example HTML markup:</strong></p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">v-b-toggle.myCollapse</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"when-opened\\\"</span>&gt;</span>Close<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span> <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">span</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"when-closed\\\"</span>&gt;</span>Open<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">span</span>&gt;</span> My Collapse\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-collapse</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"myCollapse\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-comment\\\">&lt;!-- Content here --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-collapse</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span></pre><p><strong>Example Custom CSS:</strong></p>\\n<pre class=\\\"hljs css text-monospace p-2\\\"><span class=\\\"hljs-selector-class\\\">.collapsed</span> &gt; <span class=\\\"hljs-selector-class\\\">.when-opened</span>,\\n<span class=\\\"hljs-selector-pseudo\\\">:not(.collapsed)</span> &gt; <span class=\\\"hljs-selector-class\\\">.when-closed</span> {\\n  <span class=\\\"hljs-attribute\\\">display</span>: none;\\n}</pre><h2 id=\\\"global-root-instance-events\\\"><span class=\\\"bd-content-title\\\">&#39;Global&#39; $root instance events<a class=\\\"anchorjs-link\\\" href=\\\"#global-root-instance-events\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>Using <code>$root</code> instance it is possible to emit and listen events somewhere out of a component, where\\n<code>&lt;b-collapse&gt;</code> is used. In short, <code>$root</code> behaves like a global event emitters and listener. Details\\nabout <code>$root</code> instance can be found in\\n<a href=\\\"https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance\\\">the official Vue docs</a>.</p>\\n<h3 id=\\\"listening-to-collapses-state-changes-via-root-events\\\"><span class=\\\"bd-content-title\\\">Listening to collapses state changes via $root events<a class=\\\"anchorjs-link\\\" href=\\\"#listening-to-collapses-state-changes-via-root-events\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>To listen to any collapse state changes, use:</p>\\n<pre class=\\\"hljs js text-monospace p-2\\\">mounted() {\\n  <span class=\\\"hljs-keyword\\\">this</span>.$root.$on(<span class=\\\"hljs-string\\\">'bv::collapse::state'</span>, (collapseId, isJustShown) =&gt; {\\n    <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-string\\\">'collapseId:'</span>, collapseId)\\n    <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-string\\\">'isJustShown:'</span>, isJustShown)\\n  })\\n}</pre><p>where <code>collapseId</code> is collapse id which changed its state; <code>isJustShown</code> is true/false, i.e.\\nshown/hidden collapse.</p>\\n<h3 id=\\\"toggling-collapses-via-root-events\\\"><span class=\\\"bd-content-title\\\">Toggling collapses via $root events<a class=\\\"anchorjs-link\\\" href=\\\"#toggling-collapses-via-root-events\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>To toggle (open/close) a <strong>specific collapse</strong>, pass the collapse <code>id</code>:</p>\\n<pre class=\\\"hljs js text-monospace p-2\\\"><span class=\\\"hljs-keyword\\\">this</span>.$root.$emit(<span class=\\\"hljs-string\\\">'bv::toggle::collapse'</span>, <span class=\\\"hljs-string\\\">'my-collapse-id'</span>)</pre><h2 id=\\\"accessibility\\\"><span class=\\\"bd-content-title\\\">Accessibility<a class=\\\"anchorjs-link\\\" href=\\\"#accessibility\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>The <code>v-b-toggle</code> directive will automatically add the ARIA attributes <code>aria-controls</code> and\\n<code>aria-expanded</code> to the component that the directive appears on (as well as add the class <code>collapsed</code>\\nwhen not expanded). <code>aria-expanded</code> will reflect the state of the target <code>&lt;b-collapse&gt;</code> component,\\nwhile <code>aria-controls</code> will be set to the ID(s) of the target <code>&lt;b-collapse&gt;</code> component(s).</p>\\n<p>If using <code>v-model</code> to set the visible state instead of the directive <code>v-b-toggle</code>, you will be\\nrequired to, on the toggle element, add the <code>aria-controls</code> and other appropriate attributes and\\nclasses yourself.</p>\\n<p>While the <code>v-b-toggle</code> directive can be placed on almost any HTML element or Vue component, it is\\nrecommended to use a button or link (or similar component) to act as your toggler. Otherwise your\\ntrigger elements may be inaccessible to keyboard or screen reader users. If you do place them on\\nsomething other than a button or link (or similar component), you should add the attributes\\n<code>tabindex=&quot;0&quot;</code> and <code>role=&quot;button&quot;</code> to allow users of assistive technology to reach your trigger\\nelement.</p>\\n<p>When using accordion mode, make sure you place the trigger elements and <code>&lt;b-collapse&gt;</code> components\\ninside an element with <code>role=&quot;tablist&quot;</code> and set <code>role=&quot;tab&quot;</code> on each trigger element&#39;s container in\\norder to help screen reader users navigate the accordion group. Unfortunately, BootstrapVue cannot\\napply those roles for you automatically, as it depends on your final document markup.</p>\\n<!-- Component reference added automatically from component package.json -->\\n\";"],"sourceRoot":""}