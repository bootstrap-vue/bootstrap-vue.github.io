(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{400:function(n,t){n.exports='<h1 id="form-spinbutton" class="bv-no-focus-ring"><span class="bd-content-title">Form Spinbutton</span></h1>\n<p class="bd-lead">Spin buttons are a BootstrapVue custom numerical range form control. Spin buttons allow for\nincrementing or decrementing a numerical value within a range of a minimum and maximum number,\nwith optional step value.</p>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-form-spinbutton&gt;</code> is\n<a href="https://www.w3.org/TR/wai-aria-practices-1.2/#spinbutton" target="_blank" rel="noopener">WAI-ARIA compliant</a>, allowing for\n<a href="#accessibility" class="font-weight-bold">keyboard control</a>, and supports both horizontal (default) and vertical layout.</p>\n<p>Similar to <a href="/docs/components/form-input#range-type-input" class="font-weight-bold">range type inputs</a>, BootstrapVue&#39;s\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-spinbutton&gt;</code> <em>does not</em> allow the user to type in a value.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"demo-sb"</span>&gt;</span>Spin Button<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"demo-sb"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-number">50</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-demo.vue --&gt;</span></pre><h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2>\n<p>The <kbd class="notranslate" translate="no">ArrowUp</kbd> and <kbd class="notranslate" translate="no">ArrowDown</kbd> keys can be used to increment or decrement the\nvalue.</p>\n<p>To be submitted via native browser form submits, the spinbutton must have a name set via the <code translate="no" class="notranslate text-nowrap">name</code>\nprop. This will create a hidden input containing the current value of the spinbutton. If the\nspinbutton does not have a value, the hidden input&#39;s value will be an empty string.</p>\n<h2 id="v-model-value" class="bv-no-focus-ring"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">v-model</code> value<a class="anchorjs-link" href="#v-model-value" aria-labelledby="v-model-value"></a></span></h2>\n<p>The <code translate="no" class="notranslate text-nowrap">v-model</code> always returns the value as a number. The <code translate="no" class="notranslate text-nowrap">v-model</code> can be <code translate="no" class="notranslate text-nowrap">null</code> if no initial value\nis set.</p>\n<p>If the initial value is <code translate="no" class="notranslate text-nowrap">null</code> no value will be displayed in the spinbutton. Use the <code translate="no" class="notranslate text-nowrap">placeholder</code>\nprop to show a string when the spinbutton has no value (i.e. <code translate="no" class="notranslate text-nowrap">placeholder=&quot;--&quot;</code>).</p>\n<h2 id="min-max-and-step" class="bv-no-focus-ring"><span class="bd-content-title">Min, max, and step<a class="anchorjs-link" href="#min-max-and-step" aria-labelledby="min-max-and-step"></a></span></h2>\n<p>Spinbuttons have a default range from <code translate="no" class="notranslate text-nowrap">1</code> to <code translate="no" class="notranslate text-nowrap">100</code>, which can be changed by setting the <code translate="no" class="notranslate text-nowrap">min</code> and\n<code translate="no" class="notranslate text-nowrap">max</code> props. The default step increment is <code translate="no" class="notranslate text-nowrap">1</code>, and can be changed via the <code translate="no" class="notranslate text-nowrap">step</code> prop (decimal\nvalues allowed).</p>\n<p>When <code translate="no" class="notranslate text-nowrap">step</code> is set, the value will always be a multiple of the step size plus the minimum value.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-step"</span>&gt;</span>Spin button with step of 0.25<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-step"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span>\n      <span class="hljs-attr">max</span>=<span class="hljs-string">"10"</span>\n      <span class="hljs-attr">step</span>=<span class="hljs-string">"0.25"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-step.vue --&gt;</span></pre><h2 id="number-wrapping" class="bv-no-focus-ring"><span class="bd-content-title">Number wrapping<a class="anchorjs-link" href="#number-wrapping" aria-labelledby="number-wrapping"></a></span></h2>\n<p>By default, when the value is increased to the <code translate="no" class="notranslate text-nowrap">max</code> value, it pressing the increment button will\nhave no effect. Similarly when the value is as the <code translate="no" class="notranslate text-nowrap">min</code> value, pressing the decrement button will\nhave no effect.</p>\n<p>To allow the spin button to wrap from max to min when incrementing (or min to max when\ndecrementing), set the <code translate="no" class="notranslate text-nowrap">wrap</code> prop to <code translate="no" class="notranslate text-nowrap">true</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-wrap"</span>&gt;</span>Wrapping value spin button<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-wrap"</span> <span class="hljs-attr">wrap</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"25"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"--"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-wrap.vue --&gt;</span></pre><h2 id="styling" class="bv-no-focus-ring"><span class="bd-content-title">Styling<a class="anchorjs-link" href="#styling" aria-labelledby="styling"></a></span></h2>\n<h3 id="size" class="bv-no-focus-ring"><span class="bd-content-title">Size<a class="anchorjs-link" href="#size" aria-labelledby="size"></a></span></h3>\n<p>As with other form controls, <code translate="no" class="notranslate text-nowrap">&lt;b-form-spinbutton&gt;</code> supports small and large sizing via setting the\n<code translate="no" class="notranslate text-nowrap">size</code> prop to either <code translate="no" class="notranslate text-nowrap">&#39;sm&#39;</code> or <code translate="no" class="notranslate text-nowrap">&#39;lg&#39;</code>, respectively.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-small"</span>&gt;</span>Spin button - Small size<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-small"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"--"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-default"</span>&gt;</span>Spin button - Default size<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-default"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"--"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-large"</span>&gt;</span>Spin button - Large size<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-large"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"--"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-size.vue --&gt;</span></pre><h3 id="inline" class="bv-no-focus-ring"><span class="bd-content-title">Inline<a class="anchorjs-link" href="#inline" aria-labelledby="inline"></a></span></h3>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-inline"</span>&gt;</span>Inline spin button<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-inline"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">inline</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-number">50</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-inline.vue --&gt;</span></pre><p>The spin button will automatically adjust it&#39;s width to fit the displayed value. See the\n<a href="#width" class="font-weight-bold">Width section</a> below for details on controlling or setting the width.</p>\n<h3 id="vertical" class="bv-no-focus-ring"><span class="bd-content-title">Vertical<a class="anchorjs-link" href="#vertical" aria-labelledby="vertical"></a></span></h3>\n<p>Spinbuttons can be oriented in vertical mode:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-vertical"</span>&gt;</span>Vertical spin button<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-vertical"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">vertical</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-number">50</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-vertical.vue --&gt;</span></pre><p>Vertical spin buttons can also be sized using the <a href="#size" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">size</code> prop</a>. When in vertical mode, the\nspin button is rendered as an inline element.</p>\n<p>The spin button will automatically adjust it&#39;s width to fit the displayed value. See the\n<a href="#width" class="font-weight-bold">Width section</a> below for details on controlling or setting the width.</p>\n<h3 id="width" class="bv-no-focus-ring"><span class="bd-content-title">Width<a class="anchorjs-link" href="#width" aria-labelledby="width"></a></span></h3>\n<p>The control (when not <code translate="no" class="notranslate text-nowrap">vertical</code> or <code translate="no" class="notranslate text-nowrap">inline</code>) will expand to the maximum width of the parent\ncontainer You can control width via utility classes such as <code translate="no" class="notranslate text-nowrap">w-25</code>, <code translate="no" class="notranslate text-nowrap">w-50</code>, <code translate="no" class="notranslate text-nowrap">w-75</code>, or use styles to\nset the width.</p>\n<p>When either <code translate="no" class="notranslate text-nowrap">vertical</code> or <code translate="no" class="notranslate text-nowrap">inline</code> is set, the control will adjust its width based on the displayed\nvalue. You can use css style to control the overall width of the control (i.e.\n<code translate="no" class="notranslate text-nowrap">style=&quot;width: 10rem;</code>).</p>\n<h3 id="number-formatting-and-locale" class="bv-no-focus-ring"><span class="bd-content-title">Number formatting and locale<a class="anchorjs-link" href="#number-formatting-and-locale" aria-labelledby="number-formatting-and-locale"></a></span></h3>\n<p>By default <code translate="no" class="notranslate text-nowrap">&lt;b-form-spinbutton&gt;</code> will format the displayed number in the users browser default\nlocale. You can change the localized formatting by specifying a locale (or array of locales) via the\n<code translate="no" class="notranslate text-nowrap">locale</code> prop. Number format localization is performed via\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat" target="_blank" rel="noopener"><code translate="no" class="notranslate text-nowrap">Intl.NumberFormat</code></a>.\nThe locales available will be dependant on the browser implementation. Localization only controls\nthe presentation of the value to the user, and does not affect the <code translate="no" class="notranslate text-nowrap">v-model</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-locales"</span>&gt;</span>Locale<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-locales"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"locale"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"locales"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-local"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>Spin button with locale<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-locale"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      <span class="hljs-attr">:locale</span>=<span class="hljs-string">"locale"</span>\n      <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span>\n      <span class="hljs-attr">max</span>=<span class="hljs-string">"10"</span>\n      <span class="hljs-attr">step</span>=<span class="hljs-string">"0.125"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">locale</span>: <span class="hljs-string">\'fr-CA\'</span>,\n        <span class="hljs-attr">locales</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'en\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'English\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'de\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'German\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'fr-CA\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'French (Canadian)\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'fa\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Persian\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'ar-EG\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Arabic (Egyptian)\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-locale.vue --&gt;</span></pre><p>Alternatively, you can provide your own number formatter function to format the value displayed.\nThis is useful for displaying text instead of a number, or if you want to implement different\nfeatures of <code translate="no" class="notranslate text-nowrap">Intl.NumberFormat</code>.</p>\n<p>To provide a formatter function, set the prop <code translate="no" class="notranslate text-nowrap">formatter-fn</code> to a method reference. The formatter is\npassed a single argument which is the current value. Note the formatter only affects the value\ndisplayed to the user and does not affect the <code translate="no" class="notranslate text-nowrap">v-model</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-days"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>Spin button with formatter<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-days"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      <span class="hljs-attr">:formatter-fn</span>=<span class="hljs-string">"dayFormatter"</span>\n      <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span>\n      <span class="hljs-attr">max</span>=<span class="hljs-string">"6"</span>\n      <span class="hljs-attr">wrap</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">days</span>: [<span class="hljs-string">\'Sunday\'</span>, <span class="hljs-string">\'Monday\'</span>, <span class="hljs-string">\'Tuesday\'</span>, <span class="hljs-string">\'Wednesday\'</span>, <span class="hljs-string">\'Thursday\'</span>, <span class="hljs-string">\'Friday\'</span>, <span class="hljs-string">\'Saturday\'</span>]\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      dayFormatter(value) {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.days[value]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-formatter.vue --&gt;</span></pre><h2 id="disabled-and-readonly-states" class="bv-no-focus-ring"><span class="bd-content-title">Disabled and readonly states<a class="anchorjs-link" href="#disabled-and-readonly-states" aria-labelledby="disabled-and-readonly-states"></a></span></h2>\n<p>Setting the prop <code translate="no" class="notranslate text-nowrap">disabled</code> places the component in a disabled, non-interactive state. The\n<code translate="no" class="notranslate text-nowrap">readonly</code> prop places the component in a readonly state (focusable, but the value cannot be changed\nby the user).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-disabled"</span>&gt;</span>Disabled spin button<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-disabled"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">disabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-readonly"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>&gt;</span>Readonly spin button<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-readonly"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">readonly</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-number">50</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-disabled-readonly.vue --&gt;</span></pre><p>Disabled spinbuttons will not be submitted during native browser form submission, while a readonly\nspinbutton will be submitted (as long as a name has been set via the <code translate="no" class="notranslate text-nowrap">name</code> prop).</p>\n<h2 id="validation-states" class="bv-no-focus-ring"><span class="bd-content-title">Validation states<a class="anchorjs-link" href="#validation-states" aria-labelledby="validation-states"></a></span></h2>\n<p>When you default to a <code translate="no" class="notranslate text-nowrap">null</code> value, and the user has not selected a value, you can use the <code translate="no" class="notranslate text-nowrap">state</code>\nprop to apply one of the contextual validation styles to the component.</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">true</code> applies the valid styling to the component</li>\n<li><code translate="no" class="notranslate text-nowrap">false</code> applies the invalid styling to the component</li>\n<li><code translate="no" class="notranslate text-nowrap">null</code> applies no contextual styling (the default)</li>\n</ul>\n<h3 id="required-prop" class="bv-no-focus-ring"><span class="bd-content-title">Required prop<a class="anchorjs-link" href="#required-prop" aria-labelledby="required-prop"></a></span></h3>\n<p>Note that the required prop only generates the <code translate="no" class="notranslate text-nowrap">aria-required=&quot;true&quot;</code> attribute on the component,\nand does not perform any validation on form submit. You must validate the <code translate="no" class="notranslate text-nowrap">v-model</code> in your\napplication logic.</p>\n<p>Note that if the prop <code translate="no" class="notranslate text-nowrap">required</code> is set, and the <code translate="no" class="notranslate text-nowrap">v-model</code> is <code translate="no" class="notranslate text-nowrap">null</code>, the attribute\n<code translate="no" class="notranslate text-nowrap">aria-invalid=&quot;true&quot;</code> will be rendered on the component.</p>\n<h2 id="events" class="bv-no-focus-ring"><span class="bd-content-title">Events<a class="anchorjs-link" href="#events" aria-labelledby="events"></a></span></h2>\n<p>The <code translate="no" class="notranslate text-nowrap">input</code> event is used to update the <code translate="no" class="notranslate text-nowrap">v-model</code> and is emitted any time the value changes.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">change</code> event is emitted once the user releases the mouse button (when pressing the increment\nor decrement buttons) or when the user releases the <kbd class="notranslate" translate="no">ArrowDown</kbd> or <kbd class="notranslate" translate="no">ArrowUp</kbd> key.\nThis can be handy when you need to debounce the input.</p>\n<p>The following example illustrates the difference between the <code translate="no" class="notranslate text-nowrap">input</code> and <code translate="no" class="notranslate text-nowrap">change</code> events. Click and\nhold the increment or decrement button (or use the up/down arrow keys).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"sb-input"</span>&gt;</span>Spin button - input and change events<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-spinbutton</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"sb-input"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value1"</span>\n      @<span class="hljs-attr">change</span>=<span class="hljs-string">"value2 = $event"</span>\n      <span class="hljs-attr">wrap</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-spinbutton</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Input event: {{ value1 }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Change event: {{ value2 }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value1</span>: <span class="hljs-number">0</span>,\n        <span class="hljs-attr">value2</span>: <span class="hljs-literal">null</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-spinbutton-events.vue --&gt;</span></pre><h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2>\n<p>The following keyboard controls are available when the spin button is focused:</p>\n<ul>\n<li><kbd class="notranslate" translate="no">Home</kbd> Sets the value to the <code translate="no" class="notranslate text-nowrap">min</code> value</li>\n<li><kbd class="notranslate" translate="no">End</kbd> Sets the value to the <code translate="no" class="notranslate text-nowrap">max</code> value</li>\n<li><kbd class="notranslate" translate="no">ArrowUp</kbd> Increases the value by the step amount</li>\n<li><kbd class="notranslate" translate="no">ArrowDown</kbd> Decreases the value by the step amount</li>\n<li><kbd class="notranslate" translate="no">PageUp</kbd> Increases the value by the step amount times the <code translate="no" class="notranslate text-nowrap">repeat-step-multiplier</code> amount</li>\n<li><kbd class="notranslate" translate="no">PageDown</kbd> Decreases the value by the step amount times the <code translate="no" class="notranslate text-nowrap">repeat-step-multiplier</code>\namount</li>\n</ul>\n<p>Pressing an holding the <kbd class="notranslate" translate="no">ArrowUp</kbd>, <kbd class="notranslate" translate="no">ArrowDown</kbd>, <kbd class="notranslate" translate="no">PageUp</kbd>, or\n<kbd class="notranslate" translate="no">PageDown</kbd> keys will auto-repeat the increment or decrement (after an initial delay).\nHolding down the <kbd class="notranslate" translate="no">ArrowUp</kbd> or <kbd class="notranslate" translate="no">ArrowDown</kbd> keys for an extended period will\nmultiply the increment or decrement amount by the <code translate="no" class="notranslate text-nowrap">repeat-step-multiplier</code> amount.</p>\n<p>Note the the <code translate="no" class="notranslate text-nowrap">repeat-delay</code>, <code translate="no" class="notranslate text-nowrap">repeat-threshold</code> and <code translate="no" class="notranslate text-nowrap">repeat-interval</code> only applies to the\n<kbd class="notranslate" translate="no">ArrowUp</kbd> or <kbd class="notranslate" translate="no">ArrowDown</kbd> keys.</p>\n<h2 id="implementation-notes" class="bv-no-focus-ring"><span class="bd-content-title">Implementation notes<a class="anchorjs-link" href="#implementation-notes" aria-labelledby="implementation-notes"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-form-spinbutton&gt;</code> uses a mixture of Bootstrap v4 utility classes (margin, padding, and flex),\nform-control and button classes, along with additional custom BootstrapVue SCSS/CSS.</p>\n<h2 id="see-also" class="bv-no-focus-ring"><span class="bd-content-title">See also<a class="anchorjs-link" href="#see-also" aria-labelledby="see-also"></a></span></h2>\n<ul>\n<li><a href="/docs/components/form-input#range-type-input" class="font-weight-bold">Range type input</a></li>\n</ul>\n'}}]);