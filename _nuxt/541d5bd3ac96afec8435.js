(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{582:function(n,l){n.exports='<h1 id="form-checkbox-inputs"><span class="bd-content-title">Form Checkbox Inputs</span></h1>\n<p class="bd-lead">For cross browser consistency, <code>&lt;b-form-checkbox-group&gt;</code> and <code>&lt;b-form-checkbox&gt;</code> use Bootstrap&#39;s\ncustom checkbox input to replace the browser default checkbox input. It is built on top of\nsemantic and accessible markup, so it is a solid replacement for the default checkbox input.</p>\n<p><strong>Example 1:</strong> Single checkbox</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"checkbox-1"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"status"</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">"checkbox-1"</span>\n      <span class="hljs-attr">value</span>=<span class="hljs-string">"accepted"</span>\n      <span class="hljs-attr">unchecked-value</span>=<span class="hljs-string">"not_accepted"</span>\n    &gt;</span>\n      I accept the terms and use\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>State: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ status }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">status</span>: <span class="hljs-string">\'not_accepted\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox.vue --&gt;</span></pre><p><strong>Example 2:</strong> Multiple choice checkboxes</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Using options array:"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"checkbox-group-1"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"flavour-1"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Using sub-components:"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"checkbox-group-2"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"flavour-2"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"orange"</span>&gt;</span>Orange<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"apple"</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"pineapple"</span>&gt;</span>Pineapple<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"grape"</span>&gt;</span>Grape<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: [], <span class="hljs-comment">// Must be an array reference!</span>\n        options: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Orange\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'orange\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Apple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'apple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Pineapple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'pineapple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Grape\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-multiple.vue --&gt;</span></pre><p>Feel free to mix and match <code>options</code> prop and <code>&lt;b-form-checkbox&gt;</code> in <code>&lt;b-form-checkbox-group&gt;</code>.\nManually placed <code>&lt;b-form-checkbox&gt;</code> inputs will appear <em>below</em> any checkbox inputs generated by the\n<code>options</code> prop. To have them appear <em>above</em> the inputs generated by <code>options</code>, place them in the\nnamed slot <code>first</code>.</p>\n<h2 id="checkbox-group-options-array"><span class="bd-content-title">Checkbox group options array<a class="anchorjs-link" href="#checkbox-group-options-array" aria-label="Anchor"></a></span></h2>\n<p>Please see options in <a href="/docs/components/form-select"><code>&lt;b-form-select&gt;</code></a> docs for details on passing\n<code>options</code> (value array) to <code>&lt;b-form-checkbox-group&gt;</code>.</p>\n<h2 id="inline-and-stacked-checkboxes"><span class="bd-content-title">Inline and stacked checkboxes<a class="anchorjs-link" href="#inline-and-stacked-checkboxes" aria-label="Anchor"></a></span></h2>\n<p><code>&lt;b-form-checkbox-group&gt;</code> components render inline checkboxes by default, while <code>&lt;b-form-checkbox&gt;</code>\nrenders block-level (stacked) checkboxes.</p>\n<p>Set the prop <code>stacked</code> on <code>&lt;b-form-checkbox-group&gt;</code> to place each form control one over the other,\nor if using individual checkboxes not inside a <code>&lt;b-form-checkbox-group&gt;</code>, set the <code>inline</code> prop on\n<code>&lt;b-form-checkbox&gt;</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Form-checkbox-group inline checkboxes (default)"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"flavour-1a"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Form-checkbox-group stacked checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"flavour-2a"</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Individual stacked checkboxes (default)"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span>\n        <span class="hljs-attr">v-for</span>=<span class="hljs-string">"option in options"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:key</span>=<span class="hljs-string">"option.value"</span>\n        <span class="hljs-attr">:value</span>=<span class="hljs-string">"option.value"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"flavour-3a"</span>\n      &gt;</span>\n        {{ option.text }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Individual inline checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span>\n        <span class="hljs-attr">v-for</span>=<span class="hljs-string">"option in options"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:key</span>=<span class="hljs-string">"option.value"</span>\n        <span class="hljs-attr">:value</span>=<span class="hljs-string">"option.value"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"flavour-4a"</span>\n        <span class="hljs-attr">inline</span>\n      &gt;</span>\n        {{ option.text }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: [], <span class="hljs-comment">// Must be an array reference!</span>\n        options: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Orange\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'orange\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Apple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'apple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Pineapple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'pineapple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Grape\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-stacked.vue --&gt;</span></pre><h2 id="checkbox-values-and-v-model"><span class="bd-content-title">Checkbox values and <code>v-model</code><a class="anchorjs-link" href="#checkbox-values-and-v-model" aria-label="Anchor"></a></span></h2>\n<p>By default, <code>&lt;b-form-checkbox&gt;</code> value will be <code>true</code> when checked and <code>false</code> when unchecked. You\ncan customize the checked and unchecked values by specifying the <code>value</code> and <code>unchecked-value</code>\nproperties, respectively.</p>\n<p>The <code>v-model</code> binds to the <code>checked</code> prop. When you have multiple checkboxes that bind to a single\ndata state variable, you <strong>must</strong> provide an array reference (<code>[]</code>) to your <code>v-model</code>. Do not use\nthe <code>checked</code> prop directly.</p>\n<p>Note that when <code>v-model</code> is bound to multiple checkboxes (i.e an array ref), the <code>unchecked-value</code>\nis <strong>not used</strong>. Only the value(s) of the checked checkboxes will be returned in the <code>v-model</code> bound\narray. You should provide a unique value for each checkbox&#39;s <code>value</code> prop (the default of <code>true</code>\nwill not work when bound to an array)</p>\n<p>To pre-check any radios, set the <code>v-model</code> to the value(s) of the checks that you would like\npre-selected.</p>\n<p>When placing individual <code>&lt;b-form-checkbox&gt;</code> components within a <code>&lt;b-form-checkbox-group&gt;</code>, most\nprops and the <code>v-model</code> are inherited from the <code>&lt;b-form-checkbox-group&gt;</code>.</p>\n<h3 id="multiple-checkboxes-and-accessibility"><span class="bd-content-title">Multiple checkboxes and accessibility<a class="anchorjs-link" href="#multiple-checkboxes-and-accessibility" aria-label="Anchor"></a></span></h3>\n<p>When binding multiple checkboxes together, you must set the <code>name</code> prop to the same value for all\n<code>&lt;b-form-checkbox&gt;</code>s in the group individually or via the <code>name</code> prop of <code>&lt;b-form-checkbox-group&gt;</code>.\nThis will inform users of assistive technologies that the checkboxes are related and enables native\nbrowser keyboard navigation.</p>\n<p>Whenever using multiple checkboxes, it is recommended that the checkboxes be placed in a\n<a href="/docs/components/form-group"><code>&lt;b-form-group&gt;</code></a> component to associate a label with the entire group\nof checkboxes. See examples above.</p>\n<h2 id="button-style-checkboxes"><span class="bd-content-title">Button style checkboxes<a class="anchorjs-link" href="#button-style-checkboxes" aria-label="Anchor"></a></span></h2>\n<p>You can optionally render checkboxes to appear as buttons, either individually, or in a group.</p>\n<p>Button style checkboxes will have the class <code>.active</code> automatically applied to the label when they\nare in the <em>checked</em> state.</p>\n<h3 id="individual-checkbox-button-style"><span class="bd-content-title">Individual checkbox button style<a class="anchorjs-link" href="#individual-checkbox-button-style" aria-label="Anchor"></a></span></h3>\n<p>A single checkbox can be rendered with a button appearance by setting the prop <code>button</code> to <code>true</code></p>\n<p>Change the button variant by setting the <code>button-variant</code> prop to one of the standard Bootstrap\nbutton variants (see <a href="/docs/components/button"><code>&lt;b-button&gt;</code></a> for supported variants). The default\nvariant is <code>secondary</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checked1"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"check-button"</span> <span class="hljs-attr">button</span>&gt;</span>\n      Button Checkbox <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>(Checked: {{ checked1 }})<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checked2"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"check-button"</span> <span class="hljs-attr">button</span> <span class="hljs-attr">button-variant</span>=<span class="hljs-string">"info"</span>&gt;</span>\n      Button Checkbox <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>(Checked: {{ checked2 }})<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">checked1</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">checked2</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-button.vue --&gt;</span></pre><p>The <code>inline</code> prop has no effect on individual button-style checkboxes.</p>\n<h3 id="grouped-button-style-checkboxes"><span class="bd-content-title">Grouped button style checkboxes<a class="anchorjs-link" href="#grouped-button-style-checkboxes" aria-label="Anchor"></a></span></h3>\n<p>Render groups of checkboxes with the look of a button-group by setting the prop <code>buttons</code> on\n<code>&lt;b-form-checkbox-group&gt;</code>. Change the button variant by setting the <code>button-variant</code> prop to one of\nthe standard Bootstrap button variants (see <a href="/docs/components/button"><code>&lt;b-button&gt;</code></a> for supported\nvariants). The default <code>button-variant</code> is <code>secondary</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Button-group style checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"buttons-1"</span>\n        <span class="hljs-attr">buttons</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Button-group style checkboxes with variant primary and large buttons"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">buttons</span>\n        <span class="hljs-attr">button-variant</span>=<span class="hljs-string">"primary"</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"buttons-2"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Stacked (vertical) button-group style checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">stacked</span>\n        <span class="hljs-attr">buttons</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: [], <span class="hljs-comment">// Must be an array reference!</span>\n        options: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Orange\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'orange\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Apple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'apple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Pineapple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'pineapple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Grape\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-button-group.vue --&gt;</span></pre><h2 id="switch-style-checkboxes"><span class="bd-content-title">Switch style checkboxes<a class="anchorjs-link" href="#switch-style-checkboxes" aria-label="Anchor"></a></span></h2>\n<p>Switch styling is supported on <code>&lt;b-form-checkbox&gt;</code> and <code>&lt;b-form-checkbox-group&gt;</code> components.</p>\n<p><strong>Note:</strong> If the checkbox is in <a href="#button-style-checkboxes">button mode</a>, switch mode will have no\neffect.</p>\n<h3 id="individual-checkbox-switch-style"><span class="bd-content-title">Individual checkbox switch style<a class="anchorjs-link" href="#individual-checkbox-switch-style" aria-label="Anchor"></a></span></h3>\n<p>A single checkbox can be rendered with a switch appearance by setting the prop <code>switch</code> to <code>true</code></p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checked"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"check-button"</span> <span class="hljs-attr">switch</span>&gt;</span>\n      Switch Checkbox <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>(Checked: {{ checked }})<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-switch.vue --&gt;</span></pre><h3 id="grouped-switch-style-checkboxes"><span class="bd-content-title">Grouped switch style checkboxes<a class="anchorjs-link" href="#grouped-switch-style-checkboxes" aria-label="Anchor"></a></span></h3>\n<p>Render groups of checkboxes with the look of a switches by setting the prop <code>switches</code> on\n<code>&lt;b-form-checkbox-group&gt;</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Inline switch style checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">switches</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Stacked (vertical) switch style checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">switches</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: [], <span class="hljs-comment">// Must be an array reference!</span>\n        options: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Red\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'red\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Green\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'green\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Yellow (disabled)\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'yellow\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Blue\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'blue\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkboxes-switch-group.vue --&gt;</span></pre><h2 id="non-custom-check-inputs-plain"><span class="bd-content-title">Non custom check inputs (plain)<a class="anchorjs-link" href="#non-custom-check-inputs-plain" aria-label="Anchor"></a></span></h2>\n<p>You can have <code>&lt;b-form-checkbox-group&gt;</code> or <code>&lt;b-form-checkbox&gt;</code> render a browser native checkbox input\nby setting the <code>plain</code> prop.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Plain inline checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">plain</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Plain stacked checkboxes"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">plain</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: [], <span class="hljs-comment">// Must be an array reference!</span>\n        options: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Orange\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'orange\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Apple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'apple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Pineapple\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'pineapple\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Grape\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'grape\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-plain.vue --&gt;</span></pre><p><strong>Note:</strong> The <code>plain</code> prop has no effect when <code>button</code> or <code>buttons</code> is set.</p>\n<h2 id="contextual-states"><span class="bd-content-title">Contextual states<a class="anchorjs-link" href="#contextual-states" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap includes validation styles for <code>valid</code> and <code>invalid</code> states on most form controls.</p>\n<p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code>&#39;invalid&#39;</code> (or <code>false</code>) is great for when there&#39;s a blocking or required field. A user must fill\nin this field properly to submit the form.</li>\n<li><code>&#39;valid&#39;</code> (or <code>true</code>) is ideal for situations when you have per-field validation throughout a form\nand want to encourage a user through the rest of the fields.</li>\n<li><code>null</code> Displays no validation state</li>\n</ul>\n<p>To apply one of the contextual state icons on <code>&lt;b-form-checkbox&gt;</code>, set the <code>state</code> prop to\n<code>&#39;invalid&#39;</code> (or <code>false</code>), <code>&#39;valid&#39;</code> (or <code>true</code>), or <code>null</code>.</p>\n<p><strong>Note:</strong> Contextual states are <strong>not</strong> supported when in button mode.</p>\n<h3 id="contextual-state-and-validation-example"><span class="bd-content-title">Contextual state and validation example<a class="anchorjs-link" href="#contextual-state-and-validation-example" aria-label="Anchor"></a></span></h3>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">"checkbox-validation"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>&gt;</span>Please select two<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-valid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>&gt;</span>Thank you<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-valid-feedback</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [],\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'First Check\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Second Check\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Third Check\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      state() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value.length === <span class="hljs-number">2</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-checkbox-validation.vue --&gt;</span></pre><h3 id="required-constraint"><span class="bd-content-title">Required constraint<a class="anchorjs-link" href="#required-constraint" aria-label="Anchor"></a></span></h3>\n<p>When using individual <code>&lt;b-form-checkbox&gt;</code> components (not in a <code>&lt;b-form-checkbox-group&gt;</code>), and you\nwant the checkbox(es) to be <code>required</code> in your form, you <strong>must</strong> provide a <code>name</code> on each\n<code>&lt;b-form-checkbox&gt;</code> in order for the required constraint to work. All <code>&lt;b-form-checkbox&gt;</code> components\ntied to the same <code>v-model</code> <strong>must</strong> have the same <code>name</code>.</p>\n<p>The <code>name</code> is required in order for Assistive Technologies (such as screen readers, and keyboard\nonly users) to know which checkboxes belong to the same form variable (the name also automatically\nenables native browser keyboard navigation), hence <code>required</code> will only work if <code>name</code> is set.\n<code>&lt;b-form-checkbox-group&gt;</code> will automatically generate a unique input name if one is not provided on\nthe group.</p>\n<h2 id="autofocus"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.21</span></p>\n<p>When the <code>autofocus</code> prop is set on <code>&lt;b-form-checkbox&gt;</code>, the input will be auto-focused when it is\ninserted into the document, or re-activated when inside a Vue <code>&lt;keep-alive&gt;</code> component. Note that\nthis prop <strong>does not</strong> set the <code>autofocus</code> attribute on the input.</p>\n<h2 id="indeterminate-tri-state-support"><span class="bd-content-title">Indeterminate (tri-state) support<a class="anchorjs-link" href="#indeterminate-tri-state-support" aria-label="Anchor"></a></span></h2>\n<p>Normally a checkbox input can only have two states: <em>checked</em> or <em>unchecked</em>. They can have any\nvalue, but they either submit that value (<em>checked</em>) or don&#39;t (<em>unchecked</em>) with a form submission\n(although BootstrapVue allows a value for the <em>unchecked</em> state on a single checkbox)</p>\n<p><em>Visually</em>, there are actually three states a checkbox can be in: <em>checked</em>, <em>unchecked</em>, or\n<strong><em>indeterminate</em></strong>.</p>\n<p>The <em>indeterminate</em> state is <strong>visual only</strong>. The checkbox is still either checked or unchecked as a\nvalue. That means the visual indeterminate state masks the real value of the checkbox, so that\nbetter make sense in your UI!</p>\n<p><code>&lt;b-form-checkbox&gt;</code> supports setting this visual indeterminate state via the <code>indeterminate</code> prop\n(defaults to <code>false</code>). Clicking the checkbox will clear its indeterminate state. The <code>indeterminate</code>\nprop can be synced to the checkbox&#39;s state by v-binding the <code>indeterminate</code> prop with the <code>.sync</code>\nmodifier.</p>\n<p><strong>Note:</strong> indeterminate styling is not supported in button or switch mode, nor is it supported in\n<code>&lt;b-form-checkbox-group&gt;</code> (multiple checkboxes).</p>\n<p><strong>Single Indeterminate checkbox:</strong></p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checked"</span> <span class="hljs-attr">:indeterminate.sync</span>=<span class="hljs-string">"indeterminate"</span>&gt;</span>\n      Click me to see what happens\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>\n      Checked: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ checked }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n      Indeterminate: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ indeterminate }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleIndeterminate"</span>&gt;</span>Toggle Indeterminate State<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">checked</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">indeterminate</span>: <span class="hljs-literal">true</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      toggleIndeterminate() {\n        <span class="hljs-keyword">this</span>.indeterminate = !<span class="hljs-keyword">this</span>.indeterminate\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-indeterminate.vue --&gt;</span></pre><p><strong>Indeterminate checkbox use-case example:</strong></p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"label"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Choose your flavours:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">"allSelected"</span>\n          <span class="hljs-attr">:indeterminate</span>=<span class="hljs-string">"indeterminate"</span>\n          <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">"flavours"</span>\n          <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">"flavours"</span>\n          @<span class="hljs-attr">change</span>=<span class="hljs-string">"toggleAll"</span>\n        &gt;</span>\n          {{ allSelected ? \'Un-select All\' : \'Select All\' }}\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"flavors"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"flavours"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"flavors"</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">"ml-4"</span>\n        <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Individual flavours"</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n      All Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ allSelected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n      Indeterminate: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ indeterminate }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">flavours</span>: [<span class="hljs-string">\'Orange\'</span>, <span class="hljs-string">\'Grape\'</span>, <span class="hljs-string">\'Apple\'</span>, <span class="hljs-string">\'Lime\'</span>, <span class="hljs-string">\'Very Berry\'</span>],\n        <span class="hljs-attr">selected</span>: [],\n        <span class="hljs-attr">allSelected</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">indeterminate</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      toggleAll(checked) {\n        <span class="hljs-keyword">this</span>.selected = checked ? <span class="hljs-keyword">this</span>.flavours.slice() : []\n      }\n    },\n    <span class="hljs-attr">watch</span>: {\n      selected(newVal, oldVal) {\n        <span class="hljs-comment">// Handle changes in individual flavour checkboxes</span>\n        <span class="hljs-keyword">if</span> (newVal.length === <span class="hljs-number">0</span>) {\n          <span class="hljs-keyword">this</span>.indeterminate = <span class="hljs-literal">false</span>\n          <span class="hljs-keyword">this</span>.allSelected = <span class="hljs-literal">false</span>\n        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newVal.length === <span class="hljs-keyword">this</span>.flavours.length) {\n          <span class="hljs-keyword">this</span>.indeterminate = <span class="hljs-literal">false</span>\n          <span class="hljs-keyword">this</span>.allSelected = <span class="hljs-literal">true</span>\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-keyword">this</span>.indeterminate = <span class="hljs-literal">true</span>\n          <span class="hljs-keyword">this</span>.allSelected = <span class="hljs-literal">false</span>\n        }\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-checkbox-indeterminate-multiple.vue --&gt;</span></pre><p><strong>Note:</strong> indeterminate is not supported in <code>button</code> mode, nor in multiple checkbox mode. Also pay\nattention that plain checkbox (i.e. with prop <code>plain</code>) also supports indeterminate state on\nWindows/Linux/Mac/Android, but not on iOS.</p>\n<h3 id="indeterminate-state-and-accessibility"><span class="bd-content-title">Indeterminate state and accessibility<a class="anchorjs-link" href="#indeterminate-state-and-accessibility" aria-label="Anchor"></a></span></h3>\n<p>Not all screen readers will convey the indeterminate state to screen reader users. So it is\nrecommended to provide some form of textual feedback to the user (possibly by via the <code>.sr-only</code>\nclass) if the indeterminate state has special contextual meaning in your application.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);
//# sourceMappingURL=541d5bd3ac96afec8435.js.map