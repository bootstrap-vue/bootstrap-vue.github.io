{"version":3,"sources":["webpack:///./src/components/form-group/README.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"2050b927f0b76557355b.js","sourcesContent":["module.exports = \"<h1 id=\\\"form-group\\\">Form group</h1>\\n<blockquote>\\n<p>The <code>&lt;b-form-group&gt;</code> component is the easiest way to add some structure to forms. Its purpose is\\nto pair form controls with a legend or label, and to provide help text and invalid/valid feedback\\ntext, as well as visual (color) contextual state feedback.</p>\\n</blockquote>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span>\\n      <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"fieldset1\\\"</span>\\n      <span class=\\\"hljs-attr\\\">description</span>=<span class=\\\"hljs-string\\\">\\\"Let us know your name.\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Enter your name\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"input1\\\"</span>\\n      <span class=\\\"hljs-attr\\\">:invalid-feedback</span>=<span class=\\\"hljs-string\\\">\\\"invalidFeedback\\\"</span>\\n      <span class=\\\"hljs-attr\\\">:valid-feedback</span>=<span class=\\\"hljs-string\\\">\\\"validFeedback\\\"</span>\\n      <span class=\\\"hljs-attr\\\">:state</span>=<span class=\\\"hljs-string\\\">\\\"state\\\"</span>\\n    &gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"input1\\\"</span> <span class=\\\"hljs-attr\\\">:state</span>=<span class=\\\"hljs-string\\\">\\\"state\\\"</span> <span class=\\\"hljs-attr\\\">v-model</span>=<span class=\\\"hljs-string\\\">\\\"name\\\"</span> <span class=\\\"hljs-attr\\\">trim</span> /&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"javascript\\\">\\n  <span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n    <span class=\\\"hljs-attr\\\">computed</span>: {\\n      state() {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">this</span>.name.length &gt;= <span class=\\\"hljs-number\\\">4</span> ? <span class=\\\"hljs-literal\\\">true</span> : <span class=\\\"hljs-literal\\\">false</span>\\n      },\\n      invalidFeedback() {\\n        <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-keyword\\\">this</span>.name.length &gt; <span class=\\\"hljs-number\\\">4</span>) {\\n          <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">''</span>\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-keyword\\\">this</span>.name.length &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n          <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">'Enter at least 4 characters'</span>\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n          <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">'Please enter something'</span>\\n        }\\n      },\\n      validFeedback() {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">this</span>.state === <span class=\\\"hljs-literal\\\">true</span> ? <span class=\\\"hljs-string\\\">'Thank you'</span> : <span class=\\\"hljs-string\\\">''</span>\\n      }\\n    },\\n    data() {\\n      <span class=\\\"hljs-keyword\\\">return</span> {\\n        <span class=\\\"hljs-attr\\\">name</span>: <span class=\\\"hljs-string\\\">''</span>\\n      }\\n    }\\n  }\\n</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-form-group.vue --&gt;</span></pre><h2 id=\\\"label\\\">Label</h2>\\n<p>Use the prop <code>label</code> to set the content of the generated <code>&lt;legend&gt;</code> or <code>&lt;label&gt;</code> element, or by\\nusing the named slot <code>label</code>, You may optionally visually hide the label text while still making it\\navailable to screen readers by setting the prop <code>label-sr-only</code>.</p>\\n<p><code>&lt;b-form-group&gt;</code> will render a <code>&lt;fieldset&gt;</code> with <code>&lt;legend&gt;</code> if the <code>label-for</code> prop is not set. If\\nan input ID is provided to the <code>label-for</code> prop, then a <code>&lt;div&gt;</code> with <code>&lt;label&gt;</code> will be rendered.</p>\\n<p>If you provide an input <code>id</code> value to the <code>label-for</code> prop (the <code>id</code> must exist on the input\\ncontained within the <code>&lt;b-form-group&gt;</code>), a <code>&lt;label&gt;</code> element will be rendered instead of a <code>&lt;legend&gt;</code>\\nelement, and will have the <code>for</code> attribute set to the <code>id</code> specified. When specifying the id, <strong>do\\nnot</strong> prepend it with <code>#</code>. The <code>label-for</code> prop should only be used when you have a single form\\ninput inside the <code>&lt;b-form-group&gt;</code> component. Do not set the <code>label-for</code> prop when using\\n<code>&lt;b-form-radio-group&gt;</code>, <code>&lt;b-form-checkbox-group&gt;</code>, <code>&lt;b-form-radio&gt;</code>, <code>&lt;b-form-checkbox&gt;</code> or\\n<code>&lt;b-form-file&gt;</code> components (or when placing multiple inputs in the same form group), as these inputs\\ninclude integrated label element(s) and the <code>&lt;legend&gt;</code> element is more suitable.</p>\\n<p>You can also apply additional classes to the label via the <code>label-class</code> prop, such as responsive\\npadding and text alignment utility classes. The <code>label-class</code> prop accepts either a string or array\\nof strings.</p>\\n<h3 id=\\\"horizontal-layout\\\">Horizontal layout</h3>\\n<p>By default, the label appears above the input element(s), but you may optionally render horizontal\\n(label to the left of the input) at the various standard Bootstrap breakpoints.</p>\\n<p>The props<code>label-cols</code> and <code>label-cols-{breakpoint}</code> allow you to specify how many columns the label\\nshould occupy in the row. The input(s) will fill the rest of the row. The value must be a number\\ngreater than <code>0</code>. Or you can set the prop to <code>true</code> to make the label and input(s) each occupy half\\nof the width of the rendered row (handy if you have custom Bootstrap with an odd number of columns).</p>\\n<table class=\\\"table b-table table-striped\\\">\\n<thead class=\\\"thead-default\\\">\\n<tr>\\n<th>prop</th>\\n<th>description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>label-cols</code></td>\\n<td>Applies to breakpoint <code>xs</code> up</td>\\n</tr>\\n<tr>\\n<td><code>label-cols-sm</code></td>\\n<td>Applies to breakpoint <code>sm</code> and up</td>\\n</tr>\\n<tr>\\n<td><code>label-cols-md</code></td>\\n<td>Applies to breakpoint <code>md</code> and up</td>\\n</tr>\\n<tr>\\n<td><code>label-cols-lg</code></td>\\n<td>Applies to breakpoint <code>lg</code> and up</td>\\n</tr>\\n<tr>\\n<td><code>label-cols-xl</code></td>\\n<td>Applies to breakpoint <code>xl</code> and up</td>\\n</tr>\\n</tbody></table>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span>\\n      <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"fieldsetHorizontal\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label-cols-sm</span>=<span class=\\\"hljs-string\\\">\\\"4\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label-cols-lg</span>=<span class=\\\"hljs-string\\\">\\\"3\\\"</span>\\n      <span class=\\\"hljs-attr\\\">description</span>=<span class=\\\"hljs-string\\\">\\\"Let us know your name.\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Enter your name\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"inputHorizontal\\\"</span>\\n    &gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"inputHorizontal\\\"</span> /&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-form-group-horizontal.vue --&gt;</span></pre><p><strong>Deprecation warning:</strong> The props <code>horizontal</code> and <code>breakpoint</code> have been deprecated in favour of\\nusing the <code>label-cols</code> and <code>label-cols-{breakpoint}</code> props.</p>\\n<h3 id=\\\"label-size\\\">Label size</h3>\\n<p>You can control the label text size match the size of your form input(s) via the optional\\n<code>label-size</code> prop. Values can be <code>&#39;sm&#39;</code> or <code>&#39;lg&#39;</code> for small or large label, respectively. Sizes work\\nfor both <code>horizontal</code> and non-horizontal form groups.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span> <span class=\\\"hljs-attr\\\">label-cols</span>=<span class=\\\"hljs-string\\\">\\\"4\\\"</span> <span class=\\\"hljs-attr\\\">label-cols-lg</span>=<span class=\\\"hljs-string\\\">\\\"2\\\"</span> <span class=\\\"hljs-attr\\\">label-size</span>=<span class=\\\"hljs-string\\\">\\\"sm\\\"</span> <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Small\\\"</span> <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"input_sm\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"input_sm\\\"</span> <span class=\\\"hljs-attr\\\">size</span>=<span class=\\\"hljs-string\\\">\\\"sm\\\"</span> /&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span> <span class=\\\"hljs-attr\\\">label-cols</span>=<span class=\\\"hljs-string\\\">\\\"4\\\"</span> <span class=\\\"hljs-attr\\\">label-cols-lg</span>=<span class=\\\"hljs-string\\\">\\\"2\\\"</span> <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Default\\\"</span> <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"input_default\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"input_default\\\"</span> /&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span> <span class=\\\"hljs-attr\\\">label-cols</span>=<span class=\\\"hljs-string\\\">\\\"4\\\"</span> <span class=\\\"hljs-attr\\\">label-cols-lg</span>=<span class=\\\"hljs-string\\\">\\\"2\\\"</span> <span class=\\\"hljs-attr\\\">label-size</span>=<span class=\\\"hljs-string\\\">\\\"lg\\\"</span> <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Large\\\"</span> <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"input_lg\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"input_lg\\\"</span> <span class=\\\"hljs-attr\\\">size</span>=<span class=\\\"hljs-string\\\">\\\"lg\\\"</span> /&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-form-group-label-size.vue --&gt;</span></pre><h3 id=\\\"label-text-alignment\\\">Label text alignment</h3>\\n<p>The label text may also optionally be aligned <code>left</code>, <code>center</code> or <code>right</code> by setting the respective\\nvalue via the prop <code>label-text-align</code> and/or <code>label-align-{breakpoint}</code>.</p>\\n<table class=\\\"table b-table table-striped\\\">\\n<thead class=\\\"thead-default\\\">\\n<tr>\\n<th>prop</th>\\n<th>description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>label-align</code></td>\\n<td>Applies to breakpoint <code>xs</code> up</td>\\n</tr>\\n<tr>\\n<td><code>label-align-sm</code></td>\\n<td>Applies to breakpoint <code>sm</code> and up</td>\\n</tr>\\n<tr>\\n<td><code>label-align-md</code></td>\\n<td>Applies to breakpoint <code>md</code> and up</td>\\n</tr>\\n<tr>\\n<td><code>label-align-lg</code></td>\\n<td>Applies to breakpoint <code>lg</code> and up</td>\\n</tr>\\n<tr>\\n<td><code>label-align-xl</code></td>\\n<td>Applies to breakpoint <code>xl</code> and up</td>\\n</tr>\\n</tbody></table>\\n<p>Alignment has no effect if the <code>label-sr-only</code> prop is set.</p>\\n<h2 id=\\\"description\\\">Description</h2>\\n<p>Optional descriptive text which is always shown with the <code>.text-muted</code> class by setting the\\n<code>description</code> prop or using the named slot <code>description</code>. The description text is rendered using the\\n<a href=\\\"/docs/components/form#helper-components\\\"><code>&lt;b-form-text&gt;</code></a> form sub-component.</p>\\n<h2 id=\\\"nested-form-groups\\\">Nested form groups</h2>\\n<p>Feel free to nest <code>&lt;b-form-group&gt;</code> components to produce advanced form layouts and semantic grouping\\nof related form controls:</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-card</span> <span class=\\\"hljs-attr\\\">bg-variant</span>=<span class=\\\"hljs-string\\\">\\\"light\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span>\\n      <span class=\\\"hljs-attr\\\">label-cols-lg</span>=<span class=\\\"hljs-string\\\">\\\"3\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Shipping Address\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label-size</span>=<span class=\\\"hljs-string\\\">\\\"lg\\\"</span>\\n      <span class=\\\"hljs-attr\\\">label-class</span>=<span class=\\\"hljs-string\\\">\\\"font-weight-bold pt-0\\\"</span>\\n      <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-0\\\"</span>\\n    &gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span>\\n        <span class=\\\"hljs-attr\\\">label-cols-sm</span>=<span class=\\\"hljs-string\\\">\\\"3\\\"</span>\\n        <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Street:\\\"</span>\\n        <span class=\\\"hljs-attr\\\">label-align-sm</span>=<span class=\\\"hljs-string\\\">\\\"right\\\"</span>\\n        <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"nestedStreet\\\"</span>\\n      &gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"nestedStreet\\\"</span> /&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span> <span class=\\\"hljs-attr\\\">label-cols-sm</span>=<span class=\\\"hljs-string\\\">\\\"3\\\"</span> <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"City:\\\"</span> <span class=\\\"hljs-attr\\\">label-align-sm</span>=<span class=\\\"hljs-string\\\">\\\"right\\\"</span> <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"nestedCity\\\"</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"nestedCity\\\"</span> /&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span> <span class=\\\"hljs-attr\\\">label-cols-sm</span>=<span class=\\\"hljs-string\\\">\\\"3\\\"</span> <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"State:\\\"</span> <span class=\\\"hljs-attr\\\">label-align-sm</span>=<span class=\\\"hljs-string\\\">\\\"right\\\"</span> <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"nestedState\\\"</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"nestedState\\\"</span> /&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span>\\n        <span class=\\\"hljs-attr\\\">label-cols-sm</span>=<span class=\\\"hljs-string\\\">\\\"3\\\"</span>\\n        <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Country:\\\"</span>\\n        <span class=\\\"hljs-attr\\\">label-align-sm</span>=<span class=\\\"hljs-string\\\">\\\"right\\\"</span>\\n        <span class=\\\"hljs-attr\\\">label-for</span>=<span class=\\\"hljs-string\\\">\\\"nestedCountry\\\"</span>\\n      &gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-input</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"nestedCountry\\\"</span> /&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-group</span> <span class=\\\"hljs-attr\\\">label-cols-sm</span>=<span class=\\\"hljs-string\\\">\\\"3\\\"</span> <span class=\\\"hljs-attr\\\">label</span>=<span class=\\\"hljs-string\\\">\\\"Ship via:\\\"</span> <span class=\\\"hljs-attr\\\">label-align-sm</span>=<span class=\\\"hljs-string\\\">\\\"right\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-0\\\"</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-form-radio-group</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"pt-2\\\"</span> <span class=\\\"hljs-attr\\\">:options</span>=<span class=\\\"hljs-string\\\">\\\"['Air', 'Courier', 'Mail']\\\"</span> /&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-form-group</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-card</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- b-form-group-nested.vue --&gt;</span></pre><h2 id=\\\"disabled-form-group\\\">Disabled form-group</h2>\\n<p>Setting the <code>disabled</code> prop will disable the rendered <code>&lt;fieldset&gt;</code> and, on most browsers, will\\ndisable all the input elements contained within the fieldset.</p>\\n<p><code>disabled</code> has no effect when <code>label-for</code> is set (as a <code>fieldset</code> element is not rendered).</p>\\n<h2 id=\\\"validation-state-feedback\\\">Validation state feedback</h2>\\n<p>Bootstrap includes validation styles for <code>valid</code> and <code>invalid</code> states on most form controls.</p>\\n<p>Generally speaking, you’ll want to use a particular state for specific types of feedback:</p>\\n<ul>\\n<li><code>&#39;invalid&#39;</code> is great for when there’s a blocking or required field. A user must fill in this field\\nproperly to submit the form.</li>\\n<li><code>&#39;valid&#39;</code> is ideal for situations when you have per-field validation throughout a form and want to\\nencourage a user through the rest of the fields.</li>\\n<li><code>null</code> Displays no validation state</li>\\n</ul>\\n<p>To apply one of the contextual states on <code>&lt;b-form-group&gt;</code>, set the <code>state</code> prop to <code>&#39;invalid&#39;</code> (or\\n<code>false</code>), <code>&#39;valid&#39;</code> (or <code>true</code>), or <code>null</code>. This will programmatically show the appropriate feedback\\ntext.</p>\\n<p>Bootstrap V4 uses sibling CSS selectors of <code>:invalid</code> or <code>:valid</code> inputs to show the feedback text.\\nSome form controls (such as checkboxes, radios, and file inputs, or inputs inside input-groups) are\\nwrapped in additional markup that will no longer make the feedback text a sibling of the input, and\\nhence the feedback will not show. In these situations you will need to set the validity <code>state</code> on\\nthe <code>&lt;b-form-group&gt;</code> <em>as well as</em> the input.</p>\\n<p>Feedback will be shown if the parent <code>&lt;b-form&gt;</code> component does <em>not</em> have the <code>novalidate</code> prop set\\n(or set to <code>false</code>) along with the <code>vadidated</code> prop set (and the input fails or passes native\\nbrowser validation constraints such as <code>required</code>). Refer to Bootstrap V4&#39;s\\n<a href=\\\"http://getbootstrap.com/docs/4.0/components/forms/#validation\\\">Form component</a> documentation for\\ndetails on validation methods.</p>\\n<p>You should always provide content via the <code>invalid-feedback</code> prop (or slot) to aid users using\\nassistive technologies when setting a contextual <code>invalid</code> state.</p>\\n<h3 id=\\\"invalid-feedback\\\">Invalid feedback</h3>\\n<p>Show optional invalid state feedback text to provide textual state feedback (html supported) by\\nsetting the prop <code>invalid-feedback</code> or using the named slot <code>invalid-feedback</code>.</p>\\n<p>Invalid feedback is rendered using the\\n<a href=\\\"/docs/components/form#helper-components\\\"><code>&lt;b-form-invalid-feedback&gt;</code></a> form sub-component.</p>\\n<p><strong>Note:</strong> The prop <code>feedback</code> has been deprecated in favor of the <code>invalid-feedback</code> prop.</p>\\n<h3 id=\\\"valid-feedback\\\">Valid feedback</h3>\\n<p>Show optional valid state feedback text to provide textual state feedback (html supported) by\\nsetting the prop <code>valid-feedback</code> or using the named slot <code>valid-feedback</code>.</p>\\n<p>Valid feedback is rendered using the\\n<a href=\\\"/docs/components/form#helper-components\\\"><code>&lt;b-form-valid-feedback&gt;</code></a> form sub-component.</p>\\n<h3 id=\\\"feedback-style\\\">Feedback style</h3>\\n<p>By default, when visible, feedback (valid or invalid) will show as a block of text. You can change\\nthe feedback so that it shows as a static tooltip when visible, by setting the prop <code>tooltip</code> to\\n<code>true</code>.</p>\\n<h3 id=\\\"feedback-limitations\\\">Feedback limitations</h3>\\n<p><strong>Note:</strong> When using <code>&lt;b-input-group&gt;</code>, <code>&lt;b-form-file&gt;</code>, <code>&lt;b-form-radio-group&gt;</code>, <code>&lt;b-form-radio&gt;</code>,\\n<code>&lt;b-form-checkbox-group&gt;</code> or <code>&lt;b-form-checkbox&gt;</code> inside a <code>&lt;b-form-group&gt;</code>, setting an invalid (or\\nvalid) <code>state</code> on the <code>input</code> alone will <strong>not</strong> trigger the invalid (or valid) feedback to show\\n(due to limitations with the new Bootstrap V4 validation CSS). To get around this, <strong>you must also</strong>\\nset the invalid/valid <code>state</code> on <code>&lt;b-form-group&gt;</code>. Native browser validation will <strong>not</strong> trigger\\nthe invalid feedback to show when using one of the above mentioned form controls.</p>\\n<h2 id=\\\"accessibility\\\">Accessibility</h2>\\n<p>To enable auto-generation of <code>aria-*</code> attributes, you should supply a unique <code>id</code> prop to\\n<code>&lt;b-form-group&gt;</code>. This will associate the help text and feedback text to the <code>&lt;b-form-group&gt;</code> and,\\nindirectly to its input control(s).</p>\\n<p>By default, when no <code>label-for</code> value is provided, <code>&lt;b-form-group&gt;</code> renders the input control(s)\\ninside a an HTML <code>&lt;fieldset&gt;</code> element with the label content placed inside the fieldset&#39;s <code>&lt;legend&gt;</code>\\nelement. By nature of this markup, the legend content is automatically associated to the containing\\ninput control(s).</p>\\n<p>It is <strong>highly recommended</strong> that you provide a unique <code>id</code> prop on your input element and set the\\n<code>label-for</code> prop to this id, when you have only a single input in the <code>&lt;b-form-group&gt;</code>.</p>\\n<p>When multiple form controls are placed inside <code>&lt;b-form-group&gt;</code> (i.e. a series or radio or checkbox\\ninputs, or a series of related inputs), <strong>do not set</strong> the <code>label-for</code> prop, as a label can only be\\nassociated with a single input. It is best to use the default rendered markup that produces a\\n<code>&lt;fieldset&gt;</code> + <code>&lt;legend&gt;</code> which will describe the group of inputs.</p>\\n<p>When placing multiple form controls inside a <code>&lt;b-form-group&gt;</code> (and you are not nesting\\n<code>&lt;b-form-group&gt;</code>components), it is recommended to give each control its own associated <code>&lt;label&gt;</code>\\n(which may be visually hidden using the <code>.sr-only</code> class) and set the labels <code>for</code> attribute to the\\n<code>id</code> of the associated input control. Alternatively, you can set the <code>aria-label</code> attribute on each\\ninput control instead of using a <code>&lt;label&gt;</code>. For <code>&lt;b-form-radio&gt;</code> and <code>&lt;b-form-checkbox&gt;</code> (or the\\ngroup versions), you do not need to set individual labels, as the rendered markup for these types of\\ninputs already includes a <code>&lt;label&gt;</code> element.</p>\\n<!-- Component reference added automatically from component package.json -->\\n\";"],"sourceRoot":""}