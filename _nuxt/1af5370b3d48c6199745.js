(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{335:function(n,t){n.exports='<h1 id="form-tags" class="bv-no-focus-ring"><span class="bd-content-title">Form tags</span></h1>\n<p class="bd-lead">Lightweight custom tagged input form control, with options for customized interface rendering,\nduplicate tag detection and optional tag validation.</p>\n<p>Tags are arrays of short strings, used in various ways such as assigning categories. Use the default\nuser interface, or create your own custom interface via the use of the default scoped slot.</p>\n<p>The tagged input was added in BootstrapVue release <code translate="no" class="notranslate text-nowrap">v2.2.0</code>.</p>\n<h2 id="basic-usage" class="bv-no-focus-ring"><span class="bd-content-title">Basic usage<a class="anchorjs-link" href="#basic-usage" aria-label="Anchor"></a></span></h2>\n<p>Tags will have any leading and tailing whitespace removed, and duplicate tags are not permitted.\nTags that contain spaces are permitted by default.</p>\n<p>Tags are added by clicking the <strong>Add</strong> button, pressing the <kbd class="notranslate" translate="no">ENTER</kbd> key or optionally when\nthe <code translate="no" class="notranslate text-nowrap">change</code> event fires on the new tag input (i.e. when focus moves from the input). The <strong>Add</strong>\nbutton will only appear when the user has entered a new tag value.</p>\n<p><strong>Default render:</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">\'apple\'</span>, <span class="hljs-string">\'orange\'</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-example.vue --&gt;</span></pre><p>You can disable adding a new tag when pressing <kbd class="notranslate" translate="no">ENTER</kbd> via the <code translate="no" class="notranslate text-nowrap">no-add-on-enter</code> prop, and\nenable adding a tag on the input&#39;s <code translate="no" class="notranslate text-nowrap">change</code> event via the <code translate="no" class="notranslate text-nowrap">add-on-change</code> prop.</p>\n<h2 id="tag-creation-using-separators" class="bv-no-focus-ring"><span class="bd-content-title">Tag creation using separators<a class="anchorjs-link" href="#tag-creation-using-separators" aria-label="Anchor"></a></span></h2>\n<p>To auto create tags when a separator character is typed (i.e. <kbd class="notranslate" translate="no">SPACE</kbd>, <kbd class="notranslate" translate="no">,</kbd>, etc),\nset the <code translate="no" class="notranslate text-nowrap">separator</code> prop to the character that will trigger the tag to be added. If multiple\nseparator characters are needed, then include them as a single string (i.e. <code translate="no" class="notranslate text-nowrap">&#39; ,;&#39;</code>), or an array of\ncharacters (i.e. <code translate="no" class="notranslate text-nowrap">[&#39; &#39;, &#39;,&#39;, &#39;;&#39;]</code>), which will trigger a new tag to be added when <kbd class="notranslate" translate="no">SPACE</kbd>,\n<kbd class="notranslate" translate="no">,</kbd>, <em>or</em> <kbd class="notranslate" translate="no">;</kbd> are typed). Separators must be a single character.</p>\n<p>The following example will auto create a tag when <kbd class="notranslate" translate="no">SPACE</KBD>, <kbd class="notranslate" translate="no">,</kbd>, or <kbd class="notranslate" translate="no">;</kbd>\nare typed:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">" ,;"</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter new tags separated by space, comma or semicolon"</span>\n      <span class="hljs-attr">no-add-on-enter</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">\'one\'</span>, <span class="hljs-string">\'two\'</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-separator.vue --&gt;</span></pre><h2 id="last-tag-removal-via-delete-keypress" class="bv-no-focus-ring"><span class="bd-content-title">Last tag removal via delete keypress<a class="anchorjs-link" href="#last-tag-removal-via-delete-keypress" aria-label="Anchor"></a></span></h2>\n<p>When the prop <code translate="no" class="notranslate text-nowrap">remove-on-delete</code> is set, and the user presses <kbd class="notranslate" translate="no">DEL</kbd> <em>and</em> the input value\nis empty, the last tag in the tag list will be removed.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">" "</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter new tags separated by space"</span>\n      <span class="hljs-attr">remove-on-delete</span>\n      <span class="hljs-attr">no-add-on-enter</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">\'apple\'</span>, <span class="hljs-string">\'orange\'</span>, <span class="hljs-string">\'grape\'</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-remove-on-delete.vue --&gt;</span></pre><h2 id="styling-options" class="bv-no-focus-ring"><span class="bd-content-title">Styling Options<a class="anchorjs-link" href="#styling-options" aria-label="Anchor"></a></span></h2>\n<p>Several props are available to alter the basic styling of the default tagged interface:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Prop</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">tag-pills</code></td>\n<td>Renders the tags with the appearance of pills</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">tag-variant</code></td>\n<td>Applies one of the Bootstrap contextual variant theme colors to the tags</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">size</code></td>\n<td>Set the size of the component&#39;s appearance. &#39;sm&#39;, &#39;md&#39; (default), or &#39;lg&#39;</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">placeholder</code></td>\n<td>The placeholder text for the new tag input element</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">state</code></td>\n<td>Sets the contextual state of the control. Set to <code translate="no" class="notranslate text-nowrap">true</code> (for valid), <code translate="no" class="notranslate text-nowrap">false</code> (for invalid), or <code translate="no" class="notranslate text-nowrap">null</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">disabled</code></td>\n<td>Places the component in a disabled state</td>\n</tr>\n</tbody></table>\n</div><p>For additional props, see the component reference section at the bottom of this page.</p>\n<p>The focus and validation state styling of the component relies upon BootstrapVue&#39;s custom CSS.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      <span class="hljs-attr">tag-variant</span>=<span class="hljs-string">"primary"</span>\n      <span class="hljs-attr">tag-pills</span>\n      <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">" "</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter new tags separated by space"</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">\'apple\'</span>, <span class="hljs-string">\'orange\'</span>, <span class="hljs-string">\'grape\'</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-style-options.vue --&gt;</span></pre><h2 id="using-with-native-browser-form-submission" class="bv-no-focus-ring"><span class="bd-content-title">Using with native browser <code translate="no" class="notranslate text-nowrap">&lt;form&gt;</code> submission<a class="anchorjs-link" href="#using-with-native-browser-form-submission" aria-label="Anchor"></a></span></h2>\n<p>The value of the tagged input will not be submitted via standard form <code translate="no" class="notranslate text-nowrap">action</code> unless you provide a\nname via the <code translate="no" class="notranslate text-nowrap">name</code> prop. When a name is provided, <code translate="no" class="notranslate text-nowrap">&lt;b-form-tags&gt;</code> will create a hidden <code translate="no" class="notranslate text-nowrap">&lt;input&gt;</code>\nfor each tag. The hidden input will have the <code translate="no" class="notranslate text-nowrap">name</code> attribute set to the value of the <code translate="no" class="notranslate text-nowrap">name</code> prop.</p>\n<p>The hidden inputs will also be generated when using\n<a href="#custom-rendering-with-default-scoped-slot" class="font-weight-bold">custom rendering</a> (when the <code translate="no" class="notranslate text-nowrap">name</code> prop is set).</p>\n<h2 id="tag-validation" class="bv-no-focus-ring"><span class="bd-content-title">Tag validation<a class="anchorjs-link" href="#tag-validation" aria-label="Anchor"></a></span></h2>\n<p>By default, <code translate="no" class="notranslate text-nowrap">&lt;b-form-tags&gt;</code> detects when the user is attempting to enter a (case-sensitive)\nduplicate tag, and will provide integrated feedback to the user.</p>\n<p>You can optionally provide a tag validator method via the <code translate="no" class="notranslate text-nowrap">tag-validator</code> prop. The validator\nfunction will receive one argument which is the tag being added, and should return either <code translate="no" class="notranslate text-nowrap">true</code> if\nthe tag passes validation and can be added, or <code translate="no" class="notranslate text-nowrap">false</code> if the tag fails validation (in which case it\nis not added to the array of tags). integrated feedback will be provided to the user listing the\ninvalid tag(s) that could not be added.</p>\n<p>Tag validation occurs only for tags added via user input. Changes to the tags via the <code translate="no" class="notranslate text-nowrap">v-model</code> are\nnot validated.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Tags validation example"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"tags"</span>\n        <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>\n        <span class="hljs-attr">:tag-validator</span>=<span class="hljs-string">"tagValidator"</span>\n        <span class="hljs-attr">separator</span>=<span class="hljs-string">" "</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- The following slots are for b-form-group --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:invalid-feedback</span>&gt;</span>\n        You must provide at least 3 tags and no more than 8\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:description</span>&gt;</span>\n        Tags must be 3 to 5 characters in length and all lower\n        case. Enter tags separated by spaces or press enter.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">tags</span>: [],\n        <span class="hljs-attr">dirty</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      state() {\n        <span class="hljs-comment">// Overall component validation state</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.dirty ? (<span class="hljs-keyword">this</span>.tags.length &gt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-keyword">this</span>.tags.length &lt; <span class="hljs-number">9</span>) : <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">watch</span>: {\n      tags(newVal, oldVal) {\n        <span class="hljs-comment">// Set the dirty flag on first change to the tags array</span>\n        <span class="hljs-keyword">this</span>.dirty = <span class="hljs-literal">true</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      tagValidator(tag) {\n        <span class="hljs-comment">// Individual tag validator function</span>\n        <span class="hljs-keyword">return</span> tag === tag.toLowerCase() &amp;&amp; tag.length &gt; <span class="hljs-number">2</span> &amp;&amp; tag.length &lt; <span class="hljs-number">6</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-validation-feedback.vue --&gt;</span></pre><h3 id="detecting-new-invalid-and-duplicate-tags" class="bv-no-focus-ring"><span class="bd-content-title">Detecting new, invalid, and duplicate tags<a class="anchorjs-link" href="#detecting-new-invalid-and-duplicate-tags" aria-label="Anchor"></a></span></h3>\n<p>The event <code translate="no" class="notranslate text-nowrap">tag-state</code> will be emitted whenever new tags are entered into the new tag input element,\ntags that do not pass validation, or duplicate tags are detected. The event handler will receive\nthree arrays as it&#39;s arguments:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">validTags</code> (tags that pass validation)</li>\n<li><code translate="no" class="notranslate text-nowrap">invalidTags</code> (tags that do not pass validation)</li>\n<li><code translate="no" class="notranslate text-nowrap">duplicateTags</code> (tags that would be a duplicate of existing or validTags).</li>\n</ul>\n<p>The event will be emitted only when the new tag input changes (characters are entered that would be\nconsidered part of a tag), or when the user attempts to add a tag (i.e. via <kbd class="notranslate" translate="no">ENTER</kbd>,\nclicking the <strong>Add</strong> button, or entering a separator). The three arrays will be empty when the user\nclears the new tag input element (or contains just spaces).</p>\n<p>If you are providing your own feedback for duplicate and invalid tags (via the use of the\n<code translate="no" class="notranslate text-nowrap">tag-state</code> event) outside of the <code translate="no" class="notranslate text-nowrap">&lt;b-form-tags&gt;</code> component, you can disable the built in duplicate\nand invalid messages by setting the props <code translate="no" class="notranslate text-nowrap">duplicate-tag-text</code> and <code translate="no" class="notranslate text-nowrap">invalid-tag-text</code> (respectively)\nto either an empty string (<code translate="no" class="notranslate text-nowrap">&#39;&#39;</code>) or <code translate="no" class="notranslate text-nowrap">null</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"tags"</span>\n      <span class="hljs-attr">:tag-validator</span>=<span class="hljs-string">"validator"</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter tags (3-5 characters) separated by space"</span>\n      <span class="hljs-attr">separator</span>=<span class="hljs-string">" "</span>\n      @<span class="hljs-attr">tag-state</span>=<span class="hljs-string">"onTagState"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>Tags: {{ tags }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Event values:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>validTags: {{ validTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>invalidTags: {{ invalidTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>duplicateTags: {{ duplicateTags }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">tags</span>: [],\n        <span class="hljs-attr">validTags</span>: [],\n        <span class="hljs-attr">invalidTags</span>: [],\n        <span class="hljs-attr">duplicateTags</span>: []\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      onTagState(valid, invalid, duplicate) {\n        <span class="hljs-keyword">this</span>.validTags = valid\n        <span class="hljs-keyword">this</span>.invalidTags = invalid\n        <span class="hljs-keyword">this</span>.duplicateTags = duplicate\n      },\n      validator(tag) {\n        <span class="hljs-keyword">return</span> tag.length &gt; <span class="hljs-number">2</span> &amp;&amp; tag.length &lt; <span class="hljs-number">6</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-tags-state-event.vue --&gt;</span></pre><h2 id="custom-rendering-with-default-scoped-slot" class="bv-no-focus-ring"><span class="bd-content-title">Custom rendering with default scoped slot<a class="anchorjs-link" href="#custom-rendering-with-default-scoped-slot" aria-label="Anchor"></a></span></h2>\n<p>If you fancy a different look and feel for the tags control, you can provide your own custom\nrendering via the default scoped slot. You can either create your own tags, or use our helper\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code> component.</p>\n<h3 id="scope-properties" class="bv-no-focus-ring"><span class="bd-content-title">Scope properties<a class="anchorjs-link" href="#scope-properties" aria-label="Anchor"></a></span></h3>\n<p>The default scoped slot provides numerous properties and methods for use in rendering your custom\ninterface. Not all properties or methods are required to generate your interface.</p>\n<p>The default slot scope properties are as follows:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">tags</code></td>\n<td>Array</td>\n<td>Array of current tag strings</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">inputAttrs</code></td>\n<td>Object</td>\n<td>Object of attributes to apply to the new tag input element via <code translate="no" class="notranslate text-nowrap">v-bind=&quot;inputAttrs&quot;</code>. See below for details</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">inputHandlers</code></td>\n<td>Object</td>\n<td>Object of event handlers to apply to the new tag input element via <code translate="no" class="notranslate text-nowrap">v-on=&quot;inputHandlers&quot;</code>. See below for details</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">removeTag</code></td>\n<td>Function</td>\n<td>Method to remove a tag. Accepts one argument which is the tag value to remove</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">addTag</code></td>\n<td>Function</td>\n<td>Method to add a new tag. Assumes the tag is the value of the input, but optionally accepts one argument which is the tag value to be added</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">inputId</code></td>\n<td>String</td>\n<td>ID to add to the new tag input element. Defaults to prop <code translate="no" class="notranslate text-nowrap">input-id</code>. If not provided a unique ID is auto-generated. Also available via &#39;inputAttrs.id&#39;</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">isInvalid</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">true</code> if the user input contains invalid tag(s)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">invalidTags</code></td>\n<td>Array</td>\n<td>Array of the invalid tag(s) the user has entered</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">isDuplicate</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">true</code> if the user input contains duplicate tag(s)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">duplicateTags</code></td>\n<td>Array</td>\n<td>Array of the duplicate tag(s) the user has entered</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">disableAddButton</code></td>\n<td>Boolean</td>\n<td>Will be <code translate="no" class="notranslate text-nowrap">true</code> if the tag(s) in the input cannot be added (all invalid and/or duplicates)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">disabled</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">true</code> if the component is in the disabled state. Value of the <code translate="no" class="notranslate text-nowrap">disabled</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">state</code></td>\n<td>Boolean</td>\n<td>The contextual state of the component. Value of the <code translate="no" class="notranslate text-nowrap">state</code> prop. Possible values are <code translate="no" class="notranslate text-nowrap">true</code>, <code translate="no" class="notranslate text-nowrap">false</code> or <code translate="no" class="notranslate text-nowrap">null</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">size</code></td>\n<td>String</td>\n<td>The value of the <code translate="no" class="notranslate text-nowrap">size</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">separator</code></td>\n<td>String</td>\n<td>The value of the <code translate="no" class="notranslate text-nowrap">separator</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">placeholder</code></td>\n<td>String</td>\n<td>The value of the <code translate="no" class="notranslate text-nowrap">placeholder</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">tagRemoveLabel</code></td>\n<td>String</td>\n<td>Value of the <code translate="no" class="notranslate text-nowrap">tag-remove-label</code> prop. Used as the <code translate="no" class="notranslate text-nowrap">aria-label</code> attribute on the remove button of tags</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">tagVariant</code></td>\n<td>String</td>\n<td>The value of the <code translate="no" class="notranslate text-nowrap">tag-variant</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">tagClass</code></td>\n<td>String, Array, or Object</td>\n<td>The value of the <code translate="no" class="notranslate text-nowrap">tag-variant</code> prop. Class (or classes) to apply to the tag elements</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">addButtonText</code></td>\n<td>String</td>\n<td>The value of the <code translate="no" class="notranslate text-nowrap">add-button-text</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">addButtonVariant</code></td>\n<td>String</td>\n<td>The value of the <code translate="no" class="notranslate text-nowrap">add-button-variant</code> prop</td>\n</tr>\n</tbody></table>\n</div><h4 id="inputattrs-object-properties" class="bv-no-focus-ring"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">inputAttrs</code> object properties<a class="anchorjs-link" href="#inputattrs-object-properties" aria-label="Anchor"></a></span></h4>\n<p>The <code translate="no" class="notranslate text-nowrap">inputAttrs</code> object contains attributes to bind (<code translate="no" class="notranslate text-nowrap">v-bind</code>) to the new tag input element.</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">id</code></td>\n<td>String</td>\n<td>the <code translate="no" class="notranslate text-nowrap">id</code> attribute for the new tag input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">value</code></td>\n<td>String</td>\n<td>The <code translate="no" class="notranslate text-nowrap">value</code> attribute for the new tag input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">disabled</code></td>\n<td>Boolean</td>\n<td>The <code translate="no" class="notranslate text-nowrap">disabled</code> attribute for the new tag input. Value of the <code translate="no" class="notranslate text-nowrap">disabled</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">form</code></td>\n<td>String</td>\n<td>The <code translate="no" class="notranslate text-nowrap">form</code> attribute for the new tag input. Value of the <code translate="no" class="notranslate text-nowrap">form</code> prop</td>\n</tr>\n</tbody></table>\n</div><p>The <code translate="no" class="notranslate text-nowrap">inputAttrs</code> object will also include any attributes set via the <code translate="no" class="notranslate text-nowrap">input-attrs</code> prop. Note that\nthe above attributes take precedence over any of the same attributes specified in the <code translate="no" class="notranslate text-nowrap">input-attrs</code>\nprop.</p>\n<h4 id="inputhandlers-object-properties" class="bv-no-focus-ring"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">inputHandlers</code> object properties<a class="anchorjs-link" href="#inputhandlers-object-properties" aria-label="Anchor"></a></span></h4>\n<p>The <code translate="no" class="notranslate text-nowrap">inputHandlers</code> object contains event handlers to bind (<code translate="no" class="notranslate text-nowrap">v-on</code>) to the new tag input element.</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">input</code></td>\n<td>Function</td>\n<td>Event handler for the input element <code translate="no" class="notranslate text-nowrap">input</code> event. Accepts a single argument of either an event object or a string. Updates the internal v-model for the new tag input element</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">change</code></td>\n<td>Function</td>\n<td>Event handler for the input element <code translate="no" class="notranslate text-nowrap">change</code> event. Accepts a single argument of either an event object or a string. Change will trigger adding the tag.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">keydown</code></td>\n<td>Function</td>\n<td>Event handler for the input element <code translate="no" class="notranslate text-nowrap">keydown</code> <kbd class="notranslate" translate="no">ENTER</kbd> and <kbd class="notranslate" translate="no">DEL</kbd> events. Accepts a single argument which is the native keydown event object</td>\n</tr>\n</tbody></table>\n</div><p>The <code translate="no" class="notranslate text-nowrap">change</code> handler, when needed, must be enabled via the <code translate="no" class="notranslate text-nowrap">add-on-change</code> prop, otherwise it is a\nnoop method.</p>\n<h3 id="using-native-browser-inputs" class="bv-no-focus-ring"><span class="bd-content-title">Using native browser inputs<a class="anchorjs-link" href="#using-native-browser-inputs" aria-label="Anchor"></a></span></h3>\n<p>The scope contains attributes and event handlers that can be directly bound to native <code translate="no" class="notranslate text-nowrap">&lt;input&gt;</code> or\n<code translate="no" class="notranslate text-nowrap">&lt;select&gt;</code> elements.</p>\n<p>The following example includes the suggested ARIA attributes and roles needed for screen-reader\nsupport.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">"{ tags, inputAttrs, inputHandlers, addTag, removeTag }"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">aria-controls</span>=<span class="hljs-string">"my-custom-tags-list"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"inputAttrs"</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">"inputHandlers"</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"New tag - Press enter to add"</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addTag()"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>\n          <span class="hljs-attr">id</span>=<span class="hljs-string">"my-custom-tags-list"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"list-unstyled d-inline-flex flex-wrap mb-0"</span>\n          <span class="hljs-attr">aria-live</span>=<span class="hljs-string">"polite"</span>\n          <span class="hljs-attr">aria-atomic</span>=<span class="hljs-string">"false"</span>\n          <span class="hljs-attr">aria-relevant</span>=<span class="hljs-string">"additions removals"</span>\n        &gt;</span>\n          <span class="hljs-comment">&lt;!-- Always use the tag value as the :key, not the index! --&gt;</span>\n          <span class="hljs-comment">&lt;!-- Otherwise screen readers will not read the tag\n               additions and removals correctly --&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>\n            <span class="hljs-attr">v-for</span>=<span class="hljs-string">"tag in tags"</span>\n            <span class="hljs-attr">:key</span>=<span class="hljs-string">"tag"</span>\n            <span class="hljs-attr">:id</span>=<span class="hljs-string">"`my-custom-tags-tag_${tag.replace(/\\s/g, \'_\')}_`"</span>\n            <span class="hljs-attr">tag</span>=<span class="hljs-string">"li"</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-1 mr-1"</span>\n            <span class="hljs-attr">body-class</span>=<span class="hljs-string">"py-1 pr-2 text-nowrap"</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n              @<span class="hljs-attr">click</span>=<span class="hljs-string">"removeTag(tag)"</span>\n              <span class="hljs-attr">variant</span>=<span class="hljs-string">"link"</span>\n              <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n              <span class="hljs-attr">:aria-controls</span>=<span class="hljs-string">"`my-custom-tags-tag_${tag.replace(/\\s/g, \'_\')}_`"</span>\n            &gt;</span>remove<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">\'apple\'</span>, <span class="hljs-string">\'orange\'</span>, <span class="hljs-string">\'banana\'</span>, <span class="hljs-string">\'pear\'</span>, <span class="hljs-string">\'peach\'</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-native.vue --&gt;</span></pre><h3 id="using-custom-form-components" class="bv-no-focus-ring"><span class="bd-content-title">Using custom form components<a class="anchorjs-link" href="#using-custom-form-components" aria-label="Anchor"></a></span></h3>\n<p>The scope contains attributes and event handlers that can be directly bound to <em>most</em> custom inputs\nor select components (the event handlers accept either a string tag value <em>or</em> a native event\nobject). Any component that emits <code translate="no" class="notranslate text-nowrap">input</code> as characters are typed, and (optionally) emits <code translate="no" class="notranslate text-nowrap">change</code>\nwhen the input value changes (i.e on blur or select), and uses the prop <code translate="no" class="notranslate text-nowrap">value</code> as the v-model,\nshould work without modification.</p>\n<p>In this example, we are using the <a href="#b-form-tag-helper-component" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code> helper component</a>,\nbut feel free to render tags using standard HTML or components.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">"{ tags, inputAttrs, inputHandlers, tagVariant, addTag, removeTag }"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"inputAttrs"</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">"inputHandlers"</span>\n            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"New tag - Press enter to add"</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addTag()"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-inline-block"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"font-size: 1.5rem;"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n            <span class="hljs-attr">v-for</span>=<span class="hljs-string">"tag in tags"</span>\n            @<span class="hljs-attr">remove</span>=<span class="hljs-string">"removeTag(tag)"</span>\n            <span class="hljs-attr">:key</span>=<span class="hljs-string">"tag"</span>\n            <span class="hljs-attr">:title</span>=<span class="hljs-string">"tag"</span>\n            <span class="hljs-attr">:variant</span>=<span class="hljs-string">"tagVariant"</span>\n            <span class="hljs-attr">class</span>=<span class="hljs-string">"mr-1"</span>\n          &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: [<span class="hljs-string">\'apple\'</span>, <span class="hljs-string">\'orange\'</span>, <span class="hljs-string">\'banana\'</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-components-input.vue --&gt;</span></pre><p>The following is an example of using a custom select component for choosing from a pre-defined set\nof tags:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Tagged input using select"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- prop `add-on-change` is needed to enable adding tags vie the `change` event --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">add-on-change</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">"{ tags, inputAttrs, inputHandlers, disabled, removeTag }"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"tags.length &gt; 0"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list-inline d-inline-block mb-2"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"tag in tags"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list-inline-item"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n                @<span class="hljs-attr">remove</span>=<span class="hljs-string">"removeTag(tag)"</span>\n                <span class="hljs-attr">:title</span>=<span class="hljs-string">"tag"</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled"</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">"info"</span>\n              &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"inputAttrs"</span>\n            <span class="hljs-attr">v-on</span>=<span class="hljs-string">"inputHandlers"</span>\n            <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled || availableOptions.length === 0"</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">"availableOptions"</span>\n          &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:first</span>&gt;</span>\n              <span class="hljs-comment">&lt;!-- This is required to prevent bugs with Safari --&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>&gt;</span>Choose a tag...<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">options</span>: [<span class="hljs-string">\'Apple\'</span>, <span class="hljs-string">\'Orange\'</span>, <span class="hljs-string">\'Banana\'</span>, <span class="hljs-string">\'Lime\'</span>, <span class="hljs-string">\'Peach\'</span>, <span class="hljs-string">\'Chocolate\'</span>, <span class="hljs-string">\'Strawberry\'</span>],\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      availableOptions() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> <span class="hljs-keyword">this</span>.value.indexOf(opt) === <span class="hljs-number">-1</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-components-select.vue --&gt;</span></pre><p>If the custom input is using custom event names that mimic <code translate="no" class="notranslate text-nowrap">input</code> and <code translate="no" class="notranslate text-nowrap">change</code>, and/or needs the\n<code translate="no" class="notranslate text-nowrap">.native</code> modifier for keydown, you can do something similar to below to bind the event handlers:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">"{ inputAttrs, inputHandlers, removeTag, tags }"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">custom-input</span>\n    <span class="hljs-attr">:id</span>=<span class="hljs-string">"inputAttrs.id"</span>\n    <span class="hljs-attr">:vistom-value-prop</span>=<span class="hljs-string">"inputAttrs.value"</span>\n    @<span class="hljs-attr">custom-input-event</span>=<span class="hljs-string">"inputHandlers.input($event)"</span>\n    @<span class="hljs-attr">custom-change-event</span>=<span class="hljs-string">"inputHandlers.change($event)"</span>\n    @<span class="hljs-attr">keydown.native</span>=<span class="hljs-string">"inputHandlers.keydown($event)"</span>\n  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">custom-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"tag in tags"</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Your custom tag list here --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></pre><p>The <code translate="no" class="notranslate text-nowrap">inputHandlers.input</code> handler <strong>must</strong> be bound to an event that updates with each character\nentered by the user for the <em>as-you-type</em> tag validation to work.</p>\n<h3 id="advanced-custom-rendering-usage" class="bv-no-focus-ring"><span class="bd-content-title">Advanced custom rendering usage<a class="anchorjs-link" href="#advanced-custom-rendering-usage" aria-label="Anchor"></a></span></h3>\n<p>In situations where the <code translate="no" class="notranslate text-nowrap">inputHandlers</code> will not work with your custom input, or if you need greater\ncontrol over tag creation, you can take advantage of the additional properties provided via the\ndefault slot&#39;s scope.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">switch</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"disabled"</span>&gt;</span>Disable<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span>\n      @<span class="hljs-attr">input</span>=<span class="hljs-string">"resetInputValue()"</span>\n      <span class="hljs-attr">tag-variant</span>=<span class="hljs-string">"success"</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2 mt-2"</span>\n      <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled"</span>\n      <span class="hljs-attr">no-outer-focus</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter a new tag value and click Add"</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">"{tags, inputId, placeholder, disabled, addTag, removeTag }"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span>&gt;</span>\n          <span class="hljs-comment">&lt;!-- Always bind the id to the input so that it can be focused when needed --&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">"newTag"</span>\n            <span class="hljs-attr">:id</span>=<span class="hljs-string">"inputId"</span>\n            <span class="hljs-attr">:placeholder</span>=<span class="hljs-string">"placeholder"</span>\n            <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled"</span>\n            <span class="hljs-attr">:formatter</span>=<span class="hljs-string">"formatter"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"addTag(newTag)"</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>&gt;</span>\n          Duplicate tag value cannot be added again!\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"tags.length &gt; 0"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"tag in tags"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"`Tag: ${tag}`"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"d-flex align-items-center"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mr-2"</span>&gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled"</span>\n                <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-danger"</span>\n                @<span class="hljs-attr">click</span>=<span class="hljs-string">"removeTag(tag)"</span>\n              &gt;</span>\n                remove tag\n              <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">v-else</span>&gt;</span>\n          There are no tags specified. Add a new tag above.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">newTag</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      state() {\n        <span class="hljs-comment">// Return false (invalid) if new tag is a duplicate</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.value.indexOf(<span class="hljs-keyword">this</span>.newTag.trim()) &gt; <span class="hljs-number">-1</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">null</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      resetInputValue() {\n        <span class="hljs-keyword">this</span>.newTag = <span class="hljs-string">\'\'</span>\n      },\n      formatter(value) {\n        <span class="hljs-keyword">return</span> value.toUpperCase()\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-tags-custom-components-advanced.vue --&gt;</span></pre><p>The following is an example of using the <code translate="no" class="notranslate text-nowrap">&lt;b-dropdown&gt;</code> component for choosing or searching from a\npre-defined set of tags:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Tagged input using dropdown"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">no-outer-focus</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">"{ tags, disabled, addTag, removeTag }"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"tags.length &gt; 0"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list-inline d-inline-block mb-2"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"tag in tags"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"tag"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"list-inline-item"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tag</span>\n                @<span class="hljs-attr">remove</span>=<span class="hljs-string">"removeTag(tag)"</span>\n                <span class="hljs-attr">:title</span>=<span class="hljs-string">"tag"</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled"</span>\n                <span class="hljs-attr">variant</span>=<span class="hljs-string">"info"</span>\n              &gt;</span>{{ tag }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tag</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-secondary"</span> <span class="hljs-attr">block</span> <span class="hljs-attr">menu-class</span>=<span class="hljs-string">"w-100"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:button-content</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-icon</span> <span class="hljs-attr">icon</span>=<span class="hljs-string">"tag-fill"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-icon</span>&gt;</span> Choose tags\n            <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-form</span> @<span class="hljs-attr">submit.stop.prevent</span>=<span class="hljs-string">"() =&gt; {}"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n                <span class="hljs-attr">label-for</span>=<span class="hljs-string">"tag-search-input"</span>\n                <span class="hljs-attr">label</span>=<span class="hljs-string">"Search tags"</span>\n                <span class="hljs-attr">label-cols-md</span>=<span class="hljs-string">"auto"</span>\n                <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>\n                <span class="hljs-attr">label-size</span>=<span class="hljs-string">"sm"</span>\n                <span class="hljs-attr">:description</span>=<span class="hljs-string">"searchDesc"</span>\n                <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"disabled"</span>\n              &gt;</span>\n                <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n                  <span class="hljs-attr">v-model</span>=<span class="hljs-string">"search"</span>\n                  <span class="hljs-attr">id</span>=<span class="hljs-string">"tag-search-input"</span>\n                  <span class="hljs-attr">type</span>=<span class="hljs-string">"search"</span>\n                  <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n                  <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">"off"</span>\n                 &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n              <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-form</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-divider</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-divider</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-item-button</span>\n              <span class="hljs-attr">v-for</span>=<span class="hljs-string">"option in availableOptions"</span>\n              <span class="hljs-attr">:key</span>=<span class="hljs-string">"option"</span>\n              @<span class="hljs-attr">click</span>=<span class="hljs-string">"onOptionClick({ option, addTag })"</span>\n            &gt;</span>\n              {{ option }}\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-item-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-dropdown-text</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"availableOptions.length === 0"</span>&gt;</span>\n              There are no tags available to select\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown-text</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-dropdown</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">options</span>: [<span class="hljs-string">\'Apple\'</span>, <span class="hljs-string">\'Orange\'</span>, <span class="hljs-string">\'Banana\'</span>, <span class="hljs-string">\'Lime\'</span>, <span class="hljs-string">\'Peach\'</span>, <span class="hljs-string">\'Chocolate\'</span>, <span class="hljs-string">\'Strawberry\'</span>],\n        <span class="hljs-attr">search</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">value</span>: []\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      criteria() {\n        <span class="hljs-comment">// Compute the search criteria</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.search.trim().toLowerCase()\n      },\n      availableOptions() {\n        <span class="hljs-keyword">const</span> criteria = <span class="hljs-keyword">this</span>.criteria\n        <span class="hljs-comment">// Filter out already selected options</span>\n        <span class="hljs-keyword">const</span> options = <span class="hljs-keyword">this</span>.options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> <span class="hljs-keyword">this</span>.value.indexOf(opt) === <span class="hljs-number">-1</span>)\n        <span class="hljs-keyword">if</span> (criteria) {\n          <span class="hljs-comment">// Show only options that match criteria</span>\n          <span class="hljs-keyword">return</span> options.filter(<span class="hljs-function"><span class="hljs-params">opt</span> =&gt;</span> opt.toLowerCase().indexOf(criteria) &gt; <span class="hljs-number">-1</span>);\n        }\n        <span class="hljs-comment">// Show all options available</span>\n        <span class="hljs-keyword">return</span> options\n      },\n      searchDesc() {\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.criteria &amp;&amp; <span class="hljs-keyword">this</span>.availableOptions.length === <span class="hljs-number">0</span>) {\n          <span class="hljs-keyword">return</span> <span class="hljs-string">\'There are no tags matching your search criteria\'</span>\n        }\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      onOptionClick({ option, addTag }) {\n        addTag(option)\n        <span class="hljs-keyword">this</span>.search = <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-tags-dropdown-example.vue --&gt;</span></pre><h3 id="creating-wrapper-components" class="bv-no-focus-ring"><span class="bd-content-title">Creating wrapper components<a class="anchorjs-link" href="#creating-wrapper-components" aria-label="Anchor"></a></span></h3>\n<p>You can easily create a custom wrapper component with your preferred rendering style as follows:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-tags</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"value"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"$emit(\'input\', $event)"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">"{ tags, addTag, removeTag, inputAttrs, inputHandlers }"</span>&gt;</span>\n     <span class="hljs-comment">&lt;!-- Place your custom rendering here --&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-tags</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>\n  import { BFormTags } from \'bootstrap-vue\'\n\n  export default {\n    name: \'MyCustomTags",\n    components: { BFormTags },\n    model: {\n      prop: \'value\',\n      event: \'input\'\n    },\n    props: {\n      value: {\n        type: Array,\n        default: () =&gt; []\n      }\n    }\n  }\n<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre><h2 id="b-form-tag-helper-component" class="bv-no-focus-ring"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code> helper component<a class="anchorjs-link" href="#b-form-tag-helper-component" aria-label="Anchor"></a></span></h2>\n<p>BootstrapVue provides the helper component <code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code>, for use with the default scoped slot of\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-tags&gt;</code>. The component is based upon <a href="/docs/components/badge" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-badge&gt;</code></a> and\n<a href="/docs/components/button/#comp-ref-b-button-close" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-button-close&gt;</code></a>.</p>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code> supports the same variants as <code translate="no" class="notranslate text-nowrap">&lt;b-badge&gt;</code> and also supports <code translate="no" class="notranslate text-nowrap">pill</code> styling. Sizing is\nbased on the containing element&#39;s font-size.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">remove</code> event is emitted when the <code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code> remove button is clicked.</p>\n<p>Tags that are too wide for their parent container will automatically have their text content\ntruncated with an ellipsis. For this reason, it is always good practice to supply a title via the\n<code translate="no" class="notranslate text-nowrap">title</code> prop when using the default slot of <code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code> for the tag content.</p>\n<p>Note <code translate="no" class="notranslate text-nowrap">&lt;b-form-tag&gt;</code> requires BootstrapVue&#39;s custom CSS/SCSS for proper styling.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);