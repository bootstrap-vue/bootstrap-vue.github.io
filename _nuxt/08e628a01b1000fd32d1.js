(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{390:function(n,t){n.exports='<h1 id="form-select" class="bv-no-focus-ring"><span class="bd-content-title">Form Select</span></h1>\n<p class="bd-lead">Bootstrap custom <code translate="no" class="notranslate text-nowrap">&lt;select&gt;</code> using custom styles. Optionally specify options based on an array,\narray of objects, or an object.</p>\n<p>Generate your select options by passing an array or object to the <code translate="no" class="notranslate text-nowrap">options</code> props:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Please select an option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'a\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is First option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'b\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Selected Option\'</span> },\n          { <span class="hljs-attr">value</span>: { <span class="hljs-attr">C</span>: <span class="hljs-string">\'3PO\'</span> }, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is an option with object value\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'d\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This one is disabled\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-options.vue --&gt;</span></pre><p>You can even define option groups with the <code translate="no" class="notranslate text-nowrap">options</code> prop:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Please select an option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'a\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is First option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'b\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Selected Option\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'Grouped options\'</span>,\n            <span class="hljs-attr">options</span>: [\n              { <span class="hljs-attr">value</span>: { <span class="hljs-attr">C</span>: <span class="hljs-string">\'3PO\'</span> }, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Option with object value\'</span> },\n              { <span class="hljs-attr">value</span>: { <span class="hljs-attr">R</span>: <span class="hljs-string">\'2D2\'</span> }, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Another option with object value\'</span> }\n            ]\n          }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-options.vue --&gt;</span></pre><p>Or manually provide your options and option groups:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"null"</span>&gt;</span>Please select an option<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"a"</span>&gt;</span>Option A<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"b"</span> <span class="hljs-attr">disabled</span>&gt;</span>Option B (disabled)<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Grouped options"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"{ C: \'3PO\' }"</span>&gt;</span>Option with object value<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"{ R: \'2D2\' }"</span>&gt;</span>Another option with object value<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-manual.vue --&gt;</span></pre><p>Feel free to mix the <code translate="no" class="notranslate text-nowrap">options</code> prop with <code translate="no" class="notranslate text-nowrap">&lt;b-form-select-option&gt;</code> and\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-select-option-group&gt;</code>. Manually placed options and option groups will appear <em>below</em> the\noptions generated via the <code translate="no" class="notranslate text-nowrap">options</code> prop. To place manual options and option groups <em>above</em> the\noptions specified by the <code translate="no" class="notranslate text-nowrap">options</code> prop, use the named slot <code translate="no" class="notranslate text-nowrap">first</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- This slot appears above the options from \'options\' prop --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:first</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"null"</span> <span class="hljs-attr">disabled</span>&gt;</span>-- Please select an option --<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- These options will appear after the ones from \'options\' prop --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"C"</span>&gt;</span>Option C<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"D"</span>&gt;</span>Option D<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'A\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Option A (from options prop)\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'B\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Option B (from options prop)\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-both.vue --&gt;</span></pre><h2 id="options-property" class="bv-no-focus-ring"><span class="bd-content-title">Options property<a class="anchorjs-link" href="#options-property" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">options</code> can be an array of strings or objects, or a key-value object. Available fields:</p>\n<ul>\n<li><strong><code translate="no" class="notranslate text-nowrap">value</code></strong> The selected value which will be set on <code translate="no" class="notranslate text-nowrap">v-model</code></li>\n<li><strong><code translate="no" class="notranslate text-nowrap">disabled</code></strong> Disables item for selection</li>\n<li><strong><code translate="no" class="notranslate text-nowrap">text</code></strong> Display text, or <strong><code translate="no" class="notranslate text-nowrap">html</code></strong> Display basic inline html</li>\n</ul>\n<p><code translate="no" class="notranslate text-nowrap">value</code> can be a string, number, or simple object. Avoid using complex types in values.</p>\n<p>If both <code translate="no" class="notranslate text-nowrap">html</code> and <code translate="no" class="notranslate text-nowrap">text</code> are provided, <code translate="no" class="notranslate text-nowrap">html</code> will take precedence. Only basic/native HTML is\nsupported in the <code translate="no" class="notranslate text-nowrap">html</code> field (components will not work). Note that not all browsers will render\ninline html (i.e. <code translate="no" class="notranslate text-nowrap">&lt;i&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;strong&gt;</code>, etc) inside <code translate="no" class="notranslate text-nowrap">&lt;option&gt;</code> elements of a <code translate="no" class="notranslate text-nowrap">&lt;select&gt;</code>.</p>\n<p class="alert alert-danger">\n  <strong>Be cautious</strong> of placing user supplied content in the <code class="notranslate" translate="no">html</code> field,\n  as it may make you vulnerable to\n  <a class="alert-link" href="https://en.wikipedia.org/wiki/Cross-site_scripting">\n  <abbr title="Cross Site Scripting Attacks">XSS attacks</abbr></a>, if you do not first\n  <a class="alert-link" href="https://en.wikipedia.org/wiki/HTML_sanitization">sanitize</a> the\n  user supplied string.\n</p>\n\n<h3 id="options-as-an-array" class="bv-no-focus-ring"><span class="bd-content-title">Options as an array<a class="anchorjs-link" href="#options-as-an-array" aria-label="Anchor"></a></span></h3>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [<span class="hljs-string">\'A\'</span>, <span class="hljs-string">\'B\'</span>, <span class="hljs-string">\'C\'</span>, { <span class="hljs-attr">text</span>: <span class="hljs-string">\'D\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }, <span class="hljs-string">\'E\'</span>, <span class="hljs-string">\'F\'</span>]</pre><p>If an array entry is a string, it will be used for both the generated <code translate="no" class="notranslate text-nowrap">value</code> and <code translate="no" class="notranslate text-nowrap">text</code> fields.</p>\n<p>You can mix using strings and <a href="#options-as-an-array-of-objects" class="font-weight-bold">objects</a> in the array.</p>\n<p>Internally, BootstrapVue will convert the above array to the following array (the\n<a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'A\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'A\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'B\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'B\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'C\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'C\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'D\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'E\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'E\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'F\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'F\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre><h3 id="options-as-an-array-of-objects" class="bv-no-focus-ring"><span class="bd-content-title">Options as an array of objects<a class="anchorjs-link" href="#options-as-an-array-of-objects" aria-label="Anchor"></a></span></h3>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 1\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 2\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">\'&lt;b&gt;Item&lt;/b&gt; 3\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 4\'</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 5\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">\'bar\'</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n]</pre><p>If <code translate="no" class="notranslate text-nowrap">value</code> is missing, then <code translate="no" class="notranslate text-nowrap">text</code> will be used as both the <code translate="no" class="notranslate text-nowrap">value</code> and <code translate="no" class="notranslate text-nowrap">text</code> fields. If you use\nthe <code translate="no" class="notranslate text-nowrap">html</code> property, you <strong>must</strong> supply a <code translate="no" class="notranslate text-nowrap">value</code> property.</p>\n<p><span class="badge badge-info">New in v2.2.0</span> To define option groups, just add an object with\na <code translate="no" class="notranslate text-nowrap">label</code> prop as the groups name and a <code translate="no" class="notranslate text-nowrap">options</code> property with the array of options of the group.</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 1\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 2\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n  {\n    <span class="hljs-attr">label</span>: <span class="hljs-string">\'Grouped options\'</span>,\n    <span class="hljs-attr">options</span>: [{ <span class="hljs-attr">html</span>: <span class="hljs-string">\'&lt;b&gt;Item&lt;/b&gt; 3\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }, { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 4\'</span> }]\n  },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 5\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">\'bar\'</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n]</pre><h3 id="options-as-an-object" class="bv-no-focus-ring"><span class="bd-content-title">Options as an object<a class="anchorjs-link" href="#options-as-an-object" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-warning">Deprecated</span></p>\n<p>Keys are mapped to <code translate="no" class="notranslate text-nowrap">value</code> and values are mapped to option <code translate="no" class="notranslate text-nowrap">text</code>.</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = {\n  <span class="hljs-attr">a</span>: <span class="hljs-string">\'Item A\'</span>,\n  <span class="hljs-attr">b</span>: <span class="hljs-string">\'Item B\'</span>,\n  <span class="hljs-attr">c</span>: { <span class="hljs-attr">html</span>: <span class="hljs-string">\'Item C\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  <span class="hljs-attr">d</span>: { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item D\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'overridden_value\'</span> },\n  <span class="hljs-attr">e</span>: { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item E\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">\'bar\'</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n}</pre><p>Internally, BootstrapVue will convert the above object to the following array (the\n<a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item A\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'a\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item B\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'b\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">\'Item C\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'c\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item D\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'overridden_value\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item E\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">\'bar\'</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre><p><strong>Note:</strong> When using the Object format, the order of the final array is <strong>not</strong> guaranteed. For this\nreason, it is recommended to use either of the previously mentioned array formats.</p>\n<h3 id="changing-the-option-field-names" class="bv-no-focus-ring"><span class="bd-content-title">Changing the option field names<a class="anchorjs-link" href="#changing-the-option-field-names" aria-label="Anchor"></a></span></h3>\n<p>If you want to customize the field property names (for example using <code translate="no" class="notranslate text-nowrap">name</code> field for display\n<code translate="no" class="notranslate text-nowrap">text</code>) you can easily change them by setting the <code translate="no" class="notranslate text-nowrap">text-field</code>, <code translate="no" class="notranslate text-nowrap">html-field</code>, <code translate="no" class="notranslate text-nowrap">value-field</code>, and\n<code translate="no" class="notranslate text-nowrap">disabled-field</code> props to a string that contains the property name you would like to use:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n      <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>\n      <span class="hljs-attr">value-field</span>=<span class="hljs-string">"item"</span>\n      <span class="hljs-attr">text-field</span>=<span class="hljs-string">"name"</span>\n      <span class="hljs-attr">disabled-field</span>=<span class="hljs-string">"notEnabled"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'A\'</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">\'A\'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option A\'</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">\'B\'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option B\'</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">\'D\'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option C\'</span>, <span class="hljs-attr">notEnabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">item</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option D\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-options-fields.vue --&gt;</span></pre><h3 id="option-notes" class="bv-no-focus-ring"><span class="bd-content-title">Option notes<a class="anchorjs-link" href="#option-notes" aria-label="Anchor"></a></span></h3>\n<p>If the initial value of your <code translate="no" class="notranslate text-nowrap">v-model</code> expression does not match any of the options, the\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code> component (which is a native HTML5 <code translate="no" class="notranslate text-nowrap">&lt;select&gt;</code> under the hood) will render in an\n<em>unselected</em> state. On iOS this will cause the user not being able to select the first item because\niOS does not fire a change event in this case. It is therefore recommended to provide a disabled\noption with an empty value as your first option.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:first</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select-option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span> <span class="hljs-attr">disabled</span>&gt;</span>-- Please select an option --<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select-option</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span></pre><p>See the <a href="https://vuejs.org/v2/guide/forms.html#Select" target="_blank" rel="noopener">Vue select</a> documentation for more details.</p>\n<h2 id="standard-single-select" class="bv-no-focus-ring"><span class="bd-content-title">Standard (single) select<a class="anchorjs-link" href="#standard-single-select" aria-label="Anchor"></a></span></h2>\n<p>By default, Bootstrap v4&#39;s custom select styling is applied.</p>\n<h3 id="value-in-single-mode" class="bv-no-focus-ring"><span class="bd-content-title">Value in single mode<a class="anchorjs-link" href="#value-in-single-mode" aria-label="Anchor"></a></span></h3>\n<p>In non <code translate="no" class="notranslate text-nowrap">multiple</code> mode, <code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code> returns the a single <code translate="no" class="notranslate text-nowrap">value</code> of the currently selected\noption.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Please select some item\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'a\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is First option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'b\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Default Selected Option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'c\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is another option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'d\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This one is disabled\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-single.vue --&gt;</span></pre><h3 id="select-sizing-displayed-rows" class="bv-no-focus-ring"><span class="bd-content-title">Select sizing (displayed rows)<a class="anchorjs-link" href="#select-sizing-displayed-rows" aria-label="Anchor"></a></span></h3>\n<p>You can use the <code translate="no" class="notranslate text-nowrap">select-size</code> prop to switch the custom select into a select list-box, rather than a\ndropdown. Set the <code translate="no" class="notranslate text-nowrap">select-size</code> prop to a numerical value greater than 1 to control how many rows of\noptions are visible.</p>\n<p>Note when <code translate="no" class="notranslate text-nowrap">select-size</code> is set to a value greater than 1, the Bootstrap v4 custom styling will\n<strong>not</strong> be applied, unless the <code translate="no" class="notranslate text-nowrap">multiple</code> prop is also set.</p>\n<p>Note that not all mobile browsers will show the select as a list-box.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span> <span class="hljs-attr">:select-size</span>=<span class="hljs-string">"4"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Please select some item\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'a\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is option a\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'b\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Default Selected Option b\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'c\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is option c\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'d\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This one is disabled\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'e\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is option e\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'e\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is option f\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-size.vue --&gt;</span></pre><h2 id="multiple-select-support" class="bv-no-focus-ring"><span class="bd-content-title">Multiple select support<a class="anchorjs-link" href="#multiple-select-support" aria-label="Anchor"></a></span></h2>\n<p>Enable multiple select mode by setting the prop <code translate="no" class="notranslate text-nowrap">multiple</code>, and control how many rows are displayed\nin the multiple select list-box by setting <code translate="no" class="notranslate text-nowrap">select-size</code> to the number of rows to display. The\ndefault is to let the browser use its default (typically 4).</p>\n<h3 id="value-in-multiple-mode" class="bv-no-focus-ring"><span class="bd-content-title">Value in multiple mode<a class="anchorjs-link" href="#value-in-multiple-mode" aria-label="Anchor"></a></span></h3>\n<p>In <code translate="no" class="notranslate text-nowrap">multiple</code> mode, <code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code> always returns an array of option values. You <strong>must</strong> provide\nan array reference as your <code translate="no" class="notranslate text-nowrap">v-model</code> when in <code translate="no" class="notranslate text-nowrap">multiple</code> mode.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">:select-size</span>=<span class="hljs-string">"4"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: [<span class="hljs-string">\'b\'</span>], <span class="hljs-comment">// Array reference</span>\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'a\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is First option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'b\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'Default Selected Option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'c\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is another option\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'d\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This one is disabled\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'e\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is option e\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'f\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is option f\'</span> },\n          { <span class="hljs-attr">value</span>: <span class="hljs-string">\'g\'</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is option g\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-select-multiple-mode.vue --&gt;</span></pre><h2 id="control-sizing" class="bv-no-focus-ring"><span class="bd-content-title">Control sizing<a class="anchorjs-link" href="#control-sizing" aria-label="Anchor"></a></span></h2>\n<p>Set the form-control text size using the <code translate="no" class="notranslate text-nowrap">size</code> prop to <code translate="no" class="notranslate text-nowrap">sm</code> or <code translate="no" class="notranslate text-nowrap">lg</code> for small or large\nrespectively.</p>\n<p>By default <code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code> will occupy the full width of the container that it appears in. To\ncontrol the select width, place the input inside standard Bootstrap grid column.</p>\n<h2 id="autofocus" class="bv-no-focus-ring"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-label="Anchor"></a></span></h2>\n<p>When the <code translate="no" class="notranslate text-nowrap">autofocus</code> prop is set on <code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code>, the select will be auto-focused when it is\ninserted (i.e. <strong>mounted</strong>) into the document or re-activated when inside a Vue <code translate="no" class="notranslate text-nowrap">&lt;keep-alive&gt;</code>\ncomponent. Note that this prop <strong>does not</strong> set the <code translate="no" class="notranslate text-nowrap">autofocus</code> attribute on the select, nor can it\ntell when the select becomes visible.</p>\n<h2 id="contextual-states" class="bv-no-focus-ring"><span class="bd-content-title">Contextual states<a class="anchorjs-link" href="#contextual-states" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap includes validation styles for <code translate="no" class="notranslate text-nowrap">valid</code> and <code translate="no" class="notranslate text-nowrap">invalid</code> states on most form controls.</p>\n<p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user\nmust fill in this field properly to submit the form.</li>\n<li><code translate="no" class="notranslate text-nowrap">true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout\na form and want to encourage a user through the rest of the fields.</li>\n<li><code translate="no" class="notranslate text-nowrap">null</code> Displays no validation state (neither valid nor invalid)</li>\n</ul>\n<p>To apply one of the contextual state icons on <code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code>, set the <code translate="no" class="notranslate text-nowrap">state</code> prop to <code translate="no" class="notranslate text-nowrap">false</code>\n(for invalid), <code translate="no" class="notranslate text-nowrap">true</code> (for valid), or <code translate="no" class="notranslate text-nowrap">null</code> (no validation state).</p>\n<h3 id="conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" class="bv-no-focus-ring"><span class="bd-content-title">Conveying contextual validation state to assistive technologies and colorblind users<a class="anchorjs-link" href="#conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" aria-label="Anchor"></a></span></h3>\n<p>Using these contextual states to denote the state of a form control only provides a visual,\ncolor-based indication, which will not be conveyed to users of assistive technologies - such as\nscreen readers - or to colorblind users.</p>\n<p>Ensure that an alternative indication of state is also provided. For instance, you could include a\nhint about state in the form control&#39;s <code translate="no" class="notranslate text-nowrap">&lt;label&gt;</code> text itself, or by providing an additional help\ntext block (via <code translate="no" class="notranslate text-nowrap">&lt;b-form-group&gt;</code> or <code translate="no" class="notranslate text-nowrap">&lt;b-form-*-feedback&gt;</code>). Specifically for assistive technologies,\ninvalid form controls can also be assigned an <code translate="no" class="notranslate text-nowrap">aria-invalid=&quot;true&quot;</code> attribute (see below).</p>\n<h3 id="aria-aria-invalid-attribute" class="bv-no-focus-ring"><span class="bd-content-title">ARIA <code translate="no" class="notranslate text-nowrap">aria-invalid</code> attribute:<a class="anchorjs-link" href="#aria-aria-invalid-attribute" aria-label="Anchor"></a></span></h3>\n<p>When <code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code> has an invalid contextual state (i.e. state = <code translate="no" class="notranslate text-nowrap">false</code>) you may also want to\nset the <code translate="no" class="notranslate text-nowrap">&lt;b-form-select&gt;</code> prop <code translate="no" class="notranslate text-nowrap">aria-invalid</code> to <code translate="no" class="notranslate text-nowrap">true</code>.</p>\n<p>Supported <code translate="no" class="notranslate text-nowrap">invalid</code> values are:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">false</code> (default) No errors detected</li>\n<li><code translate="no" class="notranslate text-nowrap">true</code> The value has failed validation.</li>\n</ul>\n<p>When <code translate="no" class="notranslate text-nowrap">state</code> is set to <code translate="no" class="notranslate text-nowrap">false</code>, aria-invalid will also be set to true.</p>\n<h2 id="non-custom-select" class="bv-no-focus-ring"><span class="bd-content-title">Non custom select<a class="anchorjs-link" href="#non-custom-select" aria-label="Anchor"></a></span></h2>\n<p>Set the prop <code translate="no" class="notranslate text-nowrap">plain</code> to have a native browser <code translate="no" class="notranslate text-nowrap">&lt;select&gt;</code> rendered (although the class\n<code translate="no" class="notranslate text-nowrap">.form-control</code> will always be placed on the select).</p>\n<p>A <code translate="no" class="notranslate text-nowrap">plain</code> select will always be rendered for non <code translate="no" class="notranslate text-nowrap">multiple</code> selects which have the <code translate="no" class="notranslate text-nowrap">select-size</code>\nprop set to a value greater than 1.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);