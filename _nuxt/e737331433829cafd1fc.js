(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{389:function(n,t){n.exports='<h1 id="form-radio-inputs" class="bv-no-focus-ring"><span class="bd-content-title">Form Radio Inputs</span></h1>\n<p class="bd-lead">For cross browser consistency, <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> uses Bootstrap&#39;s custom\nradio input to replace the browser default radio input. It is built on top of semantic and\naccessible markup, so it is a solid replacement for the default radio input.</p>\n<h2 id="individual-radios" class="bv-no-focus-ring"><span class="bd-content-title">Individual radios<a class="anchorjs-link" href="#individual-radios" aria-label="Anchor"></a></span></h2>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Individual radios"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"some-radios"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"A"</span>&gt;</span>Option A<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"some-radios"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"B"</span>&gt;</span>Option B<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio.vue --&gt;</span></pre><h2 id="grouped-radios" class="bv-no-focus-ring"><span class="bd-content-title">Grouped radios<a class="anchorjs-link" href="#grouped-radios" aria-label="Anchor"></a></span></h2>\n<p>The individual radio inputs in <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> can be specified via the <code translate="no" class="notranslate text-nowrap">options</code> prop, or\nvia manual placement of the <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> sub component. When using manually placed\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> components within a <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code>, they will inherit most props and the\nv-model from the <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Radios using options"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"radio-group-1"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-options"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Radios using sub-components"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"radio-group-2"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-sub-component"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"first"</span>&gt;</span>Toggle this custom radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"second"</span>&gt;</span>Or toggle this other custom radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"third"</span> <span class="hljs-attr">disabled</span>&gt;</span>This one is Disabled<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"{ fourth: 4 }"</span>&gt;</span>This is the 4th radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'first\'</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Toggle this custom radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Or toggle this other custom radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'This one is Disabled\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'This is the 4th radio\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">fourth</span>: <span class="hljs-number">4</span> } }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-group.vue --&gt;</span></pre><p>Feel free to mix and match <code translate="no" class="notranslate text-nowrap">options</code> prop and <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> in <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code>. Manually\nplaced <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> inputs will appear <em>below</em> any radio inputs generated by the <code translate="no" class="notranslate text-nowrap">options</code> prop.\nTo have them appear <em>above</em> the inputs generated by <code translate="no" class="notranslate text-nowrap">options</code>, place them in the named slot <code translate="no" class="notranslate text-nowrap">first</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Radios using options and slots"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"radio-slots"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-options-slots"</span>\n      &gt;</span>\n        <span class="hljs-comment">&lt;!-- Radios in this slot will appear first --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:first</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"first"</span>&gt;</span>Toggle this custom radio from slot first<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n        <span class="hljs-comment">&lt;!-- Radios in the default slot will appear after any option generated radios --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"{ fourth: 4 }"</span>&gt;</span>This is the 4th radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"fifth"</span>&gt;</span>This is the 5th radio<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Or toggle this other custom radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Third radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-group-slot.vue --&gt;</span></pre><h2 id="radio-group-options-array" class="bv-no-focus-ring"><span class="bd-content-title">Radio group options array<a class="anchorjs-link" href="#radio-group-options-array" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">options</code> can be an array of strings or objects. Available fields:</p>\n<ul>\n<li><strong><code translate="no" class="notranslate text-nowrap">value</code></strong> The selected value which will be set on <code translate="no" class="notranslate text-nowrap">v-model</code></li>\n<li><strong><code translate="no" class="notranslate text-nowrap">disabled</code></strong> Disables item for selection</li>\n<li><strong><code translate="no" class="notranslate text-nowrap">text</code></strong> Display text, or <strong><code translate="no" class="notranslate text-nowrap">html</code></strong> Display basic inline html</li>\n</ul>\n<p><code translate="no" class="notranslate text-nowrap">value</code> can be a string, number, or simple object. Avoid using complex types in values.</p>\n<p>If both <code translate="no" class="notranslate text-nowrap">html</code> and <code translate="no" class="notranslate text-nowrap">text</code> are provided, <code translate="no" class="notranslate text-nowrap">html</code> will take precedence. Only basic/native HTML is\nsupported in the <code translate="no" class="notranslate text-nowrap">html</code> field (components will not work). Note that not all browsers will render\ninline html (i.e. <code translate="no" class="notranslate text-nowrap">&lt;i&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;strong&gt;</code>, etc) inside <code translate="no" class="notranslate text-nowrap">&lt;option&gt;</code> elements of a <code translate="no" class="notranslate text-nowrap">&lt;select&gt;</code>.</p>\n<p class="alert alert-danger">\n  <strong>Be cautious</strong> of placing user supplied content in the <code class="notranslate" translate="no">html</code> field,\n  as it may make you vulnerable to\n  <a class="alert-link" href="https://en.wikipedia.org/wiki/Cross-site_scripting">\n  <abbr title="Cross Site Scripting Attacks">XSS attacks</abbr></a>, if you do not first\n  <a class="alert-link" href="https://en.wikipedia.org/wiki/HTML_sanitization">sanitize</a> the\n  user supplied string.\n</p>\n\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [<span class="hljs-string">\'A\'</span>, <span class="hljs-string">\'B\'</span>, <span class="hljs-string">\'C\'</span>, { <span class="hljs-attr">text</span>: <span class="hljs-string">\'D\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> }, <span class="hljs-string">\'E\'</span>, <span class="hljs-string">\'F\'</span>]</pre><p>If an array entry is a string, it will be used for both the generated <code translate="no" class="notranslate text-nowrap">value</code> and <code translate="no" class="notranslate text-nowrap">text</code> fields.</p>\n<p>You can mix using strings and <a href="#options-as-an-array-of-objects" class="font-weight-bold">objects</a> in the array.</p>\n<p>Internally, BootstrapVue will convert the above array to the following array (the\n<a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'A\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'A\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'B\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'B\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'C\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'C\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'D\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'E\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'E\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'F\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'F\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre><h3 id="options-as-an-array-of-objects" class="bv-no-focus-ring"><span class="bd-content-title">Options as an array of objects<a class="anchorjs-link" href="#options-as-an-array-of-objects" aria-label="Anchor"></a></span></h3>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 1\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 2\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">\'&lt;b&gt;Item&lt;/b&gt; 3\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 4\'</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 5\'</span>, <span class="hljs-attr">value</span>: { <span class="hljs-attr">foo</span>: <span class="hljs-string">\'bar\'</span>, <span class="hljs-attr">baz</span>: <span class="hljs-literal">true</span> } }\n]</pre><p>If <code translate="no" class="notranslate text-nowrap">value</code> is missing, then <code translate="no" class="notranslate text-nowrap">text</code> will be used as both the <code translate="no" class="notranslate text-nowrap">value</code> and <code translate="no" class="notranslate text-nowrap">text</code> fields. If you use\nthe <code translate="no" class="notranslate text-nowrap">html</code> property, you <strong>must</strong> supply a <code translate="no" class="notranslate text-nowrap">value</code> property.</p>\n<p>Internally, BootstrapVue will convert the above array to the following array (the\n<a href="#options-as-an-array-of-objects" class="font-weight-bold">array of objects</a>) format:</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> options = [\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 1\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 2\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">html</span>: <span class="hljs-string">\'&lt;b&gt;Item&lt;/b&gt; 3\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 4\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'Item 4\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> },\n  { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Item 5\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'E\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span> }\n]</pre><h3 id="changing-the-option-field-names" class="bv-no-focus-ring"><span class="bd-content-title">Changing the option field names<a class="anchorjs-link" href="#changing-the-option-field-names" aria-label="Anchor"></a></span></h3>\n<p>If you want to customize the field property names (for example using <code translate="no" class="notranslate text-nowrap">name</code> field for display\n<code translate="no" class="notranslate text-nowrap">text</code>) you can easily change them by setting the <code translate="no" class="notranslate text-nowrap">text-field</code>, <code translate="no" class="notranslate text-nowrap">html-field</code>, <code translate="no" class="notranslate text-nowrap">value-field</code>, and\n<code translate="no" class="notranslate text-nowrap">disabled-field</code> props to a string that contains the property name you would like to use:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n      <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>\n      <span class="hljs-attr">value-field</span>=<span class="hljs-string">"item"</span>\n      <span class="hljs-attr">text-field</span>=<span class="hljs-string">"name"</span>\n      <span class="hljs-attr">disabled-field</span>=<span class="hljs-string">"notEnabled"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'A\'</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">\'A\'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option A\'</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">\'B\'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option B\'</span> },\n          { <span class="hljs-attr">item</span>: <span class="hljs-string">\'D\'</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option C\'</span>, <span class="hljs-attr">notEnabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">item</span>: { <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> }, <span class="hljs-attr">name</span>: <span class="hljs-string">\'Option D\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-group-options-fields.vue --&gt;</span></pre><h2 id="radio-value-and-v-model" class="bv-no-focus-ring"><span class="bd-content-title">Radio value and v-model<a class="anchorjs-link" href="#radio-value-and-v-model" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> do not have a value by default. You must explicitly\nsupply a value (to which the <code translate="no" class="notranslate text-nowrap">v-model</code> is set to when the radio is checked) via the <code translate="no" class="notranslate text-nowrap">value</code> prop.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">v-model</code> of both <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> binds to the <code translate="no" class="notranslate text-nowrap">checked</code> prop. To\npre-check a radio, you must set the <code translate="no" class="notranslate text-nowrap">v-model</code> value to the radio&#39;s value. Do not use the <code translate="no" class="notranslate text-nowrap">checked</code>\nprop directly.</p>\n<p>Radio supports values of many types, such as a <code translate="no" class="notranslate text-nowrap">string</code>, <code translate="no" class="notranslate text-nowrap">boolean</code>, <code translate="no" class="notranslate text-nowrap">number</code>, or an <code translate="no" class="notranslate text-nowrap">object</code>.</p>\n<h2 id="inline-or-stacked-radios" class="bv-no-focus-ring"><span class="bd-content-title">Inline or stacked radios<a class="anchorjs-link" href="#inline-or-stacked-radios" aria-label="Anchor"></a></span></h2>\n<p>By default <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> generates inline radio inputs, while <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> generates\nstacked radios. Set the prop <code translate="no" class="notranslate text-nowrap">stacked</code> on <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> to make the radios appear one over\nthe other, or when using radios not in a group, set the <code translate="no" class="notranslate text-nowrap">inline</code> prop on <code translate="no" class="notranslate text-nowrap">b-form-radio</code> to true to\nrender them inline.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Inline radios (default)"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-inline"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Stacked radios"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"radios-stacked"</span>\n        <span class="hljs-attr">stacked</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>Selected: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ selected }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'first\'</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'First radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Second radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Third radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-stacked.vue --&gt;</span></pre><h2 id="control-sizing" class="bv-no-focus-ring"><span class="bd-content-title">Control sizing<a class="anchorjs-link" href="#control-sizing" aria-label="Anchor"></a></span></h2>\n<p>Use the <code translate="no" class="notranslate text-nowrap">size</code> prop to control the size of the radio. The default size is medium. Supported size\nvalues are <code translate="no" class="notranslate text-nowrap">sm</code> (small) and <code translate="no" class="notranslate text-nowrap">lg</code> (large).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-size"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>&gt;</span>Small<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-size"</span>&gt;</span>Default<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-size"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span>&gt;</span>Large<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- form-radio-sizes.vue --&gt;</span></pre><p>Sizes can be set on individual <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> components, or inherited from the <code translate="no" class="notranslate text-nowrap">size</code> setting of\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code>.</p>\n<p><strong>Note:</strong> Bootstrap v4.x does not natively support sizes for the custom radio control. However,\nBootstrapVue includes custom SCSS/CSS that adds support for sizing the custom radios.</p>\n<h2 id="button-style-radios" class="bv-no-focus-ring"><span class="bd-content-title">Button style radios<a class="anchorjs-link" href="#button-style-radios" aria-label="Anchor"></a></span></h2>\n<p>Render radios with the look of buttons by setting the prop <code translate="no" class="notranslate text-nowrap">buttons</code> to <code translate="no" class="notranslate text-nowrap">true</code> on\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code>. Set the button variant by setting the <code translate="no" class="notranslate text-nowrap">button-variant</code> prop to one of the\nstandard Bootstrap button variants (see <a href="/docs/components/button" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-button&gt;</code></a> for supported\nvariants). The default <code translate="no" class="notranslate text-nowrap">button-variant</code> is <code translate="no" class="notranslate text-nowrap">secondary</code>.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">buttons</code> prop has precedence over <code translate="no" class="notranslate text-nowrap">plain</code>, and <code translate="no" class="notranslate text-nowrap">button-variant</code> has no effect if <code translate="no" class="notranslate text-nowrap">buttons</code> is\nnot set.</p>\n<p>Button style radios will have the class <code translate="no" class="notranslate text-nowrap">.active</code> automatically applied to their label when they are\nin the checked state.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Button style radios"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"btn-radios-1"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">buttons</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"radios-btn-default"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Button style radios with outline-primary variant and size lg"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"btn-radios-2"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">buttons</span>\n        <span class="hljs-attr">button-variant</span>=<span class="hljs-string">"outline-primary"</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-btn-outline"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Stacked button style radios"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"btn-radios-3"</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">buttons</span>\n        <span class="hljs-attr">stacked</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-btn-stacked"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'radio1\'</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Radio 1\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'radio1\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Radio 3\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'radio2\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Radio 3 (disabled)\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'radio3\'</span>, <span class="hljs-attr">disabled</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Radio 4\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'radio4\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-buttons.vue --&gt;</span></pre><h2 id="non-custom-style-radio-inputs-plain" class="bv-no-focus-ring"><span class="bd-content-title">Non-custom style radio inputs (plain)<a class="anchorjs-link" href="#non-custom-style-radio-inputs-plain" aria-label="Anchor"></a></span></h2>\n<p>You can have <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> render a browser native-styled radio input\nby setting the <code translate="no" class="notranslate text-nowrap">plain</code> prop.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Plain inline radios"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">plain</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"plain-inline"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Plain stacked radios"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selected"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n        <span class="hljs-attr">plain</span>\n        <span class="hljs-attr">stacked</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"plain-stacked"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">selected</span>: <span class="hljs-string">\'first\'</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'First radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Second radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Third radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-plain.vue --&gt;</span></pre><p><strong>Note:</strong> <code translate="no" class="notranslate text-nowrap">plain</code> will have no effect if <code translate="no" class="notranslate text-nowrap">buttons</code>/<code translate="no" class="notranslate text-nowrap">button</code> is set.</p>\n<h2 id="required-constraint" class="bv-no-focus-ring"><span class="bd-content-title">Required constraint<a class="anchorjs-link" href="#required-constraint" aria-label="Anchor"></a></span></h2>\n<p>When using individual <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> components (not in a <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code>), and you want\nthe radio(s) to be <code translate="no" class="notranslate text-nowrap">required</code> in your form, you <strong>must</strong> provide a <code translate="no" class="notranslate text-nowrap">name</code> on each <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code>\nin order for the required constraint to work. All <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code> components tied to the same\n<code translate="no" class="notranslate text-nowrap">v-model</code> <strong>must</strong> have the same <code translate="no" class="notranslate text-nowrap">name</code>.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">name</code> is required in order for Assistive Technologies (such as screen readers, and keyboard\nonly users) to know which radios belong to the same form variable (the name also automatically\nenables native browser keyboard navigation), hence <code translate="no" class="notranslate text-nowrap">required</code> will only work if <code translate="no" class="notranslate text-nowrap">name</code> is set.\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> will automatically generate a unique input name if one is not provided on the\ngroup.</p>\n<h2 id="autofocus" class="bv-no-focus-ring"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-label="Anchor"></a></span></h2>\n<p>When the <code translate="no" class="notranslate text-nowrap">autofocus</code> prop is set on <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code>, the input will be auto-focused when it is\ninserted (i.e. <strong>mounted</strong>) into the document or re-activated when inside a Vue <code translate="no" class="notranslate text-nowrap">&lt;keep-alive&gt;</code>\ncomponent. Note that this prop <strong>does not</strong> set the <code translate="no" class="notranslate text-nowrap">autofocus</code> attribute on the input, nor can it\ntell when the input becomes visible.</p>\n<h2 id="contextual-states" class="bv-no-focus-ring"><span class="bd-content-title">Contextual states<a class="anchorjs-link" href="#contextual-states" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap includes validation styles for <code translate="no" class="notranslate text-nowrap">valid</code> and <code translate="no" class="notranslate text-nowrap">invalid</code> states on most form controls.</p>\n<p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user\nmust fill in this field properly to submit the form.</li>\n<li><code translate="no" class="notranslate text-nowrap">true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout\na form and want to encourage a user through the rest of the fields.</li>\n<li><code translate="no" class="notranslate text-nowrap">null</code> Displays no validation state (neither valid nor invalid)</li>\n</ul>\n<p>To apply one of the contextual state icons on <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio&gt;</code>, set the <code translate="no" class="notranslate text-nowrap">state</code> prop to <code translate="no" class="notranslate text-nowrap">false</code> (for\ninvalid), <code translate="no" class="notranslate text-nowrap">true</code> (for valid), or <code translate="no" class="notranslate text-nowrap">null</code> (no validation state).</p>\n<p><strong>Note:</strong> Contextual state is not supported for radios rendered in buttons mode.</p>\n<h3 id="contextual-state-with-feedback-example" class="bv-no-focus-ring"><span class="bd-content-title">Contextual state with feedback example<a class="anchorjs-link" href="#contextual-state-with-feedback-example" aria-label="Anchor"></a></span></h3>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"radio-validation"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>&gt;</span>Please select one<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-valid-feedback</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>&gt;</span>Thank you<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-valid-feedback</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'First radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'first\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Second radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'second\'</span> },\n          { <span class="hljs-attr">text</span>: <span class="hljs-string">\'Third radio\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'third\'</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      state() {\n        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-keyword">this</span>.value)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-radio-validation.vue --&gt;</span></pre><h3 id="conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" class="bv-no-focus-ring"><span class="bd-content-title">Conveying contextual validation state to assistive technologies and colorblind users<a class="anchorjs-link" href="#conveying-contextual-validation-state-to-assistive-technologies-and-colorblind-users" aria-label="Anchor"></a></span></h3>\n<p>Using these contextual states to denote the state of a form control only provides a visual,\ncolor-based indication, which will not be conveyed to users of assistive technologies - such as\nscreen readers - or to colorblind users.</p>\n<p>Ensure that an alternative indication of state is also provided. For instance, you could include a\nhint about state in the form control&#39;s <code translate="no" class="notranslate text-nowrap">&lt;label&gt;</code> text itself, or by providing an additional help\ntext block (i.e. <code translate="no" class="notranslate text-nowrap">&lt;b-form-invalid-feedback&gt;</code>). Specifically for assistive technologies, invalid form\ncontrols can also be assigned an <code translate="no" class="notranslate text-nowrap">aria-invalid=&quot;true&quot;</code> attribute (see below).</p>\n<h3 id="aria-aria-invalid-attribute" class="bv-no-focus-ring"><span class="bd-content-title">ARIA <code translate="no" class="notranslate text-nowrap">aria-invalid</code> attribute<a class="anchorjs-link" href="#aria-aria-invalid-attribute" aria-label="Anchor"></a></span></h3>\n<p>When <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> has an invalid contextual state (i.e. state = <code translate="no" class="notranslate text-nowrap">false</code>) you may also want\nto set the <code translate="no" class="notranslate text-nowrap">&lt;b-form-radio-group&gt;</code> prop <code translate="no" class="notranslate text-nowrap">aria-invalid</code> to <code translate="no" class="notranslate text-nowrap">true</code>.</p>\n<p>Supported <code translate="no" class="notranslate text-nowrap">aria-invalid</code> values are:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">false</code> (default) No errors detected</li>\n<li><code translate="no" class="notranslate text-nowrap">true</code> The value has failed validation.</li>\n</ul>\n<p><code translate="no" class="notranslate text-nowrap">aria-invalid</code> is automatically set to <code translate="no" class="notranslate text-nowrap">true</code> if the <code translate="no" class="notranslate text-nowrap">state</code> prop is <code translate="no" class="notranslate text-nowrap">false</code>.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);