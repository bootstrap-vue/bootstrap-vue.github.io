(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assign; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getOwnPropertyNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return keys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return defineProperties; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return defineProperty; });\n/* unused harmony export freeze */\n/* unused harmony export getOwnPropertyDescriptor */\n/* unused harmony export getOwnPropertySymbols */\n/* unused harmony export getPrototypeOf */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return create; });\n/* unused harmony export isFrozen */\n/* unused harmony export is */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return hasOwnProperty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return isObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return isPlainObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return omit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return readonlyDescriptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return deepFreeze; });\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_object_is__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(241);\n/* harmony import */ var core_js_modules_es6_object_is__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_is__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(242);\n/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(128);\n/* harmony import */ var core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_library_fn_object_is__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(129);\n/* harmony import */ var core_js_library_fn_object_is__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_library_fn_object_is__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);\n\n\n\n\n\n\n\n // --- Static ---\n\nconst assign = Object.assign || core_js_library_fn_object_assign__WEBPACK_IMPORTED_MODULE_5___default.a;\nconst getOwnPropertyNames = Object.getOwnPropertyNames;\nconst keys = Object.keys;\nconst defineProperties = Object.defineProperties;\nconst defineProperty = Object.defineProperty;\nconst freeze = Object.freeze;\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols;\nconst getPrototypeOf = Object.getPrototypeOf;\nconst create = Object.create;\nconst isFrozen = Object.isFrozen;\nconst is = Object.is || core_js_library_fn_object_is__WEBPACK_IMPORTED_MODULE_6___default.a; // --- "Instance" ---\n\nconst hasOwnProperty = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop); // --- Utilities ---\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n * Note object could be a complex type like array, date, etc.\n */\n\nconst isObject = obj => obj !== null && typeof obj === \'object\';\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\n\nconst isPlainObject = obj => Object.prototype.toString.call(obj) === \'[object Object]\'; // @link https://gist.github.com/bisubus/2da8af7e801ffd813fab7ac221aa7afc\n\nconst omit = (obj, props) => keys(obj).filter(key => props.indexOf(key) === -1).reduce((result, key) => Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])({}, result, {\n  [key]: obj[key]\n}), {});\nconst readonlyDescriptor = () => ({\n  enumerable: true,\n  configurable: false,\n  writable: false\n});\n/**\n * Deep-freezes and object, making it immutable / read-only.\n * Returns the same object passed-in, but frozen.\n * Freezes inner object/array/values first.\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n * Note: this method will not work for property values using Symbol() as a key\n */\n\nconst deepFreeze = obj => {\n  // Retrieve the property names defined on object/array\n  // Note: `keys` will ignore properties that are keyed by a `Symbol()`\n  const props = keys(obj); // Iterate over each prop and recursively freeze it\n\n  props.forEach(prop => {\n    let value = obj[prop]; // If value is a plain object or array, we deepFreeze it\n\n    obj[prop] = value && (isPlainObject(value) || Object(_array__WEBPACK_IMPORTED_MODULE_7__[/* isArray */ "d"])(value)) ? deepFreeze(value) : value;\n  });\n  return freeze(obj);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvb2JqZWN0LmpzPzdjOWIiXSwibmFtZXMiOlsiYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduUG9seWZpbGwiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwia2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImZyZWV6ZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlIiwiaXNGcm96ZW4iLCJpcyIsImlzUG9seWZpbGwiLCJoYXNPd25Qcm9wZXJ0eSIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJjYWxsIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwidG9TdHJpbmciLCJvbWl0IiwicHJvcHMiLCJmaWx0ZXIiLCJrZXkiLCJpbmRleE9mIiwicmVkdWNlIiwicmVzdWx0IiwicmVhZG9ubHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVlcEZyZWV6ZSIsImZvckVhY2giLCJ2YWx1ZSIsImlzQXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0NBR0E7O0FBRU8sTUFBTUEsTUFBTSxHQUFHQyxNQUFNLENBQUNELE1BQVAsSUFBaUJFLHVFQUFoQztBQUNBLE1BQU1DLG1CQUFtQixHQUFHRixNQUFNLENBQUNFLG1CQUFuQztBQUNBLE1BQU1DLElBQUksR0FBR0gsTUFBTSxDQUFDRyxJQUFwQjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHSixNQUFNLENBQUNJLGdCQUFoQztBQUNBLE1BQU1DLGNBQWMsR0FBR0wsTUFBTSxDQUFDSyxjQUE5QjtBQUNBLE1BQU1DLE1BQU0sR0FBR04sTUFBTSxDQUFDTSxNQUF0QjtBQUNBLE1BQU1DLHdCQUF3QixHQUFHUCxNQUFNLENBQUNPLHdCQUF4QztBQUNBLE1BQU1DLHFCQUFxQixHQUFHUixNQUFNLENBQUNRLHFCQUFyQztBQUNBLE1BQU1DLGNBQWMsR0FBR1QsTUFBTSxDQUFDUyxjQUE5QjtBQUNBLE1BQU1DLE1BQU0sR0FBR1YsTUFBTSxDQUFDVSxNQUF0QjtBQUNBLE1BQU1DLFFBQVEsR0FBR1gsTUFBTSxDQUFDVyxRQUF4QjtBQUNBLE1BQU1DLEVBQUUsR0FBR1osTUFBTSxDQUFDWSxFQUFQLElBQWFDLG1FQUF4QixDLENBRVA7O0FBRU8sTUFBTUMsY0FBYyxHQUFHLENBQUNDLEdBQUQsRUFBTUMsSUFBTixLQUFlaEIsTUFBTSxDQUFDaUIsU0FBUCxDQUFpQkgsY0FBakIsQ0FBZ0NJLElBQWhDLENBQXFDSCxHQUFyQyxFQUEwQ0MsSUFBMUMsQ0FBdEMsQyxDQUVQOztBQUVBOzs7Ozs7O0FBTU8sTUFBTUcsUUFBUSxHQUFHSixHQUFHLElBQUlBLEdBQUcsS0FBSyxJQUFSLElBQWdCLE9BQU9BLEdBQVAsS0FBZSxRQUF2RDtBQUVQOzs7OztBQUlPLE1BQU1LLGFBQWEsR0FBR0wsR0FBRyxJQUFJZixNQUFNLENBQUNpQixTQUFQLENBQWlCSSxRQUFqQixDQUEwQkgsSUFBMUIsQ0FBK0JILEdBQS9CLE1BQXdDLGlCQUFyRSxDLENBRVA7O0FBQ08sTUFBTU8sSUFBSSxHQUFHLENBQUNQLEdBQUQsRUFBTVEsS0FBTixLQUNsQnBCLElBQUksQ0FBQ1ksR0FBRCxDQUFKLENBQ0dTLE1BREgsQ0FDVUMsR0FBRyxJQUFJRixLQUFLLENBQUNHLE9BQU4sQ0FBY0QsR0FBZCxNQUF1QixDQUFDLENBRHpDLEVBRUdFLE1BRkgsQ0FFVSxDQUFDQyxNQUFELEVBQVNILEdBQVQseUdBQXVCRyxNQUF2QjtBQUErQixHQUFDSCxHQUFELEdBQU9WLEdBQUcsQ0FBQ1UsR0FBRDtBQUF6QyxFQUZWLEVBRTZELEVBRjdELENBREs7QUFLQSxNQUFNSSxrQkFBa0IsR0FBRyxPQUFPO0FBQUVDLFlBQVUsRUFBRSxJQUFkO0FBQW9CQyxjQUFZLEVBQUUsS0FBbEM7QUFBeUNDLFVBQVEsRUFBRTtBQUFuRCxDQUFQLENBQTNCO0FBRVA7Ozs7Ozs7O0FBT08sTUFBTUMsVUFBVSxHQUFHbEIsR0FBRyxJQUFJO0FBQy9CO0FBQ0E7QUFDQSxRQUFNUSxLQUFLLEdBQUdwQixJQUFJLENBQUNZLEdBQUQsQ0FBbEIsQ0FIK0IsQ0FJL0I7O0FBQ0FRLE9BQUssQ0FBQ1csT0FBTixDQUFjbEIsSUFBSSxJQUFJO0FBQ3BCLFFBQUltQixLQUFLLEdBQUdwQixHQUFHLENBQUNDLElBQUQsQ0FBZixDQURvQixDQUVwQjs7QUFDQUQsT0FBRyxDQUFDQyxJQUFELENBQUgsR0FBWW1CLEtBQUssS0FBS2YsYUFBYSxDQUFDZSxLQUFELENBQWIsSUFBd0JDLDhEQUFPLENBQUNELEtBQUQsQ0FBcEMsQ0FBTCxHQUFvREYsVUFBVSxDQUFDRSxLQUFELENBQTlELEdBQXdFQSxLQUFwRjtBQUNELEdBSkQ7QUFLQSxTQUFPN0IsTUFBTSxDQUFDUyxHQUFELENBQWI7QUFDRCxDQVhNIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzaWduUG9seWZpbGwgZnJvbSAnY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24nXG5pbXBvcnQgaXNQb2x5ZmlsbCBmcm9tICdjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2lzJ1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4vYXJyYXknXG5cbi8vIC0tLSBTdGF0aWMgLS0tXG5cbmV4cG9ydCBjb25zdCBhc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGFzc2lnblBvbHlmaWxsXG5leHBvcnQgY29uc3QgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG5leHBvcnQgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzXG5leHBvcnQgY29uc3QgZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzXG5leHBvcnQgY29uc3QgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbmV4cG9ydCBjb25zdCBmcmVlemUgPSBPYmplY3QuZnJlZXplXG5leHBvcnQgY29uc3QgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvclxuZXhwb3J0IGNvbnN0IGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbmV4cG9ydCBjb25zdCBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZlxuZXhwb3J0IGNvbnN0IGNyZWF0ZSA9IE9iamVjdC5jcmVhdGVcbmV4cG9ydCBjb25zdCBpc0Zyb3plbiA9IE9iamVjdC5pc0Zyb3plblxuZXhwb3J0IGNvbnN0IGlzID0gT2JqZWN0LmlzIHx8IGlzUG9seWZpbGxcblxuLy8gLS0tIFwiSW5zdGFuY2VcIiAtLS1cblxuZXhwb3J0IGNvbnN0IGhhc093blByb3BlcnR5ID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcClcblxuLy8gLS0tIFV0aWxpdGllcyAtLS1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqIE5vdGUgb2JqZWN0IGNvdWxkIGJlIGEgY29tcGxleCB0eXBlIGxpa2UgYXJyYXksIGRhdGUsIGV0Yy5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzT2JqZWN0ID0gb2JqID0+IG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjb25zdCBpc1BsYWluT2JqZWN0ID0gb2JqID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xuXG4vLyBAbGluayBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9iaXN1YnVzLzJkYThhZjdlODAxZmZkODEzZmFiN2FjMjIxYWE3YWZjXG5leHBvcnQgY29uc3Qgb21pdCA9IChvYmosIHByb3BzKSA9PlxuICBrZXlzKG9iailcbiAgICAuZmlsdGVyKGtleSA9PiBwcm9wcy5pbmRleE9mKGtleSkgPT09IC0xKVxuICAgIC5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiAoeyAuLi5yZXN1bHQsIFtrZXldOiBvYmpba2V5XSB9KSwge30pXG5cbmV4cG9ydCBjb25zdCByZWFkb25seURlc2NyaXB0b3IgPSAoKSA9PiAoeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UgfSlcblxuLyoqXG4gKiBEZWVwLWZyZWV6ZXMgYW5kIG9iamVjdCwgbWFraW5nIGl0IGltbXV0YWJsZSAvIHJlYWQtb25seS5cbiAqIFJldHVybnMgdGhlIHNhbWUgb2JqZWN0IHBhc3NlZC1pbiwgYnV0IGZyb3plbi5cbiAqIEZyZWV6ZXMgaW5uZXIgb2JqZWN0L2FycmF5L3ZhbHVlcyBmaXJzdC5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9mcmVlemVcbiAqIE5vdGU6IHRoaXMgbWV0aG9kIHdpbGwgbm90IHdvcmsgZm9yIHByb3BlcnR5IHZhbHVlcyB1c2luZyBTeW1ib2woKSBhcyBhIGtleVxuICovXG5leHBvcnQgY29uc3QgZGVlcEZyZWV6ZSA9IG9iaiA9PiB7XG4gIC8vIFJldHJpZXZlIHRoZSBwcm9wZXJ0eSBuYW1lcyBkZWZpbmVkIG9uIG9iamVjdC9hcnJheVxuICAvLyBOb3RlOiBga2V5c2Agd2lsbCBpZ25vcmUgcHJvcGVydGllcyB0aGF0IGFyZSBrZXllZCBieSBhIGBTeW1ib2woKWBcbiAgY29uc3QgcHJvcHMgPSBrZXlzKG9iailcbiAgLy8gSXRlcmF0ZSBvdmVyIGVhY2ggcHJvcCBhbmQgcmVjdXJzaXZlbHkgZnJlZXplIGl0XG4gIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgbGV0IHZhbHVlID0gb2JqW3Byb3BdXG4gICAgLy8gSWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3Qgb3IgYXJyYXksIHdlIGRlZXBGcmVlemUgaXRcbiAgICBvYmpbcHJvcF0gPSB2YWx1ZSAmJiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkgfHwgaXNBcnJheSh2YWx1ZSkpID8gZGVlcEZyZWV6ZSh2YWx1ZSkgOiB2YWx1ZVxuICB9KVxuICByZXR1cm4gZnJlZXplKG9iailcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n')},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return from; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return arrayIncludes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return concat; });\n/* harmony import */ var core_js_library_fn_array_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(130);\n/* harmony import */ var core_js_library_fn_array_from__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_library_fn_array_from__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_library_fn_array_is_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(131);\n/* harmony import */ var core_js_library_fn_array_is_array__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_library_fn_array_is_array__WEBPACK_IMPORTED_MODULE_1__);\n\n // --- Static ---\n\nconst from = Array.from || core_js_library_fn_array_from__WEBPACK_IMPORTED_MODULE_0___default.a;\nconst isArray = Array.isArray || core_js_library_fn_array_is_array__WEBPACK_IMPORTED_MODULE_1___default.a; // --- Instance ---\n\nconst arrayIncludes = (array, value) => array.indexOf(value) !== -1;\nconst concat = function concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Array.prototype.concat.apply([], args);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXJyYXkuanM/MmY3ZSJdLCJuYW1lcyI6WyJmcm9tIiwiQXJyYXkiLCJmcm9tUG9seWZpbGwiLCJpc0FycmF5IiwiaXNBcnJheVBvbHlmaWxsIiwiYXJyYXlJbmNsdWRlcyIsImFycmF5IiwidmFsdWUiLCJpbmRleE9mIiwiY29uY2F0IiwiYXJncyIsInByb3RvdHlwZSIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Q0FHQTs7QUFFTyxNQUFNQSxJQUFJLEdBQUdDLEtBQUssQ0FBQ0QsSUFBTixJQUFjRSxvRUFBM0I7QUFDQSxNQUFNQyxPQUFPLEdBQUdGLEtBQUssQ0FBQ0UsT0FBTixJQUFpQkMsd0VBQWpDLEMsQ0FFUDs7QUFFTyxNQUFNQyxhQUFhLEdBQUcsQ0FBQ0MsS0FBRCxFQUFRQyxLQUFSLEtBQWtCRCxLQUFLLENBQUNFLE9BQU4sQ0FBY0QsS0FBZCxNQUF5QixDQUFDLENBQWxFO0FBQ0EsTUFBTUUsTUFBTSxHQUFHLFNBQVRBLE1BQVM7QUFBQSxvQ0FBSUMsSUFBSjtBQUFJQSxRQUFKO0FBQUE7O0FBQUEsU0FBYVQsS0FBSyxDQUFDVSxTQUFOLENBQWdCRixNQUFoQixDQUF1QkcsS0FBdkIsQ0FBNkIsRUFBN0IsRUFBaUNGLElBQWpDLENBQWI7QUFBQSxDQUFmIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnJvbVBvbHlmaWxsIGZyb20gJ2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tJ1xuaW1wb3J0IGlzQXJyYXlQb2x5ZmlsbCBmcm9tICdjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvaXMtYXJyYXknXG5cbi8vIC0tLSBTdGF0aWMgLS0tXG5cbmV4cG9ydCBjb25zdCBmcm9tID0gQXJyYXkuZnJvbSB8fCBmcm9tUG9seWZpbGxcbmV4cG9ydCBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBpc0FycmF5UG9seWZpbGxcblxuLy8gLS0tIEluc3RhbmNlIC0tLVxuXG5leHBvcnQgY29uc3QgYXJyYXlJbmNsdWRlcyA9IChhcnJheSwgdmFsdWUpID0+IGFycmF5LmluZGV4T2YodmFsdWUpICE9PSAtMVxuZXhwb3J0IGNvbnN0IGNvbmNhdCA9ICguLi5hcmdzKSA9PiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcmdzKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return hasWindowSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return hasDocumentSupport; });\n/* unused harmony export hasNavigatorSupport */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return hasPromiseSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return hasMutationObserverSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return isBrowser; });\n/* unused harmony export userAgent */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return isJSDOM; });\n/* unused harmony export isIE */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return hasPassiveEventSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return hasTouchSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return hasPointerEventSupport; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return hasIntersectionObserverSupport; });\n/* unused harmony export getEnv */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return getNoWarn; });\n/**\n * Utilities to get information about the current environment\n */\n// --- Constants ---\nconst hasWindowSupport = typeof window !== 'undefined';\nconst hasDocumentSupport = typeof document !== 'undefined';\nconst hasNavigatorSupport = typeof navigator !== 'undefined';\nconst hasPromiseSupport = typeof Promise !== 'undefined';\nconst hasMutationObserverSupport = typeof MutationObserver !== 'undefined' || typeof WebKitMutationObserver !== 'undefined' || typeof MozMutationObserver !== 'undefined';\nconst isBrowser = hasWindowSupport && hasDocumentSupport && hasNavigatorSupport; // Browser type sniffing\n\nconst userAgent = isBrowser ? window.navigator.userAgent.toLowerCase() : '';\nconst isJSDOM = userAgent.indexOf('jsdom') > 0;\nconst isIE = /msie|trident/.test(userAgent); // Determine if the browser supports the option passive for events\n\nconst hasPassiveEventSupport = (() => {\n  let passiveEventSupported = false;\n\n  if (isBrowser) {\n    try {\n      const options = {\n        get passive() {\n          // This function will be called when the browser\n          // attempts to access the passive property.\n\n          /* istanbul ignore next: will never be called in JSDOM */\n          passiveEventSupported = true;\n        }\n\n      };\n      window.addEventListener('test', options, options);\n      window.removeEventListener('test', options, options);\n    } catch (err) {\n      /* istanbul ignore next: will never be called in JSDOM */\n      passiveEventSupported = false;\n    }\n  }\n\n  return passiveEventSupported;\n})();\nconst hasTouchSupport = isBrowser && ('ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0);\nconst hasPointerEventSupport = isBrowser && Boolean(window.PointerEvent || window.MSPointerEvent);\nconst hasIntersectionObserverSupport = isBrowser && 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window && // Edge 15 and UC Browser lack support for `isIntersecting`\n// but we an use intersectionRatio > 0 instead\n// 'isIntersecting' in window.IntersectionObserverEntry.prototype &&\n'intersectionRatio' in window.IntersectionObserverEntry.prototype; // --- Getters ---\n\nconst getEnv = function getEnv(key) {\n  let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const env = typeof process !== 'undefined' && process ? process.env || {} : {};\n\n  if (!key) {\n    /* istanbul ignore next */\n    return env;\n  }\n\n  return env[key] || fallback;\n};\nconst getNoWarn = () => getEnv('BOOTSTRAP_VUE_NO_WARN');\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(97)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZW52LmpzP2U0OTAiXSwibmFtZXMiOlsiaGFzV2luZG93U3VwcG9ydCIsIndpbmRvdyIsImhhc0RvY3VtZW50U3VwcG9ydCIsImRvY3VtZW50IiwiaGFzTmF2aWdhdG9yU3VwcG9ydCIsIm5hdmlnYXRvciIsImhhc1Byb21pc2VTdXBwb3J0IiwiUHJvbWlzZSIsImhhc011dGF0aW9uT2JzZXJ2ZXJTdXBwb3J0IiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJNb3pNdXRhdGlvbk9ic2VydmVyIiwiaXNCcm93c2VyIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJpc0pTRE9NIiwiaW5kZXhPZiIsImlzSUUiLCJ0ZXN0IiwiaGFzUGFzc2l2ZUV2ZW50U3VwcG9ydCIsInBhc3NpdmVFdmVudFN1cHBvcnRlZCIsIm9wdGlvbnMiLCJwYXNzaXZlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlcnIiLCJoYXNUb3VjaFN1cHBvcnQiLCJkb2N1bWVudEVsZW1lbnQiLCJtYXhUb3VjaFBvaW50cyIsImhhc1BvaW50ZXJFdmVudFN1cHBvcnQiLCJCb29sZWFuIiwiUG9pbnRlckV2ZW50IiwiTVNQb2ludGVyRXZlbnQiLCJoYXNJbnRlcnNlY3Rpb25PYnNlcnZlclN1cHBvcnQiLCJJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5IiwicHJvdG90eXBlIiwiZ2V0RW52Iiwia2V5IiwiZmFsbGJhY2siLCJlbnYiLCJwcm9jZXNzIiwiZ2V0Tm9XYXJuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBSUE7QUFFTyxNQUFNQSxnQkFBZ0IsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQTNDO0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsT0FBT0MsUUFBUCxLQUFvQixXQUEvQztBQUNBLE1BQU1DLG1CQUFtQixHQUFHLE9BQU9DLFNBQVAsS0FBcUIsV0FBakQ7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxPQUFPQyxPQUFQLEtBQW1CLFdBQTdDO0FBQ0EsTUFBTUMsMEJBQTBCLEdBQ3JDLE9BQU9DLGdCQUFQLEtBQTRCLFdBQTVCLElBQ0EsT0FBT0Msc0JBQVAsS0FBa0MsV0FEbEMsSUFFQSxPQUFPQyxtQkFBUCxLQUErQixXQUgxQjtBQUtBLE1BQU1DLFNBQVMsR0FBR1osZ0JBQWdCLElBQUlFLGtCQUFwQixJQUEwQ0UsbUJBQTVELEMsQ0FFUDs7QUFDTyxNQUFNUyxTQUFTLEdBQUdELFNBQVMsR0FBR1gsTUFBTSxDQUFDSSxTQUFQLENBQWlCUSxTQUFqQixDQUEyQkMsV0FBM0IsRUFBSCxHQUE4QyxFQUF6RTtBQUVBLE1BQU1DLE9BQU8sR0FBR0YsU0FBUyxDQUFDRyxPQUFWLENBQWtCLE9BQWxCLElBQTZCLENBQTdDO0FBQ0EsTUFBTUMsSUFBSSxHQUFHLGVBQWVDLElBQWYsQ0FBb0JMLFNBQXBCLENBQWIsQyxDQUVQOztBQUNPLE1BQU1NLHNCQUFzQixHQUFHLENBQUMsTUFBTTtBQUMzQyxNQUFJQyxxQkFBcUIsR0FBRyxLQUE1Qjs7QUFDQSxNQUFJUixTQUFKLEVBQWU7QUFDYixRQUFJO0FBQ0YsWUFBTVMsT0FBTyxHQUFHO0FBQ2QsWUFBSUMsT0FBSixHQUFjO0FBQ1o7QUFDQTs7QUFDQTtBQUNBRiwrQkFBcUIsR0FBRyxJQUF4QjtBQUNEOztBQU5hLE9BQWhCO0FBUUFuQixZQUFNLENBQUNzQixnQkFBUCxDQUF3QixNQUF4QixFQUFnQ0YsT0FBaEMsRUFBeUNBLE9BQXpDO0FBQ0FwQixZQUFNLENBQUN1QixtQkFBUCxDQUEyQixNQUEzQixFQUFtQ0gsT0FBbkMsRUFBNENBLE9BQTVDO0FBQ0QsS0FYRCxDQVdFLE9BQU9JLEdBQVAsRUFBWTtBQUNaO0FBQ0FMLDJCQUFxQixHQUFHLEtBQXhCO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPQSxxQkFBUDtBQUNELENBcEJxQyxHQUEvQjtBQXNCQSxNQUFNTSxlQUFlLEdBQzFCZCxTQUFTLEtBQUssa0JBQWtCVCxRQUFRLENBQUN3QixlQUEzQixJQUE4Q3RCLFNBQVMsQ0FBQ3VCLGNBQVYsR0FBMkIsQ0FBOUUsQ0FESjtBQUdBLE1BQU1DLHNCQUFzQixHQUNqQ2pCLFNBQVMsSUFBSWtCLE9BQU8sQ0FBQzdCLE1BQU0sQ0FBQzhCLFlBQVAsSUFBdUI5QixNQUFNLENBQUMrQixjQUEvQixDQURmO0FBR0EsTUFBTUMsOEJBQThCLEdBQ3pDckIsU0FBUyxJQUNULDBCQUEwQlgsTUFEMUIsSUFFQSwrQkFBK0JBLE1BRi9CLElBR0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCQSxNQUFNLENBQUNpQyx5QkFBUCxDQUFpQ0MsU0FQbkQsQyxDQVNQOztBQUVPLE1BQU1DLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQUNDLEdBQUQsRUFBMEI7QUFBQSxNQUFwQkMsUUFBb0IsdUVBQVQsSUFBUztBQUM5QyxRQUFNQyxHQUFHLEdBQUcsT0FBT0MsT0FBUCxLQUFtQixXQUFuQixJQUFrQ0EsT0FBbEMsR0FBNENBLE9BQU8sQ0FBQ0QsR0FBUixJQUFlLEVBQTNELEdBQWdFLEVBQTVFOztBQUNBLE1BQUksQ0FBQ0YsR0FBTCxFQUFVO0FBQ1I7QUFDQSxXQUFPRSxHQUFQO0FBQ0Q7O0FBQ0QsU0FBT0EsR0FBRyxDQUFDRixHQUFELENBQUgsSUFBWUMsUUFBbkI7QUFDRCxDQVBNO0FBU0EsTUFBTUcsU0FBUyxHQUFHLE1BQU1MLE1BQU0sQ0FBQyx1QkFBRCxDQUE5QixDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllcyB0byBnZXQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnRcbiAqL1xuXG4vLyAtLS0gQ29uc3RhbnRzIC0tLVxuXG5leHBvcnQgY29uc3QgaGFzV2luZG93U3VwcG9ydCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG5leHBvcnQgY29uc3QgaGFzRG9jdW1lbnRTdXBwb3J0ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuZXhwb3J0IGNvbnN0IGhhc05hdmlnYXRvclN1cHBvcnQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xuZXhwb3J0IGNvbnN0IGhhc1Byb21pc2VTdXBwb3J0ID0gdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnXG5leHBvcnQgY29uc3QgaGFzTXV0YXRpb25PYnNlcnZlclN1cHBvcnQgPVxuICB0eXBlb2YgTXV0YXRpb25PYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcgfHxcbiAgdHlwZW9mIFdlYktpdE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnIHx8XG4gIHR5cGVvZiBNb3pNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJ1xuXG5leHBvcnQgY29uc3QgaXNCcm93c2VyID0gaGFzV2luZG93U3VwcG9ydCAmJiBoYXNEb2N1bWVudFN1cHBvcnQgJiYgaGFzTmF2aWdhdG9yU3VwcG9ydFxuXG4vLyBCcm93c2VyIHR5cGUgc25pZmZpbmdcbmV4cG9ydCBjb25zdCB1c2VyQWdlbnQgPSBpc0Jyb3dzZXIgPyB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpIDogJydcblxuZXhwb3J0IGNvbnN0IGlzSlNET00gPSB1c2VyQWdlbnQuaW5kZXhPZignanNkb20nKSA+IDBcbmV4cG9ydCBjb25zdCBpc0lFID0gL21zaWV8dHJpZGVudC8udGVzdCh1c2VyQWdlbnQpXG5cbi8vIERldGVybWluZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgb3B0aW9uIHBhc3NpdmUgZm9yIGV2ZW50c1xuZXhwb3J0IGNvbnN0IGhhc1Bhc3NpdmVFdmVudFN1cHBvcnQgPSAoKCkgPT4ge1xuICBsZXQgcGFzc2l2ZUV2ZW50U3VwcG9ydGVkID0gZmFsc2VcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBnZXQgcGFzc2l2ZSgpIHtcbiAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGJyb3dzZXJcbiAgICAgICAgICAvLyBhdHRlbXB0cyB0byBhY2Nlc3MgdGhlIHBhc3NpdmUgcHJvcGVydHkuXG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHdpbGwgbmV2ZXIgYmUgY2FsbGVkIGluIEpTRE9NICovXG4gICAgICAgICAgcGFzc2l2ZUV2ZW50U3VwcG9ydGVkID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpXG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG9wdGlvbnMsIG9wdGlvbnMpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogd2lsbCBuZXZlciBiZSBjYWxsZWQgaW4gSlNET00gKi9cbiAgICAgIHBhc3NpdmVFdmVudFN1cHBvcnRlZCA9IGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiBwYXNzaXZlRXZlbnRTdXBwb3J0ZWRcbn0pKClcblxuZXhwb3J0IGNvbnN0IGhhc1RvdWNoU3VwcG9ydCA9XG4gIGlzQnJvd3NlciAmJiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApXG5cbmV4cG9ydCBjb25zdCBoYXNQb2ludGVyRXZlbnRTdXBwb3J0ID1cbiAgaXNCcm93c2VyICYmIEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCB8fCB3aW5kb3cuTVNQb2ludGVyRXZlbnQpXG5cbmV4cG9ydCBjb25zdCBoYXNJbnRlcnNlY3Rpb25PYnNlcnZlclN1cHBvcnQgPVxuICBpc0Jyb3dzZXIgJiZcbiAgJ0ludGVyc2VjdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgJiZcbiAgJ0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnknIGluIHdpbmRvdyAmJlxuICAvLyBFZGdlIDE1IGFuZCBVQyBCcm93c2VyIGxhY2sgc3VwcG9ydCBmb3IgYGlzSW50ZXJzZWN0aW5nYFxuICAvLyBidXQgd2UgYW4gdXNlIGludGVyc2VjdGlvblJhdGlvID4gMCBpbnN0ZWFkXG4gIC8vICdpc0ludGVyc2VjdGluZycgaW4gd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlICYmXG4gICdpbnRlcnNlY3Rpb25SYXRpbycgaW4gd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlXG5cbi8vIC0tLSBHZXR0ZXJzIC0tLVxuXG5leHBvcnQgY29uc3QgZ2V0RW52ID0gKGtleSwgZmFsbGJhY2sgPSBudWxsKSA9PiB7XG4gIGNvbnN0IGVudiA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzID8gcHJvY2Vzcy5lbnYgfHwge30gOiB7fVxuICBpZiAoIWtleSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIGVudlxuICB9XG4gIHJldHVybiBlbnZba2V5XSB8fCBmYWxsYmFja1xufVxuXG5leHBvcnQgY29uc3QgZ2V0Tm9XYXJuID0gKCkgPT4gZ2V0RW52KCdCT09UU1RSQVBfVlVFX05PX1dBUk4nKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n")},,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* unused harmony export empty */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return globalHandleError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return interopDefault; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return applyAsyncData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return sanitizeComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return getMatchedComponents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return getMatchedComponentsInstances; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return flatMapComponents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return resolveRouteComponents; });\n/* unused harmony export getRouteData */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return setContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return middlewareSeries; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return promisify; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return getLocation; });\n/* unused harmony export urlJoin */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return compile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return getQueryDiff; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return normalizeError; });\n/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38);\n/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39);\n/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(100);\n/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(5);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n // window.{{globals.loadedCallback}} hook\n// Useful for jsdom testing or plugins (https://github.com/tmpvar/jsdom#dealing-with-asynchronous-script-loading)\n\nif (true) {\n  window.onNuxtReadyCbs = [];\n\n  window.onNuxtReady = cb => {\n    window.onNuxtReadyCbs.push(cb);\n  };\n}\n\nfunction empty() {}\nfunction globalHandleError(error) {\n  if (vue__WEBPACK_IMPORTED_MODULE_9___default.a.config.errorHandler) {\n    vue__WEBPACK_IMPORTED_MODULE_9___default.a.config.errorHandler(error);\n  }\n}\nfunction interopDefault(promise) {\n  return promise.then(m => m.default || m);\n}\nfunction applyAsyncData(Component, asyncData) {\n  if ( // For SSR, we once all this function without second param to just apply asyncData\n  // Prevent doing this for each SSR request\n  !asyncData && Component.options.__hasNuxtData) {\n    return;\n  }\n\n  const ComponentData = Component.options._originDataFn || Component.options.data || function () {\n    return {};\n  };\n\n  Component.options._originDataFn = ComponentData;\n\n  Component.options.data = function () {\n    const data = ComponentData.call(this);\n\n    if (this.$ssrContext) {\n      asyncData = this.$ssrContext.asyncData[Component.cid];\n    }\n\n    return Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"])({}, data, asyncData);\n  };\n\n  Component.options.__hasNuxtData = true;\n\n  if (Component._Ctor && Component._Ctor.options) {\n    Component._Ctor.options.data = Component.options.data;\n  }\n}\nfunction sanitizeComponent(Component) {\n  // If Component already sanitized\n  if (Component.options && Component._Ctor === Component) {\n    return Component;\n  }\n\n  if (!Component.options) {\n    Component = vue__WEBPACK_IMPORTED_MODULE_9___default.a.extend(Component); // fix issue #6\n\n    Component._Ctor = Component;\n  } else {\n    Component._Ctor = Component;\n    Component.extendOptions = Component.options;\n  } // For debugging purpose\n\n\n  if (!Component.options.name && Component.options.__file) {\n    Component.options.name = Component.options.__file;\n  }\n\n  return Component;\n}\nfunction getMatchedComponents(route) {\n  let matches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Array.prototype.concat.apply([], route.matched.map((m, index) => {\n    return Object.keys(m.components).map(key => {\n      matches && matches.push(index);\n      return m.components[key];\n    });\n  }));\n}\nfunction getMatchedComponentsInstances(route) {\n  let matches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Array.prototype.concat.apply([], route.matched.map((m, index) => {\n    return Object.keys(m.instances).map(key => {\n      matches && matches.push(index);\n      return m.instances[key];\n    });\n  }));\n}\nfunction flatMapComponents(route, fn) {\n  return Array.prototype.concat.apply([], route.matched.map((m, index) => {\n    return Object.keys(m.components).reduce((promises, key) => {\n      if (m.components[key]) {\n        promises.push(fn(m.components[key], m.instances[key], m, key, index));\n      } else {\n        delete m.components[key];\n      }\n\n      return promises;\n    }, []);\n  }));\n}\nfunction resolveRouteComponents(route) {\n  return Promise.all(flatMapComponents(route,\n  /*#__PURE__*/\n  function () {\n    var _ref = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"])(function* (Component, _, match, key) {\n      // If component is a function, resolve it\n      if (typeof Component === 'function' && !Component.options) {\n        Component = yield Component();\n      }\n\n      match.components[key] = sanitizeComponent(Component);\n      return match.components[key];\n    });\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }()));\n}\nfunction getRouteData(_x5) {\n  return _getRouteData.apply(this, arguments);\n}\n\nfunction _getRouteData() {\n  _getRouteData = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"])(function* (route) {\n    if (!route) {\n      return;\n    } // Make sure the components are resolved (code-splitting)\n\n\n    yield resolveRouteComponents(route); // Send back a copy of route with meta based on Component definition\n\n    return Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"])({}, route, {\n      meta: getMatchedComponents(route).map((Component, index) => {\n        return Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"])({}, Component.options.meta, (route.matched[index] || {}).meta);\n      })\n    });\n  });\n  return _getRouteData.apply(this, arguments);\n}\n\nfunction setContext(_x6, _x7) {\n  return _setContext.apply(this, arguments);\n}\n\nfunction _setContext() {\n  _setContext = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"])(function* (app, context) {\n    // If context not defined, create it\n    if (!app.context) {\n      app.context = {\n        isStatic: true,\n        isDev: false,\n        isHMR: false,\n        app,\n        payload: context.payload,\n        error: context.error,\n        base: '/',\n        env: {} // Only set once\n\n      };\n\n      if (context.req) {\n        app.context.req = context.req;\n      }\n\n      if (context.res) {\n        app.context.res = context.res;\n      }\n\n      if (context.ssrContext) {\n        app.context.ssrContext = context.ssrContext;\n      }\n\n      app.context.redirect = (status, path, query) => {\n        if (!status) {\n          return;\n        }\n\n        app.context._redirected = true; // if only 1 or 2 arguments: redirect('/') or redirect('/', { foo: 'bar' })\n\n        let pathType = typeof path;\n\n        if (typeof status !== 'number' && (pathType === 'undefined' || pathType === 'object')) {\n          query = path || {};\n          path = status;\n          pathType = typeof path;\n          status = 302;\n        }\n\n        if (pathType === 'object') {\n          path = app.router.resolve(path).route.fullPath;\n        } // \"/absolute/route\", \"./relative/route\" or \"../relative/route\"\n\n\n        if (/(^[.]{1,2}\\/)|(^\\/(?!\\/))/.test(path)) {\n          app.context.next({\n            path,\n            query,\n            status\n          });\n        } else {\n          path = formatUrl(path, query);\n\n          if (false) {}\n\n          if (true) {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Location/replace\n            window.location.replace(path); // Throw a redirect error\n\n            throw new Error('ERR_REDIRECT');\n          }\n        }\n      };\n\n      if (false) {}\n\n      if (true) {\n        app.context.nuxtState = window.__NUXT__;\n      }\n    } // Dynamic keys\n\n\n    const [currentRouteData, fromRouteData] = yield Promise.all([getRouteData(context.route), getRouteData(context.from)]);\n\n    if (context.route) {\n      app.context.route = currentRouteData;\n    }\n\n    if (context.from) {\n      app.context.from = fromRouteData;\n    }\n\n    app.context.next = context.next;\n    app.context._redirected = false;\n    app.context._errored = false;\n    app.context.isHMR = Boolean(context.isHMR);\n    app.context.params = app.context.route.params || {};\n    app.context.query = app.context.route.query || {};\n  });\n  return _setContext.apply(this, arguments);\n}\n\nfunction middlewareSeries(promises, appContext) {\n  if (!promises.length || appContext._redirected || appContext._errored) {\n    return Promise.resolve();\n  }\n\n  return promisify(promises[0], appContext).then(() => {\n    return middlewareSeries(promises.slice(1), appContext);\n  });\n}\nfunction promisify(fn, context) {\n  let promise;\n\n  if (fn.length === 2) {\n    // fn(context, callback)\n    promise = new Promise(resolve => {\n      fn(context, function (err, data) {\n        if (err) {\n          context.error(err);\n        }\n\n        data = data || {};\n        resolve(data);\n      });\n    });\n  } else {\n    promise = fn(context);\n  }\n\n  if (!promise || !(promise instanceof Promise) && typeof promise.then !== 'function') {\n    promise = Promise.resolve(promise);\n  }\n\n  return promise;\n} // Imported from vue-router\n\nfunction getLocation(base, mode) {\n  let path = decodeURI(window.location.pathname);\n\n  if (mode === 'hash') {\n    return window.location.hash.replace(/^#\\//, '');\n  }\n\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n\n  return (path || '/') + window.location.search + window.location.hash;\n}\nfunction urlJoin() {\n  return Array.prototype.slice.call(arguments).join('/').replace(/\\/+/g, '/');\n} // Imported from path-to-regexp\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\n\nfunction compile(str, options) {\n  return tokensToFunction(parse(str, options));\n}\nfunction getQueryDiff(toQuery, fromQuery) {\n  const diff = {};\n\n  const queries = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"])({}, toQuery, fromQuery);\n\n  for (const k in queries) {\n    if (String(toQuery[k]) !== String(fromQuery[k])) {\n      diff[k] = true;\n    }\n  }\n\n  return diff;\n}\nfunction normalizeError(err) {\n  let message;\n\n  if (!(err.message || typeof err === 'string')) {\n    try {\n      message = JSON.stringify(err, null, 2);\n    } catch (e) {\n      message = \"[\".concat(err.constructor.name, \"]\");\n    }\n  } else {\n    message = err.message || err;\n  }\n\n  return Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"])({}, err, {\n    message,\n    statusCode: err.statusCode || err.status || err.response && err.response.status || 500\n  });\n}\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\n\nconst PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)', // Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n// \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n// \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n'([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'].join('|'), 'g');\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\n\nfunction parse(str, options) {\n  const tokens = [];\n  let key = 0;\n  let index = 0;\n  let path = '';\n  const defaultDelimiter = options && options.delimiter || '/';\n  let res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    const m = res[0];\n    const escaped = res[1];\n    const offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length; // Ignore already escaped sequences.\n\n    if (escaped) {\n      path += escaped[1];\n      continue;\n    }\n\n    const next = str[index];\n    const prefix = res[2];\n    const name = res[3];\n    const capture = res[4];\n    const group = res[5];\n    const modifier = res[6];\n    const asterisk = res[7]; // Push the current path onto the tokens.\n\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    const partial = prefix != null && next != null && next !== prefix;\n    const repeat = modifier === '+' || modifier === '*';\n    const optional = modifier === '?' || modifier === '*';\n    const delimiter = res[2] || defaultDelimiter;\n    const pattern = capture || group;\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter,\n      optional,\n      repeat,\n      partial,\n      asterisk: Boolean(asterisk),\n      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'\n    });\n  } // Match any characters still remaining.\n\n\n  if (index < str.length) {\n    path += str.substr(index);\n  } // If the path exists, push it onto the end.\n\n\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens;\n}\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\n\n\nfunction encodeURIComponentPretty(str) {\n  return encodeURI(str).replace(/[/?#]/g, c => {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\n\n\nfunction encodeAsterisk(str) {\n  return encodeURI(str).replace(/[?#]/g, c => {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\n\n\nfunction tokensToFunction(tokens) {\n  // Compile all the tokens into regexps.\n  const matches = new Array(tokens.length); // Compile all the patterns before compilation.\n\n  for (let i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    let path = '';\n    const data = obj || {};\n    const options = opts || {};\n    const encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n        continue;\n      }\n\n      const value = data[token.name || 'pathMatch'];\n      let segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue;\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined');\n        }\n      }\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`');\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue;\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty');\n          }\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`');\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue;\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"');\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path;\n  };\n}\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\n\n\nfunction escapeString(str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1');\n}\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\n\n\nfunction escapeGroup(group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1');\n}\n/**\n * Format given url, append query to url query string\n *\n * @param  {string} url\n * @param  {string} query\n * @return {string}\n */\n\n\nfunction formatUrl(url, query) {\n  let protocol;\n  const index = url.indexOf('://');\n\n  if (index !== -1) {\n    protocol = url.substring(0, index);\n    url = url.substring(index + 3);\n  } else if (url.startsWith('//')) {\n    url = url.substring(2);\n  }\n\n  let parts = url.split('/');\n  let result = (protocol ? protocol + '://' : '//') + parts.shift();\n  let path = parts.filter(Boolean).join('/');\n  let hash;\n  parts = path.split('#');\n\n  if (parts.length === 2) {\n    [path, hash] = parts;\n  }\n\n  result += path ? '/' + path : '';\n\n  if (query && JSON.stringify(query) !== '{}') {\n    result += (url.split('?').length === 2 ? '&' : '?') + formatQuery(query);\n  }\n\n  result += hash ? '#' + hash : '';\n  return result;\n}\n/**\n * Transform data object to query string\n *\n * @param  {object} query\n * @return {string}\n */\n\n\nfunction formatQuery(query) {\n  return Object.keys(query).sort().map(key => {\n    const val = query[key];\n\n    if (val == null) {\n      return '';\n    }\n\n    if (Array.isArray(val)) {\n      return val.slice().map(val2 => [key, '=', val2].join('')).join('&');\n    }\n\n    return key + '=' + val;\n  }).filter(Boolean).join('&');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return parseVersion; });\n/* unused harmony export parseUrl */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return relativeUrl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return makeTOC; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return importAll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return scrollTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return offsetTop; });\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);\n/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(32);\n/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(89);\n/* harmony import */ var lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n // Parse a fully qualified version from a string\n\nconst parseVersion = version => {\n  const matches = version.match(/([0-9]+\\.[0-9]+\\.[0-9]+)/g);\n  const matchesCount = matches.length;\n  return matchesCount > 0 ? matches[matchesCount - 1] : '';\n}; // Remove any HTML tags, but leave entities alone\n\nconst stripHTML = function stripHTML() {\n  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return str.replace(/<[^>]+>/g, '');\n}; // Remove any double quotes from a string\n\n\nconst stripQuotes = function stripQuotes() {\n  let str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return str.replace(/\"/g, '');\n};\n\nconst parseUrl = value => {\n  let anchor = document.createElement('a');\n  anchor.href = value; // We need to add the anchor to the document to make sure the\n  // `pathname` is correctly detected in any browser\n\n  document.body.appendChild(anchor);\n  let result = ['hash', 'host', 'hostname', 'pathname', 'port', 'protocol', 'search'].reduce((result, prop) => {\n    result[prop] = anchor[prop] || null;\n    return result;\n  }, {}); // Make sure to remove the anchor from document as soon as possible\n\n  document.body.removeChild(anchor); // Normalize port\n\n  if (!result.port && result.protocol) {\n    if (result.protocol === 'https:') {\n      result.port = '443';\n    }\n\n    if (result.protocol === 'http:') {\n      result.port = '80';\n    }\n  } // Return early for browsers that resolved a non-existing `hostname` correctly\n\n\n  if (result.hostname) {\n    return result;\n  } // Handle relative URL's\n\n\n  if (value.charAt(0) === '/') {\n    return parseUrl(window.location.origin + value);\n  } // Handle all other URL's\n\n\n  let baseUrl = window.location.href;\n  baseUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/'));\n  return parseUrl(\"\".concat(baseUrl, \"/\").concat(value));\n};\nconst relativeUrl = url => {\n  const {\n    pathname,\n    hash\n  } = parseUrl(url);\n\n  if (!pathname) {\n    return url;\n  }\n\n  return pathname + (hash || '');\n}; // Process an HTML README and create a page TOC array\n// IDs are the only attribute on auto generated heading tags,\n// so we take advantage of that when using our RegExpr matches\n// Note: IDs may not have quotes when the README's are parsed in production mode !?!?\n// Expected format: <h(1|2|3) id=\"?id-string\"?>heading content</h(1|2|3)>\n// Also grabs meta data if available to generate auto headings\n\nconst makeTOC = function makeTOC(readme) {\n  let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!readme) {\n    return {};\n  }\n\n  let top = '';\n  let title = '';\n  let toc = [];\n  let parentIdx = 0; // Get the first <h1> tag with ID\n\n  const h1 = readme.match(/<h1 id=([^> ]+)>(.+?)<\\/h1>/) || [];\n\n  if (h1) {\n    top = \"#\".concat(stripQuotes(h1[1]));\n    title = stripHTML(h1[2]);\n  } // Get all the <h2> and <h3> headings with ID's\n\n\n  const headings = readme.match(/<h([23]) id=[^> ]+>.+?<\\/h\\1>/g) || []; // Process the <h2> and <h3> headings into a TOC structure\n\n  headings // Create a match `[value, tag, id, content]`\n  .map(heading => heading.match(/^<(h[23]) id=([^> ]+)>(.+?)<\\/\\1>$/)) // Filter out un-matched values\n  .filter(v => Array.isArray(v)) // Create TOC structure\n  .forEach((_ref) => {\n    let [value, tag, id, content] = _ref;\n    const href = \"#\".concat(stripQuotes(id));\n    const label = stripHTML(content);\n\n    if (tag === 'h2') {\n      toc.push({\n        href,\n        label\n      });\n      parentIdx = toc.length - 1;\n    } else if (tag === 'h3') {\n      let parent = toc[parentIdx];\n\n      if (parent) {\n        // We nest <h3> tags as a sub array\n        parent.toc = parent.toc || [];\n        parent.toc.push({\n          href,\n          label\n        });\n      }\n    }\n  }); // Process meta information for component pages\n\n  if (meta) {\n    const isDirective = !!meta.directive;\n    const hasComponents = meta.components && meta.components.length > 0;\n    const hasDirectives = meta.directives && meta.directives.length > 0;\n\n    if (!isDirective && (hasComponents || hasDirectives)) {\n      let componentToc = [];\n\n      if (hasComponents) {\n        componentToc.push( // Add component sub-headings\n        ...meta.components.map((_ref2) => {\n          let {\n            component\n          } = _ref2;\n          const tag = lodash_kebabCase__WEBPACK_IMPORTED_MODULE_5___default()(component);\n          return {\n            label: \"&lt;\".concat(tag, \"&gt;\"),\n            href: \"#comp-ref-\".concat(tag)\n          };\n        }), // Add component import sub-heading\n        {\n          label: 'Importing individual components',\n          href: '#importing-individual-components'\n        });\n      } // Add directive import sub-heading\n\n\n      if (hasDirectives) {\n        componentToc.push({\n          label: 'Importing individual directives',\n          href: '#importing-individual-directives'\n        });\n      } // Add plugin import sub-heading\n\n\n      componentToc.push({\n        label: 'Importing as a Vue.js plugin',\n        href: '#importing-as-a-plugin'\n      }); // Add component reference heading\n\n      toc.push({\n        label: 'Component reference',\n        href: '#component-reference',\n        toc: componentToc\n      });\n    } else if (isDirective) {\n      // Add directive reference heading\n      toc.push({\n        label: 'Directive reference',\n        href: '#directive-reference',\n        toc: [// Directive import sub-heading\n        {\n          label: 'Importing individual directives',\n          href: '#importing-individual-directives'\n        }, // Plugin import sub-heading\n        {\n          label: 'Importing as a Vue.js plugin',\n          href: '#importing-as-a-plugin'\n        }]\n      });\n    }\n  }\n\n  return {\n    title,\n    top,\n    toc\n  };\n};\nconst importAll = r => {\n  const obj = {};\n  r.keys().map(r).map(m => m.meta || m).map(m => Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])({\n    slug: m.slug || (m.title || '').replace(' ', '-').toLowerCase()\n  }, m)).sort((a, b) => {\n    if (a.slug < b.slug) return -1;else if (a.slug > b.slug) return 1;\n    return 0;\n  }).forEach(m => {\n    if (m.components) {\n      // Normalize `meta.components` to array of objects form\n      m.components = m.components.map(c => typeof c === 'string' ? {\n        component: c\n      } : c);\n    }\n\n    obj[m.slug] = m;\n  });\n  return obj;\n}; // Smooth Scroll handler methods\n\nconst easeInOutQuad = (t, b, c, d) => {\n  t /= d / 2;\n  if (t < 1) return c / 2 * t * t + b;\n  t--;\n  return -c / 2 * (t * (t - 2) - 1) + b;\n};\n\nconst scrollTo = (scroller, to, duration, cb) => {\n  const start = scroller.scrollTop;\n  const change = to - start;\n  const increment = 20;\n  let currentTime = 0;\n\n  const animateScroll = function animateScroll() {\n    currentTime += increment;\n    const val = easeInOutQuad(currentTime, start, change, duration);\n    scroller.scrollTop = Math.round(val);\n\n    if (currentTime < duration) {\n      setTimeout(animateScroll, increment);\n    } else if (cb && typeof cb === 'function') {\n      cb();\n    }\n  };\n\n  animateScroll();\n}; // Return an element's offset wrt document element\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\n\nconst offsetTop = el => {\n  if (!el.getClientRects().length) {\n    return 0;\n  }\n\n  const bcr = el.getBoundingClientRect();\n  const win = el.ownerDocument.defaultView;\n  return bcr.top + win.pageYOffset;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n // General BootstrapVue configuration\n//\n// BREAKPOINT DEFINITIONS\n//\n// Some components (BCol and BFormGroup) generate props based on breakpoints, and this\n// occurs when the component is first loaded (evaluated), which may happen before the\n// config is created/modified\n//\n// To get around this we make these components async (lazy evaluation)\n// The component definition is only called/executed when the first access to the\n// component is used (and cached on subsequent uses)\n//\n// See: https://vuejs.org/v2/guide/components-dynamic-async.html#Async-Components\n//\n// PROP DEFAULTS\n//\n// For default values on props, we use the default value factory function approach so\n// so that the default values are pulled in at each component instantiation\n//\n//  props: {\n//    variant: {\n//      type: String,\n//      default: () => getConfigComponent('BAlert', 'variant')\n//    }\n//  }\n// prettier-ignore\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Object(_object__WEBPACK_IMPORTED_MODULE_0__[/* deepFreeze */ \"c\"])({\n  // Breakpoints\n  breakpoints: ['xs', 'sm', 'md', 'lg', 'xl'],\n  // Component Specific defaults are keyed by the component\n  // name (PascalCase) and prop name (camelCase)\n  BAlert: {\n    dismissLabel: 'Close',\n    variant: 'info'\n  },\n  BBadge: {\n    variant: 'secondary'\n  },\n  BButton: {\n    variant: 'secondary'\n  },\n  BButtonClose: {\n    // `textVariant` is `null` to inherit the current text color\n    textVariant: null,\n    ariaLabel: 'Close'\n  },\n  BCardSubTitle: {\n    // BCard and BCardBody also inherit this prop\n    subTitleTextVariant: 'muted'\n  },\n  BCarousel: {\n    labelPrev: 'Previous Slide',\n    labelNext: 'Next Slide',\n    labelGotoSlide: 'Goto Slide',\n    labelIndicators: 'Select a slide to display'\n  },\n  BDropdown: {\n    toggleText: 'Toggle Dropdown',\n    variant: 'secondary',\n    splitVariant: null\n  },\n  BFormFile: {\n    browseText: 'Browse',\n    // Chrome default file prompt\n    placeholder: 'No file chosen',\n    dropPlaceholder: 'Drop files here'\n  },\n  BFormText: {\n    textVariant: 'muted'\n  },\n  BImg: {\n    blankColor: 'transparent'\n  },\n  BImgLazy: {\n    blankColor: 'transparent'\n  },\n  BJumbotron: {\n    bgVariant: null,\n    borderVariant: null,\n    textVariant: null\n  },\n  BListGroupItem: {\n    variant: null\n  },\n  BModal: {\n    titleTag: 'h5',\n    size: 'md',\n    headerBgVariant: null,\n    headerBorderVariant: null,\n    headerTextVariant: null,\n    headerCloseVariant: null,\n    bodyBgVariant: null,\n    bodyTextVariant: null,\n    footerBgVariant: null,\n    footerBorderVariant: null,\n    footerTextVariant: null,\n    cancelTitle: 'Cancel',\n    cancelVariant: 'secondary',\n    okTitle: 'OK',\n    okVariant: 'primary',\n    headerCloseLabel: 'Close'\n  },\n  BNavbar: {\n    variant: null\n  },\n  BNavbarToggle: {\n    label: 'Toggle navigation'\n  },\n  BProgress: {\n    variant: null\n  },\n  BProgressBar: {\n    variant: null\n  },\n  BSpinner: {\n    variant: null\n  },\n  BTable: {\n    selectedVariant: 'primary',\n    headVariant: null,\n    footVariant: null\n  },\n  BToast: {\n    toaster: 'b-toaster-top-right',\n    autoHideDelay: 5000,\n    variant: null,\n    toastClass: null,\n    headerClass: null,\n    bodyClass: null,\n    solid: false\n  },\n  BToaster: {\n    ariaLive: null,\n    ariaAtomic: null,\n    role: null\n  },\n  BTooltip: {\n    delay: 0,\n    boundary: 'scrollParent',\n    boundaryPadding: 5\n  },\n  BPopover: {\n    delay: 0,\n    boundary: 'scrollParent',\n    boundaryPadding: 5\n  }\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n")},,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./.nuxt/components/nuxt-error.vue?vue&type=template&id=1e6fa6d7&\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"__nuxt-error-page"},[_c(\'div\',{staticClass:"error"},[_c(\'svg\',{attrs:{"xmlns":"http://www.w3.org/2000/svg","width":"90","height":"90","fill":"#DBE1EC","viewBox":"0 0 48 48"}},[_c(\'path\',{attrs:{"d":"M22 30h4v4h-4zm0-16h4v12h-4zm1.99-10C12.94 4 4 12.95 4 24s8.94 20 19.99 20S44 35.05 44 24 35.04 4 23.99 4zM24 40c-8.84 0-16-7.16-16-16S15.16 8 24 8s16 7.16 16 16-7.16 16-16 16z"}})]),_vm._v(" "),_c(\'div\',{staticClass:"title"},[_vm._v(_vm._s(_vm.message))]),_vm._v(" "),(_vm.statusCode === 404)?_c(\'p\',{staticClass:"description"},[_c(\'NuxtLink\',{staticClass:"error-link",attrs:{"to":"/"}},[_vm._v("Back to the home page")])],1):_vm._e(),_vm._v(" "),_vm._m(0)])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"logo"},[_c(\'a\',{attrs:{"href":"https://nuxtjs.org","target":"_blank","rel":"noopener"}},[_vm._v("Nuxt.js")])])}]\n\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./.nuxt/components/nuxt-error.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n/* harmony default export */ var nuxt_errorvue_type_script_lang_js_ = ({\n  name: \'NuxtError\',\n  props: {\n    error: {\n      type: Object,\n      default: null\n    }\n  },\n\n  head() {\n    return {\n      title: this.message,\n      meta: [{\n        name: \'viewport\',\n        content: \'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no\'\n      }]\n    };\n  },\n\n  computed: {\n    statusCode() {\n      return this.error && this.error.statusCode || 500;\n    },\n\n    message() {\n      return this.error.message || "Error";\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./.nuxt/components/nuxt-error.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_nuxt_errorvue_type_script_lang_js_ = (nuxt_errorvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(11);\n\n// CONCATENATED MODULE: ./.nuxt/components/nuxt-error.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  components_nuxt_errorvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var nuxt_error = __webpack_exports__["a"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8ubnV4dC9jb21wb25lbnRzL251eHQtZXJyb3IudnVlP2RjM2QiLCJ3ZWJwYWNrOi8vLy5udXh0L2NvbXBvbmVudHMvbnV4dC1lcnJvci52dWU/YzcwNiIsIndlYnBhY2s6Ly8vLi8ubnV4dC9jb21wb25lbnRzL251eHQtZXJyb3IudnVlP2VkZGYiLCJ3ZWJwYWNrOi8vLy4vLm51eHQvY29tcG9uZW50cy9udXh0LWVycm9yLnZ1ZT85OWQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsZ0NBQWdDLFlBQVksb0JBQW9CLFlBQVksT0FBTyx3R0FBd0csYUFBYSxPQUFPLHdMQUF3TCwwQkFBMEIsb0JBQW9CLDZFQUE2RSwwQkFBMEIsaUJBQWlCLGdDQUFnQyxVQUFVO0FBQ2pzQixvQ0FBb0MsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQixtQkFBbUIsVUFBVSxPQUFPLGdFQUFnRSx3QkFBd0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbUJoUDtBQUNBLG1CQURBO0FBRUE7QUFDQTtBQUNBLGtCQURBO0FBRUE7QUFGQTtBQURBLEdBRkE7O0FBUUE7QUFDQTtBQUNBLHlCQURBO0FBRUEsYUFDQTtBQUNBLHdCQURBO0FBRUE7QUFGQSxPQURBO0FBRkE7QUFTQSxHQWxCQTs7QUFtQkE7QUFDQTtBQUNBO0FBQ0EsS0FIQTs7QUFJQTtBQUNBO0FBQ0E7O0FBTkE7QUFuQkEsRzs7QUNwQm9MLENBQWdCLG9IQUFHLEVBQUMsQzs7Ozs7QUNBL0c7QUFDM0I7QUFDTDtBQUNhOzs7QUFHdEU7QUFDMEY7QUFDMUYsZ0JBQWdCLDhDQUFVO0FBQzFCLEVBQUUsNkNBQU07QUFDUixFQUFFLE1BQU07QUFDUixFQUFFLGVBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRWUsMkYiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJfX251eHQtZXJyb3ItcGFnZVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZXJyb3JcIn0sW19jKCdzdmcnLHthdHRyczp7XCJ4bWxuc1wiOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcIndpZHRoXCI6XCI5MFwiLFwiaGVpZ2h0XCI6XCI5MFwiLFwiZmlsbFwiOlwiI0RCRTFFQ1wiLFwidmlld0JveFwiOlwiMCAwIDQ4IDQ4XCJ9fSxbX2MoJ3BhdGgnLHthdHRyczp7XCJkXCI6XCJNMjIgMzBoNHY0aC00em0wLTE2aDR2MTJoLTR6bTEuOTktMTBDMTIuOTQgNCA0IDEyLjk1IDQgMjRzOC45NCAyMCAxOS45OSAyMFM0NCAzNS4wNSA0NCAyNCAzNS4wNCA0IDIzLjk5IDR6TTI0IDQwYy04Ljg0IDAtMTYtNy4xNi0xNi0xNlMxNS4xNiA4IDI0IDhzMTYgNy4xNiAxNiAxNi03LjE2IDE2LTE2IDE2elwifX0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0aXRsZVwifSxbX3ZtLl92KF92bS5fcyhfdm0ubWVzc2FnZSkpXSksX3ZtLl92KFwiIFwiKSwoX3ZtLnN0YXR1c0NvZGUgPT09IDQwNCk/X2MoJ3AnLHtzdGF0aWNDbGFzczpcImRlc2NyaXB0aW9uXCJ9LFtfYygnTnV4dExpbmsnLHtzdGF0aWNDbGFzczpcImVycm9yLWxpbmtcIixhdHRyczp7XCJ0b1wiOlwiL1wifX0sW192bS5fdihcIkJhY2sgdG8gdGhlIGhvbWUgcGFnZVwiKV0pXSwxKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgwKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibG9nb1wifSxbX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwczovL251eHRqcy5vcmdcIixcInRhcmdldFwiOlwiX2JsYW5rXCIsXCJyZWxcIjpcIm5vb3BlbmVyXCJ9fSxbX3ZtLl92KFwiTnV4dC5qc1wiKV0pXSl9XVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiX19udXh0LWVycm9yLXBhZ2VcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZXJyb3JcIj5cbiAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiOTBcIiBoZWlnaHQ9XCI5MFwiIGZpbGw9XCIjREJFMUVDXCIgdmlld0JveD1cIjAgMCA0OCA0OFwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyIDMwaDR2NGgtNHptMC0xNmg0djEyaC00em0xLjk5LTEwQzEyLjk0IDQgNCAxMi45NSA0IDI0czguOTQgMjAgMTkuOTkgMjBTNDQgMzUuMDUgNDQgMjQgMzUuMDQgNCAyMy45OSA0ek0yNCA0MGMtOC44NCAwLTE2LTcuMTYtMTYtMTZTMTUuMTYgOCAyNCA4czE2IDcuMTYgMTYgMTYtNy4xNiAxNi0xNiAxNnpcIiAvPlxuICAgICAgPC9zdmc+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPnt7IG1lc3NhZ2UgfX08L2Rpdj5cbiAgICAgIDxwIHYtaWY9XCJzdGF0dXNDb2RlID09PSA0MDRcIiBjbGFzcz1cImRlc2NyaXB0aW9uXCI+XG4gICAgICAgIDxOdXh0TGluayBjbGFzcz1cImVycm9yLWxpbmtcIiB0bz1cIi9cIj5CYWNrIHRvIHRoZSBob21lIHBhZ2U8L051eHRMaW5rPlxuICAgICAgPC9wPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibG9nb1wiPlxuICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9udXh0anMub3JnXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIj5OdXh0LmpzPC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ051eHRFcnJvcicsXG4gIHByb3BzOiB7XG4gICAgZXJyb3I6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICB9XG4gIH0sXG4gIGhlYWQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBtZXRhOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAndmlld3BvcnQnLFxuICAgICAgICAgIGNvbnRlbnQ6ICd3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLjAsbWluaW11bS1zY2FsZT0xLjAsbWF4aW11bS1zY2FsZT0xLjAsdXNlci1zY2FsYWJsZT1ubydcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBzdGF0dXNDb2RlKCkge1xuICAgICAgcmV0dXJuICh0aGlzLmVycm9yICYmIHRoaXMuZXJyb3Iuc3RhdHVzQ29kZSkgfHwgNTAwXG4gICAgfSxcbiAgICBtZXNzYWdlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZXJyb3IubWVzc2FnZSB8fCBgRXJyb3JgXG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLl9fbnV4dC1lcnJvci1wYWdlIHtcbiAgcGFkZGluZzogMXJlbTtcbiAgYmFja2dyb3VuZDogI0Y3RjhGQjtcbiAgY29sb3I6ICM0NzQ5NEU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICBmb250LXdlaWdodDogMTAwICFpbXBvcnRhbnQ7XG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbn1cbi5fX251eHQtZXJyb3ItcGFnZSAuZXJyb3Ige1xuICBtYXgtd2lkdGg6IDQ1MHB4O1xufVxuLl9fbnV4dC1lcnJvci1wYWdlIC50aXRsZSB7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xuICBtYXJnaW4tdG9wOiAxNXB4O1xuICBjb2xvcjogIzQ3NDk0RTtcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xufVxuLl9fbnV4dC1lcnJvci1wYWdlIC5kZXNjcmlwdGlvbiB7XG4gIGNvbG9yOiAjN0Y4MjhCO1xuICBsaW5lLWhlaWdodDogMjFweDtcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcbn1cbi5fX251eHQtZXJyb3ItcGFnZSBhIHtcbiAgY29sb3I6ICM3RjgyOEIgIWltcG9ydGFudDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xufVxuLl9fbnV4dC1lcnJvci1wYWdlIC5sb2dvIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBsZWZ0OiAxMnB4O1xuICBib3R0b206IDEycHg7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9udXh0LWVycm9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9udXh0LWVycm9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vbnV4dC1lcnJvci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWU2ZmE2ZDcmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vbnV4dC1lcnJvci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL251eHQtZXJyb3IudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL251eHQtZXJyb3IudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},,,,,,,,function(module){eval('module.exports = {"d":"2.0.0-rc.25","b":"BootstrapVue, with over 40 plugins and more than 75 custom components, provides one of the most comprehensive implementations of Bootstrap v4 components and grid system for Vue.js. With extensive and automated WAI-ARIA accessibility markup.","a":{"@nuxt/opencollective":"^0.2.2","bootstrap":"^4.3.1","core-js":">=2.6.5 <3.0.0","popper.js":"^1.15.0","portal-vue":"^2.1.5","vue-functional-data-merge":"^3.1.0"},"c":{"@babel/cli":"^7.4.4","@babel/core":"^7.4.5","@babel/plugin-transform-modules-commonjs":"^7.4.4","@babel/plugin-transform-runtime":"^7.4.4","@babel/preset-env":"^7.4.5","@babel/standalone":"^7.4.5","@nuxtjs/google-analytics":"^2.2.0","@nuxtjs/pwa":"^3.0.0-beta.16","@vue/test-utils":"^1.0.0-beta.29","autoprefixer":"^9.6.0","babel-core":"^7.0.0-bridge.0","babel-eslint":"^10.0.2","babel-jest":"^24.8.0","babel-plugin-istanbul":"^5.1.4","clean-css-cli":"^4.3.0","codecov":"^3.5.0","codemirror":"^5.48.0","codesandbox":"^2.1.6","cross-env":"^5.2.0","eslint":"^6.0.1","eslint-config-prettier":"^6.0.0","eslint-config-standard":"^12.0.0","eslint-config-vue":"^2.0.2","eslint-plugin-import":"^2.18.0","eslint-plugin-jest":"^22.7.1","eslint-plugin-markdown":"^1.0.0","eslint-plugin-node":"^9.1.0","eslint-plugin-prettier":"^3.1.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.0","eslint-plugin-vue":"^5.2.3","esm":"^3.2.25","gh-pages":"^2.0.1","highlight.js":"^9.15.8","html-loader":"^0.5.5","jest":"^24.8.0","jest-environment-jsdom-fourteen":"^0.1.0","loader-utils":"^1.2.3","lodash":"^4.17.11","marked":"^0.6.3","node-sass":"^4.12.0","nuxt":"^2.8.1","postcss-cli":"^6.1.2","prettier":"1.14.3","rollup":"^1.16.3","rollup-plugin-babel":"^4.3.3","rollup-plugin-commonjs":"^10.0.1","rollup-plugin-node-resolve":"^5.2.0","sass-loader":"^7.1.0","standard-version":"^6.0.1","terser":"^4.0.1","vue":"^2.6.10","vue-jest":"^3.0.4","vue-router":"^3.0.6","vue-server-renderer":"^2.6.10","vue-template-compiler":"^2.6.10"}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIzMC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n')},,,,,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return components; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return directives; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return reference; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return misc; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return nav; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return bootstrapVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return nuxtVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return portalVueVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return vueVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return defaultConfig; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return bvDescription; });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);\nvar _package_json__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/__webpack_require__.t(30, 1);\n/* harmony import */ var _src_utils_config_defaults__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18);\n\n\n\n\nconst componentsContext = __webpack_require__(183);\n\nconst components = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* importAll */ "a"])(componentsContext);\n\nconst directivesContext = __webpack_require__(222);\n\nconst directives = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* importAll */ "a"])(directivesContext);\n\nconst referenceContext = __webpack_require__(226);\n\nconst reference = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* importAll */ "a"])(referenceContext);\n\nconst miscContext = __webpack_require__(237);\n\nconst misc = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* importAll */ "a"])(miscContext);\nconst nav = [{\n  title: \'Getting started\',\n  base: \'\',\n  exact: true\n}, {\n  title: \'Components\',\n  base: \'components/\',\n  pages: components\n}, {\n  title: \'Directives\',\n  base: \'directives/\',\n  pages: directives\n}, {\n  title: \'Reference\',\n  base: \'reference/\',\n  pages: reference\n}, {\n  title: \'Misc\',\n  base: \'misc/\',\n  pages: misc\n}];\nconst bootstrapVersion = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* parseVersion */ "d"])(_package_json__WEBPACK_IMPORTED_MODULE_1__[/* dependencies */ "a"].bootstrap);\nconst nuxtVersion = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* parseVersion */ "d"])(_package_json__WEBPACK_IMPORTED_MODULE_1__[/* devDependencies */ "c"].nuxt);\nconst portalVueVersion = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* parseVersion */ "d"])(_package_json__WEBPACK_IMPORTED_MODULE_1__[/* dependencies */ "a"][\'portal-vue\']);\nconst vueVersion = Object(_utils__WEBPACK_IMPORTED_MODULE_0__[/* parseVersion */ "d"])(_package_json__WEBPACK_IMPORTED_MODULE_1__[/* devDependencies */ "c"].vue);\nconst defaultConfig = _src_utils_config_defaults__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"];\nconst bvDescription = _package_json__WEBPACK_IMPORTED_MODULE_1__[/* description */ "b"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2NvbnRlbnQvaW5kZXguanM/ZGZmMCJdLCJuYW1lcyI6WyJjb21wb25lbnRzQ29udGV4dCIsInJlcXVpcmUiLCJjb21wb25lbnRzIiwiaW1wb3J0QWxsIiwiZGlyZWN0aXZlc0NvbnRleHQiLCJkaXJlY3RpdmVzIiwicmVmZXJlbmNlQ29udGV4dCIsInJlZmVyZW5jZSIsIm1pc2NDb250ZXh0IiwibWlzYyIsIm5hdiIsInRpdGxlIiwiYmFzZSIsImV4YWN0IiwicGFnZXMiLCJib290c3RyYXBWZXJzaW9uIiwicGFyc2VWZXJzaW9uIiwiZGVwZW5kZW5jaWVzIiwiYm9vdHN0cmFwIiwibnV4dFZlcnNpb24iLCJkZXZEZXBlbmRlbmNpZXMiLCJudXh0IiwicG9ydGFsVnVlVmVyc2lvbiIsInZ1ZVZlcnNpb24iLCJ2dWUiLCJkZWZhdWx0Q29uZmlnIiwiREVGQVVMVF9DT05GSUciLCJidkRlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxpQkFBaUIsR0FBR0Msd0JBQTFCOztBQUNPLE1BQU1DLFVBQVUsR0FBR0MsZ0VBQVMsQ0FBQ0gsaUJBQUQsQ0FBNUI7O0FBRVAsTUFBTUksaUJBQWlCLEdBQUdILHdCQUExQjs7QUFDTyxNQUFNSSxVQUFVLEdBQUdGLGdFQUFTLENBQUNDLGlCQUFELENBQTVCOztBQUVQLE1BQU1FLGdCQUFnQixHQUFHTCx3QkFBekI7O0FBQ08sTUFBTU0sU0FBUyxHQUFHSixnRUFBUyxDQUFDRyxnQkFBRCxDQUEzQjs7QUFFUCxNQUFNRSxXQUFXLEdBQUdQLHdCQUFwQjs7QUFDTyxNQUFNUSxJQUFJLEdBQUdOLGdFQUFTLENBQUNLLFdBQUQsQ0FBdEI7QUFFQSxNQUFNRSxHQUFHLEdBQUcsQ0FDakI7QUFDRUMsT0FBSyxFQUFFLGlCQURUO0FBRUVDLE1BQUksRUFBRSxFQUZSO0FBR0VDLE9BQUssRUFBRTtBQUhULENBRGlCLEVBTWpCO0FBQ0VGLE9BQUssRUFBRSxZQURUO0FBRUVDLE1BQUksRUFBRSxhQUZSO0FBR0VFLE9BQUssRUFBRVo7QUFIVCxDQU5pQixFQVdqQjtBQUNFUyxPQUFLLEVBQUUsWUFEVDtBQUVFQyxNQUFJLEVBQUUsYUFGUjtBQUdFRSxPQUFLLEVBQUVUO0FBSFQsQ0FYaUIsRUFnQmpCO0FBQ0VNLE9BQUssRUFBRSxXQURUO0FBRUVDLE1BQUksRUFBRSxZQUZSO0FBR0VFLE9BQUssRUFBRVA7QUFIVCxDQWhCaUIsRUFxQmpCO0FBQ0VJLE9BQUssRUFBRSxNQURUO0FBRUVDLE1BQUksRUFBRSxPQUZSO0FBR0VFLE9BQUssRUFBRUw7QUFIVCxDQXJCaUIsQ0FBWjtBQTRCQSxNQUFNTSxnQkFBZ0IsR0FBR0MsbUVBQVksQ0FBQ0Msa0VBQVksQ0FBQ0MsU0FBZCxDQUFyQztBQUNBLE1BQU1DLFdBQVcsR0FBR0gsbUVBQVksQ0FBQ0kscUVBQWUsQ0FBQ0MsSUFBakIsQ0FBaEM7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBR04sbUVBQVksQ0FBQ0Msa0VBQVksQ0FBQyxZQUFELENBQWIsQ0FBckM7QUFDQSxNQUFNTSxVQUFVLEdBQUdQLG1FQUFZLENBQUNJLHFFQUFlLENBQUNJLEdBQWpCLENBQS9CO0FBQ0EsTUFBTUMsYUFBYSxHQUFHQywwRUFBdEI7QUFDQSxNQUFNQyxhQUFhLEdBQUdDLGlFQUF0QiIsImZpbGUiOiI0NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGltcG9ydEFsbCwgcGFyc2VWZXJzaW9uIH0gZnJvbSAnfi91dGlscydcbmltcG9ydCB7IHZlcnNpb24sIGRlcGVuZGVuY2llcywgZGV2RGVwZW5kZW5jaWVzLCBkZXNjcmlwdGlvbiB9IGZyb20gJ34vLi4vcGFja2FnZS5qc29uJ1xuaW1wb3J0IERFRkFVTFRfQ09ORklHIGZyb20gJ34vLi4vc3JjL3V0aWxzL2NvbmZpZy1kZWZhdWx0cydcblxuY29uc3QgY29tcG9uZW50c0NvbnRleHQgPSByZXF1aXJlLmNvbnRleHQoJ34vLi4vc3JjL2NvbXBvbmVudHMvJywgdHJ1ZSwgL3BhY2thZ2UuanNvbi8pXG5leHBvcnQgY29uc3QgY29tcG9uZW50cyA9IGltcG9ydEFsbChjb21wb25lbnRzQ29udGV4dClcblxuY29uc3QgZGlyZWN0aXZlc0NvbnRleHQgPSByZXF1aXJlLmNvbnRleHQoJ34vLi4vc3JjL2RpcmVjdGl2ZXMvJywgdHJ1ZSwgL3BhY2thZ2UuanNvbi8pXG5leHBvcnQgY29uc3QgZGlyZWN0aXZlcyA9IGltcG9ydEFsbChkaXJlY3RpdmVzQ29udGV4dClcblxuY29uc3QgcmVmZXJlbmNlQ29udGV4dCA9IHJlcXVpcmUuY29udGV4dCgnfi9tYXJrZG93bi9yZWZlcmVuY2UnLCB0cnVlLCAvbWV0YS5qc29uLylcbmV4cG9ydCBjb25zdCByZWZlcmVuY2UgPSBpbXBvcnRBbGwocmVmZXJlbmNlQ29udGV4dClcblxuY29uc3QgbWlzY0NvbnRleHQgPSByZXF1aXJlLmNvbnRleHQoJ34vbWFya2Rvd24vbWlzYycsIHRydWUsIC9tZXRhLmpzb24vKVxuZXhwb3J0IGNvbnN0IG1pc2MgPSBpbXBvcnRBbGwobWlzY0NvbnRleHQpXG5cbmV4cG9ydCBjb25zdCBuYXYgPSBbXG4gIHtcbiAgICB0aXRsZTogJ0dldHRpbmcgc3RhcnRlZCcsXG4gICAgYmFzZTogJycsXG4gICAgZXhhY3Q6IHRydWVcbiAgfSxcbiAge1xuICAgIHRpdGxlOiAnQ29tcG9uZW50cycsXG4gICAgYmFzZTogJ2NvbXBvbmVudHMvJyxcbiAgICBwYWdlczogY29tcG9uZW50c1xuICB9LFxuICB7XG4gICAgdGl0bGU6ICdEaXJlY3RpdmVzJyxcbiAgICBiYXNlOiAnZGlyZWN0aXZlcy8nLFxuICAgIHBhZ2VzOiBkaXJlY3RpdmVzXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogJ1JlZmVyZW5jZScsXG4gICAgYmFzZTogJ3JlZmVyZW5jZS8nLFxuICAgIHBhZ2VzOiByZWZlcmVuY2VcbiAgfSxcbiAge1xuICAgIHRpdGxlOiAnTWlzYycsXG4gICAgYmFzZTogJ21pc2MvJyxcbiAgICBwYWdlczogbWlzY1xuICB9XG5dXG5cbmV4cG9ydCBjb25zdCBib290c3RyYXBWZXJzaW9uID0gcGFyc2VWZXJzaW9uKGRlcGVuZGVuY2llcy5ib290c3RyYXApXG5leHBvcnQgY29uc3QgbnV4dFZlcnNpb24gPSBwYXJzZVZlcnNpb24oZGV2RGVwZW5kZW5jaWVzLm51eHQpXG5leHBvcnQgY29uc3QgcG9ydGFsVnVlVmVyc2lvbiA9IHBhcnNlVmVyc2lvbihkZXBlbmRlbmNpZXNbJ3BvcnRhbC12dWUnXSlcbmV4cG9ydCBjb25zdCB2dWVWZXJzaW9uID0gcGFyc2VWZXJzaW9uKGRldkRlcGVuZGVuY2llcy52dWUpXG5leHBvcnQgY29uc3QgZGVmYXVsdENvbmZpZyA9IERFRkFVTFRfQ09ORklHXG5leHBvcnQgY29uc3QgYnZEZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uXG5cbmV4cG9ydCB7IHZlcnNpb24gfVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n')},,,,,,,,,,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst requestIdleCallback = window.requestIdleCallback || function (cb) {\n  const start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function timeRemaining() {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nconst observer = window.IntersectionObserver && new window.IntersectionObserver(entries => {\n  entries.forEach((_ref) => {\n    let {\n      intersectionRatio,\n      target: link\n    } = _ref;\n\n    if (intersectionRatio <= 0) {\n      return;\n    }\n\n    link.__prefetch();\n  });\n});\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'NuxtLink',\n  extends: vue__WEBPACK_IMPORTED_MODULE_0___default.a.component('RouterLink'),\n  props: {\n    noPrefetch: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  mounted() {\n    if (!this.noPrefetch) {\n      requestIdleCallback(this.observe, {\n        timeout: 2e3\n      });\n    }\n  },\n\n  beforeDestroy() {\n    if (this.__observed) {\n      observer.unobserve(this.$el);\n      delete this.$el.__prefetch;\n    }\n  },\n\n  methods: {\n    observe() {\n      // If no IntersectionObserver, avoid prefetching\n      if (!observer) {\n        return;\n      } // Add to observer\n\n\n      if (this.shouldPrefetch()) {\n        this.$el.__prefetch = this.prefetch.bind(this);\n        observer.observe(this.$el);\n        this.__observed = true;\n      }\n    },\n\n    shouldPrefetch() {\n      return this.getPrefetchComponents().length > 0;\n    },\n\n    canPrefetch() {\n      const conn = navigator.connection;\n      const hasBadConnection = this.$nuxt.isOffline || conn && ((conn.effectiveType || '').includes('2g') || conn.saveData);\n      return !hasBadConnection;\n    },\n\n    getPrefetchComponents() {\n      const ref = this.$router.resolve(this.to, this.$route, this.append);\n      const Components = ref.resolved.matched.map(r => r.components.default);\n      return Components.filter(Component => typeof Component === 'function' && !Component.options && !Component.__prefetched);\n    },\n\n    prefetch() {\n      if (!this.canPrefetch()) {\n        return;\n      } // Stop obersing this link (in case of internet connection changes)\n\n\n      observer.unobserve(this.$el);\n      const Components = this.getPrefetchComponents();\n\n      for (const Component of Components) {\n        const componentOrPromise = Component();\n\n        if (componentOrPromise instanceof Promise) {\n          componentOrPromise.catch(() => {});\n        }\n\n        Component.__prefetched = true;\n      }\n    }\n\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8ubnV4dC9jb21wb25lbnRzL251eHQtbGluay5jbGllbnQuanM/NGU1NSJdLCJuYW1lcyI6WyJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwid2luZG93IiwiY2IiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzZXRUaW1lb3V0IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJNYXRoIiwibWF4Iiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJmb3JFYWNoIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJ0YXJnZXQiLCJsaW5rIiwiX19wcmVmZXRjaCIsIm5hbWUiLCJleHRlbmRzIiwiVnVlIiwiY29tcG9uZW50IiwicHJvcHMiLCJub1ByZWZldGNoIiwidHlwZSIsIkJvb2xlYW4iLCJkZWZhdWx0IiwibW91bnRlZCIsIm9ic2VydmUiLCJ0aW1lb3V0IiwiYmVmb3JlRGVzdHJveSIsIl9fb2JzZXJ2ZWQiLCJ1bm9ic2VydmUiLCIkZWwiLCJtZXRob2RzIiwic2hvdWxkUHJlZmV0Y2giLCJwcmVmZXRjaCIsImJpbmQiLCJnZXRQcmVmZXRjaENvbXBvbmVudHMiLCJsZW5ndGgiLCJjYW5QcmVmZXRjaCIsImNvbm4iLCJuYXZpZ2F0b3IiLCJjb25uZWN0aW9uIiwiaGFzQmFkQ29ubmVjdGlvbiIsIiRudXh0IiwiaXNPZmZsaW5lIiwiZWZmZWN0aXZlVHlwZSIsImluY2x1ZGVzIiwic2F2ZURhdGEiLCJyZWYiLCIkcm91dGVyIiwicmVzb2x2ZSIsInRvIiwiJHJvdXRlIiwiYXBwZW5kIiwiQ29tcG9uZW50cyIsInJlc29sdmVkIiwibWF0Y2hlZCIsIm1hcCIsInIiLCJjb21wb25lbnRzIiwiZmlsdGVyIiwiQ29tcG9uZW50Iiwib3B0aW9ucyIsIl9fcHJlZmV0Y2hlZCIsImNvbXBvbmVudE9yUHJvbWlzZSIsIlByb21pc2UiLCJjYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOztBQUVBLE1BQU1BLG1CQUFtQixHQUFHQyxNQUFNLENBQUNELG1CQUFQLElBQzFCLFVBQVVFLEVBQVYsRUFBYztBQUNaLFFBQU1DLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxHQUFMLEVBQWQ7QUFDQSxTQUFPQyxVQUFVLENBQUMsWUFBWTtBQUM1QkosTUFBRSxDQUFDO0FBQ0RLLGdCQUFVLEVBQUUsS0FEWDtBQUVEQyxtQkFBYSxFQUFFLHlCQUFZO0FBQ3pCLGVBQU9DLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxNQUFNTixJQUFJLENBQUNDLEdBQUwsS0FBYUYsS0FBbkIsQ0FBWixDQUFQO0FBQ0Q7QUFKQSxLQUFELENBQUY7QUFNRCxHQVBnQixFQU9kLENBUGMsQ0FBakI7QUFRRCxDQVhIOztBQVlBLE1BQU1RLFFBQVEsR0FBR1YsTUFBTSxDQUFDVyxvQkFBUCxJQUErQixJQUFJWCxNQUFNLENBQUNXLG9CQUFYLENBQWlDQyxPQUFELElBQWE7QUFDM0ZBLFNBQU8sQ0FBQ0MsT0FBUixDQUFnQixVQUF5QztBQUFBLFFBQXhDO0FBQUVDLHVCQUFGO0FBQXFCQyxZQUFNLEVBQUVDO0FBQTdCLEtBQXdDOztBQUN2RCxRQUFJRixpQkFBaUIsSUFBSSxDQUF6QixFQUE0QjtBQUMxQjtBQUNEOztBQUNERSxRQUFJLENBQUNDLFVBQUw7QUFDRCxHQUxEO0FBTUQsQ0FQK0MsQ0FBaEQ7QUFTZTtBQUNiQyxNQUFJLEVBQUUsVUFETztBQUViQyxTQUFPLEVBQUVDLDBDQUFHLENBQUNDLFNBQUosQ0FBYyxZQUFkLENBRkk7QUFHYkMsT0FBSyxFQUFFO0FBQ0xDLGNBQVUsRUFBRTtBQUNWQyxVQUFJLEVBQUVDLE9BREk7QUFFVkMsYUFBTyxFQUFFO0FBRkM7QUFEUCxHQUhNOztBQVNiQyxTQUFPLEdBQUc7QUFDUixRQUFJLENBQUMsS0FBS0osVUFBVixFQUFzQjtBQUNwQnhCLHlCQUFtQixDQUFDLEtBQUs2QixPQUFOLEVBQWU7QUFBRUMsZUFBTyxFQUFFO0FBQVgsT0FBZixDQUFuQjtBQUNEO0FBQ0YsR0FiWTs7QUFjYkMsZUFBYSxHQUFHO0FBQ2QsUUFBSSxLQUFLQyxVQUFULEVBQXFCO0FBQ25CckIsY0FBUSxDQUFDc0IsU0FBVCxDQUFtQixLQUFLQyxHQUF4QjtBQUNBLGFBQU8sS0FBS0EsR0FBTCxDQUFTaEIsVUFBaEI7QUFDRDtBQUNGLEdBbkJZOztBQW9CYmlCLFNBQU8sRUFBRTtBQUNQTixXQUFPLEdBQUc7QUFDUjtBQUNBLFVBQUksQ0FBQ2xCLFFBQUwsRUFBZTtBQUNiO0FBQ0QsT0FKTyxDQUtSOzs7QUFDQSxVQUFJLEtBQUt5QixjQUFMLEVBQUosRUFBMkI7QUFDekIsYUFBS0YsR0FBTCxDQUFTaEIsVUFBVCxHQUFzQixLQUFLbUIsUUFBTCxDQUFjQyxJQUFkLENBQW1CLElBQW5CLENBQXRCO0FBQ0EzQixnQkFBUSxDQUFDa0IsT0FBVCxDQUFpQixLQUFLSyxHQUF0QjtBQUNBLGFBQUtGLFVBQUwsR0FBa0IsSUFBbEI7QUFDRDtBQUNGLEtBWk07O0FBYVBJLGtCQUFjLEdBQUc7QUFDZixhQUFPLEtBQUtHLHFCQUFMLEdBQTZCQyxNQUE3QixHQUFzQyxDQUE3QztBQUNELEtBZk07O0FBZ0JQQyxlQUFXLEdBQUc7QUFDWixZQUFNQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0MsVUFBdkI7QUFDQSxZQUFNQyxnQkFBZ0IsR0FBRyxLQUFLQyxLQUFMLENBQVdDLFNBQVgsSUFBeUJMLElBQUksS0FBSyxDQUFDQSxJQUFJLENBQUNNLGFBQUwsSUFBc0IsRUFBdkIsRUFBMkJDLFFBQTNCLENBQW9DLElBQXBDLEtBQTZDUCxJQUFJLENBQUNRLFFBQXZELENBQXREO0FBRUEsYUFBTyxDQUFDTCxnQkFBUjtBQUNELEtBckJNOztBQXNCUE4seUJBQXFCLEdBQUc7QUFDdEIsWUFBTVksR0FBRyxHQUFHLEtBQUtDLE9BQUwsQ0FBYUMsT0FBYixDQUFxQixLQUFLQyxFQUExQixFQUE4QixLQUFLQyxNQUFuQyxFQUEyQyxLQUFLQyxNQUFoRCxDQUFaO0FBQ0EsWUFBTUMsVUFBVSxHQUFHTixHQUFHLENBQUNPLFFBQUosQ0FBYUMsT0FBYixDQUFxQkMsR0FBckIsQ0FBeUJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxVQUFGLENBQWFuQyxPQUEzQyxDQUFuQjtBQUVBLGFBQU84QixVQUFVLENBQUNNLE1BQVgsQ0FBa0JDLFNBQVMsSUFBSSxPQUFPQSxTQUFQLEtBQXFCLFVBQXJCLElBQW1DLENBQUNBLFNBQVMsQ0FBQ0MsT0FBOUMsSUFBeUQsQ0FBQ0QsU0FBUyxDQUFDRSxZQUFuRyxDQUFQO0FBQ0QsS0EzQk07O0FBNEJQN0IsWUFBUSxHQUFHO0FBQ1QsVUFBSSxDQUFDLEtBQUtJLFdBQUwsRUFBTCxFQUF5QjtBQUN2QjtBQUNELE9BSFEsQ0FJVDs7O0FBQ0E5QixjQUFRLENBQUNzQixTQUFULENBQW1CLEtBQUtDLEdBQXhCO0FBQ0EsWUFBTXVCLFVBQVUsR0FBRyxLQUFLbEIscUJBQUwsRUFBbkI7O0FBRUEsV0FBSyxNQUFNeUIsU0FBWCxJQUF3QlAsVUFBeEIsRUFBb0M7QUFDbEMsY0FBTVUsa0JBQWtCLEdBQUdILFNBQVMsRUFBcEM7O0FBQ0EsWUFBSUcsa0JBQWtCLFlBQVlDLE9BQWxDLEVBQTJDO0FBQ3pDRCw0QkFBa0IsQ0FBQ0UsS0FBbkIsQ0FBeUIsTUFBTSxDQUFFLENBQWpDO0FBQ0Q7O0FBQ0RMLGlCQUFTLENBQUNFLFlBQVYsR0FBeUIsSUFBekI7QUFDRDtBQUNGOztBQTNDTTtBQXBCSSxDQUFmIiwiZmlsZSI6IjYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXG5cbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayB8fFxuICBmdW5jdGlvbiAoY2IpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KClcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBjYih7XG4gICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSwgMSlcbiAgfVxuY29uc3Qgb2JzZXJ2ZXIgPSB3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgJiYgbmV3IHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICBlbnRyaWVzLmZvckVhY2goKHsgaW50ZXJzZWN0aW9uUmF0aW8sIHRhcmdldDogbGluayB9KSA9PiB7XG4gICAgaWYgKGludGVyc2VjdGlvblJhdGlvIDw9IDApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBsaW5rLl9fcHJlZmV0Y2goKVxuICB9KVxufSlcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnTnV4dExpbmsnLFxuICBleHRlbmRzOiBWdWUuY29tcG9uZW50KCdSb3V0ZXJMaW5rJyksXG4gIHByb3BzOiB7XG4gICAgbm9QcmVmZXRjaDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGlmICghdGhpcy5ub1ByZWZldGNoKSB7XG4gICAgICByZXF1ZXN0SWRsZUNhbGxiYWNrKHRoaXMub2JzZXJ2ZSwgeyB0aW1lb3V0OiAyZTMgfSlcbiAgICB9XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX19vYnNlcnZlZCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMuJGVsKVxuICAgICAgZGVsZXRlIHRoaXMuJGVsLl9fcHJlZmV0Y2hcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvYnNlcnZlKCkge1xuICAgICAgLy8gSWYgbm8gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIsIGF2b2lkIHByZWZldGNoaW5nXG4gICAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gQWRkIHRvIG9ic2VydmVyXG4gICAgICBpZiAodGhpcy5zaG91bGRQcmVmZXRjaCgpKSB7XG4gICAgICAgIHRoaXMuJGVsLl9fcHJlZmV0Y2ggPSB0aGlzLnByZWZldGNoLmJpbmQodGhpcylcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLiRlbClcbiAgICAgICAgdGhpcy5fX29ic2VydmVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgc2hvdWxkUHJlZmV0Y2goKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQcmVmZXRjaENvbXBvbmVudHMoKS5sZW5ndGggPiAwXG4gICAgfSxcbiAgICBjYW5QcmVmZXRjaCgpIHtcbiAgICAgIGNvbnN0IGNvbm4gPSBuYXZpZ2F0b3IuY29ubmVjdGlvblxuICAgICAgY29uc3QgaGFzQmFkQ29ubmVjdGlvbiA9IHRoaXMuJG51eHQuaXNPZmZsaW5lIHx8IChjb25uICYmICgoY29ubi5lZmZlY3RpdmVUeXBlIHx8ICcnKS5pbmNsdWRlcygnMmcnKSB8fCBjb25uLnNhdmVEYXRhKSlcblxuICAgICAgcmV0dXJuICFoYXNCYWRDb25uZWN0aW9uXG4gICAgfSxcbiAgICBnZXRQcmVmZXRjaENvbXBvbmVudHMoKSB7XG4gICAgICBjb25zdCByZWYgPSB0aGlzLiRyb3V0ZXIucmVzb2x2ZSh0aGlzLnRvLCB0aGlzLiRyb3V0ZSwgdGhpcy5hcHBlbmQpXG4gICAgICBjb25zdCBDb21wb25lbnRzID0gcmVmLnJlc29sdmVkLm1hdGNoZWQubWFwKHIgPT4gci5jb21wb25lbnRzLmRlZmF1bHQpXG5cbiAgICAgIHJldHVybiBDb21wb25lbnRzLmZpbHRlcihDb21wb25lbnQgPT4gdHlwZW9mIENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhQ29tcG9uZW50Lm9wdGlvbnMgJiYgIUNvbXBvbmVudC5fX3ByZWZldGNoZWQpXG4gICAgfSxcbiAgICBwcmVmZXRjaCgpIHtcbiAgICAgIGlmICghdGhpcy5jYW5QcmVmZXRjaCgpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gU3RvcCBvYmVyc2luZyB0aGlzIGxpbmsgKGluIGNhc2Ugb2YgaW50ZXJuZXQgY29ubmVjdGlvbiBjaGFuZ2VzKVxuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMuJGVsKVxuICAgICAgY29uc3QgQ29tcG9uZW50cyA9IHRoaXMuZ2V0UHJlZmV0Y2hDb21wb25lbnRzKClcblxuICAgICAgZm9yIChjb25zdCBDb21wb25lbnQgb2YgQ29tcG9uZW50cykge1xuICAgICAgICBjb25zdCBjb21wb25lbnRPclByb21pc2UgPSBDb21wb25lbnQoKVxuICAgICAgICBpZiAoY29tcG9uZW50T3JQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgIGNvbXBvbmVudE9yUHJvbWlzZS5jYXRjaCgoKSA9PiB7fSlcbiAgICAgICAgfVxuICAgICAgICBDb21wb25lbnQuX19wcmVmZXRjaGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///63\n")},,,,,,,,,,,,,,,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);\n/* harmony import */ var _babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(122);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(64);\n/* harmony import */ var highlight_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(highlight_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _utils_needs_transpiler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(124);\n\n\n\n\n\n\n // --- Constants ---\n\nconst NAME_REGEX = /\x3c!-- (.*)\\.vue --\x3e/;\nconst NAME_DEFINITION_REGEX = /\x3c!-- .*\\.vue --\x3e/;\nconst TEMPLATE_REGEX = /<template>([\\s\\S]*)<\\/template>/;\nconst SCRIPT_REGEX = /<script>([\\s\\S]*)<\\/script>/;\nconst CLASS_NAMES = {\n  editable: 'editable',\n  live: 'live',\n  error: 'error' // --- Helper functions ---\n  // Default \"transpiler\" function\n\n};\n\nlet compiler = code => code;\n\nconst match = (regex, text) => (regex.exec(text) || [])[1];\n\nconst removeNode = node => node && node.parentNode && node.parentNode.removeChild(node);\n\nconst parseVueTemplate = text => {\n  let template = match(TEMPLATE_REGEX, text);\n  let script = match(SCRIPT_REGEX, text);\n  let options = {}; // It is plain code\n\n  if (!template) {\n    template = text;\n  } // Try to evaluate script\n\n\n  if (script && script.includes('export default')) {\n    try {\n      const code = compiler(script.replace('export default', ';options = ')); // eslint-disable-next-line no-eval\n\n      eval(code);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return {\n    template,\n    script,\n    options\n  };\n};\n\nconst createVM = (name, node, vnode) => {\n  try {\n    // Try to parse the vue template\n    let vt = parseVueTemplate(node.textContent);\n\n    if (!vt) {\n      return null;\n    }\n\n    let {\n      template,\n      options\n    } = vt; // Create a placeholder after node\n\n    let holder = document.createElement('div');\n    node.parentNode.insertBefore(holder, node); // Create VM\n\n    return new vue__WEBPACK_IMPORTED_MODULE_3___default.a(Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"])({}, options, {\n      el: holder,\n      template: \"<div class=\\\"bd-example vue-example vue-example-\".concat(name, \" notranslate\\\" translate=\\\"no\\\">\").concat(template, \"</div>\"),\n      router: vnode.context.$router\n    }));\n  } catch (e) {\n    console.error('[v-play]', e);\n  }\n\n  return null;\n};\n\nconst destroyVM = (name, vm) => {\n  if (vm) {\n    vm.$destroy();\n    removeNode(vm.$el);\n    vm.$el.innerHTML = '';\n  }\n\n  ;\n  [...document.querySelectorAll(\".vue-example-\".concat(name))].forEach(removeNode);\n};\n\nconst processExamples = (el, binding, vnode, oldVnode) => {\n  if (vnode.context.$options['beforeDestroy']) {\n    vnode.context.$options['beforeDestroy'] = [].concat(vnode.context.$options['beforeDestroy']).filter(h => h);\n  } else {\n    vnode.context.$options['beforeDestroy'] = [];\n  } // Get all code-snippets\n\n\n  const pres = [...el.querySelectorAll('pre.hljs')]; // Iterate over them and parse\n\n  pres.forEach(pre => {\n    // Store example name globally\n    const name = match(NAME_REGEX, pre.textContent); // Exit early when no name is given\n\n    if (!name) {\n      return;\n    } // Remove name definition\n\n\n    let text = pre.textContent.replace(NAME_DEFINITION_REGEX, '').trim();\n    pre.textContent = text; // Highlight again\n\n    highlight_js__WEBPACK_IMPORTED_MODULE_5___default.a.highlightBlock(pre); // Add editable class\n\n    pre.classList.add(CLASS_NAMES.editable); // Initial load\n\n    let vm = createVM(name, pre, vnode); // Ensure we destroy the VM when parent is destroyed\n\n    vnode.context.$options['beforeDestroy'].push(() => destroyVM(name, vm)); // Enable live edit on double click\n\n    pre.ondblclick =\n    /*#__PURE__*/\n    Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__[/* default */ \"a\"])(function* () {\n      // Add live class\n      pre.classList.add(CLASS_NAMES.live); // Make editable\n\n      pre.contentEditable = true;\n\n      pre.onblur = () => {\n        // Re-highlight\n        highlight_js__WEBPACK_IMPORTED_MODULE_5___default.a.highlightBlock(pre);\n      };\n\n      pre.onkeyup = lodash_debounce__WEBPACK_IMPORTED_MODULE_4___default()(() => {\n        // Recreate VM\n        destroyVM(name, vm);\n        vm = createVM(name, pre, vnode); // Toggle error class\n\n        if (vm === null) {\n          pre.classList.add(CLASS_NAMES.error);\n        } else {\n          pre.classList.remove(CLASS_NAMES.error);\n        }\n      }, 500);\n    });\n  });\n}; // Register our v-play directive\n\n\nvue__WEBPACK_IMPORTED_MODULE_3___default.a.directive('play', (el, binding, vnode, oldVnode) => {\n  vnode.context.$nextTick(() => {\n    if (_utils_needs_transpiler__WEBPACK_IMPORTED_MODULE_6__[/* default */ \"a\"]) {\n      window && window.$nuxt && window.$nuxt.$loading.start();\n      Promise.all(/* import() */[__webpack_require__.e(1), __webpack_require__.e(0)]).then(__webpack_require__.bind(null, 478)).then(module => {\n        // Save the compiler reference for template parser\n        compiler = module.default; // Convert examples to live/editable\n\n        processExamples(el, binding, vnode, oldVnode);\n        window && window.$nuxt && window.$nuxt.$loading.finish();\n      });\n    } else {\n      // Convert examples to live/editable\n      processExamples(el, binding, vnode, oldVnode);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('const middleware = {};\n/* harmony default export */ __webpack_exports__["a"] = (middleware);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8ubnV4dC9taWRkbGV3YXJlLmpzP2YzNWIiXSwibmFtZXMiOlsibWlkZGxld2FyZSJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVSxHQUFHLEVBQW5CO0FBRWVBLG1FQUFmIiwiZmlsZSI6Ijg4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbWlkZGxld2FyZSA9IHt9XG5cbmV4cG9ydCBkZWZhdWx0IG1pZGRsZXdhcmVcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///88\n')},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// Determine if the broser needs to use @babel/standalone compiler for v-play and playground\nlet needsTranspiler = false; // Tests to see if we need to compile ES6 to ES5.  Tests for commonly used ES6 features.\n// If any test fails, then we need to transpile code with @babel/standalone.\n\nconst tests = [// Arrow functions\n'const test1 = (a) => a', // Object function shortcut\n'const test2 = { a: 1, b () { return 0 } }', // Object shortcut\n'const test3a = { a: 1}; const test3b = { test3a, b: 2 }', // Object rest spread\n'const test4a = { a: 1, b: 2}; const test4b = { c: 3, ...test4a }', // String interpolation\n\n/* eslint-disable no-template-curly-in-string */\n'const test5a = \"bar\"; const test5b = `foo${test5a}`'\n/* eslint-enable no-template-curly-in-string */\n]; // Run tests to see if transpilation is needed. Returns after first test that fails\n\nif (typeof window !== 'undefined') {\n  /* eslint-disable no-eval */\n  for (let i = 0; i < tests.length && !needsTranspiler; i++) {\n    try {\n      eval(tests[i]);\n    } catch (e) {\n      needsTranspiler = true;\n    }\n  }\n  /* eslint-enable no-eval */\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (needsTranspiler);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL3V0aWxzL25lZWRzLXRyYW5zcGlsZXIuanM/ZDUzYSJdLCJuYW1lcyI6WyJuZWVkc1RyYW5zcGlsZXIiLCJ0ZXN0cyIsIndpbmRvdyIsImkiLCJsZW5ndGgiLCJldmFsIiwiZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUFlLEdBQUcsS0FBdEIsQyxDQUVBO0FBQ0E7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHLENBQ1o7QUFDQSx3QkFGWSxFQUdaO0FBQ0EsMkNBSlksRUFLWjtBQUNBLHlEQU5ZLEVBT1o7QUFDQSxrRUFSWSxFQVNaOztBQUNBO0FBQ0E7QUFDQTtBQVpZLENBQWQsQyxDQWVBOztBQUNBLElBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsS0FBSyxDQUFDRyxNQUFWLElBQW9CLENBQUNKLGVBQXJDLEVBQXNERyxDQUFDLEVBQXZELEVBQTJEO0FBQ3pELFFBQUk7QUFDRkUsVUFBSSxDQUFDSixLQUFLLENBQUNFLENBQUQsQ0FBTixDQUFKO0FBQ0QsS0FGRCxDQUVFLE9BQU9HLENBQVAsRUFBVTtBQUNWTixxQkFBZSxHQUFHLElBQWxCO0FBQ0Q7QUFDRjtBQUNEOztBQUNEOztBQUVjQSx3RUFBZiIsImZpbGUiOiIxMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZXRlcm1pbmUgaWYgdGhlIGJyb3NlciBuZWVkcyB0byB1c2UgQGJhYmVsL3N0YW5kYWxvbmUgY29tcGlsZXIgZm9yIHYtcGxheSBhbmQgcGxheWdyb3VuZFxuXG5sZXQgbmVlZHNUcmFuc3BpbGVyID0gZmFsc2VcblxuLy8gVGVzdHMgdG8gc2VlIGlmIHdlIG5lZWQgdG8gY29tcGlsZSBFUzYgdG8gRVM1LiAgVGVzdHMgZm9yIGNvbW1vbmx5IHVzZWQgRVM2IGZlYXR1cmVzLlxuLy8gSWYgYW55IHRlc3QgZmFpbHMsIHRoZW4gd2UgbmVlZCB0byB0cmFuc3BpbGUgY29kZSB3aXRoIEBiYWJlbC9zdGFuZGFsb25lLlxuY29uc3QgdGVzdHMgPSBbXG4gIC8vIEFycm93IGZ1bmN0aW9uc1xuICAnY29uc3QgdGVzdDEgPSAoYSkgPT4gYScsXG4gIC8vIE9iamVjdCBmdW5jdGlvbiBzaG9ydGN1dFxuICAnY29uc3QgdGVzdDIgPSB7IGE6IDEsIGIgKCkgeyByZXR1cm4gMCB9IH0nLFxuICAvLyBPYmplY3Qgc2hvcnRjdXRcbiAgJ2NvbnN0IHRlc3QzYSA9IHsgYTogMX07IGNvbnN0IHRlc3QzYiA9IHsgdGVzdDNhLCBiOiAyIH0nLFxuICAvLyBPYmplY3QgcmVzdCBzcHJlYWRcbiAgJ2NvbnN0IHRlc3Q0YSA9IHsgYTogMSwgYjogMn07IGNvbnN0IHRlc3Q0YiA9IHsgYzogMywgLi4udGVzdDRhIH0nLFxuICAvLyBTdHJpbmcgaW50ZXJwb2xhdGlvblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby10ZW1wbGF0ZS1jdXJseS1pbi1zdHJpbmcgKi9cbiAgJ2NvbnN0IHRlc3Q1YSA9IFwiYmFyXCI7IGNvbnN0IHRlc3Q1YiA9IGBmb28ke3Rlc3Q1YX1gJ1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXRlbXBsYXRlLWN1cmx5LWluLXN0cmluZyAqL1xuXVxuXG4vLyBSdW4gdGVzdHMgdG8gc2VlIGlmIHRyYW5zcGlsYXRpb24gaXMgbmVlZGVkLiBSZXR1cm5zIGFmdGVyIGZpcnN0IHRlc3QgdGhhdCBmYWlsc1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWV2YWwgKi9cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXN0cy5sZW5ndGggJiYgIW5lZWRzVHJhbnNwaWxlcjsgaSsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIGV2YWwodGVzdHNbaV0pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbmVlZHNUcmFuc3BpbGVyID0gdHJ1ZVxuICAgIH1cbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWV2YWwgKi9cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmVlZHNUcmFuc3BpbGVyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///124\n")},,,,,,,,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread.js + 1 modules\nvar objectSpread = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(7);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.common.js\nvar vue_common = __webpack_require__(5);\nvar vue_common_default = /*#__PURE__*/__webpack_require__.n(vue_common);\n\n// EXTERNAL MODULE: ./node_modules/vue-meta/lib/vue-meta.js\nvar vue_meta = __webpack_require__(126);\nvar vue_meta_default = /*#__PURE__*/__webpack_require__.n(vue_meta);\n\n// EXTERNAL MODULE: ./node_modules/vue-router/dist/vue-router.esm.js\nvar vue_router_esm = __webpack_require__(86);\n\n// EXTERNAL MODULE: ./.nuxt/utils.js\nvar utils = __webpack_require__(6);\n\n// CONCATENATED MODULE: ./.nuxt/router.js\n\n\n\n\nconst _8464db5c = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/index */ 62).then(__webpack_require__.bind(null, 565)));\n\nconst _8c1b01da = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/play */ 69).then(__webpack_require__.bind(null, 577)));\n\nconst _769ac39e = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/components/index */ 59).then(__webpack_require__.bind(null, 566)));\n\nconst _2c1b0b03 = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/directives/index */ 61).then(__webpack_require__.bind(null, 567)));\n\nconst _4baa8c80 = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/layout */ 63).then(__webpack_require__.bind(null, 568)));\n\nconst _575aff5b = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/misc/index */ 65).then(__webpack_require__.bind(null, 569)));\n\nconst _0a8d5754 = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/reference/index */ 67).then(__webpack_require__.bind(null, 570)));\n\nconst _6632ef0e = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/components/_slug */ 58).then(__webpack_require__.bind(null, 575)));\n\nconst _344ef54b = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/directives/_slug */ 60).then(__webpack_require__.bind(null, 571)));\n\nconst _5f8ee9a3 = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/misc/_slug */ 64).then(__webpack_require__.bind(null, 572)));\n\nconst _02ed3e9e = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/docs/reference/_slug */ 66).then(__webpack_require__.bind(null, 573)));\n\nconst _7276dffa = () => Object(utils[\"i\" /* interopDefault */])(__webpack_require__.e(/* import() | pages/index */ 68).then(__webpack_require__.bind(null, 576)));\n\nvue_common_default.a.use(vue_router_esm[\"a\" /* default */]);\n\nif (true) {\n  if ('scrollRestoration' in window.history) {\n    window.history.scrollRestoration = 'manual'; // reset scrollRestoration to auto when leaving page, allowing page reload\n    // and back-navigation from other pages to use the browser to restore the\n    // scrolling position.\n\n    window.addEventListener('beforeunload', () => {\n      window.history.scrollRestoration = 'auto';\n    }); // Setting scrollRestoration to manual again when returning to this page.\n\n    window.addEventListener('load', () => {\n      window.history.scrollRestoration = 'manual';\n    });\n  }\n}\n\nconst scrollBehavior = function scrollBehavior(to, from, savedPosition) {\n  // if the returned position is falsy or an empty object,\n  // will retain current scroll position.\n  let position = false; // if no children detected and scrollToTop is not explicitly disabled\n\n  if (to.matched.length < 2 && to.matched.every(r => r.components.default.options.scrollToTop !== false)) {\n    // scroll to the top of the page\n    position = {\n      x: 0,\n      y: 0\n    };\n  } else if (to.matched.some(r => r.components.default.options.scrollToTop)) {\n    // if one of the children has scrollToTop option set to true\n    position = {\n      x: 0,\n      y: 0\n    };\n  } // savedPosition is only available for popstate navigations (back button)\n\n\n  if (savedPosition) {\n    position = savedPosition;\n  }\n\n  return new Promise(resolve => {\n    // wait for the out transition to complete (if necessary)\n    window.$nuxt.$once('triggerScroll', () => {\n      // coords will be used if no selector is provided,\n      // or if the selector didn't match any element.\n      if (to.hash) {\n        let hash = to.hash; // CSS.escape() is not supported with IE and Edge.\n\n        if (typeof window.CSS !== 'undefined' && typeof window.CSS.escape !== 'undefined') {\n          hash = '#' + window.CSS.escape(hash.substr(1));\n        }\n\n        try {\n          if (document.querySelector(hash)) {\n            // scroll to anchor by returning the selector\n            position = {\n              selector: hash\n            };\n          }\n        } catch (e) {\n          console.warn('Failed to save scroll position. Please add CSS.escape() polyfill (https://github.com/mathiasbynens/CSS.escape).');\n        }\n      }\n\n      resolve(position);\n    });\n  });\n};\n\nfunction createRouter() {\n  return new vue_router_esm[\"a\" /* default */]({\n    mode: 'history',\n    base: decodeURI('/'),\n    linkActiveClass: 'nuxt-link-active',\n    linkExactActiveClass: 'nuxt-link-exact-active',\n    scrollBehavior,\n    routes: [{\n      path: \"/docs\",\n      component: _8464db5c,\n      name: \"docs\"\n    }, {\n      path: \"/play\",\n      component: _8c1b01da,\n      name: \"play\"\n    }, {\n      path: \"/docs/components\",\n      component: _769ac39e,\n      name: \"docs-components\"\n    }, {\n      path: \"/docs/directives\",\n      component: _2c1b0b03,\n      name: \"docs-directives\"\n    }, {\n      path: \"/docs/layout\",\n      component: _4baa8c80,\n      name: \"docs-layout\"\n    }, {\n      path: \"/docs/misc\",\n      component: _575aff5b,\n      name: \"docs-misc\"\n    }, {\n      path: \"/docs/reference\",\n      component: _0a8d5754,\n      name: \"docs-reference\"\n    }, {\n      path: \"/docs/components/:slug\",\n      component: _6632ef0e,\n      name: \"docs-components-slug\"\n    }, {\n      path: \"/docs/directives/:slug\",\n      component: _344ef54b,\n      name: \"docs-directives-slug\"\n    }, {\n      path: \"/docs/misc/:slug\",\n      component: _5f8ee9a3,\n      name: \"docs-misc-slug\"\n    }, {\n      path: \"/docs/reference/:slug\",\n      component: _02ed3e9e,\n      name: \"docs-reference-slug\"\n    }, {\n      path: \"/\",\n      component: _7276dffa,\n      name: \"index\"\n    }],\n    fallback: false\n  });\n}\n// EXTERNAL MODULE: ./node_modules/vue-no-ssr/dist/vue-no-ssr.common.js\nvar vue_no_ssr_common = __webpack_require__(127);\nvar vue_no_ssr_common_default = /*#__PURE__*/__webpack_require__.n(vue_no_ssr_common);\n\n// CONCATENATED MODULE: ./.nuxt/components/no-ssr.js\n\n\n/*\n** From https://github.com/egoist/vue-no-ssr\n** With the authorization of @egoist\n*/\n\n/* harmony default export */ var no_ssr = (Object(objectSpread[\"a\" /* default */])({}, vue_no_ssr_common_default.a, {\n  name: 'NoSsr'\n}));\n// CONCATENATED MODULE: ./.nuxt/components/nuxt-child.js\n/* harmony default export */ var nuxt_child = ({\n  name: 'NuxtChild',\n  functional: true,\n  props: {\n    nuxtChildKey: {\n      type: String,\n      default: ''\n    },\n    keepAlive: Boolean,\n    keepAliveProps: {\n      type: Object,\n      default: undefined\n    }\n  },\n\n  render(h, _ref) {\n    let {\n      parent,\n      data,\n      props\n    } = _ref;\n    data.nuxtChild = true;\n    const _parent = parent;\n    const transitions = parent.$nuxt.nuxt.transitions;\n    const defaultTransition = parent.$nuxt.nuxt.defaultTransition;\n    let depth = 0;\n\n    while (parent) {\n      if (parent.$vnode && parent.$vnode.data.nuxtChild) {\n        depth++;\n      }\n\n      parent = parent.$parent;\n    }\n\n    data.nuxtChildDepth = depth;\n    const transition = transitions[depth] || defaultTransition;\n    const transitionProps = {};\n    transitionsKeys.forEach(key => {\n      if (typeof transition[key] !== 'undefined') {\n        transitionProps[key] = transition[key];\n      }\n    });\n    const listeners = {};\n    listenersKeys.forEach(key => {\n      if (typeof transition[key] === 'function') {\n        listeners[key] = transition[key].bind(_parent);\n      }\n    }); // Add triggerScroll event on beforeEnter (fix #1376)\n\n    const beforeEnter = listeners.beforeEnter;\n\n    listeners.beforeEnter = el => {\n      // Ensure to trigger scroll event after calling scrollBehavior\n      window.$nuxt.$nextTick(() => {\n        window.$nuxt.$emit('triggerScroll');\n      });\n      if (beforeEnter) return beforeEnter.call(_parent, el);\n    };\n\n    let routerView = [h('router-view', data)];\n\n    if (props.keepAlive) {\n      routerView = [h('keep-alive', {\n        props: props.keepAliveProps\n      }, routerView)];\n    }\n\n    return h('transition', {\n      props: transitionProps,\n      on: listeners\n    }, routerView);\n  }\n\n});\nconst transitionsKeys = ['name', 'mode', 'appear', 'css', 'type', 'duration', 'enterClass', 'leaveClass', 'appearClass', 'enterActiveClass', 'enterActiveClass', 'leaveActiveClass', 'appearActiveClass', 'enterToClass', 'leaveToClass', 'appearToClass'];\nconst listenersKeys = ['beforeEnter', 'enter', 'afterEnter', 'enterCancelled', 'beforeLeave', 'leave', 'afterLeave', 'leaveCancelled', 'beforeAppear', 'appear', 'afterAppear', 'appearCancelled'];\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.replace.js\nvar es6_regexp_replace = __webpack_require__(8);\n\n// EXTERNAL MODULE: ./.nuxt/components/nuxt-error.vue + 3 modules\nvar nuxt_error = __webpack_require__(22);\n\n// CONCATENATED MODULE: ./.nuxt/components/nuxt.js\n\n\n\n\n\n/* harmony default export */ var components_nuxt = ({\n  name: 'Nuxt',\n  components: {\n    NuxtChild: nuxt_child,\n    NuxtError: nuxt_error[\"a\" /* default */]\n  },\n  props: {\n    nuxtChildKey: {\n      type: String,\n      default: undefined\n    },\n    keepAlive: Boolean,\n    keepAliveProps: {\n      type: Object,\n      default: undefined\n    },\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  computed: {\n    routerViewKey() {\n      // If nuxtChildKey prop is given or current route has children\n      if (typeof this.nuxtChildKey !== 'undefined' || this.$route.matched.length > 1) {\n        return this.nuxtChildKey || Object(utils[\"b\" /* compile */])(this.$route.matched[0].path)(this.$route.params);\n      }\n\n      const [matchedRoute] = this.$route.matched;\n\n      if (!matchedRoute) {\n        return this.$route.path;\n      }\n\n      const Component = matchedRoute.components.default;\n\n      if (Component && Component.options) {\n        const {\n          options\n        } = Component;\n\n        if (options.key) {\n          return typeof options.key === 'function' ? options.key(this.$route) : options.key;\n        }\n      }\n\n      const strict = /\\/$/.test(matchedRoute.path);\n      return strict ? this.$route.path : this.$route.path.replace(/\\/$/, '');\n    }\n\n  },\n\n  beforeCreate() {\n    vue_common_default.a.util.defineReactive(this, 'nuxt', this.$root.$options.nuxt);\n  },\n\n  render(h) {\n    // If there is some error\n    if (this.nuxt.err) {\n      return h('NuxtError', {\n        props: {\n          error: this.nuxt.err\n        }\n      });\n    } // Directly return nuxt child\n\n\n    return h('NuxtChild', {\n      key: this.routerViewKey,\n      props: this.$props\n    });\n  }\n\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./.nuxt/components/nuxt-loading.vue?vue&type=script&lang=js&\n/* harmony default export */ var nuxt_loadingvue_type_script_lang_js_ = ({\n  name: 'NuxtLoading',\n\n  data() {\n    return {\n      percent: 0,\n      show: false,\n      canSucceed: true,\n      reversed: false,\n      skipTimerCount: 0,\n      rtl: false,\n      throttle: 200,\n      duration: 5000,\n      continuous: false\n    };\n  },\n\n  computed: {\n    left() {\n      if (!this.continuous && !this.rtl) {\n        return false;\n      }\n\n      return this.rtl ? this.reversed ? '0px' : 'auto' : !this.reversed ? '0px' : 'auto';\n    }\n\n  },\n\n  beforeDestroy() {\n    this.clear();\n  },\n\n  methods: {\n    clear() {\n      clearInterval(this._timer);\n      clearTimeout(this._throttle);\n      this._timer = null;\n    },\n\n    start() {\n      this.clear();\n      this.percent = 0;\n      this.reversed = false;\n      this.skipTimerCount = 0;\n      this.canSucceed = true;\n\n      if (this.throttle) {\n        this._throttle = setTimeout(() => this.startTimer(), this.throttle);\n      } else {\n        this.startTimer();\n      }\n\n      return this;\n    },\n\n    set(num) {\n      this.show = true;\n      this.canSucceed = true;\n      this.percent = Math.min(100, Math.max(0, Math.floor(num)));\n      return this;\n    },\n\n    get() {\n      return this.percent;\n    },\n\n    increase(num) {\n      this.percent = Math.min(100, Math.floor(this.percent + num));\n      return this;\n    },\n\n    decrease(num) {\n      this.percent = Math.max(0, Math.floor(this.percent - num));\n      return this;\n    },\n\n    pause() {\n      clearInterval(this._timer);\n      return this;\n    },\n\n    resume() {\n      this.startTimer();\n      return this;\n    },\n\n    finish() {\n      this.percent = this.reversed ? 0 : 100;\n      this.hide();\n      return this;\n    },\n\n    hide() {\n      this.clear();\n      setTimeout(() => {\n        this.show = false;\n        this.$nextTick(() => {\n          this.percent = 0;\n          this.reversed = false;\n        });\n      }, 500);\n      return this;\n    },\n\n    fail() {\n      this.canSucceed = false;\n      return this;\n    },\n\n    startTimer() {\n      if (!this.show) {\n        this.show = true;\n      }\n\n      if (typeof this._cut === 'undefined') {\n        this._cut = 10000 / Math.floor(this.duration);\n      }\n\n      this._timer = setInterval(() => {\n        /**\n         * When reversing direction skip one timers\n         * so 0, 100 are displayed for two iterations\n         * also disable css width transitioning\n         * which otherwise interferes and shows\n         * a jojo effect\n         */\n        if (this.skipTimerCount > 0) {\n          this.skipTimerCount--;\n          return;\n        }\n\n        if (this.reversed) {\n          this.decrease(this._cut);\n        } else {\n          this.increase(this._cut);\n        }\n\n        if (this.continuous) {\n          if (this.percent >= 100) {\n            this.skipTimerCount = 1;\n            this.reversed = !this.reversed;\n          } else if (this.percent <= 0) {\n            this.skipTimerCount = 1;\n            this.reversed = !this.reversed;\n          }\n        }\n      }, 100);\n    }\n\n  },\n\n  render(h) {\n    let el = h(false);\n\n    if (this.show) {\n      el = h('div', {\n        staticClass: 'nuxt-progress',\n        class: {\n          'nuxt-progress-notransition': this.skipTimerCount > 0,\n          'nuxt-progress-failed': !this.canSucceed\n        },\n        style: {\n          'width': this.percent + '%',\n          'left': this.left\n        }\n      });\n    }\n\n    return el;\n  }\n\n});\n// CONCATENATED MODULE: ./.nuxt/components/nuxt-loading.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_nuxt_loadingvue_type_script_lang_js_ = (nuxt_loadingvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(11);\n\n// CONCATENATED MODULE: ./.nuxt/components/nuxt-loading.vue\nvar render, staticRenderFns\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  components_nuxt_loadingvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var nuxt_loading = (component.exports);\n// EXTERNAL MODULE: ./node_modules/highlight.js/styles/atom-one-light.css\nvar atom_one_light = __webpack_require__(161);\n\n// EXTERNAL MODULE: ./node_modules/codemirror/lib/codemirror.css\nvar codemirror = __webpack_require__(162);\n\n// EXTERNAL MODULE: ./node_modules/bootstrap/dist/css/bootstrap.css\nvar bootstrap = __webpack_require__(163);\n\n// EXTERNAL MODULE: ./scripts/build.scss\nvar build = __webpack_require__(164);\n\n// EXTERNAL MODULE: ./docs/assets/css/docs.min.css\nvar docs_min = __webpack_require__(165);\n\n// EXTERNAL MODULE: ./docs/assets/scss/styles.scss\nvar styles = __webpack_require__(166);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/footer.vue?vue&type=template&id=76730176&\nvar footervue_type_template_id_76730176_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('footer',{staticClass:\"bd-footer text-muted\"},[_c('b-container',{attrs:{\"fluid\":\"\"}},[_c('ul',{staticClass:\"bd-footer-links\"},[_c('li',[_c('b-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"Home\")])],1),_vm._v(\" \"),_c('li',[_c('b-link',{attrs:{\"to\":\"/docs/\"}},[_vm._v(\"Documentation\")])],1),_vm._v(\" \"),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/bootstrap-vue/bootstrap-vue\",\"target\":\"_blank\"}},[_vm._v(\"\\n          GitHub\\n        \")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"\\n      Designed and built with all the love in the world. Maintained by the\\n      \"),_c('a',{attrs:{\"href\":\"https://github.com/orgs/bootstrap-vue/people\",\"target\":\"_blank\"}},[_vm._v(\"core team\")]),_vm._v(\"\\n      with the help of\\n      \"),_c('a',{attrs:{\"href\":\"https://github.com/bootstrap-vue/bootstrap-vue/graphs/contributors\",\"target\":\"_blank\"}},[_vm._v(\"our contributors\")]),_vm._v(\".\\n    \")]),_vm._v(\" \"),_c('p',[_vm._v(\"\\n      Currently v\"+_vm._s(_vm.version)+\". Code licensed\\n      \"),_c('a',{attrs:{\"href\":\"https://github.com/bootstrap-vue/bootstrap-vue/blob/master/LICENSE\",\"target\":\"_blank\"}},[_vm._v(\"MIT\")]),_vm._v(\".\\n      Docs generated with \"),_c('a',{attrs:{\"href\":\"https://nuxtjs.org/\",\"target\":\"_blank\"}},[_vm._v(\"Nuxt.js\")])])])],1)}\nvar footervue_type_template_id_76730176_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/components/footer.vue?vue&type=template&id=76730176&\n\n// EXTERNAL MODULE: ./package.json\nvar package_0 = __webpack_require__(30);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/footer.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var footervue_type_script_lang_js_ = ({\n  name: 'BVDFooter',\n\n  data() {\n    return {\n      version: package_0[\"d\" /* version */]\n    };\n  }\n\n});\n// CONCATENATED MODULE: ./docs/components/footer.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_footervue_type_script_lang_js_ = (footervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./docs/components/footer.vue\n\n\n\n\n\n/* normalize component */\n\nvar footer_component = Object(componentNormalizer[\"a\" /* default */])(\n  components_footervue_type_script_lang_js_,\n  footervue_type_template_id_76730176_render,\n  footervue_type_template_id_76730176_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var components_footer = (footer_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/header.vue?vue&type=template&id=0e78f7fe&\nvar headervue_type_template_id_0e78f7fe_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-navbar',{staticClass:\"bd-navbar flex-column flex-md-row\",attrs:{\"tag\":\"header\",\"type\":\"dark\"}},[_c('b-navbar-brand',{staticClass:\"mr-0 mr-md-2\",attrs:{\"to\":\"/\",\"exact\":\"\",\"aria-label\":\"BootstrapVue\"}},[_c('svg',{staticClass:\"d-block\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 612 612\",\"width\":\"36\",\"height\":\"36\",\"focusable\":\"false\",\"role\":\"img\"}},[_c('title',[_vm._v(\"BootstrapVue\")]),_vm._v(\" \"),_c('g',{attrs:{\"fill\":\"#fff\"}},[_c('path',{attrs:{\"fill-rule\":\"nonzero\",\"d\":\"M510,8 C561.846401,8.16468012 603.83532,50.1535995 604,102 L604,510 C603.83532,561.846401 561.846401,603.83532 510,604 L102,604 C50.1535995,603.83532 8.16468012,561.846401 8,510 L8,102 C8.16468012,50.1535995 50.1535995,8.16468012 102,8 L510,8 L510,8 Z M510,0 L102,0 C45.9,6.21724894e-15 0,45.9 0,102 L0,510 C0,566.1 45.9,612 102,612 L510,612 C566.1,612 612,566.1 612,510 L612,102 C612,45.9 566.1,6.21724894e-15 510,0 Z\"}}),_vm._v(\" \"),_c('text',{attrs:{\"id\":\"BV\",\"font-family\":\"Arial\",\"font-size\":\"350\",\"font-weight\":\"light\",\"letter-spacing\":\"2\"}},[_c('tspan',{attrs:{\"x\":\"72.0527344\",\"y\":\"446\"}},[_vm._v(\"B\")]),_vm._v(\" \"),_c('tspan',{attrs:{\"x\":\"307.5\",\"y\":\"446\"}},[_vm._v(\"V\")])])])])]),_vm._v(\" \"),_c('div',{staticClass:\"navbar-nav-scroll\"},[_c('b-navbar-nav',{staticClass:\"bd-navbar-nav flex-row\",attrs:{\"is-nav\":\"\"}},[_c('b-nav-item',{attrs:{\"to\":\"/docs\",\"exact\":\"\"}},[_vm._v(\"Docs\")]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"to\":\"/docs/components\",\"active-class\":\"active\"}},[_vm._v(\"Components\")]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"to\":\"/docs/directives\",\"active-class\":\"active\"}},[_vm._v(\"Directives\")]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"to\":\"/docs/reference\",\"active-class\":\"active\"}},[_vm._v(\"Reference\")]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"to\":\"/docs/misc\",\"active-class\":\"active\"}},[_vm._v(\"Misc\")]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"to\":\"/play\",\"active-class\":\"active\"}},[_vm._v(\"Play\")])],1)],1),_vm._v(\" \"),_c('b-navbar-nav',{staticClass:\"flex-row ml-md-auto d-none d-md-flex\"},[_c('b-nav-item-dropdown',{attrs:{\"text\":_vm.isDev ? (_vm.isLocal ? 'Local Copy' : (_vm.isPR ? (\"Pull #\" + _vm.isPR) : 'Development')) : (\"v\" + _vm.version),\"toggle-class\":\"mr-md-2\",\"right\":\"\"}},[(_vm.isDev || _vm.isLocal || _vm.isPR)?[(_vm.isLocal)?_c('b-dropdown-item',{attrs:{\"active\":\"\",\"href\":\"/\"}},[_vm._v(\"\\n          Local copy\\n        \")]):(_vm.isPR)?_c('b-dropdown-item',{attrs:{\"active\":\"\",\"href\":\"/\"}},[_vm._v(\"\\n          Pull Request #\"+_vm._s(_vm.isPR)+\"\\n        \")]):_vm._e(),_vm._v(\" \"),_c('b-dropdown-item',{attrs:{\"active\":!_vm.isLocal && !_vm.isPR,\"href\":\"https://bootstrap-vue.netlify.com\",\"rel\":\"nofollow\"}},[_vm._v(\"\\n          Development\\n        \")]),_vm._v(\" \"),_c('b-dropdown-item',{attrs:{\"href\":\"https://bootstrap-vue.js.org\"}},[_vm._v(\"\\n          Latest (v\"+_vm._s(_vm.version)+\")\\n        \")])]:[_c('b-dropdown-item',{attrs:{\"active\":\"\",\"href\":\"https://bootstrap-vue.js.org\"}},[_vm._v(\"\\n          Latest (v\"+_vm._s(_vm.version)+\")\\n        \")]),_vm._v(\" \"),_c('b-dropdown-item',{attrs:{\"href\":\"https://bootstrap-vue.netlify.com\",\"rel\":\"nofollow\"}},[_vm._v(\"\\n          Development\\n        \")])]],2),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"href\":\"https://github.com/bootstrap-vue/bootstrap-vue\",\"target\":\"_blank\",\"link-attrs\":{ 'aria-label': 'GitHub' }}},[_c('svg',{staticClass:\"navbar-nav-svg\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\",\"width\":\"32\",\"height\":\"32\",\"focusable\":\"false\",\"role\":\"img\"}},[_c('title',[_vm._v(\"GitHub\")]),_vm._v(\" \"),_c('g',{attrs:{\"fill\":\"currentColor\"}},[_c('path',{attrs:{\"fill-rule\":\"evenodd\",\"clip-rule\":\"evenodd\",\"d\":\"M16,0.4c-8.8,0-16,7.2-16,16c0,7.1,4.6,13.1,10.9,15.2 c0.8,0.1,1.1-0.3,1.1-0.8c0-0.4,0-1.4,0-2.7c-4.5,1-5.4-2.1-5.4-2.1c-0.7-1.8-1.8-2.3-1.8-2.3c-1.5-1,0.1-1,0.1-1 c1.6,0.1,2.5,1.6,2.5,1.6c1.4,2.4,3.7,1.7,4.7,1.3c0.1-1,0.6-1.7,1-2.1c-3.6-0.4-7.3-1.8-7.3-7.9c0-1.7,0.6-3.2,1.6-4.3 c-0.2-0.4-0.7-2,0.2-4.2c0,0,1.3-0.4,4.4,1.6c1.3-0.4,2.6-0.5,4-0.5c1.4,0,2.7,0.2,4,0.5C23.1,6.6,24.4,7,24.4,7 c0.9,2.2,0.3,3.8,0.2,4.2c1,1.1,1.6,2.5,1.6,4.3c0,6.1-3.7,7.5-7.3,7.9c0.6,0.5,1.1,1.5,1.1,3c0,2.1,0,3.9,0,4.4 c0,0.4,0.3,0.9,1.1,0.8C27.4,29.5,32,23.5,32,16.4C32,7.6,24.8,0.4,16,0.4z\"}})])])]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"href\":\"https://twitter.com/BootstrapVue\",\"target\":\"_blank\",\"link-attrs\":{ 'aria-label': 'Twitter' }}},[_c('svg',{staticClass:\"navbar-nav-svg\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\",\"width\":\"32\",\"height\":\"32\",\"focusable\":\"false\",\"role\":\"img\"}},[_c('title',[_vm._v(\"Twitter\")]),_vm._v(\" \"),_c('g',{attrs:{\"fill\":\"currentColor\"}},[_c('path',{attrs:{\"d\":\"M32,6.1c-1.2,0.5-2.4,0.9-3.8,1c1.4-0.8,2.4-2.1,2.9-3.6c-1.3,0.8-2.7,1.3-4.2,1.6C25.7,3.8,24,3,22.2,3 c-3.6,0-6.6,2.9-6.6,6.6c0,0.5,0.1,1,0.2,1.5C10.3,10.8,5.5,8.2,2.2,4.2c-0.6,1-0.9,2.1-0.9,3.3c0,2.3,1.2,4.3,2.9,5.5 c-1.1,0-2.1-0.3-3-0.8c0,0,0,0.1,0,0.1c0,3.2,2.3,5.8,5.3,6.4c-0.6,0.1-1.1,0.2-1.7,0.2c-0.4,0-0.8,0-1.2-0.1 c0.8,2.6,3.3,4.5,6.1,4.6c-2.2,1.8-5.1,2.8-8.2,2.8c-0.5,0-1.1,0-1.6-0.1C2.9,27.9,6.4,29,10.1,29c12.1,0,18.7-10,18.7-18.7 c0-0.3,0-0.6,0-0.8C30,8.5,31.1,7.4,32,6.1z\"}})])])]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"href\":\"https://discord.gg/j2Mtcny\",\"target\":\"_blank\",\"link-attrs\":{ 'aria-label': 'Discord' }}},[_c('svg',{staticClass:\"navbar-nav-svg\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\",\"width\":\"32\",\"height\":\"32\",\"focusable\":\"false\",\"role\":\"img\"}},[_c('title',[_vm._v(\"Discord\")]),_vm._v(\" \"),_c('g',{attrs:{\"fill\":\"currentColor\"}},[_c('path',{attrs:{\"d\":\"M13.1,13.424a1.782,1.782,0,0,0,0,3.552A1.7,1.7,0,0,0,14.736,15.2,1.694,1.694,0,0,0,13.1,13.424Zm5.84,0A1.782,1.782,0,1,0,20.576,15.2,1.7,1.7,0,0,0,18.944,13.424Z\"}}),_vm._v(\" \"),_c('path',{attrs:{\"d\":\"M26.72,0H5.28A3.288,3.288,0,0,0,2,3.3V24.928a3.288,3.288,0,0,0,3.28,3.3H23.424l-.848-2.96,2.048,1.9L26.56,28.96,30,32V3.3A3.288,3.288,0,0,0,26.72,0ZM20.544,20.9s-.576-.688-1.056-1.3a5.049,5.049,0,0,0,2.9-1.9,9.156,9.156,0,0,1-1.84.944,10.531,10.531,0,0,1-2.32.688,11.208,11.208,0,0,1-4.144-.016,13.431,13.431,0,0,1-2.352-.688A9.6,9.6,0,0,1,9.9,17.68a4.976,4.976,0,0,0,2.8,1.888c-.48.608-1.072,1.328-1.072,1.328a5.8,5.8,0,0,1-4.88-2.432,21.426,21.426,0,0,1,2.3-9.328,7.912,7.912,0,0,1,4.5-1.68l.16.192A10.794,10.794,0,0,0,9.5,9.744s.352-.192.944-.464A12.015,12.015,0,0,1,14.08,8.272a1.576,1.576,0,0,1,.272-.032,13.538,13.538,0,0,1,3.232-.032A13.043,13.043,0,0,1,22.4,9.744a10.648,10.648,0,0,0-3.984-2.032l.224-.256a7.912,7.912,0,0,1,4.5,1.68,21.426,21.426,0,0,1,2.3,9.328A5.849,5.849,0,0,1,20.544,20.9Z\"}})])])]),_vm._v(\" \"),_c('b-nav-item',{attrs:{\"href\":\"https://opencollective.com/bootstrap-vue/\",\"target\":\"_blank\",\"link-attrs\":{ 'aria-label': 'Open Collective' }}},[_c('svg',{staticClass:\"navbar-nav-svg\",attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 40 41\",\"width\":\"32\",\"height\":\"32\",\"fill\":\"currentColor\",\"fill-rule\":\"evenodd\",\"focusable\":\"false\",\"role\":\"img\"}},[_c('title',[_vm._v(\"Open Collective\")]),_vm._v(\" \"),_c('path',{attrs:{\"fill-opacity\":\".4\",\"d\":\"M32.8 21c0 2.4-.8 4.9-2 6.9l5.1 5.1c2.5-3.4 4.1-7.6 4.1-12 0-4.6-1.6-8.8-4-12.2L30.7 14c1.2 2 2 4.3 2 7z\"}}),_vm._v(\" \"),_c('path',{attrs:{\"d\":\"M20 33.7a12.8 12.8 0 0 1 0-25.6c2.6 0 5 .7 7 2.1L32 5a20 20 0 1 0 .1 31.9l-5-5.2a13 13 0 0 1-7 2z\"}})])])],1)],1)}\nvar headervue_type_template_id_0e78f7fe_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/components/header.vue?vue&type=template&id=0e78f7fe&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.match.js\nvar es6_regexp_match = __webpack_require__(32);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/header.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var headervue_type_script_lang_js_ = ({\n  name: 'BVDHeader',\n\n  data() {\n    return {\n      version: package_0[\"d\" /* version */],\n      isDev: false,\n      isLocal: false,\n      isPR: false\n    };\n  },\n\n  mounted() {\n    const host = window.location.host || '';\n    this.isLocal = host === 'localhost' || host === '127.0.0.1';\n    this.isDev = host !== 'bootstrap-vue.js.org';\n    const matches = host.match(/^deploy-preview-(\\d+)--bootstrap-vue\\.netlify\\.com$/i);\n    this.isPR = matches && matches[1];\n  }\n\n});\n// CONCATENATED MODULE: ./docs/components/header.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_headervue_type_script_lang_js_ = (headervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./docs/components/header.vue\n\n\n\n\n\n/* normalize component */\n\nvar header_component = Object(componentNormalizer[\"a\" /* default */])(\n  components_headervue_type_script_lang_js_,\n  headervue_type_template_id_0e78f7fe_render,\n  headervue_type_template_id_0e78f7fe_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var components_header = (header_component.exports);\n// CONCATENATED MODULE: ./docs/layouts/default.js\n\n\n/* harmony default export */ var layouts_default = ({\n  name: 'BVDDefaultLayout',\n  functional: true,\n  render: h => [h(components_header), h('nuxt'), h(components_footer)]\n});\n// CONCATENATED MODULE: ./docs/components/feedback.js\n/* harmony default export */ var feedback = ({\n  name: 'BDVFeedback',\n\n  data() {\n    return {\n      baseUrl: 'https://github.com/bootstrap-vue/bootstrap-vue'\n    };\n  },\n\n  computed: {\n    reportIssueUrl() {\n      // Add appreciate query params for proper issue title\n      return \"\".concat(this.baseUrl, \"/issues/new?title=Docs\");\n    },\n\n    editPageUrl() {\n      const name = this.$route.name;\n      const slug = this.$route.params.slug;\n      let path = '/';\n\n      if (name === 'docs') {\n        path = \"/docs/markdown/intro/README.md\";\n      } else if (name === 'docs-components-slug') {\n        path = \"/src/components/\".concat(slug, \"/README.md\");\n      } else if (name === 'docs-directives-slug') {\n        path = \"/src/directives/\".concat(slug, \"/README.md\");\n      } else if (name === 'docs-reference-slug') {\n        path = \"/docs/markdown/reference/\".concat(slug, \"/README.md\");\n      } else if (name === 'docs-misc-slug') {\n        if (slug === 'changelog') {\n          path = '/CHANGELOG.md';\n        } else if (slug === 'contributing') {\n          path = '/CONTRIBUTING.md';\n        } else if (slug === 'settings') {\n          path = '/docs/markdown/misc/settings/README.md';\n        }\n      }\n\n      return \"\".concat(this.baseUrl, \"/tree/dev/\").concat(path);\n    }\n\n  },\n\n  render(h) {\n    const $reportIssueButton = h('b-button', {\n      props: {\n        variant: 'light',\n        href: this.reportIssueUrl,\n        target: '_blank'\n      }\n    }, 'Report an issue');\n    const $editPageButton = h('b-button', {\n      props: {\n        variant: 'light',\n        href: this.editPageUrl,\n        target: '_blank'\n      }\n    }, 'Edit this page');\n    return h('b-button-group', {\n      props: {\n        size: 'sm'\n      }\n    }, [$reportIssueButton, $editPageButton]);\n  }\n\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/search.vue?vue&type=template&id=6ba656b4&\nvar searchvue_type_template_id_6ba656b4_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('form',{staticClass:\"bd-search d-flex align-items-center\",on:{\"submit\":function($event){$event.stopPropagation();$event.preventDefault();}}},[_c('b-form-input',{attrs:{\"id\":\"bd-search-input\",\"autocomplete\":\"off\",\"type\":\"search\",\"placeholder\":\"Search...\",\"aria-label\":\"Search docs\"}}),_vm._v(\" \"),_c('button',{directives:[{name:\"b-toggle\",rawName:\"v-b-toggle.bd-docs-nav\",modifiers:{\"bd-docs-nav\":true}}],staticClass:\"btn btn-link bd-search-docs-toggle d-md-none p-0 ml-3\",attrs:{\"type\":\"button\",\"aria-label\":\"Toggle docs navigation\"}},[_c('svg',{attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 30 30\",\"width\":\"30\",\"height\":\"30\",\"focusable\":\"false\"}},[_c('title',[_vm._v(\"Menu\")]),_vm._v(\" \"),_c('path',{attrs:{\"stroke\":\"currentColor\",\"stroke-width\":\"2\",\"stroke-linecap\":\"round\",\"stroke-miterlimit\":\"10\",\"d\":\"M4 7h22M4 15h22M4 23h22\"}})])])],1)}\nvar searchvue_type_template_id_6ba656b4_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/components/search.vue?vue&type=template&id=6ba656b4&\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js\nvar web_dom_iterable = __webpack_require__(31);\n\n// EXTERNAL MODULE: ./docs/utils/index.js\nvar docs_utils = __webpack_require__(10);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/search.vue?vue&type=script&lang=js&\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nlet scriptsInjected = false;\n/* harmony default export */ var searchvue_type_script_lang_js_ = ({\n  name: 'BDVSearch',\n\n  data() {\n    return {\n      docsearch: null\n    };\n  },\n\n  mounted() {\n    this.loadDocsearch().then(this.initDocsearch);\n  },\n\n  methods: {\n    loadDocsearch() {\n      return Object(asyncToGenerator[\"a\" /* default */])(function* () {\n        if (scriptsInjected) {\n          return;\n        } // Search indexing config stored at:\n        // https://github.com/algolia/docsearch-configs/blob/master/configs/bootstrap-vue.json\n\n\n        const cdnBaseUrl = '//cdn.jsdelivr.net/docsearch.js/2/';\n        const $body = document.body; // Load JS\n\n        const loadJs = new Promise(resolve => {\n          let $script = document.createElement('script');\n          $script.setAttribute('type', 'text/javascript');\n          $script.setAttribute('src', \"\".concat(cdnBaseUrl, \"docsearch.min.js\"));\n          $body.appendChild($script);\n          $script.onload = resolve;\n        }); // Load CSS\n\n        const loadCss = new Promise(resolve => {\n          let $link = document.createElement('link');\n          $link.setAttribute('rel', 'stylesheet');\n          $link.setAttribute('type', 'text/css');\n          $link.setAttribute('href', \"\".concat(cdnBaseUrl, \"docsearch.min.css\"));\n          $body.appendChild($link);\n          $link.onload = resolve;\n        });\n        yield Promise.all([loadJs, loadCss]);\n        scriptsInjected = true;\n      })();\n    },\n\n    initDocsearch() {\n      if (this.docsearch) {\n        return;\n      } // Initialize docsearch\n\n\n      this.docsearch = window.docsearch({\n        apiKey: 'c816d3054b015320f0cfb40042f7e2bc',\n        indexName: 'bootstrap-vue',\n        inputSelector: '#bd-search-input',\n\n        transformData(hits) {\n          return hits.map(function (hit) {\n            // Transform URL to a relative URL\n            hit.url = Object(docs_utils[\"e\" /* relativeUrl */])(hit.url);\n            return hit;\n          });\n        },\n\n        // Set debug to `true` if you want to inspect the dropdown\n        debug: false\n      });\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./docs/components/search.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_searchvue_type_script_lang_js_ = (searchvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./docs/components/search.vue\n\n\n\n\n\n/* normalize component */\n\nvar search_component = Object(componentNormalizer[\"a\" /* default */])(\n  components_searchvue_type_script_lang_js_,\n  searchvue_type_template_id_6ba656b4_render,\n  searchvue_type_template_id_6ba656b4_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var components_search = (search_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/sidebar.vue?vue&type=template&id=9ae6d9f0&\nvar sidebarvue_type_template_id_9ae6d9f0_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-collapse',{staticClass:\"bd-links\",attrs:{\"id\":\"bd-docs-nav\",\"tag\":\"nav\",\"is-nav\":\"\"}},_vm._l((_vm.nav),function(group){return _c('b-link',{key:group.base,staticClass:\"bd-toc-item\",attrs:{\"to\":_vm.buildUrl('/docs/', [group.base]),\"exact\":group.exact,\"router-tag\":\"div\",\"active-class\":\"active\"}},[_c('b-link',{staticClass:\"bd-toc-link\",attrs:{\"to\":_vm.buildUrl('/docs/', [group.base]),\"exact\":group.exact,\"active-class\":\"\"}},[_vm._v(\"\\n      \"+_vm._s(group.title)+\"\\n      \"),(group.new)?_c('b-badge',{staticClass:\"text-uppercase\",attrs:{\"tag\":\"small\",\"variant\":\"success\"}},[_vm._v(\"New\")]):_vm._e(),_vm._v(\" \"),(group.breaking)?_c('b-badge',{staticClass:\"text-uppercase\",attrs:{\"tag\":\"small\",\"variant\":\"danger\"}},[_vm._v(\"Breaking change\")]):_vm._e(),_vm._v(\" \"),(group.beta)?_c('b-badge',{staticClass:\"text-uppercase\",attrs:{\"tag\":\"small\",\"variant\":\"warning\"}},[_vm._v(\"Beta\")]):_vm._e()],1),_vm._v(\" \"),_c('b-nav',{staticClass:\"bd-sidenav\"},_vm._l((group.pages),function(page){return _c('b-link',{key:page.title,staticClass:\"nav-item\",attrs:{\"to\":_vm.buildUrl('/docs/', [group.base, page.slug]),\"router-tag\":\"li\",\"active-class\":\"active bd-sidenav-active\"}},[_c('b-link',{staticClass:\"nav-link\",attrs:{\"to\":_vm.buildUrl('/docs/', [group.base, page.slug]),\"exact\":group.exact,\"active-class\":\"\"}},[_vm._v(\"\\n          \"+_vm._s(page.title)+\"\\n          \"),(page.new)?_c('b-badge',{staticClass:\"text-uppercase\",attrs:{\"tag\":\"small\",\"variant\":\"success\"}},[_vm._v(\"New\")]):_vm._e(),_vm._v(\" \"),(page.enhanced)?_c('b-badge',{staticClass:\"text-uppercase\",attrs:{\"tag\":\"small\",\"variant\":\"info\"}},[_vm._v(\"Enhanced\")]):_vm._e(),_vm._v(\" \"),(page.breaking)?_c('b-badge',{staticClass:\"text-uppercase\",attrs:{\"tag\":\"small\",\"variant\":\"danger\"}},[_vm._v(\"Breaking change\")]):_vm._e(),_vm._v(\" \"),(page.beta)?_c('b-badge',{staticClass:\"text-uppercase\",attrs:{\"tag\":\"small\",\"variant\":\"warning\"}},[_vm._v(\"Beta\")]):_vm._e()],1)],1)}),1)],1)}),1)}\nvar sidebarvue_type_template_id_9ae6d9f0_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/components/sidebar.vue?vue&type=template&id=9ae6d9f0&\n\n// EXTERNAL MODULE: ./docs/content/index.js\nvar docs_content = __webpack_require__(44);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/sidebar.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var sidebarvue_type_script_lang_js_ = ({\n  name: 'BDVSidebar',\n\n  data() {\n    return {\n      nav: docs_content[\"g\" /* nav */]\n    };\n  },\n\n  methods: {\n    buildUrl(basePath) {\n      let parts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      return \"\".concat(basePath, \"/\").concat(parts.join('/')).replace(/(https?:\\/\\/)|(\\/)+/g, '$1$2');\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./docs/components/sidebar.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_sidebarvue_type_script_lang_js_ = (sidebarvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./docs/components/sidebar.vue\n\n\n\n\n\n/* normalize component */\n\nvar sidebar_component = Object(componentNormalizer[\"a\" /* default */])(\n  components_sidebarvue_type_script_lang_js_,\n  sidebarvue_type_template_id_9ae6d9f0_render,\n  sidebarvue_type_template_id_9ae6d9f0_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var sidebar = (sidebar_component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/toc.vue?vue&type=template&id=7eb62fd1&\nvar tocvue_type_template_id_7eb62fd1_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-nav',{directives:[{name:\"b-scrollspy\",rawName:\"v-b-scrollspy\",value:({ offset: _vm.offset }),expression:\"{ offset }\"}],staticClass:\"section-nav\",attrs:{\"vertical\":\"\"}},[(_vm.toc.title && _vm.toc.top)?_c('b-nav-item',{staticClass:\"toc-entry mb-2\",attrs:{\"href\":_vm.toc.top,\"link-classes\":\"font-weight-bold\"},on:{\"click\":function($event){return _vm.scrollIntoView($event, _vm.toc.top)}}},[_c('span',{domProps:{\"innerHTML\":_vm._s(_vm.toc.title)}})]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.toc.toc),function(h2){return _c('li',{key:h2.href,staticClass:\"nav-item toc-entry toc-h2 mb-1\"},[_c('b-link',{staticClass:\"nav-link\",attrs:{\"href\":h2.href},on:{\"click\":function($event){return _vm.scrollIntoView($event, h2.href)}}},[_c('span',{domProps:{\"innerHTML\":_vm._s(h2.label)}})]),_vm._v(\" \"),(h2.toc && h2.toc.length > 0)?_c('b-nav',{key:(\"sub-\" + (h2.href)),attrs:{\"vertical\":\"\"}},_vm._l((h2.toc),function(h3){return _c('b-nav-item',{key:h3.href,staticClass:\"toc-entry toc-h3\",attrs:{\"href\":h3.href},on:{\"click\":function($event){return _vm.scrollIntoView($event, h3.href)}}},[_c('span',{domProps:{\"innerHTML\":_vm._s(h3.label)}})])}),1):_vm._e()],1)})],2)}\nvar tocvue_type_template_id_7eb62fd1_staticRenderFns = []\n\n\n// CONCATENATED MODULE: ./docs/components/toc.vue?vue&type=template&id=7eb62fd1&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib??ref--2-0!./node_modules/vue-loader/lib??vue-loader-options!./docs/components/toc.vue?vue&type=script&lang=js&\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var tocvue_type_script_lang_js_ = ({\n  name: 'BDVToc',\n\n  data() {\n    return {\n      readme: '',\n      meta: null,\n      offset: 0\n    };\n  },\n\n  computed: {\n    toc() {\n      return Object(docs_utils[\"b\" /* makeTOC */])(this.readme, this.meta);\n    }\n\n  },\n\n  mounted() {\n    const $header = document.body.querySelector('header.navbar');\n\n    if ($header) {\n      this.offset = $header.offsetHeight + 6;\n    }\n\n    this.$root.$on('setTOC', (readme, meta) => {\n      this.readme = readme;\n      this.meta = meta || null;\n    });\n  },\n\n  methods: {\n    isArray(value) {\n      return Array.isArray(value);\n    },\n\n    scrollIntoView(evt, href) {\n      evt.preventDefault();\n      evt.stopPropagation(); // We use an attribute `querySelector()` rather than `getElementByID()`,\n      // as some auto-generated ID's are invalid or not unique\n\n      const id = (href || '').replace(/#/g, '');\n      const $el = document.body.querySelector(\"[id=\\\"\".concat(id, \"\\\"]\"));\n\n      if ($el) {\n        // Get the document scrolling element\n        const scroller = document.scrollingElement || document.documentElement || document.body; // Scroll heading into view (minus offset to account for nav top height\n\n        Object(docs_utils[\"f\" /* scrollTo */])(scroller, Object(docs_utils[\"c\" /* offsetTop */])($el) - 70, 100, () => {\n          // Set a tab index so we can focus header for a11y support\n          $el.tabIndex = -1; // Focus the heading\n\n          $el.focus();\n        });\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./docs/components/toc.vue?vue&type=script&lang=js&\n /* harmony default export */ var components_tocvue_type_script_lang_js_ = (tocvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./docs/components/toc.vue\n\n\n\n\n\n/* normalize component */\n\nvar toc_component = Object(componentNormalizer[\"a\" /* default */])(\n  components_tocvue_type_script_lang_js_,\n  tocvue_type_template_id_7eb62fd1_render,\n  tocvue_type_template_id_7eb62fd1_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var toc = (toc_component.exports);\n// CONCATENATED MODULE: ./docs/layouts/docs.js\n\n\n\n\n\n/* harmony default export */ var docs = ({\n  name: 'BVDDocsLayout',\n  functional: true,\n  render: h => {\n    const $sidebarCol = h('b-col', {\n      staticClass: 'bd-sidebar',\n      props: {\n        cols: 12,\n        md: 3,\n        xl: 2\n      }\n    }, [h(components_search), h(sidebar)]);\n    const $contentCol = h('b-col', {\n      staticClass: 'bd-content',\n      class: ['pb-md-3', 'pl-md-5'],\n      props: {\n        cols: 12,\n        md: 9,\n        xl: 8\n      }\n    }, [h(feedback, {\n      class: ['float-right', 'mt-2', 'mb-0', 'mb-lg-2']\n    }), h('div', {\n      class: ['clearfix', 'd-bock', 'd-lg-none']\n    }), h('nuxt')]);\n    const $tocCol = h('b-col', {\n      staticClass: 'bd-toc',\n      class: ['d-none', 'd-xl-block'],\n      props: {\n        xl: 2\n      }\n    }, [h(toc)]);\n    const $row = h('b-row', {\n      class: ['flex-xl-nowrap2']\n    }, [$sidebarCol, $contentCol, $tocCol]);\n    const $container = h('b-container', {\n      props: {\n        fluid: true\n      }\n    }, [$row]);\n    return [h(components_header), $container];\n  }\n});\n// CONCATENATED MODULE: ./.nuxt/App.js\n\n\n\n\n\n\n\n\n\n\nconst layouts = {\n  \"_default\": layouts_default,\n  \"_docs\": docs\n};\n/* harmony default export */ var App = ({\n  head: {\n    \"meta\": [{\n      \"http-equiv\": \"X-UA-Compatible\",\n      \"content\": \"IE=edge\"\n    }, {\n      \"hid\": \"charset\",\n      \"charset\": \"utf-8\"\n    }, {\n      \"hid\": \"viewport\",\n      \"name\": \"viewport\",\n      \"content\": \"width=device-width, initial-scale=1\"\n    }, {\n      \"hid\": \"mobile-web-app-capable\",\n      \"name\": \"mobile-web-app-capable\",\n      \"content\": \"yes\"\n    }, {\n      \"hid\": \"apple-mobile-web-app-title\",\n      \"name\": \"apple-mobile-web-app-title\",\n      \"content\": \"BootstrapVue\"\n    }, {\n      \"hid\": \"description\",\n      \"name\": \"description\",\n      \"content\": \"Quickly integrate Bootstrap v4 components with Vue.js\"\n    }, {\n      \"hid\": \"theme-color\",\n      \"name\": \"theme-color\",\n      \"content\": \"#563d7c\"\n    }, {\n      \"hid\": \"og:type\",\n      \"name\": \"og:type\",\n      \"property\": \"og:type\",\n      \"content\": \"website\"\n    }, {\n      \"hid\": \"og:title\",\n      \"name\": \"og:title\",\n      \"property\": \"og:title\",\n      \"content\": \"BootstrapVue\"\n    }, {\n      \"hid\": \"og:site_name\",\n      \"name\": \"og:site_name\",\n      \"property\": \"og:site_name\",\n      \"content\": \"BootstrapVue\"\n    }, {\n      \"hid\": \"og:description\",\n      \"name\": \"og:description\",\n      \"property\": \"og:description\",\n      \"content\": \"Quickly integrate Bootstrap v4 components with Vue.js\"\n    }],\n    \"script\": [{\n      \"src\": \"\\u002F\\u002Fpolyfill.io\\u002Fv3\\u002Fpolyfill.min.js?features=es2015%2CMutationObserver\",\n      \"crossorigin\": \"anonymous\"\n    }],\n    \"link\": [{\n      \"rel\": \"manifest\",\n      \"href\": \"\\u002F_nuxt\\u002Fmanifest.6f2333a4.json\"\n    }, {\n      \"rel\": \"shortcut icon\",\n      \"href\": \"\\u002F_nuxt\\u002Ficons\\u002Ficon_64.66da43.png\"\n    }, {\n      \"rel\": \"apple-touch-icon\",\n      \"href\": \"\\u002F_nuxt\\u002Ficons\\u002Ficon_512.66da43.png\",\n      \"sizes\": \"512x512\"\n    }],\n    \"style\": [],\n    \"title\": \"BootstrapVue\",\n    \"htmlAttrs\": {\n      \"lang\": \"en\"\n    }\n  },\n\n  render(h, props) {\n    const loadingEl = h('NuxtLoading', {\n      ref: 'loading'\n    });\n    const layoutEl = h(this.layout || 'nuxt');\n    const templateEl = h('div', {\n      domProps: {\n        id: '__layout'\n      },\n      key: this.layoutName\n    }, [layoutEl]);\n    const transitionEl = h('transition', {\n      props: {\n        name: 'layout',\n        mode: 'out-in'\n      },\n      on: {\n        beforeEnter(el) {\n          // Ensure to trigger scroll event after calling scrollBehavior\n          window.$nuxt.$nextTick(() => {\n            window.$nuxt.$emit('triggerScroll');\n          });\n        }\n\n      }\n    }, [templateEl]);\n    return h('div', {\n      domProps: {\n        id: '__nuxt'\n      }\n    }, [loadingEl, transitionEl]);\n  },\n\n  data: () => ({\n    isOnline: true,\n    layout: null,\n    layoutName: ''\n  }),\n\n  beforeCreate() {\n    vue_common_default.a.util.defineReactive(this, 'nuxt', this.$options.nuxt);\n  },\n\n  created() {\n    // Add this.$nuxt in child instances\n    vue_common_default.a.prototype.$nuxt = this; // add to window so we can listen when ready\n\n    if (true) {\n      window.$nuxt = this;\n      this.refreshOnlineStatus(); // Setup the listeners\n\n      window.addEventListener('online', this.refreshOnlineStatus);\n      window.addEventListener('offline', this.refreshOnlineStatus);\n    } // Add $nuxt.error()\n\n\n    this.error = this.nuxt.error;\n  },\n\n  mounted() {\n    this.$loading = this.$refs.loading;\n  },\n\n  watch: {\n    'nuxt.err': 'errorChanged'\n  },\n  computed: {\n    isOffline() {\n      return !this.isOnline;\n    }\n\n  },\n  methods: {\n    refreshOnlineStatus() {\n      if (true) {\n        if (typeof window.navigator.onLine === 'undefined') {\n          // If the browser doesn't support connection status reports\n          // assume that we are online because most apps' only react\n          // when they now that the connection has been interrupted\n          this.isOnline = true;\n        } else {\n          this.isOnline = window.navigator.onLine;\n        }\n      }\n    },\n\n    errorChanged() {\n      if (this.nuxt.err && this.$loading) {\n        if (this.$loading.fail) this.$loading.fail();\n        if (this.$loading.finish) this.$loading.finish();\n      }\n    },\n\n    setLayout(layout) {\n      if (!layout || !layouts['_' + layout]) {\n        layout = 'default';\n      }\n\n      this.layoutName = layout;\n      this.layout = layouts['_' + layout];\n      return this.layout;\n    },\n\n    loadLayout(layout) {\n      if (!layout || !layouts['_' + layout]) {\n        layout = 'default';\n      }\n\n      return Promise.resolve(layouts['_' + layout]);\n    }\n\n  },\n  components: {\n    NuxtLoading: nuxt_loading\n  }\n});\n// CONCATENATED MODULE: ./.nuxt/workbox.js\n\n\nfunction register() {\n  return _register.apply(this, arguments);\n}\n\nfunction _register() {\n  _register = Object(asyncToGenerator[\"a\" /* default */])(function* () {\n    if (!'serviceWorker' in navigator) {\n      throw new Error('serviceWorker is not supported in current browser!');\n    }\n\n    const {\n      Workbox\n    } = yield __webpack_require__.e(/* import() */ 72).then(__webpack_require__.bind(null, 574));\n    const workbox = new Workbox('/sw.js', {\n      scope: '/'\n    });\n    yield workbox.register();\n    return workbox;\n  });\n  return _register.apply(this, arguments);\n}\n\nwindow.$workbox = register().catch(error => {});\n// CONCATENATED MODULE: ./.nuxt/nuxt-icons.js\n\n/* harmony default export */ var nuxt_icons = (function (_x, _x2) {\n  return nuxt_icons_ref.apply(this, arguments);\n});\n\nfunction nuxt_icons_ref() {\n  nuxt_icons_ref = Object(asyncToGenerator[\"a\" /* default */])(function* (ctx, inject) {\n    const icons = {\n      \"64x64\": \"/_nuxt/icons/icon_64.66da43.png\",\n      \"120x120\": \"/_nuxt/icons/icon_120.66da43.png\",\n      \"144x144\": \"/_nuxt/icons/icon_144.66da43.png\",\n      \"152x152\": \"/_nuxt/icons/icon_152.66da43.png\",\n      \"192x192\": \"/_nuxt/icons/icon_192.66da43.png\",\n      \"384x384\": \"/_nuxt/icons/icon_384.66da43.png\",\n      \"512x512\": \"/_nuxt/icons/icon_512.66da43.png\"\n    };\n\n    const getIcon = size => icons[size + 'x' + size] || '';\n\n    inject('icon', getIcon);\n  });\n  return nuxt_icons_ref.apply(this, arguments);\n}\n// EXTERNAL MODULE: ./node_modules/vue-analytics/dist/vue-analytics.js\nvar vue_analytics = __webpack_require__(132);\nvar vue_analytics_default = /*#__PURE__*/__webpack_require__.n(vue_analytics);\n\n// CONCATENATED MODULE: ./.nuxt/google-analytics.js\n\n\n\n\n/* harmony default export */ var google_analytics = (/*#__PURE__*/(function () {\n  var _ref = Object(asyncToGenerator[\"a\" /* default */])(function* (ctx, inject) {\n    const options = {\n      \"dev\": true,\n      \"debug\": {},\n      \"id\": \"UA-89526435-1\",\n      \"autoTracking\": {\n        \"exception\": true\n      }\n    };\n\n    if (typeof options.asyncID === 'function') {\n      options.id = yield options.asyncID(ctx);\n    }\n\n    vue_common_default.a.use(vue_analytics_default.a, Object(objectSpread[\"a\" /* default */])({}, {\n      router: ctx.app.router\n    }, options));\n    ctx.$ga = vue_common_default.a.$ga;\n    inject('ga', vue_common_default.a.$ga);\n  });\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})());\n// CONCATENATED MODULE: ./src/utils/vue.js\n//\n// Single point of contact for Vue\n//\n// TODO:\n//   Conditionally import Vue if no global Vue\n//\n\n/* harmony default export */ var vue = (vue_common_default.a);\n// EXTERNAL MODULE: ./src/utils/env.js\nvar env = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./src/utils/warn.js\n\n/**\n * Log a warning message to the console with BootstrapVue formatting\n * @param {string} message\n */\n\nconst warn = message =>\n/* istanbul ignore next */\n{\n  if (!Object(env[\"a\" /* getNoWarn */])()) {\n    console.warn(\"[BootstrapVue warn]: \".concat(message));\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nconst warnNotClient = source => {\n  /* istanbul ignore else */\n  if (env[\"j\" /* isBrowser */]) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Can not be called during SSR.\"));\n    return true;\n  }\n};\n/**\n * Warn when no Promise support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nconst warnNoPromiseSupport = source => {\n  /* istanbul ignore else */\n  if (env[\"g\" /* hasPromiseSupport */]) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires Promise support.\"));\n    return true;\n  }\n};\n/**\n * Warn when no MutationObserver support is given\n * @param {string} source\n * @returns {boolean} warned\n */\n\nconst warnNoMutationObserverSupport = source => {\n  /* istanbul ignore else */\n  if (env[\"d\" /* hasMutationObserverSupport */]) {\n    return false;\n  } else {\n    warn(\"\".concat(source, \": Requires MutationObserver support.\"));\n    return true;\n  }\n}; // Default export\n\n/* harmony default export */ var utils_warn = (warn);\n// EXTERNAL MODULE: ./src/utils/array.js\nvar array = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./src/utils/object.js\nvar object = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/utils/clone-deep.js\n\n\n\nconst clone_deep_cloneDeep = function cloneDeep(obj) {\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : obj;\n\n  if (Object(array[\"d\" /* isArray */])(obj)) {\n    return obj.reduce((result, val) => [...result, cloneDeep(val, val)], []);\n  }\n\n  if (Object(object[\"i\" /* isPlainObject */])(obj)) {\n    return Object(object[\"j\" /* keys */])(obj).reduce((result, key) => Object(objectSpread[\"a\" /* default */])({}, result, {\n      [key]: cloneDeep(obj[key], obj[key])\n    }), {});\n  }\n\n  return defaultValue;\n};\n/* harmony default export */ var clone_deep = (clone_deep_cloneDeep);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(16);\n\n// CONCATENATED MODULE: ./src/utils/get.js\n\n\n\n/**\n * Get property defined by dot/array notation in string.\n *\n * @link https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf#gistcomment-1935901\n *\n * @param {Object} obj\n * @param {string|Array} path\n * @param {*} defaultValue (optional)\n * @return {*}\n */\n\nconst get_get = function get(obj, path) {\n  let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // Handle array of path values\n  path = Object(array[\"d\" /* isArray */])(path) ? path.join('.') : path; // If no path or no object passed\n\n  if (!path || !Object(object[\"h\" /* isObject */])(obj)) {\n    return defaultValue;\n  } // Handle edge case where user has dot(s) in top-level item field key\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  if (path in obj) {\n    return obj[path];\n  } // Handle string array notation (numeric indices only)\n\n\n  path = String(path).replace(/\\[(\\d+)]/g, '.$1');\n  const steps = path.split('.').filter(Boolean); // Handle case where someone passes a string of only dots\n\n  if (steps.length === 0) {\n    return defaultValue;\n  } // Traverse path in object to find result\n  // We use `!=` vs `!==` to test for both `null` and `undefined`\n  // Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters\n  // https://github.com/bootstrap-vue/bootstrap-vue/issues/3463\n\n\n  return steps.every(step => Object(object[\"h\" /* isObject */])(obj) && step in obj && (obj = obj[step]) != null) ? obj : defaultValue;\n};\n\n/* harmony default export */ var utils_get = (get_get);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.to-string.js\nvar es6_regexp_to_string = __webpack_require__(19);\n\n// CONCATENATED MODULE: ./src/utils/inspect.js\n\n\n/**\n * Convenience inspection utilities\n */\n\n\nconst toType = val => typeof val;\nconst toRawType = val => Object.prototype.toString.call(val).slice(8, -1);\nconst toRawTypeLC = val => toRawType(val).toLowerCase();\nconst isUndefined = val => val === undefined;\nconst isNull = val => val === null;\nconst isFunction = val => toType(val) === 'function';\nconst isBoolean = val => toType(val) === 'boolean';\nconst isString = val => toType(val) === 'string';\nconst isNumber = val => toType(val) === 'number';\nconst isPrimitive = val => isBoolean(val) || isString(val) || isNumber(val);\nconst isDate = val => val instanceof Date;\nconst isRegExp = val => toRawType(val) === 'RegExp';\nconst isPromise = val => !isUndefined(val) && !isNull(val) && isFunction(val.then) && isFunction(val.catch); // Extra convenience named re-exports\n\n\n// EXTERNAL MODULE: ./src/utils/config-defaults.js\nvar config_defaults = __webpack_require__(18);\n\n// CONCATENATED MODULE: ./src/utils/config-set.js\n\n\n\n\n\n\n // --- Constants ---\n\nconst PROP_NAME = '$bvConfig'; // Config manager class\n\nclass config_set_BvConfig {\n  constructor() {\n    // TODO: pre-populate with default config values (needs updated tests)\n    // this.$_config = cloneDeep(DEFAULTS)\n    this.$_config = {};\n    this.$_cachedBreakpoints = null;\n  }\n\n  static get Defaults()\n  /* istanbul ignore next */\n  {\n    return config_defaults[\"a\" /* default */];\n  }\n\n  get defaults()\n  /* istanbul ignore next */\n  {\n    return config_defaults[\"a\" /* default */];\n  } // Returns the defaults\n\n\n  getDefaults()\n  /* istanbul ignore next */\n  {\n    return this.defaults;\n  } // Method to merge in user config parameters\n\n\n  setConfig() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!Object(object[\"i\" /* isPlainObject */])(config)) {\n      /* istanbul ignore next */\n      return;\n    }\n\n    const configKeys = Object(object[\"f\" /* getOwnPropertyNames */])(config);\n    configKeys.forEach(cmpName => {\n      /* istanbul ignore next */\n      if (!Object(object[\"g\" /* hasOwnProperty */])(config_defaults[\"a\" /* default */], cmpName)) {\n        utils_warn(\"config: unknown config property \\\"\".concat(cmpName, \"\\\"\"));\n        return;\n      }\n\n      const cmpConfig = config[cmpName];\n\n      if (cmpName === 'breakpoints') {\n        // Special case for breakpoints\n        const breakpoints = config.breakpoints;\n        /* istanbul ignore if */\n\n        if (!Object(array[\"d\" /* isArray */])(breakpoints) || breakpoints.length < 2 || breakpoints.some(b => !isString(b) || b.length === 0)) {\n          utils_warn('config: \"breakpoints\" must be an array of at least 2 breakpoint names');\n        } else {\n          this.$_config.breakpoints = clone_deep(breakpoints);\n        }\n      } else if (Object(object[\"i\" /* isPlainObject */])(cmpConfig)) {\n        // Component prop defaults\n        const props = Object(object[\"f\" /* getOwnPropertyNames */])(cmpConfig);\n        props.forEach(prop => {\n          /* istanbul ignore if */\n          if (!Object(object[\"g\" /* hasOwnProperty */])(config_defaults[\"a\" /* default */][cmpName], prop)) {\n            utils_warn(\"config: unknown config property \\\"\".concat(cmpName, \".{$prop}\\\"\"));\n          } else {\n            // TODO: If we pre-populate the config with defaults, we can skip this line\n            this.$_config[cmpName] = this.$_config[cmpName] || {};\n\n            if (!isUndefined(cmpConfig[prop])) {\n              this.$_config[cmpName][prop] = clone_deep(cmpConfig[prop]);\n            }\n          }\n        });\n      }\n    });\n  } // Clear the config. For testing purposes only\n\n\n  resetConfig() {\n    this.$_config = {};\n  } // Returns a deep copy of the user config\n\n\n  getConfig() {\n    return clone_deep(this.$_config);\n  }\n\n  getConfigValue(key) {\n    // First we try the user config, and if key not found we fall back to default value\n    // NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get\n    return clone_deep(utils_get(this.$_config, key, utils_get(config_defaults[\"a\" /* default */], key)));\n  }\n\n} // Method for applying a global config\n\n\nconst config_set_setConfig = function setConfig() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let Vue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : vue;\n  // Ensure we have a $bvConfig Object on the Vue prototype.\n  // We set on Vue and OurVue just in case consumer has not set an alias of `vue`.\n  Vue.prototype[PROP_NAME] = vue.prototype[PROP_NAME] = Vue.prototype[PROP_NAME] || vue.prototype[PROP_NAME] || new config_set_BvConfig(); // Apply the config values\n\n  Vue.prototype[PROP_NAME].setConfig(config);\n}; // Method for resetting the user config. Exported for testing purposes only.\n\nconst resetConfig = () => {\n  if (vue.prototype[PROP_NAME] && vue.prototype[PROP_NAME].resetConfig) {\n    vue.prototype[PROP_NAME].resetConfig();\n  }\n};\n// CONCATENATED MODULE: ./src/utils/plugins.js\n\n\n\n\n\n\n/**\n * Checks if there are multiple instances of Vue, and warns (once) about possible issues.\n * @param {object} Vue\n */\n\nconst checkMultipleVue = (() => {\n  let checkMultipleVueWarned = false;\n  const MULTIPLE_VUE_WARNING = ['Multiple instances of Vue detected!', 'You may need to set up an alias for Vue in your bundler config.', 'See: https://bootstrap-vue.js.org/docs#using-module-bundlers'].join('\\n');\n  return Vue => {\n    /* istanbul ignore next */\n    if (!checkMultipleVueWarned && vue !== Vue && !env[\"k\" /* isJSDOM */]) {\n      utils_warn(MULTIPLE_VUE_WARNING);\n    }\n\n    checkMultipleVueWarned = true;\n  };\n})();\n/**\n * Plugin install factory function.\n * @param {object} { components, directives }\n * @returns {function} plugin install function\n */\n\nconst plugins_installFactory = function installFactory() {\n  let {\n    components,\n    directives,\n    plugins\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const install = function install(Vue) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (install.installed) {\n      /* istanbul ignore next */\n      return;\n    }\n\n    install.installed = true;\n    checkMultipleVue(Vue);\n    config_set_setConfig(config, Vue);\n    registerComponents(Vue, components);\n    registerDirectives(Vue, directives);\n    registerPlugins(Vue, plugins);\n  };\n\n  install.installed = false;\n  return install;\n};\n/**\n * Plugin object factory function.\n * @param {object} { components, directives, plugins }\n * @returns {object} plugin install object\n */\n\nconst plugins_pluginFactory = function pluginFactory() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let extend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object(objectSpread[\"a\" /* default */])({}, extend, {\n    install: plugins_installFactory(opts)\n  });\n};\n/**\n * Load a group of plugins.\n * @param {object} Vue\n * @param {object} Plugin definitions\n */\n\nconst registerPlugins = function registerPlugins(Vue) {\n  let plugins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (let plugin in plugins) {\n    if (plugin && plugins[plugin]) {\n      Vue.use(plugins[plugin]);\n    }\n  }\n};\n/**\n * Load a component.\n * @param {object} Vue\n * @param {string} Component name\n * @param {object} Component definition\n */\n\nconst registerComponent = (Vue, name, def) => {\n  if (Vue && name && def) {\n    Vue.component(name, def);\n  }\n};\n/**\n * Load a group of components.\n * @param {object} Vue\n * @param {object} Object of component definitions\n */\n\nconst registerComponents = function registerComponents(Vue) {\n  let components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (let component in components) {\n    registerComponent(Vue, component, components[component]);\n  }\n};\n/**\n * Load a directive.\n * @param {object} Vue\n * @param {string} Directive name\n * @param {object} Directive definition\n */\n\nconst registerDirective = (Vue, name, def) => {\n  if (Vue && name && def) {\n    // Ensure that any leading V is removed from the\n    // name, as Vue adds it automatically\n    Vue.directive(name.replace(/^VB/, 'B'), def);\n  }\n};\n/**\n * Load a group of directives.\n * @param {object} Vue\n * @param {object} Object of directive definitions\n */\n\nconst registerDirectives = function registerDirectives(Vue) {\n  let directives = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (let directive in directives) {\n    registerDirective(Vue, directive, directives[directive]);\n  }\n};\n/**\n * Install plugin if window.Vue available\n * @param {object} Plugin definition\n */\n\nconst vueUse = VuePlugin => {\n  /* istanbul ignore next */\n  if (env[\"i\" /* hasWindowSupport */] && window.Vue) {\n    window.Vue.use(VuePlugin);\n  }\n};\n// CONCATENATED MODULE: ./src/utils/memoize.js\n\n\nconst memoize = fn => {\n  const cache = Object(object[\"b\" /* create */])(null);\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const argsKey = JSON.stringify(args);\n    return cache[argsKey] = cache[argsKey] || fn.apply(null, args);\n  };\n};\n\n/* harmony default export */ var utils_memoize = (memoize);\n// CONCATENATED MODULE: ./src/utils/config.js\n\n\n\n\n // --- Constants ---\n\nconst config_PROP_NAME = '$bvConfig';\nconst VueProto = vue.prototype; // --- Getter methods ---\n// All methods return a deep clone (immutable) copy of the config\n// value, to prevent mutation of the user config object.\n// Get the current user config. For testing purposes only\n\nconst getConfig = () => {\n  return VueProto[config_PROP_NAME] ? VueProto[config_PROP_NAME].getConfig() : {};\n}; // Method to grab a config value based on a dotted/array notation key\n\nconst getConfigValue = key => {\n  return VueProto[config_PROP_NAME] ? VueProto[config_PROP_NAME].getConfigValue(key) : clone_deep(utils_get(config_defaults[\"a\" /* default */], key));\n}; // Method to grab a config value for a particular component\n\nconst getComponentConfig = function getComponentConfig(cmpName) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // Return the particular config value for key for if specified,\n  // otherwise we return the full config (or an empty object if not found)\n  return key ? getConfigValue(\"\".concat(cmpName, \".\").concat(key)) : getConfigValue(cmpName) || {};\n}; // Convenience method for getting all breakpoint names\n\nconst getBreakpoints = () => {\n  return getConfigValue('breakpoints');\n}; // Private function for caching / locking-in breakpoint names\n\nconst _getBreakpointsCached = utils_memoize(() => {\n  return getBreakpoints();\n}); // Convenience method for getting all breakpoint names.\n// Caches the results after first access.\n\n\nconst getBreakpointsCached = () => {\n  return clone_deep(_getBreakpointsCached());\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nconst getBreakpointsUp = () => {\n  const breakpoints = getBreakpoints();\n  breakpoints[0] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the smallest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\nconst getBreakpointsUpCached = utils_memoize(() => {\n  const breakpoints = getBreakpointsCached();\n  breakpoints[0] = '';\n  return breakpoints;\n}); // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n\nconst getBreakpointsDown = () => {\n  const breakpoints = getBreakpoints();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n}; // Convenience method for getting breakpoints with\n// the largest breakpoint set as ''.\n// Useful for components that create breakpoint specific props.\n// Caches the results after first access.\n\n/* istanbul ignore next: we don't use this method anywhere, yet */\n\nconst getBreakpointsDownCached = () =>\n/* istanbul ignore next */\n{\n  const breakpoints = getBreakpointsCached();\n  breakpoints[breakpoints.length - 1] = '';\n  return breakpoints;\n};\n// CONCATENATED MODULE: ./src/utils/dom.js\n\n\n // --- Constants ---\n\nconst w = env[\"i\" /* hasWindowSupport */] ? window : {};\nconst d = env[\"b\" /* hasDocumentSupport */] ? document : {};\nconst elProto = typeof Element !== 'undefined' ? Element.prototype : {}; // --- Normalization utils ---\n// See: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\n/* istanbul ignore next */\n\nconst matchesEl = elProto.matches || elProto.msMatchesSelector || elProto.webkitMatchesSelector; // See: https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n\n/* istanbul ignore next */\n\nconst closestEl = elProto.closest || function (sel)\n/* istanbul ignore next */\n{\n  let el = this;\n\n  do {\n    // Use our \"patched\" matches function\n    if (matches(el, sel)) {\n      return el;\n    }\n\n    el = el.parentElement || el.parentNode;\n  } while (!isNull(el) && el.nodeType === Node.ELEMENT_NODE);\n\n  return null;\n}; // `requestAnimationFrame()` convenience method\n// We don't have a version for cancelAnimationFrame, but we don't call it anywhere\n\nconst requestAF = w.requestAnimationFrame || w.webkitRequestAnimationFrame || w.mozRequestAnimationFrame || w.msRequestAnimationFrame || w.oRequestAnimationFrame || (cb => {\n  // Fallback, but not a true polyfill\n  // All browsers we support (other than Opera Mini) support\n  // `requestAnimationFrame()` without a polyfill\n\n  /* istanbul ignore next */\n  return setTimeout(cb, 16);\n});\nconst MutationObs = w.MutationObserver || w.WebKitMutationObserver || w.MozMutationObserver || null; // --- Utils ---\n// Normalize event options based on support of passive option\n// Exported only for testing purposes\n\nconst parseEventOptions = options => {\n  /* istanbul ignore else: can't test in JSDOM, as it supports passive */\n  if (env[\"e\" /* hasPassiveEventSupport */]) {\n    return Object(object[\"h\" /* isObject */])(options) ? options : {\n      useCapture: Boolean(options || false)\n    };\n  } else {\n    // Need to translate to actual Boolean value\n    return Boolean(Object(object[\"h\" /* isObject */])(options) ? options.useCapture : options);\n  }\n}; // Attach an event listener to an element\n\nconst eventOn = (el, evtName, handler, options) => {\n  if (el && el.addEventListener) {\n    el.addEventListener(evtName, handler, parseEventOptions(options));\n  }\n}; // Remove an event listener from an element\n\nconst eventOff = (el, evtName, handler, options) => {\n  if (el && el.removeEventListener) {\n    el.removeEventListener(evtName, handler, parseEventOptions(options));\n  }\n}; // Determine if an element is an HTML Element\n\nconst isElement = el => Boolean(el && el.nodeType === Node.ELEMENT_NODE); // Determine if an HTML element is visible - Faster than CSS check\n\nconst isVisible = el => {\n  if (!isElement(el) || !contains(d.body, el)) {\n    return false;\n  }\n\n  if (el.style.display === 'none') {\n    // We do this check to help with vue-test-utils when using v-show\n\n    /* istanbul ignore next */\n    return false;\n  } // All browsers support getBoundingClientRect(), except JSDOM as it returns all 0's for values :(\n  // So any tests that need isVisible will fail in JSDOM\n  // Except when we override the getBCR prototype in some tests\n\n\n  const bcr = getBCR(el);\n  return Boolean(bcr && bcr.height > 0 && bcr.width > 0);\n}; // Determine if an element is disabled\n\nconst dom_isDisabled = el => !isElement(el) || el.disabled || Boolean(getAttr(el, 'disabled')) || hasClass(el, 'disabled'); // Cause/wait-for an element to reflow it's content (adjusting it's height/width)\n\nconst reflow = el => {\n  // Requesting an elements offsetHight will trigger a reflow of the element content\n\n  /* istanbul ignore next: reflow doesn't happen in JSDOM */\n  return isElement(el) && el.offsetHeight;\n}; // Select all elements matching selector. Returns `[]` if none found\n\nconst selectAll = (selector, root) => Object(array[\"c\" /* from */])((isElement(root) ? root : d).querySelectorAll(selector)); // Select a single element, returns `null` if not found\n\nconst dom_select = (selector, root) => (isElement(root) ? root : d).querySelector(selector) || null; // Determine if an element matches a selector\n\nconst matches = (el, selector) => {\n  if (!isElement(el)) {\n    return false;\n  }\n\n  return matchesEl.call(el, selector);\n}; // Finds closest element matching selector. Returns `null` if not found\n\nconst closest = (selector, root) => {\n  if (!isElement(root)) {\n    return null;\n  }\n\n  const el = closestEl.call(root, selector); // Emulate jQuery closest and return `null` if match is the passed in element (root)\n\n  return el === root ? null : el;\n}; // Returns true if the parent element contains the child element\n\nconst contains = (parent, child) => {\n  if (!parent || !isFunction(parent.contains)) {\n    return false;\n  }\n\n  return parent.contains(child);\n}; // Get an element given an ID\n\nconst getById = id => d.getElementById(/^#/.test(id) ? id.slice(1) : id) || null; // Add a class to an element\n\nconst addClass = (el, className) => {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    el.classList.add(className);\n  }\n}; // Remove a class from an element\n\nconst removeClass = (el, className) => {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    el.classList.remove(className);\n  }\n}; // Test if an element has a class\n\nconst hasClass = (el, className) => {\n  // We are checking for `el.classList` existence here since IE 11\n  // returns `undefined` for some elements (e.g. SVG elements)\n  // See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713\n  if (className && isElement(el) && el.classList) {\n    return el.classList.contains(className);\n  }\n\n  return false;\n}; // Set an attribute on an element\n\nconst setAttr = (el, attr, value) => {\n  if (attr && isElement(el)) {\n    el.setAttribute(attr, value);\n  }\n}; // Remove an attribute from an element\n\nconst removeAttr = (el, attr) => {\n  if (attr && isElement(el)) {\n    el.removeAttribute(attr);\n  }\n}; // Get an attribute value from an element\n// Returns `null` if not found\n\nconst getAttr = (el, attr) => attr && isElement(el) ? el.getAttribute(attr) : null; // Determine if an attribute exists on an element\n// Returns `true` or `false`, or `null` if element not found\n\nconst hasAttr = (el, attr) => attr && isElement(el) ? el.hasAttribute(attr) : null; // Return the Bounding Client Rect of an element\n// Returns `null` if not an element\n\n/* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n\nconst getBCR = el => isElement(el) ? el.getBoundingClientRect() : null; // Get computed style object for an element\n\n/* istanbul ignore next: getComputedStyle() doesn't work in JSDOM */\n\nconst getCS = el => env[\"i\" /* hasWindowSupport */] && isElement(el) ? w.getComputedStyle(el) : {}; // Return an element's offset with respect to document element\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset\n\nconst dom_offset = el =>\n/* istanbul ignore next: getBoundingClientRect(), getClientRects() doesn't work in JSDOM */\n{\n  let _offset = {\n    top: 0,\n    left: 0\n  };\n\n  if (!isElement(el) || el.getClientRects().length === 0) {\n    return _offset;\n  }\n\n  const bcr = getBCR(el);\n\n  if (bcr) {\n    const win = el.ownerDocument.defaultView;\n    _offset.top = bcr.top + win.pageYOffset;\n    _offset.left = bcr.left + win.pageXOffset;\n  }\n\n  return _offset;\n}; // Return an element's offset with respect to to it's offsetParent\n// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position\n\nconst position = el =>\n/* istanbul ignore next: getBoundingClientRect() doesn't work in JSDOM */\n{\n  let _offset = {\n    top: 0,\n    left: 0\n  };\n\n  if (!isElement(el)) {\n    return _offset;\n  }\n\n  let parentOffset = {\n    top: 0,\n    left: 0\n  };\n  const elStyles = getCS(el);\n\n  if (elStyles.position === 'fixed') {\n    _offset = getBCR(el) || _offset;\n  } else {\n    _offset = dom_offset(el);\n    const doc = el.ownerDocument;\n    let offsetParent = el.offsetParent || doc.documentElement;\n\n    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && getCS(offsetParent).position === 'static') {\n      offsetParent = offsetParent.parentNode;\n    }\n\n    if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {\n      parentOffset = dom_offset(offsetParent);\n      const offsetParentStyles = getCS(offsetParent);\n      parentOffset.top += parseFloat(offsetParentStyles.borderTopWidth);\n      parentOffset.left += parseFloat(offsetParentStyles.borderLeftWidth);\n    }\n  }\n\n  return {\n    top: _offset.top - parentOffset.top - parseFloat(elStyles.marginTop),\n    left: _offset.left - parentOffset.left - parseFloat(elStyles.marginLeft)\n  };\n};\n// EXTERNAL MODULE: ./node_modules/vue-functional-data-merge/dist/lib.esm.js\nvar lib_esm = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/utils/bv-transition.js\n\n// Generic Bootstrap v4 fade (no-fade) transition component\n\n\n\nconst NO_FADE_PROPS = {\n  name: '',\n  enterClass: '',\n  enterActiveClass: '',\n  enterToClass: 'show',\n  leaveClass: 'show',\n  leaveActiveClass: '',\n  leaveToClass: ''\n};\n\nconst FADE_PROPS = Object(objectSpread[\"a\" /* default */])({}, NO_FADE_PROPS, {\n  enterActiveClass: 'fade',\n  leaveActiveClass: 'fade'\n});\n\nconst BVTransition =\n/*#__PURE__*/\nvue.extend({\n  name: 'BVTransition',\n  functional: true,\n  props: {\n    noFade: {\n      // Only applicable to the built in transition\n      // Has no effect if `trans-props` provided\n      type: Boolean,\n      default: false\n    },\n    mode: {\n      type: String // default: undefined\n\n    },\n    // For user supplied transitions (if needed)\n    transProps: {\n      type: Object,\n      default: null\n    }\n  },\n\n  render(h, _ref) {\n    let {\n      children,\n      data,\n      listeners,\n      props\n    } = _ref;\n    let transProps = props.transProps;\n\n    if (!Object(object[\"i\" /* isPlainObject */])(transProps)) {\n      transProps = props.noFade ? NO_FADE_PROPS : FADE_PROPS;\n    }\n\n    transProps = Object(objectSpread[\"a\" /* default */])({\n      mode: props.mode\n    }, transProps, {\n      // We always need `css` true\n      css: true\n    });\n    return h('transition', // Any listeners will get merged here\n    Object(lib_esm[\"a\" /* mergeData */])(data, {\n      props: transProps\n    }), children);\n  }\n\n});\n/* harmony default export */ var bv_transition = (BVTransition);\n// CONCATENATED MODULE: ./src/utils/normalize-slot.js\n // Note for functional components:\n// In functional components, `slots` is a function so it must be called\n// first before passing to the below methods. `scopedSlots` is always an\n// object and may be undefined (for Vue < 2.6.x)\n\n/**\n * Returns true if either scoped or unscoped named slot eists\n *\n * @param {String} name\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} vNodes\n */\n\nconst hasNormalizedSlot = function hasNormalizedSlot(name) {\n  let $scopedSlots = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let $slots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // Returns true if the either a $scopedSlot or $slot exists with the specified name\n  return Boolean($scopedSlots[name] || $slots[name]);\n};\n/**\n * Returns vNodes for named slot either scoped or unscoped\n *\n * @param {String} name\n * @param {String} scope\n * @param {Object} scopedSlots\n * @param {Object} slots\n * @returns {Array|undefined} vNodes\n */\n\n\nconst normalize_slot_normalizeSlot = function normalizeSlot(name) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let $scopedSlots = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let $slots = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  // Note: in Vue 2.6.x, all names slots are also scoped slots\n  const slot = $scopedSlots[name] || $slots[name];\n  return isFunction(slot) ? slot(scope) : slot;\n}; // Named exports\n\n\n // Default export (backwards compatability)\n\n/* harmony default export */ var normalize_slot = (normalize_slot_normalizeSlot);\n// CONCATENATED MODULE: ./src/mixins/normalize-slot.js\n\n\n/* harmony default export */ var mixins_normalize_slot = ({\n  methods: {\n    hasNormalizedSlot(name) {\n      // Returns true if the either a $scopedSlot or $slot exists with the specified name\n      return hasNormalizedSlot(name, this.$scopedSlots, this.$slots);\n    },\n\n    normalizeSlot(name) {\n      let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Returns an array of rendered vNodes if slot found.\n      // Returns undefined if not found.\n      const vNodes = normalize_slot_normalizeSlot(name, scope, this.$scopedSlots, this.$slots);\n      return vNodes ? Object(array[\"b\" /* concat */])(vNodes) : vNodes;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/button/button-close.js\n\n\n\n\nconst button_close_NAME = 'BButtonClose';\nconst button_close_props = {\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  ariaLabel: {\n    type: String,\n    default: () => getComponentConfig(button_close_NAME, 'ariaLabel')\n  },\n  textVariant: {\n    type: String,\n    default: () => getComponentConfig(button_close_NAME, 'textVariant')\n  } // @vue/component\n\n};\nconst BButtonClose =\n/*#__PURE__*/\nvue.extend({\n  name: button_close_NAME,\n  functional: true,\n  props: button_close_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      listeners,\n      slots,\n      scopedSlots\n    } = _ref;\n    const $slots = slots();\n    const $scopedSlots = scopedSlots || {};\n    const componentData = {\n      staticClass: 'close',\n      class: {\n        [\"text-\".concat(props.textVariant)]: props.textVariant\n      },\n      attrs: {\n        type: 'button',\n        disabled: props.disabled,\n        'aria-label': props.ariaLabel ? String(props.ariaLabel) : null\n      },\n      on: {\n        click(e) {\n          // Ensure click on button HTML content is also disabled\n\n          /* istanbul ignore if: bug in JSDOM still emits click on inner element */\n          if (props.disabled && e instanceof Event) {\n            e.stopPropagation();\n            e.preventDefault();\n          }\n        }\n\n      } // Careful not to override the default slot with innerHTML\n\n    };\n\n    if (!hasNormalizedSlot('default', $scopedSlots, $slots)) {\n      componentData.domProps = {\n        innerHTML: '&times;'\n      };\n    }\n\n    return h('button', Object(lib_esm[\"a\" /* mergeData */])(data, componentData), normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots));\n  }\n\n});\n/* harmony default export */ var button_close = (BButtonClose);\n// CONCATENATED MODULE: ./src/components/alert/alert.js\n\n\n\n\n\n\n\nconst alert_NAME = 'BAlert'; // Convert `show` value to a number\n\nconst parseCountDown = show => {\n  if (show === '' || isBoolean(show)) {\n    return 0;\n  }\n\n  show = parseInt(show, 10);\n  return show > 0 ? show : 0;\n}; // Convert `show` value to a boolean\n\n\nconst parseShow = show => {\n  if (show === '' || show === true) {\n    return true;\n  }\n\n  if (parseInt(show, 10) < 1) {\n    // Boolean will always return false for the above comparison\n    return false;\n  }\n\n  return Boolean(show);\n}; // Is a value number like (i.e. a number or a number as string)\n\n\nconst isNumericLike = value => !isNaN(parseInt(value, 10)); // @vue/component\n\n\nconst BAlert =\n/*#__PURE__*/\nvue.extend({\n  name: alert_NAME,\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'show',\n    event: 'input'\n  },\n  props: {\n    variant: {\n      type: String,\n      default: () => getComponentConfig(alert_NAME, 'variant')\n    },\n    dismissible: {\n      type: Boolean,\n      default: false\n    },\n    dismissLabel: {\n      type: String,\n      default: () => getComponentConfig(alert_NAME, 'dismissLabel')\n    },\n    show: {\n      type: [Boolean, Number, String],\n      default: false\n    },\n    fade: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      countDownTimerId: null,\n      countDown: 0,\n      // If initially shown, we need to set these for SSR\n      localShow: parseShow(this.show)\n    };\n  },\n\n  watch: {\n    show(newVal) {\n      this.countDown = parseCountDown(newVal);\n      this.localShow = parseShow(newVal);\n    },\n\n    countDown(newVal) {\n      this.clearTimer();\n\n      if (isNumericLike(this.show)) {\n        // Ignore if this.show transitions to a boolean value.\n        this.$emit('dismiss-count-down', newVal);\n\n        if (this.show !== newVal) {\n          // Update the v-model if needed\n          this.$emit('input', newVal);\n        }\n\n        if (newVal > 0) {\n          this.localShow = true;\n          this.countDownTimerId = setTimeout(() => {\n            this.countDown--;\n          }, 1000);\n        } else {\n          // Slightly delay the hide to allow any UI updates\n          this.$nextTick(() => {\n            requestAF(() => {\n              this.localShow = false;\n            });\n          });\n        }\n      }\n    },\n\n    localShow(newVal) {\n      if (!newVal && (this.dismissible || isNumericLike(this.show))) {\n        // Only emit dismissed events for dismissible or auto dismissing alerts\n        this.$emit('dismissed');\n      }\n\n      if (!isNumericLike(this.show) && this.show !== newVal) {\n        // Only emit booleans if we weren't passed a number via `this.show`\n        this.$emit('input', newVal);\n      }\n    }\n\n  },\n\n  created() {\n    this.countDown = parseCountDown(this.show);\n    this.localShow = parseShow(this.show);\n  },\n\n  mounted() {\n    this.countDown = parseCountDown(this.show);\n    this.localShow = parseShow(this.show);\n  },\n\n  beforeDestroy() {\n    this.clearTimer();\n  },\n\n  methods: {\n    dismiss() {\n      this.clearTimer();\n      this.countDown = 0;\n      this.localShow = false;\n    },\n\n    clearTimer() {\n      if (this.countDownTimerId) {\n        clearInterval(this.countDownTimerId);\n        this.countDownTimerId = null;\n      }\n    }\n\n  },\n\n  render(h) {\n    let $alert; // undefined\n\n    if (this.localShow) {\n      let $dismissBtn = h(false);\n\n      if (this.dismissible) {\n        // Add dismiss button\n        $dismissBtn = h(BButtonClose, {\n          attrs: {\n            'aria-label': this.dismissLabel\n          },\n          on: {\n            click: this.dismiss\n          }\n        }, [this.normalizeSlot('dismiss')]);\n      }\n\n      $alert = h('div', {\n        key: this._uid,\n        staticClass: 'alert',\n        class: {\n          'alert-dismissible': this.dismissible,\n          [\"alert-\".concat(this.variant)]: this.variant\n        },\n        attrs: {\n          role: 'alert',\n          'aria-live': 'polite',\n          'aria-atomic': true\n        }\n      }, [$dismissBtn, this.normalizeSlot('default')]);\n      $alert = [$alert];\n    }\n\n    return h(bv_transition, {\n      props: {\n        noFade: !this.fade\n      }\n    }, $alert);\n  }\n\n});\n/* harmony default export */ var alert_alert = (BAlert);\n// CONCATENATED MODULE: ./src/components/alert/index.js\n\n\nconst AlertPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BAlert: BAlert\n  }\n});\n\n/* harmony default export */ var components_alert = (AlertPlugin);\n// CONCATENATED MODULE: ./src/utils/identity.js\nconst identity = x => x;\n\n/* harmony default export */ var utils_identity = (identity);\n// CONCATENATED MODULE: ./src/utils/pluck-props.js\n\n\n\n/**\n * Given an array of properties or an object of property keys,\n * plucks all the values off the target object, returning a new object\n * that has props that reference the original prop values\n *\n * @param {{}|string[]} keysToPluck\n * @param {{}} objToPluck\n * @param {Function} transformFn\n * @return {{}}\n */\n\nconst pluck_props_pluckProps = function pluckProps(keysToPluck, objToPluck) {\n  let transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : utils_identity;\n  return (Object(array[\"d\" /* isArray */])(keysToPluck) ? keysToPluck.slice() : Object(object[\"j\" /* keys */])(keysToPluck)).reduce((memo, prop) => {\n    memo[transformFn(prop)] = objToPluck[prop];\n    return memo;\n  }, {});\n};\n\n/* harmony default export */ var pluck_props = (pluck_props_pluckProps);\n// CONCATENATED MODULE: ./src/utils/to-string.js\n\n\n/**\n * Convert a value to a string that can be rendered.\n */\n\nconst to_string_toString = function toString(val) {\n  let spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return isUndefined(val) || isNull(val) ? '' : Object(array[\"d\" /* isArray */])(val) || Object(object[\"i\" /* isPlainObject */])(val) && val.toString === Object.prototype.toString ? JSON.stringify(val, null, spaces) : String(val);\n};\n\n/* harmony default export */ var to_string = (to_string_toString);\n// CONCATENATED MODULE: ./src/utils/router.js\n\n\n\n\n\n\nconst ANCHOR_TAG = 'a'; // Precompile RegExp\n\nconst commaRE = /%2C/g;\nconst encodeReserveRE = /[!'()*]/g; // Method to replace reserved chars\n\nconst encodeReserveReplacer = c => '%' + c.charCodeAt(0).toString(16); // Fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\n\n\nconst encode = str => encodeURIComponent(to_string(str)).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');\n\nconst decode = decodeURIComponent; // Stringifies an object of query parameters\n// See: https://github.com/vuejs/vue-router/blob/dev/src/util/query.js\n\nconst stringifyQueryObj = obj => {\n  if (!Object(object[\"i\" /* isPlainObject */])(obj)) {\n    return '';\n  }\n\n  const query = Object(object[\"j\" /* keys */])(obj).map(key => {\n    const val = obj[key];\n\n    if (isUndefined(val)) {\n      return '';\n    } else if (isNull(val)) {\n      return encode(key);\n    } else if (Object(array[\"d\" /* isArray */])(val)) {\n      return val.reduce((results, val2) => {\n        if (isNull(val2)) {\n          results.push(encode(key));\n        } else if (!isUndefined(val2)) {\n          // Faster than string interpolation\n          results.push(encode(key) + '=' + encode(val2));\n        }\n\n        return results;\n      }, []).join('&');\n    } // Faster than string interpolation\n\n\n    return encode(key) + '=' + encode(val);\n  })\n  /* must check for length, as we only want to filter empty strings, not things that look falsey! */\n  .filter(x => x.length > 0).join('&');\n  return query ? \"?\".concat(query) : '';\n};\nconst parseQuery = query => {\n  const parsed = {};\n  query = to_string(query).trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return parsed;\n  }\n\n  query.split('&').forEach(param => {\n    const parts = param.replace(/\\+/g, ' ').split('=');\n    const key = decode(parts.shift());\n    const val = parts.length > 0 ? decode(parts.join('=')) : null;\n\n    if (isUndefined(parsed[key])) {\n      parsed[key] = val;\n    } else if (Object(array[\"d\" /* isArray */])(parsed[key])) {\n      parsed[key].push(val);\n    } else {\n      parsed[key] = [parsed[key], val];\n    }\n  });\n  return parsed;\n};\nconst isRouterLink = tag => tag !== ANCHOR_TAG;\nconst computeTag = function computeTag() {\n  let {\n    to,\n    disabled\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let thisOrParent = arguments.length > 1 ? arguments[1] : undefined;\n  return thisOrParent.$router && to && !disabled ? thisOrParent.$nuxt ? 'nuxt-link' : 'router-link' : ANCHOR_TAG;\n};\nconst router_computeRel = function computeRel() {\n  let {\n    target,\n    rel\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (target === '_blank' && isNull(rel)) {\n    return 'noopener';\n  }\n\n  return rel || null;\n};\nconst router_computeHref = function computeHref() {\n  let {\n    href,\n    to\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ANCHOR_TAG;\n  let fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#';\n  let toFallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n\n  // We've already checked the $router in computeTag(), so isRouterLink() indicates a live router.\n  // When deferring to Vue Router's router-link, don't use the href attribute at all.\n  // We return null, and then remove href from the attributes passed to router-link\n  if (isRouterLink(tag)) {\n    return null;\n  } // Return `href` when explicitly provided\n\n\n  if (href) {\n    return href;\n  } // Reconstruct `href` when `to` used, but no router\n\n\n  if (to) {\n    // Fallback to `to` prop (if `to` is a string)\n    if (isString(to)) {\n      return to || toFallback;\n    } // Fallback to `to.path + to.query + to.hash` prop (if `to` is an object)\n\n\n    if (Object(object[\"i\" /* isPlainObject */])(to) && (to.path || to.query || to.hash)) {\n      const path = to_string(to.path);\n      const query = stringifyQueryObj(to.query);\n      let hash = to_string(to.hash);\n      hash = !hash || hash.charAt(0) === '#' ? hash : \"#\".concat(hash);\n      return \"\".concat(path).concat(query).concat(hash) || toFallback;\n    }\n  } // If nothing is provided return the fallback\n\n\n  return fallback;\n};\n// CONCATENATED MODULE: ./src/components/link/link.js\n\n\n\n\n\n\n\n/**\n * The Link component is used in many other BV components.\n * As such, sharing its props makes supporting all its features easier.\n * However, some components need to modify the defaults for their own purpose.\n * Prefer sharing a fresh copy of the props to ensure mutations\n * do not affect other component references to the props.\n *\n * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js\n * @return {{}}\n */\n\nconst propsFactory = () => {\n  return {\n    href: {\n      type: String,\n      default: null\n    },\n    rel: {\n      type: String,\n      default: null\n    },\n    target: {\n      type: String,\n      default: '_self'\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // router-link specific props\n    to: {\n      type: [String, Object],\n      default: null\n    },\n    append: {\n      type: Boolean,\n      default: false\n    },\n    replace: {\n      type: Boolean,\n      default: false\n    },\n    event: {\n      type: [String, Array],\n      default: 'click'\n    },\n    activeClass: {\n      type: String // default: undefined\n\n    },\n    exact: {\n      type: Boolean,\n      default: false\n    },\n    exactActiveClass: {\n      type: String // default: undefined\n\n    },\n    routerTag: {\n      type: String,\n      default: 'a'\n    },\n    // nuxt-link specific prop(s)\n    noPrefetch: {\n      type: Boolean,\n      default: false\n    }\n  };\n};\nconst link_props = propsFactory(); // Return a fresh copy of <b-link> props\n// Containing only the specified prop(s)\n\nconst pickLinkProps = propsToPick => {\n  const freshLinkProps = propsFactory(); // Normalize everything to array.\n\n  propsToPick = Object(array[\"b\" /* concat */])(propsToPick);\n  return Object(object[\"j\" /* keys */])(freshLinkProps).reduce((memo, prop) => {\n    if (Object(array[\"a\" /* arrayIncludes */])(propsToPick, prop)) {\n      memo[prop] = freshLinkProps[prop];\n    }\n\n    return memo;\n  }, {});\n}; // Return a fresh copy of <b-link> props\n// Keeping all but the specified omitting prop(s)\n\nconst omitLinkProps = propsToOmit => {\n  const freshLinkProps = propsFactory(); // Normalize everything to array.\n\n  propsToOmit = Object(array[\"b\" /* concat */])(propsToOmit);\n  return Object(object[\"j\" /* keys */])(link_props).reduce((memo, prop) => {\n    if (!Object(array[\"a\" /* arrayIncludes */])(propsToOmit, prop)) {\n      memo[prop] = freshLinkProps[prop];\n    }\n\n    return memo;\n  }, {});\n};\n\nconst clickHandlerFactory = (_ref) => {\n  let {\n    disabled,\n    tag,\n    href,\n    suppliedHandler,\n    parent\n  } = _ref;\n  return function onClick(evt) {\n    if (disabled && evt instanceof Event) {\n      // Stop event from bubbling up.\n      evt.stopPropagation(); // Kill the event loop attached to this specific EventTarget.\n      // Needed to prevent vue-router for doing its thing\n\n      evt.stopImmediatePropagation();\n    } else {\n      if (isRouterLink(tag) && evt.currentTarget.__vue__) {\n        // Router links do not emit instance 'click' events, so we\n        // add in an $emit('click', evt) on it's vue instance\n\n        /* istanbul ignore next: difficult to test, but we know it works */\n        evt.currentTarget.__vue__.$emit('click', evt);\n      } // Call the suppliedHandler(s), if any provided\n\n\n      Object(array[\"b\" /* concat */])(suppliedHandler).filter(h => isFunction(h)).forEach(handler => {\n        handler(...arguments);\n      });\n      parent.$root.$emit('clicked::link', evt);\n    }\n\n    if (!isRouterLink(tag) && href === '#' || disabled) {\n      // Stop scroll-to-top behavior or navigation on regular links\n      // when href is just '#'\n      evt.preventDefault();\n    }\n  };\n}; // @vue/component\n\n\nconst BLink =\n/*#__PURE__*/\nvue.extend({\n  name: 'BLink',\n  functional: true,\n  props: propsFactory(),\n\n  render(h, _ref2) {\n    let {\n      props,\n      data,\n      parent,\n      children\n    } = _ref2;\n    const tag = computeTag(props, parent);\n    const rel = router_computeRel(props);\n    const href = router_computeHref(props, tag);\n    const eventType = isRouterLink(tag) ? 'nativeOn' : 'on';\n    const suppliedHandler = (data[eventType] || {}).click;\n    const handlers = {\n      click: clickHandlerFactory({\n        tag,\n        href,\n        disabled: props.disabled,\n        suppliedHandler,\n        parent\n      })\n    };\n    const componentData = Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        active: props.active,\n        disabled: props.disabled\n      },\n      attrs: {\n        rel,\n        target: props.target,\n        tabindex: props.disabled ? '-1' : data.attrs ? data.attrs.tabindex : null,\n        'aria-disabled': props.disabled ? 'true' : null\n      },\n      props: Object(objectSpread[\"a\" /* default */])({}, props, {\n        tag: props.routerTag\n      })\n    }); // If href attribute exists on router-link (even undefined or null) it fails working on SSR\n    // So we explicitly add it here if needed (i.e. if computeHref() is truthy)\n\n    if (href) {\n      componentData.attrs.href = href;\n    } else {\n      // Ensure the prop HREF does not exist for router links\n      delete componentData.props.href;\n    } // We want to overwrite any click handler since our callback\n    // will invoke the user supplied handler if !props.disabled\n\n\n    componentData[eventType] = Object(objectSpread[\"a\" /* default */])({}, componentData[eventType] || {}, handlers);\n    return h(tag, componentData, children);\n  }\n\n});\n/* harmony default export */ var link_link = (BLink);\n// CONCATENATED MODULE: ./src/components/badge/badge.js\n\n\n\n\n\n\nconst badge_NAME = 'BBadge';\nlet linkProps = propsFactory();\ndelete linkProps.href.default;\ndelete linkProps.to.default;\nconst badge_props = Object(objectSpread[\"a\" /* default */])({}, linkProps, {\n  tag: {\n    type: String,\n    default: 'span'\n  },\n  variant: {\n    type: String,\n    default: () => getComponentConfig(badge_NAME, 'variant')\n  },\n  pill: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n});\nconst BBadge =\n/*#__PURE__*/\nvue.extend({\n  name: badge_NAME,\n  functional: true,\n  props: badge_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    const tag = !props.href && !props.to ? props.tag : BLink;\n    const componentData = {\n      staticClass: 'badge',\n      class: [props.variant ? \"badge-\".concat(props.variant) : 'badge-secondary', {\n        'badge-pill': Boolean(props.pill),\n        active: props.active,\n        disabled: props.disabled\n      }],\n      props: pluck_props(linkProps, props)\n    };\n    return h(tag, Object(lib_esm[\"a\" /* mergeData */])(data, componentData), children);\n  }\n\n});\n/* harmony default export */ var badge = (BBadge);\n// CONCATENATED MODULE: ./src/components/badge/index.js\n\n\nconst BadgePlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BBadge: BBadge\n  }\n});\n\n/* harmony default export */ var components_badge = (BadgePlugin);\n// CONCATENATED MODULE: ./src/utils/html.js\n\nconst stripTagsRegex = /(<([^>]+)>)/gi; // Removes any thing that looks like an HTML tag from the supplied string\n\nconst stripTags = function stripTags() {\n  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return String(text).replace(stripTagsRegex, '');\n}; // Generate a domProps object for either innerHTML, textContent or nothing\n\nconst htmlOrText = (innerHTML, textContent) => {\n  return innerHTML ? {\n    innerHTML\n  } : textContent ? {\n    textContent\n  } : {};\n};\n// CONCATENATED MODULE: ./src/components/breadcrumb/breadcrumb-link.js\n\n\n\n\n\n\nconst breadcrumb_link_props = Object(objectSpread[\"a\" /* default */])({}, propsFactory(), {\n  text: {\n    type: String,\n    default: null\n  },\n  html: {\n    type: String,\n    default: null\n  },\n  ariaCurrent: {\n    type: String,\n    default: 'location'\n  } // @vue/component\n\n});\nconst BBreadcrumbLink =\n/*#__PURE__*/\nvue.extend({\n  name: 'BBreadcrumbLink',\n  functional: true,\n  props: breadcrumb_link_props,\n\n  render(h, _ref) {\n    let {\n      props: suppliedProps,\n      data,\n      children\n    } = _ref;\n    const tag = suppliedProps.active ? 'span' : BLink;\n    let componentData = {\n      props: pluck_props(breadcrumb_link_props, suppliedProps)\n    };\n\n    if (suppliedProps.active) {\n      componentData.attrs = {\n        'aria-current': suppliedProps.ariaCurrent\n      };\n    }\n\n    if (!children) {\n      componentData.domProps = htmlOrText(suppliedProps.html, suppliedProps.text);\n    }\n\n    return h(tag, Object(lib_esm[\"a\" /* mergeData */])(data, componentData), children);\n  }\n\n});\n/* harmony default export */ var breadcrumb_link = (BBreadcrumbLink);\n// CONCATENATED MODULE: ./src/components/breadcrumb/breadcrumb-item.js\n\n\n // @vue/component\n\nconst BBreadcrumbItem =\n/*#__PURE__*/\nvue.extend({\n  name: 'BBreadcrumbItem',\n  functional: true,\n  props: breadcrumb_link_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h('li', Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'breadcrumb-item',\n      class: {\n        active: props.active\n      }\n    }), [h(BBreadcrumbLink, {\n      props\n    }, children)]);\n  }\n\n});\n/* harmony default export */ var breadcrumb_item = (BBreadcrumbItem);\n// CONCATENATED MODULE: ./src/components/breadcrumb/breadcrumb.js\n\n\n\n\n\n\nconst breadcrumb_props = {\n  items: {\n    type: Array,\n    default: null\n  } // @vue/component\n\n};\nconst BBreadcrumb =\n/*#__PURE__*/\nvue.extend({\n  name: 'BBreadcrumb',\n  functional: true,\n  props: breadcrumb_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    let childNodes = children; // Build child nodes from items if given.\n\n    if (Object(array[\"d\" /* isArray */])(props.items)) {\n      let activeDefined = false;\n      childNodes = props.items.map((item, idx) => {\n        if (!Object(object[\"h\" /* isObject */])(item)) {\n          item = {\n            text: to_string(item)\n          };\n        } // Copy the value here so we can normalize it.\n\n\n        let active = item.active;\n\n        if (active) {\n          activeDefined = true;\n        }\n\n        if (!active && !activeDefined) {\n          // Auto-detect active by position in list.\n          active = idx + 1 === props.items.length;\n        }\n\n        return h(BBreadcrumbItem, {\n          props: Object(objectSpread[\"a\" /* default */])({}, item, {\n            active\n          })\n        });\n      });\n    }\n\n    return h('ol', Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'breadcrumb'\n    }), childNodes);\n  }\n\n});\n/* harmony default export */ var breadcrumb = (BBreadcrumb);\n// CONCATENATED MODULE: ./src/components/breadcrumb/index.js\n\n\n\n\nconst BreadcrumbPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BBreadcrumb: BBreadcrumb,\n    BBreadcrumbItem: BBreadcrumbItem,\n    BBreadcrumbLink: BBreadcrumbLink\n  }\n});\n\n/* harmony default export */ var components_breadcrumb = (BreadcrumbPlugin);\n// CONCATENATED MODULE: ./src/components/button/button.js\n\n\n\n\n\n\n\n\n\n // --- Constants --\n\nconst button_NAME = 'BButton';\nconst button_btnProps = {\n  block: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: () => getComponentConfig(button_NAME, 'variant')\n  },\n  type: {\n    type: String,\n    default: 'button'\n  },\n  tag: {\n    type: String,\n    default: 'button'\n  },\n  pill: {\n    type: Boolean,\n    default: false\n  },\n  squared: {\n    type: Boolean,\n    default: false\n  },\n  pressed: {\n    // tri-state prop: true, false or null\n    // => on, off, not a toggle\n    type: Boolean,\n    default: null\n  }\n};\nlet button_linkProps = propsFactory();\ndelete button_linkProps.href.default;\ndelete button_linkProps.to.default;\nconst linkPropKeys = Object(object[\"j\" /* keys */])(button_linkProps);\nconst button_props = Object(objectSpread[\"a\" /* default */])({}, button_linkProps, button_btnProps); // --- Helper methods ---\n// Focus handler for toggle buttons.  Needs class of 'focus' when focused.\n\nconst handleFocus = evt => {\n  if (evt.type === 'focusin') {\n    addClass(evt.target, 'focus');\n  } else if (evt.type === 'focusout') {\n    removeClass(evt.target, 'focus');\n  }\n}; // Is the requested button a link?\n\n\nconst button_isLink = props => {\n  // If tag prop is set to `a`, we use a b-link to get proper disabled handling\n  return Boolean(props.href || props.to || props.tag && String(props.tag).toLowerCase() === 'a');\n}; // Is the button to be a toggle button?\n\n\nconst isToggle = props => isBoolean(props.pressed); // Is the button \"really\" a button?\n\n\nconst isButton = props => {\n  if (button_isLink(props)) {\n    return false;\n  } else if (props.tag && String(props.tag).toLowerCase() !== 'button') {\n    return false;\n  }\n\n  return true;\n}; // Is the requested tag not a button or link?\n\n\nconst isNonStandardTag = props => !button_isLink(props) && !isButton(props); // Compute required classes (non static classes)\n\n\nconst computeClass = props => [\"btn-\".concat(props.variant || getComponentConfig(button_NAME, 'variant')), {\n  [\"btn-\".concat(props.size)]: Boolean(props.size),\n  'btn-block': props.block,\n  'rounded-pill': props.pill,\n  'rounded-0': props.squared && !props.pill,\n  disabled: props.disabled,\n  active: props.pressed\n}]; // Compute the link props to pass to b-link (if required)\n\n\nconst computeLinkProps = props => button_isLink(props) ? pluck_props(linkPropKeys, props) : null; // Compute the attributes for a button\n\n\nconst computeAttrs = (props, data) => {\n  const button = isButton(props);\n  const link = button_isLink(props);\n  const toggle = isToggle(props);\n  const nonStdTag = isNonStandardTag(props);\n  const role = data.attrs && data.attrs['role'] ? data.attrs['role'] : null;\n  let tabindex = data.attrs ? data.attrs['tabindex'] : null;\n\n  if (nonStdTag) {\n    tabindex = '0';\n  }\n\n  return {\n    // Type only used for \"real\" buttons\n    type: button && !link ? props.type : null,\n    // Disabled only set on \"real\" buttons\n    disabled: button ? props.disabled : null,\n    // We add a role of button when the tag is not a link or button for ARIA.\n    // Don't bork any role provided in data.attrs when isLink or isButton\n    role: nonStdTag ? 'button' : role,\n    // We set the aria-disabled state for non-standard tags\n    'aria-disabled': nonStdTag ? String(props.disabled) : null,\n    // For toggles, we need to set the pressed state for ARIA\n    'aria-pressed': toggle ? String(props.pressed) : null,\n    // autocomplete off is needed in toggle mode to prevent some browsers from\n    // remembering the previous setting when using the back button.\n    autocomplete: toggle ? 'off' : null,\n    // Tab index is used when the component is not a button.\n    // Links are tabbable, but don't allow disabled, while non buttons or links\n    // are not tabbable, so we mimic that functionality by disabling tabbing\n    // when disabled, and adding a tabindex of '0' to non buttons or non links.\n    tabindex: props.disabled && !button ? '-1' : tabindex\n  };\n}; // @vue/component\n\n\nconst BButton =\n/*#__PURE__*/\nvue.extend({\n  name: button_NAME,\n  functional: true,\n  props: button_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      listeners,\n      children\n    } = _ref;\n    const toggle = isToggle(props);\n    const link = button_isLink(props);\n    const on = {\n      click(e) {\n        /* istanbul ignore if: blink/button disabled should handle this */\n        if (props.disabled && e instanceof Event) {\n          e.stopPropagation();\n          e.preventDefault();\n        } else if (toggle && listeners && listeners['update:pressed']) {\n          // Send .sync updates to any \"pressed\" prop (if .sync listeners)\n          // Concat will normalize the value to an array\n          // without double wrapping an array value in an array.\n          Object(array[\"b\" /* concat */])(listeners['update:pressed']).forEach(fn => {\n            if (isFunction(fn)) {\n              fn(!props.pressed);\n            }\n          });\n        }\n      }\n\n    };\n\n    if (toggle) {\n      on.focusin = handleFocus;\n      on.focusout = handleFocus;\n    }\n\n    const componentData = {\n      staticClass: 'btn',\n      class: computeClass(props),\n      props: computeLinkProps(props),\n      attrs: computeAttrs(props, data),\n      on\n    };\n    return h(link ? BLink : props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, componentData), children);\n  }\n\n});\n/* harmony default export */ var button_button = (BButton);\n// CONCATENATED MODULE: ./src/components/button/index.js\n\n\n\nconst ButtonPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BButton: BButton,\n    BBtn: BButton,\n    BButtonClose: BButtonClose,\n    BBtnClose: BButtonClose\n  }\n});\n\n/* harmony default export */ var components_button = (ButtonPlugin);\n// CONCATENATED MODULE: ./src/components/button-group/button-group.js\n\n\nconst button_group_props = {\n  vertical: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  ariaRole: {\n    type: String,\n    default: 'group'\n  } // @vue/component\n\n};\nconst BButtonGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BButtonGroup',\n  functional: true,\n  props: button_group_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        'btn-group': !props.vertical,\n        'btn-group-vertical': props.vertical,\n        [\"btn-group-\".concat(props.size)]: Boolean(props.size)\n      },\n      attrs: {\n        role: props.ariaRole\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var button_group = (BButtonGroup);\n// CONCATENATED MODULE: ./src/components/button-group/index.js\n\n\nconst ButtonGroupPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BButtonGroup: BButtonGroup,\n    BBtnGroup: BButtonGroup\n  }\n});\n\n/* harmony default export */ var components_button_group = (ButtonGroupPlugin);\n// CONCATENATED MODULE: ./src/utils/key-codes.js\n/*\n * Key Codes (events)\n */\nconst KEY_CODES = {\n  SPACE: 32,\n  ENTER: 13,\n  ESC: 27,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  HOME: 36,\n  END: 35,\n  TAB: 9,\n  SHIFT: 16,\n  CTRL: 17,\n  BACKSPACE: 8,\n  ALT: 18,\n  PAUSE: 19,\n  BREAK: 19,\n  INSERT: 45,\n  INS: 45,\n  DELETE: 46\n};\n/* harmony default export */ var key_codes = (KEY_CODES);\n// CONCATENATED MODULE: ./src/components/button-toolbar/button-toolbar.js\n\n\n\n\nconst ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type=\"checkbox\"]:not(.disabled)', 'input[type=\"radio\"]:not(.disabled)'].join(','); // @vue/component\n\nconst BButtonToolbar =\n/*#__PURE__*/\nvue.extend({\n  name: 'BButtonToolbar',\n  mixins: [mixins_normalize_slot],\n  props: {\n    justify: {\n      type: Boolean,\n      default: false\n    },\n    keyNav: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  mounted() {\n    if (this.keyNav) {\n      // Pre-set the tabindexes if the markup does not include tabindex=\"-1\" on the toolbar items\n      this.getItems();\n    }\n  },\n\n  methods: {\n    onFocusin(evt) {\n      if (evt.target === this.$el) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        this.focusFirst(evt);\n      }\n    },\n\n    stop(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n    },\n\n    onKeydown(evt) {\n      if (!this.keyNav) {\n        /* istanbul ignore next: should never happen */\n        return;\n      }\n\n      const key = evt.keyCode;\n      const shift = evt.shiftKey;\n\n      if (key === key_codes.UP || key === key_codes.LEFT) {\n        this.stop(evt);\n        shift ? this.focusFirst(evt) : this.focusPrev(evt);\n      } else if (key === key_codes.DOWN || key === key_codes.RIGHT) {\n        this.stop(evt);\n        shift ? this.focusLast(evt) : this.focusNext(evt);\n      }\n    },\n\n    setItemFocus(item) {\n      item && item.focus && item.focus();\n    },\n\n    focusFirst(evt) {\n      const items = this.getItems();\n      this.setItemFocus(items[0]);\n    },\n\n    focusPrev(evt) {\n      let items = this.getItems();\n      const index = items.indexOf(evt.target);\n\n      if (index > -1) {\n        items = items.slice(0, index).reverse();\n        this.setItemFocus(items[0]);\n      }\n    },\n\n    focusNext(evt) {\n      let items = this.getItems();\n      const index = items.indexOf(evt.target);\n\n      if (index > -1) {\n        items = items.slice(index + 1);\n        this.setItemFocus(items[0]);\n      }\n    },\n\n    focusLast(evt) {\n      const items = this.getItems().reverse();\n      this.setItemFocus(items[0]);\n    },\n\n    getItems() {\n      let items = selectAll(ITEM_SELECTOR, this.$el);\n      items.forEach(item => {\n        // Ensure tabfocus is -1 on any new elements\n        item.tabIndex = -1;\n      });\n      return items.filter(el => isVisible(el));\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'btn-toolbar',\n      class: {\n        'justify-content-between': this.justify\n      },\n      attrs: {\n        role: 'toolbar',\n        tabindex: this.keyNav ? '0' : null\n      },\n      on: this.keyNav ? {\n        focusin: this.onFocusin,\n        keydown: this.onKeydown\n      } : {}\n    }, [this.normalizeSlot('default')]);\n  }\n\n});\n/* harmony default export */ var button_toolbar = (BButtonToolbar);\n// CONCATENATED MODULE: ./src/components/button-toolbar/index.js\n\n\nconst ButtonToolbarPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BButtonToolbar: BButtonToolbar,\n    BBtnToolbar: BButtonToolbar\n  }\n});\n\n/* harmony default export */ var components_button_toolbar = (ButtonToolbarPlugin);\n// CONCATENATED MODULE: ./src/utils/upper-first.js\n\n/**\n * Transform the first character to uppercase\n * @param {string} str\n */\n\nconst upperFirst = str => {\n  if (!isString(str)) {\n    str = String(str);\n  }\n\n  str = str.trim();\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n/* harmony default export */ var upper_first = (upperFirst);\n// CONCATENATED MODULE: ./src/utils/prefix-prop-name.js\n\n/**\n * @param {string} prefix\n * @param {string} value\n */\n\nconst prefixPropName = (prefix, value) => prefix + upper_first(value);\n\n/* harmony default export */ var prefix_prop_name = (prefixPropName);\n// CONCATENATED MODULE: ./src/utils/lower-first.js\n/**\n * @param {string} str\n */\nconst lowerFirst = str => {\n  str = String(str);\n  return str.charAt(0).toLowerCase() + str.slice(1);\n};\n\n/* harmony default export */ var lower_first = (lowerFirst);\n// CONCATENATED MODULE: ./src/utils/unprefix-prop-name.js\n\n\n/**\n * @param {string} prefix\n * @param {string} value\n */\n\nconst unprefixPropName = (prefix, value) => lower_first(value.replace(prefix, ''));\n\n/* harmony default export */ var unprefix_prop_name = (unprefixPropName);\n// CONCATENATED MODULE: ./src/utils/copy-props.js\n\n\n\n/**\n * Copies props from one array/object to a new array/object. Prop values\n * are also cloned as new references to prevent possible mutation of original\n * prop object values. Optionally accepts a function to transform the prop name.\n *\n * @param {[]|{}} props\n * @param {Function} transformFn\n */\n\nconst copy_props_copyProps = function copyProps(props) {\n  let transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : utils_identity;\n\n  if (Object(array[\"d\" /* isArray */])(props)) {\n    return props.map(transformFn);\n  } // Props as an object.\n\n\n  const copied = {};\n\n  for (const prop in props) {\n    /* istanbul ignore else */\n    if (props.hasOwnProperty(prop)) {\n      // If the prop value is an object, do a shallow clone to prevent\n      // potential mutations to the original object.\n      copied[transformFn(prop)] = Object(object[\"h\" /* isObject */])(props[prop]) ? Object(objectSpread[\"a\" /* default */])({}, props[prop]) : props[prop];\n    }\n  }\n\n  return copied;\n};\n\n/* harmony default export */ var copy_props = (copy_props_copyProps);\n// CONCATENATED MODULE: ./src/mixins/card-mixin.js\n// @vue/component\n/* harmony default export */ var card_mixin = ({\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    bgVariant: {\n      type: String,\n      default: null\n    },\n    borderVariant: {\n      type: String,\n      default: null\n    },\n    textVariant: {\n      type: String,\n      default: null\n    }\n  }\n});\n// CONCATENATED MODULE: ./src/components/card/card-title.js\n\n\nconst card_title_props = {\n  title: {\n    type: String,\n    default: ''\n  },\n  titleTag: {\n    type: String,\n    default: 'h4'\n  } // @vue/component\n\n};\nconst BCardTitle =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardTitle',\n  functional: true,\n  props: card_title_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.titleTag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'card-title'\n    }), children || props.title);\n  }\n\n});\n/* harmony default export */ var card_title = (BCardTitle);\n// CONCATENATED MODULE: ./src/components/card/card-sub-title.js\n\n\n\nconst card_sub_title_NAME = 'BCardSubTitle';\nconst card_sub_title_props = {\n  subTitle: {\n    type: String,\n    default: ''\n  },\n  subTitleTag: {\n    type: String,\n    default: 'h6'\n  },\n  subTitleTextVariant: {\n    type: String,\n    default: () => getComponentConfig(card_sub_title_NAME, 'subTitleTextVariant')\n  } // @vue/component\n\n};\nconst BCardSubTitle =\n/*#__PURE__*/\nvue.extend({\n  name: card_sub_title_NAME,\n  functional: true,\n  props: card_sub_title_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.subTitleTag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'card-subtitle',\n      class: [props.subTitleTextVariant ? \"text-\".concat(props.subTitleTextVariant) : null]\n    }), children || props.subTitle);\n  }\n\n});\n/* harmony default export */ var card_sub_title = (BCardSubTitle);\n// CONCATENATED MODULE: ./src/components/card/card-body.js\n\n\n\n\n\n\n\n\n\nconst card_body_props = Object(objectSpread[\"a\" /* default */])({}, copy_props(card_mixin.props, prefix_prop_name.bind(null, 'body')), {\n  bodyClass: {\n    type: [String, Object, Array],\n    default: null\n  }\n}, card_title_props, card_sub_title_props, {\n  overlay: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n});\nconst BCardBody =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardBody',\n  functional: true,\n  props: card_body_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    let cardTitle = h(false);\n    let cardSubTitle = h(false);\n    let cardContent = children || [h(false)];\n\n    if (props.title) {\n      cardTitle = h(BCardTitle, {\n        props: pluck_props(card_title_props, props)\n      });\n    }\n\n    if (props.subTitle) {\n      cardSubTitle = h(BCardSubTitle, {\n        props: pluck_props(card_sub_title_props, props),\n        class: ['mb-2']\n      });\n    }\n\n    return h(props.bodyTag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'card-body',\n      class: [{\n        'card-img-overlay': props.overlay,\n        [\"bg-\".concat(props.bodyBgVariant)]: Boolean(props.bodyBgVariant),\n        [\"border-\".concat(props.bodyBorderVariant)]: Boolean(props.bodyBorderVariant),\n        [\"text-\".concat(props.bodyTextVariant)]: Boolean(props.bodyTextVariant)\n      }, props.bodyClass || {}]\n    }), [cardTitle, cardSubTitle, ...cardContent]);\n  }\n\n});\n/* harmony default export */ var card_body = (BCardBody);\n// CONCATENATED MODULE: ./src/components/card/card-header.js\n\n\n\n\n\n\n\nconst card_header_props = Object(objectSpread[\"a\" /* default */])({}, copy_props(card_mixin.props, prefix_prop_name.bind(null, 'header')), {\n  header: {\n    type: String,\n    default: null\n  },\n  headerHtml: {\n    type: String,\n    default: null\n  },\n  headerClass: {\n    type: [String, Object, Array],\n    default: null\n  } // @vue/component\n\n});\nconst BCardHeader =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardHeader',\n  functional: true,\n  props: card_header_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.headerTag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'card-header',\n      class: [props.headerClass, {\n        [\"bg-\".concat(props.headerBgVariant)]: Boolean(props.headerBgVariant),\n        [\"border-\".concat(props.headerBorderVariant)]: Boolean(props.headerBorderVariant),\n        [\"text-\".concat(props.headerTextVariant)]: Boolean(props.headerTextVariant)\n      }]\n    }), children || [h('div', {\n      domProps: htmlOrText(props.headerHtml, props.header)\n    })]);\n  }\n\n});\n/* harmony default export */ var card_header = (BCardHeader);\n// CONCATENATED MODULE: ./src/components/card/card-footer.js\n\n\n\n\n\n\n\nconst card_footer_props = Object(objectSpread[\"a\" /* default */])({}, copy_props(card_mixin.props, prefix_prop_name.bind(null, 'footer')), {\n  footer: {\n    type: String,\n    default: null\n  },\n  footerHtml: {\n    type: String,\n    default: null\n  },\n  footerClass: {\n    type: [String, Object, Array],\n    default: null\n  } // @vue/component\n\n});\nconst BCardFooter =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardFooter',\n  functional: true,\n  props: card_footer_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.footerTag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'card-footer',\n      class: [props.footerClass, {\n        [\"bg-\".concat(props.footerBgVariant)]: Boolean(props.footerBgVariant),\n        [\"border-\".concat(props.footerBorderVariant)]: Boolean(props.footerBorderVariant),\n        [\"text-\".concat(props.footerTextVariant)]: Boolean(props.footerTextVariant)\n      }]\n    }), children || [h('div', {\n      domProps: htmlOrText(props.footerHtml, props.footer)\n    })]);\n  }\n\n});\n/* harmony default export */ var card_footer = (BCardFooter);\n// CONCATENATED MODULE: ./src/components/card/card-img.js\n\n\nconst card_img_props = {\n  src: {\n    type: String,\n    default: null,\n    required: true\n  },\n  alt: {\n    type: String,\n    default: null\n  },\n  top: {\n    type: Boolean,\n    default: false\n  },\n  bottom: {\n    type: Boolean,\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  start: {\n    type: Boolean,\n    default: false // alias of 'left'\n\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  end: {\n    type: Boolean,\n    default: false // alias of 'right'\n\n  },\n  height: {\n    type: String,\n    default: null\n  },\n  width: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nconst BCardImg =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardImg',\n  functional: true,\n  props: card_img_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data\n    } = _ref;\n    let baseClass = 'card-img';\n\n    if (props.top) {\n      baseClass += '-top';\n    } else if (props.right || props.end) {\n      baseClass += '-right';\n    } else if (props.bottom) {\n      baseClass += '-bottom';\n    } else if (props.left || props.start) {\n      baseClass += '-left';\n    }\n\n    return h('img', Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: [baseClass],\n      attrs: {\n        src: props.src,\n        alt: props.alt,\n        height: props.height,\n        width: props.width\n      }\n    }));\n  }\n\n});\n/* harmony default export */ var card_img = (BCardImg);\n// CONCATENATED MODULE: ./src/components/card/card.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst cardImgProps = copy_props(card_img_props, prefix_prop_name.bind(null, 'img'));\ncardImgProps.imgSrc.required = false;\nconst card_props = Object(objectSpread[\"a\" /* default */])({}, card_body_props, card_header_props, card_footer_props, cardImgProps, copy_props(card_mixin.props), {\n  align: {\n    type: String,\n    default: null\n  },\n  noBody: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n});\nconst BCard =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCard',\n  functional: true,\n  props: card_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      slots,\n      scopedSlots\n    } = _ref;\n    const $slots = slots(); // Vue < 2.6.x may return undefined for scopedSlots\n\n    const $scopedSlots = scopedSlots || {}; // Create placeholder elements for each section\n\n    let imgFirst = h(false);\n    let header = h(false);\n    let content = h(false);\n    let footer = h(false);\n    let imgLast = h(false);\n\n    if (props.imgSrc) {\n      let img = h(BCardImg, {\n        props: pluck_props(cardImgProps, props, unprefix_prop_name.bind(null, 'img'))\n      });\n\n      if (props.imgBottom) {\n        imgLast = img;\n      } else {\n        imgFirst = img;\n      }\n    }\n\n    if (props.header || hasNormalizedSlot('header', $scopedSlots, $slots)) {\n      header = h(BCardHeader, {\n        props: pluck_props(card_header_props, props)\n      }, normalize_slot_normalizeSlot('header', {}, $scopedSlots, $slots));\n    }\n\n    content = normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots) || [];\n\n    if (!props.noBody) {\n      // Wrap content in card-body\n      content = [h(BCardBody, {\n        props: pluck_props(card_body_props, props)\n      }, [...content])];\n    }\n\n    if (props.footer || hasNormalizedSlot('footer', $scopedSlots, $slots)) {\n      footer = h(BCardFooter, {\n        props: pluck_props(card_footer_props, props)\n      }, normalize_slot_normalizeSlot('footer', {}, $scopedSlots, $slots));\n    }\n\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'card',\n      class: {\n        'flex-row': props.imgLeft || props.imgStart,\n        'flex-row-reverse': (props.imgRight || props.imgEnd) && !(props.imgLeft || props.imgStart),\n        [\"text-\".concat(props.align)]: Boolean(props.align),\n        [\"bg-\".concat(props.bgVariant)]: Boolean(props.bgVariant),\n        [\"border-\".concat(props.borderVariant)]: Boolean(props.borderVariant),\n        [\"text-\".concat(props.textVariant)]: Boolean(props.textVariant)\n      }\n    }), [imgFirst, header, ...content, footer, imgLast]);\n  }\n\n});\n/* harmony default export */ var card = (BCard);\n// CONCATENATED MODULE: ./src/components/image/img.js\n\n\n\n\n // --- Constants --\n\nconst img_NAME = 'BImg'; // Blank image with fill template\n\nconst BLANK_TEMPLATE = '<svg width=\"%{w}\" height=\"%{h}\" ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'viewBox=\"0 0 %{w} %{h}\" preserveAspectRatio=\"none\">' + '<rect width=\"100%\" height=\"100%\" style=\"fill:%{f};\"></rect>' + '</svg>';\nconst img_props = {\n  src: {\n    type: String,\n    default: null\n  },\n  alt: {\n    type: String,\n    default: null\n  },\n  width: {\n    type: [Number, String],\n    default: null\n  },\n  height: {\n    type: [Number, String],\n    default: null\n  },\n  block: {\n    type: Boolean,\n    default: false\n  },\n  fluid: {\n    type: Boolean,\n    default: false\n  },\n  fluidGrow: {\n    // Gives fluid images class `w-100` to make them grow to fit container\n    type: Boolean,\n    default: false\n  },\n  rounded: {\n    // rounded can be:\n    //   false: no rounding of corners\n    //   true: slightly rounded corners\n    //   'top': top corners rounded\n    //   'right': right corners rounded\n    //   'bottom': bottom corners rounded\n    //   'left': left corners rounded\n    //   'circle': circle/oval\n    //   '0': force rounding off\n    type: [Boolean, String],\n    default: false\n  },\n  thumbnail: {\n    type: Boolean,\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  center: {\n    type: Boolean,\n    default: false\n  },\n  blank: {\n    type: Boolean,\n    default: false\n  },\n  blankColor: {\n    type: String,\n    default: () => getComponentConfig(img_NAME, 'blankColor')\n  } // --- Helper methods ---\n\n};\n\nfunction makeBlankImgSrc(width, height, color) {\n  const src = encodeURIComponent(BLANK_TEMPLATE.replace('%{w}', String(width)).replace('%{h}', String(height)).replace('%{f}', color));\n  return \"data:image/svg+xml;charset=UTF-8,\".concat(src);\n} // @vue/component\n\n\nconst BImg =\n/*#__PURE__*/\nvue.extend({\n  name: img_NAME,\n  functional: true,\n  props: img_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data\n    } = _ref;\n    let src = props.src;\n    let width = parseInt(props.width, 10) ? parseInt(props.width, 10) : null;\n    let height = parseInt(props.height, 10) ? parseInt(props.height, 10) : null;\n    let align = null;\n    let block = props.block;\n\n    if (props.blank) {\n      if (!height && Boolean(width)) {\n        height = width;\n      } else if (!width && Boolean(height)) {\n        width = height;\n      }\n\n      if (!width && !height) {\n        width = 1;\n        height = 1;\n      } // Make a blank SVG image\n\n\n      src = makeBlankImgSrc(width, height, props.blankColor || 'transparent');\n    }\n\n    if (props.left) {\n      align = 'float-left';\n    } else if (props.right) {\n      align = 'float-right';\n    } else if (props.center) {\n      align = 'mx-auto';\n      block = true;\n    }\n\n    return h('img', Object(lib_esm[\"a\" /* mergeData */])(data, {\n      attrs: {\n        src: src,\n        alt: props.alt,\n        width: width ? String(width) : null,\n        height: height ? String(height) : null\n      },\n      class: {\n        'img-thumbnail': props.thumbnail,\n        'img-fluid': props.fluid || props.fluidGrow,\n        'w-100': props.fluidGrow,\n        rounded: props.rounded === '' || props.rounded === true,\n        [\"rounded-\".concat(props.rounded)]: isString(props.rounded) && props.rounded !== '',\n        [align]: Boolean(align),\n        'd-block': block\n      }\n    }));\n  }\n\n});\n/* harmony default export */ var image_img = (BImg);\n// CONCATENATED MODULE: ./src/components/image/img-lazy.js\n\n\n\n\n\nconst img_lazy_NAME = 'BImgLazy';\nconst THROTTLE = 100;\nconst EVENT_OPTIONS = {\n  passive: true,\n  capture: false\n};\nconst img_lazy_props = {\n  src: {\n    type: String,\n    default: null,\n    required: true\n  },\n  alt: {\n    type: String,\n    default: null\n  },\n  width: {\n    type: [Number, String],\n    default: null\n  },\n  height: {\n    type: [Number, String],\n    default: null\n  },\n  blankSrc: {\n    // If null, a blank image is generated\n    type: String,\n    default: null\n  },\n  blankColor: {\n    type: String,\n    default: () => getComponentConfig(img_lazy_NAME, 'blankColor')\n  },\n  blankWidth: {\n    type: [Number, String],\n    default: null\n  },\n  blankHeight: {\n    type: [Number, String],\n    default: null\n  },\n  show: {\n    type: Boolean,\n    default: false\n  },\n  fluid: {\n    type: Boolean,\n    default: false\n  },\n  fluidGrow: {\n    type: Boolean,\n    default: false\n  },\n  block: {\n    type: Boolean,\n    default: false\n  },\n  thumbnail: {\n    type: Boolean,\n    default: false\n  },\n  rounded: {\n    type: [Boolean, String],\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  center: {\n    type: Boolean,\n    default: false\n  },\n  offset: {\n    type: [Number, String],\n    default: 360\n  },\n  throttle: {\n    type: [Number, String],\n    default: THROTTLE\n  } // @vue/component\n\n};\nconst BImgLazy =\n/*#__PURE__*/\nvue.extend({\n  name: img_lazy_NAME,\n  props: img_lazy_props,\n\n  data() {\n    return {\n      isShown: false,\n      scrollTimeout: null,\n      observer: null\n    };\n  },\n\n  computed: {\n    computedSrc() {\n      return !this.blankSrc || this.isShown ? this.src : this.blankSrc;\n    },\n\n    computedBlank() {\n      return !(this.isShown || this.blankSrc);\n    },\n\n    computedWidth() {\n      return this.isShown ? this.width : this.blankWidth || this.width;\n    },\n\n    computedHeight() {\n      return this.isShown ? this.height : this.blankHeight || this.height;\n    }\n\n  },\n  watch: {\n    show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.isShown = newVal;\n\n        if (!newVal) {\n          // Make sure listeners are re-enabled if img is force set to blank\n          this.setListeners(true);\n        }\n      }\n    },\n\n    isShown(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        // Update synched show prop\n        this.$emit('update:show', newVal);\n      }\n    }\n\n  },\n\n  created() {\n    this.isShown = this.show;\n  },\n\n  mounted() {\n    if (this.isShown) {\n      this.setListeners(false);\n    } else {\n      this.setListeners(true);\n    }\n  },\n\n  activated()\n  /* istanbul ignore next */\n  {\n    if (!this.isShown) {\n      this.setListeners(true);\n    }\n  },\n\n  deactivated()\n  /* istanbul ignore next */\n  {\n    this.setListeners(false);\n  },\n\n  beforeDestroy() {\n    this.setListeners(false);\n  },\n\n  methods: {\n    setListeners(on) {\n      if (this.scrollTimeout) {\n        clearTimeout(this.scrollTimeout);\n        this.scrollTimeout = null;\n      }\n      /* istanbul ignore next: JSDOM doen't support IntersectionObserver */\n\n\n      if (this.observer) {\n        this.observer.unobserve(this.$el);\n        this.observer.disconnect();\n        this.observer = null;\n      }\n\n      const winEvts = ['scroll', 'resize', 'orientationchange'];\n      winEvts.forEach(evt => eventOff(window, evt, this.onScroll, EVENT_OPTIONS));\n      eventOff(this.$el, 'load', this.checkView, EVENT_OPTIONS);\n      eventOff(document, 'transitionend', this.onScroll, EVENT_OPTIONS);\n\n      if (on) {\n        /* istanbul ignore if: JSDOM doen't support IntersectionObserver */\n        if (env[\"c\" /* hasIntersectionObserverSupport */]) {\n          this.observer = new IntersectionObserver(this.doShow, {\n            root: null,\n            // viewport\n            rootMargin: \"\".concat(parseInt(this.offset, 10) || 0, \"px\"),\n            threshold: 0 // percent intersection\n\n          });\n          this.observer.observe(this.$el);\n        } else {\n          // Fallback to scroll/etc events\n          winEvts.forEach(evt => eventOn(window, evt, this.onScroll, EVENT_OPTIONS));\n          eventOn(this.$el, 'load', this.checkView, EVENT_OPTIONS);\n          eventOn(document, 'transitionend', this.onScroll, EVENT_OPTIONS);\n        }\n      }\n    },\n\n    doShow(entries) {\n      if (entries && (entries[0].isIntersecting || entries[0].intersectionRatio > 0.0)) {\n        this.isShown = true;\n        this.setListeners(false);\n      }\n    },\n\n    checkView() {\n      // check bounding box + offset to see if we should show\n\n      /* istanbul ignore next: should rarely occur */\n      if (this.isShown) {\n        this.setListeners(false);\n        return;\n      }\n\n      const offset = parseInt(this.offset, 10) || 0;\n      const docElement = document.documentElement;\n      const view = {\n        l: 0 - offset,\n        t: 0 - offset,\n        b: docElement.clientHeight + offset,\n        r: docElement.clientWidth + offset // JSDOM Doesn't support BCR, but we fake it in the tests\n\n      };\n      const box = getBCR(this.$el);\n\n      if (box.right >= view.l && box.bottom >= view.t && box.left <= view.r && box.top <= view.b) {\n        // image is in view (or about to be in view)\n        this.doShow([{\n          isIntersecting: true\n        }]);\n      }\n    },\n\n    onScroll() {\n      /* istanbul ignore if: should rarely occur */\n      if (this.isShown) {\n        this.setListeners(false);\n      } else {\n        clearTimeout(this.scrollTimeout);\n        this.scrollTimeout = setTimeout(this.checkView, parseInt(this.throttle, 10) || THROTTLE);\n      }\n    }\n\n  },\n\n  render(h) {\n    return h(BImg, {\n      props: {\n        // Computed value props\n        src: this.computedSrc,\n        blank: this.computedBlank,\n        width: this.computedWidth,\n        height: this.computedHeight,\n        // Passthough props\n        alt: this.alt,\n        blankColor: this.blankColor,\n        fluid: this.fluid,\n        fluidGrow: this.fluidGrow,\n        block: this.block,\n        thumbnail: this.thumbnail,\n        rounded: this.rounded,\n        left: this.left,\n        right: this.right,\n        center: this.center\n      }\n    });\n  }\n\n});\n/* harmony default export */ var img_lazy = (BImgLazy);\n// CONCATENATED MODULE: ./src/components/card/card-img-lazy.js\n\n\n\n\n // Copy of `<b-img-lazy>` props, and remove conflicting/non-applicable props\n// The `omit()` util creates a new object, so we can just pass the original props\n\nconst card_img_lazy_lazyProps = Object(object[\"k\" /* omit */])(img_lazy_props, ['left', 'right', 'center', 'block', 'rounded', 'thumbnail', 'fluid', 'fluidGrow']);\nconst card_img_lazy_props = Object(objectSpread[\"a\" /* default */])({}, card_img_lazy_lazyProps, {\n  top: {\n    type: Boolean,\n    default: false\n  },\n  bottom: {\n    type: Boolean,\n    default: false\n  },\n  left: {\n    type: Boolean,\n    default: false\n  },\n  start: {\n    type: Boolean,\n    default: false // alias of 'left'\n\n  },\n  right: {\n    type: Boolean,\n    default: false\n  },\n  end: {\n    type: Boolean,\n    default: false // alias of 'right'\n\n  } // @vue/component\n\n});\nconst BCardImgLazy =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardImgLazy',\n  functional: true,\n  props: card_img_lazy_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data\n    } = _ref;\n    let baseClass = 'card-img';\n\n    if (props.top) {\n      baseClass += '-top';\n    } else if (props.right || props.end) {\n      baseClass += '-right';\n    } else if (props.bottom) {\n      baseClass += '-bottom';\n    } else if (props.left || props.start) {\n      baseClass += '-left';\n    } // False out the left/center/right props before passing to b-img-lazy\n\n\n    const lazyProps = Object(objectSpread[\"a\" /* default */])({}, props, {\n      left: false,\n      right: false,\n      center: false\n    });\n\n    return h(BImgLazy, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: [baseClass],\n      props: lazyProps\n    }));\n  }\n\n});\n/* harmony default export */ var card_img_lazy = (BCardImgLazy);\n// CONCATENATED MODULE: ./src/components/card/card-text.js\n\n\nconst card_text_props = {\n  textTag: {\n    type: String,\n    default: 'p'\n  } // @vue/component\n\n};\nconst BCardText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardText',\n  functional: true,\n  props: card_text_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.textTag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'card-text'\n    }), children);\n  }\n\n});\n/* harmony default export */ var card_text = (BCardText);\n// CONCATENATED MODULE: ./src/components/card/card-group.js\n\n\nconst card_group_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  deck: {\n    type: Boolean,\n    default: false\n  },\n  columns: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BCardGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCardGroup',\n  functional: true,\n  props: card_group_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    let baseClass = 'card-group';\n\n    if (props.deck) {\n      baseClass = 'card-deck';\n    } else if (props.columns) {\n      baseClass = 'card-columns';\n    }\n\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: baseClass\n    }), children);\n  }\n\n});\n/* harmony default export */ var card_group = (BCardGroup);\n// CONCATENATED MODULE: ./src/components/card/index.js\n\n\n\n\n\n\n\n\n\n\n\nconst CardPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BCardTitle: BCardTitle,\n    BCardSubTitle: BCardSubTitle,\n    BCardFooter: BCardFooter,\n    BCardImg: BCardImg,\n    BCardImgLazy: BCardImgLazy,\n    BCardText: BCardText,\n    BCardGroup: BCardGroup\n  }\n});\n\n/* harmony default export */ var components_card = (CardPlugin);\n// CONCATENATED MODULE: ./src/utils/noop.js\nconst noop = () => {};\n\n/* harmony default export */ var utils_noop = (noop);\n// CONCATENATED MODULE: ./src/utils/observe-dom.js\n\n\n\n/**\n * Observe a DOM element changes, falls back to eventListener mode\n * @param {Element} el The DOM element to observe\n * @param {Function} callback callback to be called on change\n * @param {object} [opts={childList: true, subtree: true}] observe options\n * @see http://stackoverflow.com/questions/3219758\n */\n\nconst observeDom = (el, callback, opts) =>\n/* istanbul ignore next: difficult to test in JSDOM */\n{\n  // Handle cases where we might be passed a Vue instance\n  el = el ? el.$el || el : null; // Early exit when we have no element\n\n  /* istanbul ignore next: difficult to test in JSDOM */\n\n  if (!isElement(el)) {\n    return null;\n  } // Exit and throw a warning when `MutationObserver` isn't available\n\n\n  if (warnNoMutationObserverSupport('observeDom')) {\n    return null;\n  } // Define a new observer\n\n\n  const obs = new MutationObs(mutations => {\n    let changed = false; // A mutation can contain several change records, so we loop\n    // through them to see what has changed\n    // We break out of the loop early if any \"significant\" change\n    // has been detected\n\n    for (let i = 0; i < mutations.length && !changed; i++) {\n      // The mutation record\n      const mutation = mutations[i]; // Mutation type\n\n      const type = mutation.type; // DOM node (could be any DOM node type - HTMLElement, Text, comment, etc.)\n\n      const target = mutation.target; // Detect whether a change happened based on type and target\n\n      if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {\n        // We ignore nodes that are not TEXT (i.e. comments, etc)\n        // as they don't change layout\n        changed = true;\n      } else if (type === 'attributes') {\n        changed = true;\n      } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {\n        // This includes HTMLElement and text nodes being\n        // added/removed/re-arranged\n        changed = true;\n      }\n    } // We only call the callback if a change that could affect\n    // layout/size truely happened\n\n\n    if (changed) {\n      callback();\n    }\n  }); // Have the observer observe foo for changes in children, etc\n\n  obs.observe(el, Object(objectSpread[\"a\" /* default */])({\n    childList: true,\n    subtree: true\n  }, opts)); // We return a reference to the observer so that `obs.disconnect()`\n  // can be called if necessary\n  // To reduce overhead when the root element is hidden\n\n  return obs;\n};\n\n/* harmony default export */ var observe_dom = (observeDom);\n// CONCATENATED MODULE: ./src/mixins/id.js\n\n\n/*\n * SSR Safe Client Side ID attribute generation\n * id's can only be generated client side, after mount.\n * this._uid is not synched between server and client.\n */\n// @vue/component\n/* harmony default export */ var mixins_id = ({\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      localId_: null\n    };\n  },\n\n  computed: {\n    safeId() {\n      // Computed property that returns a dynamic function for creating the ID.\n      // Reacts to changes in both .id and .localId_ And regens a new function\n      const id = this.id || this.localId_; // We return a function that accepts an optional suffix string\n      // So this computed prop looks and works like a method!!!\n      // But benefits from Vue's Computed prop caching\n\n      const fn = suffix => {\n        if (!id) {\n          return null;\n        }\n\n        suffix = String(suffix || '').replace(/\\s+/g, '_');\n        return suffix ? id + '_' + suffix : id;\n      };\n\n      return fn;\n    }\n\n  },\n\n  mounted() {\n    // mounted only occurs client side\n    this.$nextTick(() => {\n      // Update dom with auto ID after dom loaded to prevent\n      // SSR hydration errors.\n      this.localId_ = \"__BVID__\".concat(this._uid);\n    });\n  }\n\n});\n// CONCATENATED MODULE: ./src/components/carousel/carousel.js\n\n\n\n\n\n\n\n\n\n\n\nconst carousel_NAME = 'BCarousel'; // Slide directional classes\n\nconst DIRECTION = {\n  next: {\n    dirClass: 'carousel-item-left',\n    overlayClass: 'carousel-item-next'\n  },\n  prev: {\n    dirClass: 'carousel-item-right',\n    overlayClass: 'carousel-item-prev'\n  } // Fallback Transition duration (with a little buffer) in ms\n\n};\nconst TRANS_DURATION = 600 + 50; // Time for mouse compat events to fire after touch\n\nconst TOUCH_EVENT_COMPAT_WAIT = 500; // Number of pixels to consider touch move a swipe\n\nconst SWIPE_THRESHOLD = 40; // PointerEvent pointer types\n\nconst PointerType = {\n  TOUCH: 'touch',\n  PEN: 'pen' // Transition Event names\n\n};\nconst TransitionEndEvents = {\n  WebkitTransition: 'webkitTransitionEnd',\n  MozTransition: 'transitionend',\n  OTransition: 'otransitionend oTransitionEnd',\n  transition: 'transitionend'\n};\nconst EventOptions = {\n  passive: true,\n  capture: false // Return the browser specific transitionEnd event name\n\n};\n\nfunction getTransitionEndEvent(el) {\n  for (const name in TransitionEndEvents) {\n    if (!isUndefined(el.style[name])) {\n      return TransitionEndEvents[name];\n    }\n  } // fallback\n\n  /* istanbul ignore next */\n\n\n  return null;\n} // @vue/component\n\n\nconst BCarousel =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCarousel',\n  mixins: [mixins_id, mixins_normalize_slot],\n\n  provide() {\n    return {\n      bvCarousel: this\n    };\n  },\n\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    labelPrev: {\n      type: String,\n      default: () => getComponentConfig(carousel_NAME, 'labelPrev')\n    },\n    labelNext: {\n      type: String,\n      default: () => getComponentConfig(carousel_NAME, 'labelNext')\n    },\n    labelGotoSlide: {\n      type: String,\n      default: () => getComponentConfig(carousel_NAME, 'labelGotoSlide')\n    },\n    labelIndicators: {\n      type: String,\n      default: () => getComponentConfig(carousel_NAME, 'labelIndicators')\n    },\n    interval: {\n      type: Number,\n      default: 5000\n    },\n    indicators: {\n      type: Boolean,\n      default: false\n    },\n    controls: {\n      type: Boolean,\n      default: false\n    },\n    noAnimation: {\n      // Disable slide/fade animation\n      type: Boolean,\n      default: false\n    },\n    fade: {\n      // Enable cross-fade animation instead of slide animation\n      type: Boolean,\n      default: false\n    },\n    noTouch: {\n      // Sniffed by carousel-slide\n      type: Boolean,\n      default: false\n    },\n    noHoverPause: {\n      // Disable pause on hover\n      type: Boolean,\n      default: false\n    },\n    imgWidth: {\n      // Sniffed by carousel-slide\n      type: [Number, String] // default: undefined\n\n    },\n    imgHeight: {\n      // Sniffed by carousel-slide\n      type: [Number, String] // default: undefined\n\n    },\n    background: {\n      type: String // default: undefined\n\n    },\n    value: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data() {\n    return {\n      index: this.value || 0,\n      isSliding: false,\n      transitionEndEvent: null,\n      slides: [],\n      direction: null,\n      isPaused: !(parseInt(this.interval, 10) > 0),\n      // Touch event handling values\n      touchStartX: 0,\n      touchDeltaX: 0\n    };\n  },\n\n  watch: {\n    value(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.setSlide(newVal);\n      }\n    },\n\n    interval(newVal, oldVal) {\n      if (newVal === oldVal) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (!newVal) {\n        // Pausing slide show\n        this.pause(false);\n      } else {\n        // Restarting or Changing interval\n        this.pause(true);\n        this.start(false);\n      }\n    },\n\n    isPaused(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit(newVal ? 'paused' : 'unpaused');\n      }\n    },\n\n    index(to, from) {\n      if (to === from || this.isSliding) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.doSlide(to, from);\n    }\n\n  },\n\n  created() {\n    // Create private non-reactive props\n    this._intervalId = null;\n    this._animationTimeout = null;\n    this._touchTimeout = null; // Set initial paused state\n\n    this.isPaused = !(parseInt(this.interval, 10) > 0);\n  },\n\n  mounted() {\n    // Cache current browser transitionend event name\n    this.transitionEndEvent = getTransitionEndEvent(this.$el) || null; // Get all slides\n\n    this.updateSlides(); // Observe child changes so we can update slide list\n\n    observe_dom(this.$refs.inner, this.updateSlides.bind(this), {\n      subtree: false,\n      childList: true,\n      attributes: true,\n      attributeFilter: ['id']\n    });\n  },\n\n  beforeDestroy() {\n    clearTimeout(this._animationTimeout);\n    clearTimeout(this._touchTimeout);\n    clearInterval(this._intervalId);\n    this._intervalId = null;\n    this._animationTimeout = null;\n    this._touchTimeout = null;\n  },\n\n  methods: {\n    // Set slide\n    setSlide(slide) {\n      let direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Don't animate when page is not visible\n\n      /* istanbul ignore if: difficult to test */\n      if (env[\"j\" /* isBrowser */] && document.visibilityState && document.hidden) {\n        return;\n      }\n\n      const len = this.slides.length; // Don't do anything if nothing to slide to\n\n      if (len === 0) {\n        return;\n      } // Don't change slide while transitioning, wait until transition is done\n\n\n      if (this.isSliding) {\n        // Schedule slide after sliding complete\n        this.$once('sliding-end', () => this.setSlide(slide, direction));\n        return;\n      }\n\n      this.direction = direction; // Make sure we have an integer (you never know!)\n\n      slide = Math.floor(slide); // Set new slide index. Wrap around if necessary\n\n      this.index = slide >= len ? 0 : slide >= 0 ? slide : len - 1;\n    },\n\n    // Previous slide\n    prev() {\n      this.setSlide(this.index - 1, 'prev');\n    },\n\n    // Next slide\n    next() {\n      this.setSlide(this.index + 1, 'next');\n    },\n\n    // Pause auto rotation\n    pause(evt) {\n      if (!evt) {\n        this.isPaused = true;\n      }\n\n      if (this._intervalId) {\n        clearInterval(this._intervalId);\n        this._intervalId = null;\n      }\n    },\n\n    // Start auto rotate slides\n    start(evt) {\n      if (!evt) {\n        this.isPaused = false;\n      }\n      /* istanbul ignore next: most likely will never happen, but just in case */\n\n\n      if (this._intervalId) {\n        clearInterval(this._intervalId);\n        this._intervalId = null;\n      } // Don't start if no interval, or less than 2 slides\n\n\n      if (this.interval && this.slides.length > 1) {\n        this._intervalId = setInterval(this.next, Math.max(1000, this.interval));\n      }\n    },\n\n    // Restart auto rotate slides when focus/hover leaves the carousel\n    restart(evt)\n    /* istanbul ignore next: difficult to test */\n    {\n      if (!this.$el.contains(document.activeElement)) {\n        this.start();\n      }\n    },\n\n    doSlide(to, from) {\n      const isCycling = Boolean(this.interval); // Determine sliding direction\n\n      let direction = this.calcDirection(this.direction, from, to);\n      const overlayClass = direction.overlayClass;\n      const dirClass = direction.dirClass; // Determine current and next slides\n\n      const currentSlide = this.slides[from];\n      const nextSlide = this.slides[to]; // Don't do anything if there aren't any slides to slide to\n\n      if (!currentSlide || !nextSlide) {\n        /* istanbul ignore next */\n        return;\n      } // Start animating\n\n\n      this.isSliding = true;\n\n      if (isCycling) {\n        this.pause(false);\n      }\n\n      this.$emit('sliding-start', to); // Update v-model\n\n      this.$emit('input', this.index);\n\n      if (this.noAnimation) {\n        addClass(nextSlide, 'active');\n        removeClass(currentSlide, 'active');\n        this.isSliding = false; // Notify ourselves that we're done sliding (slid)\n\n        this.$nextTick(() => this.$emit('sliding-end', to));\n      } else {\n        addClass(nextSlide, overlayClass); // Trigger a reflow of next slide\n\n        reflow(nextSlide);\n        addClass(currentSlide, dirClass);\n        addClass(nextSlide, dirClass); // Transition End handler\n\n        let called = false;\n        /* istanbul ignore next: difficult to test */\n\n        const onceTransEnd = evt => {\n          if (called) {\n            return;\n          }\n\n          called = true;\n          /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n          if (this.transitionEndEvent) {\n            const events = this.transitionEndEvent.split(/\\s+/);\n            events.forEach(evt => eventOff(currentSlide, evt, onceTransEnd, EventOptions));\n          }\n\n          this._animationTimeout = null;\n          removeClass(nextSlide, dirClass);\n          removeClass(nextSlide, overlayClass);\n          addClass(nextSlide, 'active');\n          removeClass(currentSlide, 'active');\n          removeClass(currentSlide, dirClass);\n          removeClass(currentSlide, overlayClass);\n          setAttr(currentSlide, 'aria-current', 'false');\n          setAttr(nextSlide, 'aria-current', 'true');\n          setAttr(currentSlide, 'aria-hidden', 'true');\n          setAttr(nextSlide, 'aria-hidden', 'false');\n          this.isSliding = false;\n          this.direction = null; // Notify ourselves that we're done sliding (slid)\n\n          this.$nextTick(() => this.$emit('sliding-end', to));\n        }; // Set up transitionend handler\n\n        /* istanbul ignore if: transition events cant be tested in JSDOM */\n\n\n        if (this.transitionEndEvent) {\n          const events = this.transitionEndEvent.split(/\\s+/);\n          events.forEach(event => eventOn(currentSlide, event, onceTransEnd, EventOptions));\n        } // Fallback to setTimeout()\n\n\n        this._animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);\n      }\n\n      if (isCycling) {\n        this.start(false);\n      }\n    },\n\n    // Update slide list\n    updateSlides() {\n      this.pause(true); // Get all slides as DOM elements\n\n      this.slides = selectAll('.carousel-item', this.$refs.inner);\n      const numSlides = this.slides.length; // Keep slide number in range\n\n      const index = Math.max(0, Math.min(Math.floor(this.index), numSlides - 1));\n      this.slides.forEach((slide, idx) => {\n        const n = idx + 1;\n\n        if (idx === index) {\n          addClass(slide, 'active');\n          setAttr(slide, 'aria-current', 'true');\n        } else {\n          removeClass(slide, 'active');\n          setAttr(slide, 'aria-current', 'false');\n        }\n\n        setAttr(slide, 'aria-posinset', String(n));\n        setAttr(slide, 'aria-setsize', String(numSlides));\n      }); // Set slide as active\n\n      this.setSlide(index);\n      this.start(this.isPaused);\n    },\n\n    calcDirection() {\n      let direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let curIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let nextIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (!direction) {\n        return nextIndex > curIndex ? DIRECTION.next : DIRECTION.prev;\n      }\n\n      return DIRECTION[direction];\n    },\n\n    handleClick(evt, fn) {\n      const keyCode = evt.keyCode;\n\n      if (evt.type === 'click' || keyCode === key_codes.SPACE || keyCode === key_codes.ENTER) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        fn();\n      }\n    },\n\n    handleSwipe()\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      const absDeltaX = Math.abs(this.touchDeltaX);\n\n      if (absDeltaX <= SWIPE_THRESHOLD) {\n        return;\n      }\n\n      const direction = absDeltaX / this.touchDeltaX;\n\n      if (direction > 0) {\n        // Swipe left\n        this.prev();\n      } else if (direction < 0) {\n        // Swipe right\n        this.next();\n      }\n    },\n\n    touchStart(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      if (env[\"f\" /* hasPointerEventSupport */] && PointerType[evt.pointerType.toUpperCase()]) {\n        this.touchStartX = evt.clientX;\n      } else if (!env[\"f\" /* hasPointerEventSupport */]) {\n        this.touchStartX = evt.touches[0].clientX;\n      }\n    },\n\n    touchMove(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      // Ensure swiping with one touch and not pinching\n      if (evt.touches && evt.touches.length > 1) {\n        this.touchDeltaX = 0;\n      } else {\n        this.touchDeltaX = evt.touches[0].clientX - this.touchStartX;\n      }\n    },\n\n    touchEnd(evt)\n    /* istanbul ignore next: JSDOM doesn't support touch events */\n    {\n      if (env[\"f\" /* hasPointerEventSupport */] && PointerType[evt.pointerType.toUpperCase()]) {\n        this.touchDeltaX = evt.clientX - this.touchStartX;\n      }\n\n      this.handleSwipe(); // If it's a touch-enabled device, mouseenter/leave are fired as\n      // part of the mouse compatibility events on first tap - the carousel\n      // would stop cycling until user tapped out of it;\n      // here, we listen for touchend, explicitly pause the carousel\n      // (as if it's the second time we tap on it, mouseenter compat event\n      // is NOT fired) and after a timeout (to allow for mouse compatibility\n      // events to fire) we explicitly restart cycling\n\n      this.pause(false);\n\n      if (this._touchTimeout) {\n        clearTimeout(this._touchTimeout);\n      }\n\n      this._touchTimeout = setTimeout(this.start, TOUCH_EVENT_COMPAT_WAIT + Math.max(1000, this.interval));\n    }\n\n  },\n\n  render(h) {\n    // Wrapper for slides\n    const inner = h('div', {\n      ref: 'inner',\n      class: ['carousel-inner'],\n      attrs: {\n        id: this.safeId('__BV_inner_'),\n        role: 'list'\n      }\n    }, [this.normalizeSlot('default')]); // Prev and next controls\n\n    let controls = h(false);\n\n    if (this.controls) {\n      controls = [h('a', {\n        class: ['carousel-control-prev'],\n        attrs: {\n          href: '#',\n          role: 'button',\n          'aria-controls': this.safeId('__BV_inner_')\n        },\n        on: {\n          click: evt => {\n            this.handleClick(evt, this.prev);\n          },\n          keydown: evt => {\n            this.handleClick(evt, this.prev);\n          }\n        }\n      }, [h('span', {\n        class: ['carousel-control-prev-icon'],\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }), h('span', {\n        class: ['sr-only']\n      }, [this.labelPrev])]), h('a', {\n        class: ['carousel-control-next'],\n        attrs: {\n          href: '#',\n          role: 'button',\n          'aria-controls': this.safeId('__BV_inner_')\n        },\n        on: {\n          click: evt => {\n            this.handleClick(evt, this.next);\n          },\n          keydown: evt => {\n            this.handleClick(evt, this.next);\n          }\n        }\n      }, [h('span', {\n        class: ['carousel-control-next-icon'],\n        attrs: {\n          'aria-hidden': 'true'\n        }\n      }), h('span', {\n        class: ['sr-only']\n      }, [this.labelNext])])];\n    } // Indicators\n\n\n    const indicators = h('ol', {\n      class: ['carousel-indicators'],\n      directives: [{\n        name: 'show',\n        rawName: 'v-show',\n        value: this.indicators,\n        expression: 'indicators'\n      }],\n      attrs: {\n        id: this.safeId('__BV_indicators_'),\n        'aria-hidden': this.indicators ? 'false' : 'true',\n        'aria-label': this.labelIndicators,\n        'aria-owns': this.safeId('__BV_inner_')\n      }\n    }, this.slides.map((slide, n) => {\n      return h('li', {\n        key: \"slide_\".concat(n),\n        class: {\n          active: n === this.index\n        },\n        attrs: {\n          role: 'button',\n          id: this.safeId(\"__BV_indicator_\".concat(n + 1, \"_\")),\n          tabindex: this.indicators ? '0' : '-1',\n          'aria-current': n === this.index ? 'true' : 'false',\n          'aria-label': \"\".concat(this.labelGotoSlide, \" \").concat(n + 1),\n          'aria-describedby': this.slides[n].id || null,\n          'aria-controls': this.safeId('__BV_inner_')\n        },\n        on: {\n          click: evt => {\n            this.handleClick(evt, () => {\n              this.setSlide(n);\n            });\n          },\n          keydown: evt => {\n            this.handleClick(evt, () => {\n              this.setSlide(n);\n            });\n          }\n        }\n      });\n    }));\n    const on = {\n      mouseenter: this.noHoverPause ? utils_noop : this.pause,\n      mouseleave: this.noHoverPause ? utils_noop : this.restart,\n      focusin: this.pause,\n      focusout: this.restart,\n      keydown: evt => {\n        if (/input|textarea/i.test(evt.target.tagName)) {\n          /* istanbul ignore next */\n          return;\n        }\n\n        const keyCode = evt.keyCode;\n\n        if (keyCode === key_codes.LEFT || keyCode === key_codes.RIGHT) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          this[keyCode === key_codes.LEFT ? 'prev' : 'next']();\n        }\n      } // Touch support event handlers for environment\n\n    };\n\n    if (!this.noTouch && env[\"h\" /* hasTouchSupport */]) {\n      // Attach appropriate listeners (prepend event name with '&' for passive mode)\n\n      /* istanbul ignore next: JSDOM doesn't support touch events */\n      if (env[\"f\" /* hasPointerEventSupport */]) {\n        on['&pointerdown'] = this.touchStart;\n        on['&pointerup'] = this.touchEnd;\n      } else {\n        on['&touchstart'] = this.touchStart;\n        on['&touchmove'] = this.touchMove;\n        on['&touchend'] = this.touchEnd;\n      }\n    } // Return the carousel\n\n\n    return h('div', {\n      staticClass: 'carousel',\n      class: {\n        slide: !this.noAnimation,\n        'carousel-fade': !this.noAnimation && this.fade,\n        'pointer-event': !this.noTouch && env[\"h\" /* hasTouchSupport */] && env[\"f\" /* hasPointerEventSupport */]\n      },\n      style: {\n        background: this.background\n      },\n      attrs: {\n        role: 'region',\n        id: this.safeId(),\n        'aria-busy': this.isSliding ? 'true' : 'false'\n      },\n      on\n    }, [inner, controls, indicators]);\n  }\n\n});\n/* harmony default export */ var carousel = (BCarousel);\n// CONCATENATED MODULE: ./src/components/carousel/carousel-slide.js\n\n\n\n\n\n\nconst carousel_slide_props = {\n  imgSrc: {\n    type: String // default: undefined\n\n  },\n  imgAlt: {\n    type: String // default: undefined\n\n  },\n  imgWidth: {\n    type: [Number, String] // default: undefined\n\n  },\n  imgHeight: {\n    type: [Number, String] // default: undefined\n\n  },\n  imgBlank: {\n    type: Boolean,\n    default: false\n  },\n  imgBlankColor: {\n    type: String,\n    default: 'transparent'\n  },\n  contentVisibleUp: {\n    type: String\n  },\n  contentTag: {\n    type: String,\n    default: 'div'\n  },\n  caption: {\n    type: String\n  },\n  captionHtml: {\n    type: String\n  },\n  captionTag: {\n    type: String,\n    default: 'h3'\n  },\n  text: {\n    type: String\n  },\n  textHtml: {\n    type: String\n  },\n  textTag: {\n    type: String,\n    default: 'p'\n  },\n  background: {\n    type: String\n  } // @vue/component\n\n};\nconst BCarouselSlide =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCarouselSlide',\n  mixins: [mixins_id, mixins_normalize_slot],\n  inject: {\n    bvCarousel: {\n      default() {\n        return {\n          // Explicitly disable touch if not a child of carousel\n          noTouch: true\n        };\n      }\n\n    }\n  },\n  props: carousel_slide_props,\n\n  data() {\n    return {};\n  },\n\n  computed: {\n    contentClasses() {\n      return [this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? \"d-\".concat(this.contentVisibleUp, \"-block\") : ''];\n    },\n\n    computedWidth() {\n      // Use local width, or try parent width\n      return this.imgWidth || this.bvCarousel.imgWidth || null;\n    },\n\n    computedHeight() {\n      // Use local height, or try parent height\n      return this.imgHeight || this.bvCarousel.imgHeight || null;\n    }\n\n  },\n\n  render(h) {\n    const noDrag = !this.bvCarousel.noTouch && env[\"h\" /* hasTouchSupport */];\n    let img = this.normalizeSlot('img');\n\n    if (!img && (this.imgSrc || this.imgBlank)) {\n      img = h(BImg, {\n        props: {\n          fluidGrow: true,\n          block: true,\n          src: this.imgSrc,\n          blank: this.imgBlank,\n          blankColor: this.imgBlankColor,\n          width: this.computedWidth,\n          height: this.computedHeight,\n          alt: this.imgAlt\n        },\n        // Touch support event handler\n        on: noDrag ? {\n          dragstart: e => {\n            /* istanbul ignore next: difficult to test in JSDOM */\n            e.preventDefault();\n          }\n        } : {}\n      });\n    }\n\n    if (!img) {\n      img = h(false);\n    }\n\n    const content = h(this.contentTag, {\n      staticClass: 'carousel-caption',\n      class: this.contentClasses\n    }, [this.caption || this.captionHtml ? h(this.captionTag, {\n      domProps: htmlOrText(this.captionHtml, this.caption)\n    }) : h(false), this.text || this.textHtml ? h(this.textTag, {\n      domProps: htmlOrText(this.textHtml, this.text)\n    }) : h(false), this.normalizeSlot('default')]);\n    return h('div', {\n      staticClass: 'carousel-item',\n      style: {\n        background: this.background || this.bvCarousel.background || null\n      },\n      attrs: {\n        id: this.safeId(),\n        role: 'listitem'\n      }\n    }, [img, content]);\n  }\n\n});\n/* harmony default export */ var carousel_slide = (BCarouselSlide);\n// CONCATENATED MODULE: ./src/components/carousel/index.js\n\n\n\nconst CarouselPlugin =\n/*#__PURE*/\nplugins_pluginFactory({\n  components: {\n    BCarousel: BCarousel,\n    BCarouselSlide: BCarouselSlide\n  }\n});\n\n/* harmony default export */ var components_carousel = (CarouselPlugin);\n// CONCATENATED MODULE: ./src/mixins/listen-on-root.js\n/**\n * Issue #569: collapse::toggle::state triggered too many times\n * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569\n */\n// @vue/component\n/* harmony default export */ var listen_on_root = ({\n  methods: {\n    /**\n     * Safely register event listeners on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRoot(event, callback) {\n      this.$root.$on(event, callback);\n      this.$on('hook:beforeDestroy', () => {\n        this.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Safely register a $once event listener on the root Vue node.\n     * While Vue automatically removes listeners for individual components,\n     * when a component registers a listener on root and is destroyed,\n     * this orphans a callback because the node is gone,\n     * but the root does not clear the callback.\n     *\n     * When registering a $root listener, it also registers a listener on\n     * the component's `beforeDestroy` hook to automatically remove the\n     * event listener from the $root instance.\n     *\n     * @param {string} event\n     * @param {function} callback\n     * @chainable\n     */\n    listenOnRootOnce(event, callback) {\n      this.$root.$once(event, callback);\n      this.$on('hook:beforeDestroy', () => {\n        this.$root.$off(event, callback);\n      }); // Return this for easy chaining\n\n      return this;\n    },\n\n    /**\n     * Convenience method for calling vm.$emit on vm.$root.\n     * @param {string} event\n     * @param {*} args\n     * @chainable\n     */\n    emitOnRoot(event) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.$root.$emit(event, ...args); // Return this for easy chaining\n\n      return this;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/collapse/collapse.js\n\n\n\n\n // Events we emit on $root\n\nconst EVENT_STATE = 'bv::collapse::state';\nconst EVENT_ACCORDION = 'bv::collapse::accordion'; // Private event we emit on `$root` to ensure the toggle state is\n// always synced. It gets emitted even if the state has not changed!\n// This event is NOT to be documented as people should not be using it\n\nconst EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Events we listen to on `$root`\n\nconst EVENT_TOGGLE = 'bv::toggle::collapse';\nconst EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Event listener options\n\nconst collapse_EventOptions = {\n  passive: true,\n  capture: false // @vue/component\n\n};\nconst BCollapse =\n/*#__PURE__*/\nvue.extend({\n  name: 'BCollapse',\n  mixins: [listen_on_root, mixins_normalize_slot],\n  model: {\n    prop: 'visible',\n    event: 'input'\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    isNav: {\n      type: Boolean,\n      default: false\n    },\n    accordion: {\n      type: String,\n      default: null\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n\n  data() {\n    return {\n      show: this.visible,\n      transitioning: false\n    };\n  },\n\n  computed: {\n    classObject() {\n      return {\n        'navbar-collapse': this.isNav,\n        collapse: !this.transitioning,\n        show: this.show && !this.transitioning\n      };\n    }\n\n  },\n  watch: {\n    visible(newVal) {\n      if (newVal !== this.show) {\n        this.show = newVal;\n      }\n    },\n\n    show(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.emitState();\n      }\n    }\n\n  },\n\n  created() {\n    this.show = this.visible;\n  },\n\n  mounted() {\n    this.show = this.visible; // Listen for toggle events to open/close us\n\n    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to other collapses for accordion events\n\n    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);\n\n    if (this.isNav) {\n      // Set up handlers\n      this.setWindowEvents(true);\n      this.handleResize();\n    }\n\n    this.$nextTick(() => {\n      this.emitState();\n    }); // Listen for \"Sync state\" requests from `v-b-toggle`\n\n    this.$root.$on(EVENT_STATE_REQUEST, id => {\n      if (id === this.id) {\n        this.$nextTick(this.emitSync);\n      }\n    });\n  },\n\n  updated() {\n    // Emit a private event every time this component updates to ensure\n    // the toggle button is in sync with the collapse's state\n    // It is emitted regardless if the visible state changes\n    this.emitSync();\n  },\n\n  deactivated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(false);\n    }\n  },\n\n  activated()\n  /* istanbul ignore next */\n  {\n    if (this.isNav) {\n      this.setWindowEvents(true);\n    }\n\n    this.emitSync();\n  },\n\n  beforeDestroy() {\n    // Trigger state emit if needed\n    this.show = false;\n\n    if (this.isNav && env[\"j\" /* isBrowser */]) {\n      this.setWindowEvents(false);\n    }\n  },\n\n  methods: {\n    setWindowEvents(on) {\n      const method = on ? eventOn : eventOff;\n      method(window, 'resize', this.handleResize, collapse_EventOptions);\n      method(window, 'orientationchange', this.handleResize, collapse_EventOptions);\n    },\n\n    toggle() {\n      this.show = !this.show;\n    },\n\n    onEnter(el) {\n      el.style.height = 0;\n      reflow(el);\n      el.style.height = el.scrollHeight + 'px';\n      this.transitioning = true; // This should be moved out so we can add cancellable events\n\n      this.$emit('show');\n    },\n\n    onAfterEnter(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('shown');\n    },\n\n    onLeave(el) {\n      el.style.height = 'auto';\n      el.style.display = 'block';\n      el.style.height = getBCR(el).height + 'px';\n      reflow(el);\n      this.transitioning = true;\n      el.style.height = 0; // This should be moved out so we can add cancellable events\n\n      this.$emit('hide');\n    },\n\n    onAfterLeave(el) {\n      el.style.height = null;\n      this.transitioning = false;\n      this.$emit('hidden');\n    },\n\n    emitState() {\n      this.$emit('input', this.show); // Let v-b-toggle know the state of this collapse\n\n      this.$root.$emit(EVENT_STATE, this.id, this.show);\n\n      if (this.accordion && this.show) {\n        // Tell the other collapses in this accordion to close\n        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);\n      }\n    },\n\n    emitSync() {\n      // Emit a private event every time this component updates to ensure\n      // the toggle button is in sync with the collapse's state\n      // It is emitted regardless if the visible state changes\n      this.$root.$emit(EVENT_STATE_SYNC, this.id, this.show);\n    },\n\n    checkDisplayBlock() {\n      // Check to see if the collapse has `display: block !important;` set.\n      // We can't set `display: none;` directly on this.$el, as it would\n      // trigger a new transition to start (or cancel a current one).\n      const restore = hasClass(this.$el, 'show');\n      removeClass(this.$el, 'show');\n      const isBlock = getCS(this.$el).display === 'block';\n      restore && addClass(this.$el, 'show');\n      return isBlock;\n    },\n\n    clickHandler(evt) {\n      // If we are in a nav/navbar, close the collapse when non-disabled link clicked\n      const el = evt.target;\n\n      if (!this.isNav || !el || getCS(this.$el).display !== 'block') {\n        /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n        return;\n      }\n\n      if (matches(el, '.nav-link,.dropdown-item') || closest('.nav-link,.dropdown-item', el)) {\n        if (!this.checkDisplayBlock()) {\n          // Only close the collapse if it is not forced to be 'display: block !important;'\n          this.show = false;\n        }\n      }\n    },\n\n    handleToggleEvt(target) {\n      if (target !== this.id) {\n        return;\n      }\n\n      this.toggle();\n    },\n\n    handleAccordionEvt(openedId, accordion) {\n      if (!this.accordion || accordion !== this.accordion) {\n        return;\n      }\n\n      if (openedId === this.id) {\n        // Open this collapse if not shown\n        if (!this.show) {\n          this.toggle();\n        }\n      } else {\n        // Close this collapse if shown\n        if (this.show) {\n          this.toggle();\n        }\n      }\n    },\n\n    handleResize() {\n      // Handler for orientation/resize to set collapsed state in nav/navbar\n      this.show = getCS(this.$el).display === 'block';\n    }\n\n  },\n\n  render(h) {\n    const content = h(this.tag, {\n      class: this.classObject,\n      directives: [{\n        name: 'show',\n        value: this.show\n      }],\n      attrs: {\n        id: this.id || null\n      },\n      on: {\n        click: this.clickHandler\n      }\n    }, [this.normalizeSlot('default')]);\n    return h('transition', {\n      props: {\n        enterClass: '',\n        enterActiveClass: 'collapsing',\n        enterToClass: '',\n        leaveClass: '',\n        leaveActiveClass: 'collapsing',\n        leaveToClass: ''\n      },\n      on: {\n        enter: this.onEnter,\n        afterEnter: this.onAfterEnter,\n        leave: this.onLeave,\n        afterLeave: this.onAfterLeave\n      }\n    }, [content]);\n  }\n\n});\n/* harmony default export */ var collapse = (BCollapse);\n// CONCATENATED MODULE: ./src/utils/loose-equal.js\n\n // Assumes both a and b are arrays!\n// Handles when arrays are \"sparse\" (array.every(...) doesn't handle sparse)\n\nconst compareArrays = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  let equal = true;\n\n  for (let i = 0; equal && i < a.length; i++) {\n    equal = looseEqual(a[i], b[i]);\n  }\n\n  return equal;\n};\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n * Returns boolean true or false\n */\n\n\nconst looseEqual = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n\n  let aValidType = isDate(a);\n  let bValidType = isDate(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n  }\n\n  aValidType = Object(array[\"d\" /* isArray */])(a);\n  bValidType = Object(array[\"d\" /* isArray */])(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? compareArrays(a, b) : false;\n  }\n\n  aValidType = Object(object[\"h\" /* isObject */])(a);\n  bValidType = Object(object[\"h\" /* isObject */])(b);\n\n  if (aValidType || bValidType) {\n    /* istanbul ignore if: this if will probably never be called */\n    if (!aValidType || !bValidType) {\n      return false;\n    }\n\n    const aKeysCount = Object(object[\"j\" /* keys */])(a).length;\n    const bKeysCount = Object(object[\"j\" /* keys */])(b).length;\n\n    if (aKeysCount !== bKeysCount) {\n      return false;\n    }\n\n    for (const key in a) {\n      const aHasKey = a.hasOwnProperty(key);\n      const bHasKey = b.hasOwnProperty(key);\n\n      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n  }\n\n  return String(a) === String(b);\n};\n\n/* harmony default export */ var loose_equal = (looseEqual);\n// CONCATENATED MODULE: ./src/utils/target.js\n\n\nconst allListenTypes = {\n  hover: true,\n  click: true,\n  focus: true\n};\nconst BVBoundListeners = '__BV_boundEventListeners__';\n\nconst getTargets = binding => {\n  const targets = Object(object[\"j\" /* keys */])(binding.modifiers || {}).filter(t => !allListenTypes[t]);\n\n  if (binding.value) {\n    targets.push(binding.value);\n  }\n\n  return targets;\n};\n\nconst bindTargets = (vnode, binding, listenTypes, fn) => {\n  const targets = getTargets(binding);\n\n  const listener = () => {\n    fn({\n      targets,\n      vnode\n    });\n  };\n\n  Object(object[\"j\" /* keys */])(allListenTypes).forEach(type => {\n    if (listenTypes[type] || binding.modifiers[type]) {\n      eventOn(vnode.elm, type, listener);\n      const boundListeners = vnode.elm[BVBoundListeners] || {};\n      boundListeners[type] = boundListeners[type] || [];\n      boundListeners[type].push(listener);\n      vnode.elm[BVBoundListeners] = boundListeners;\n    }\n  }); // Return the list of targets\n\n  return targets;\n};\n\nconst unbindTargets = (vnode, binding, listenTypes) => {\n  Object(object[\"j\" /* keys */])(allListenTypes).forEach(type => {\n    if (listenTypes[type] || binding.modifiers[type]) {\n      const boundListeners = vnode.elm[BVBoundListeners] && vnode.elm[BVBoundListeners][type];\n\n      if (boundListeners) {\n        boundListeners.forEach(listener => eventOff(vnode.elm, type, listener));\n        delete vnode.elm[BVBoundListeners][type];\n      }\n    }\n  });\n};\n\n\n/* harmony default export */ var utils_target = (bindTargets);\n// CONCATENATED MODULE: ./src/directives/toggle/toggle.js\n\n\n\n // Target listen types\n\nconst toggle_listenTypes = {\n  click: true // Property key for handler storage\n\n};\nconst BV_TOGGLE = '__BV_toggle__';\nconst BV_TOGGLE_STATE = '__BV_toggle_STATE__';\nconst BV_TOGGLE_CONTROLS = '__BV_toggle_CONTROLS__';\nconst BV_TOGGLE_TARGETS = '__BV_toggle_TARGETS__'; // Emitted control event for collapse (emitted to collapse)\n\nconst toggle_EVENT_TOGGLE = 'bv::toggle::collapse'; // Listen to event for toggle state update (emitted by collapse)\n\nconst toggle_EVENT_STATE = 'bv::collapse::state'; // Private event emitted on $root to ensure the toggle state is always synced.\n// Gets emitted even if the state of b-collapse has not changed.\n// This event is NOT to be documented as people should not be using it.\n\nconst toggle_EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // Private event we send to collapse to request state update sync event\n\nconst toggle_EVENT_STATE_REQUEST = 'bv::request::collapse::state'; // Reset and remove a property from the provided element\n\nconst resetProp = (el, prop) => {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle targets update\n\n\nconst handleTargets = (_ref) => {\n  let {\n    targets,\n    vnode\n  } = _ref;\n  targets.forEach(target => {\n    vnode.context.$root.$emit(toggle_EVENT_TOGGLE, target);\n  });\n}; // Handle directive updates\n\n/* istanbul ignore next: not easy to test */\n\n\nconst handleUpdate = (el, binding, vnode) => {\n  if (!env[\"j\" /* isBrowser */]) {\n    return;\n  }\n\n  if (!loose_equal(getTargets(binding), el[BV_TOGGLE_TARGETS])) {\n    // Targets have changed, so update accordingly\n    unbindTargets(vnode, binding, toggle_listenTypes);\n    const targets = bindTargets(vnode, binding, toggle_listenTypes, handleTargets); // Update targets array to element\n\n    el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n    el[BV_TOGGLE_CONTROLS] = targets.join(' '); // ensure aria-controls is up to date\n\n    setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]); // Request a state update from targets so that we can ensure\n    // expanded state is correct\n\n    targets.forEach(target => {\n      vnode.context.$root.$emit(toggle_EVENT_STATE_REQUEST, target);\n    });\n  } // Ensure the collapse class and aria-* attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or it's contents\n\n\n  if (el[BV_TOGGLE_STATE] === true) {\n    addClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'true');\n  } else if (el[BV_TOGGLE_STATE] === false) {\n    removeClass(el, 'collapsed');\n    setAttr(el, 'aria-expanded', 'false');\n  }\n\n  setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n};\n/*\n * Export our directive\n */\n\n\nconst VBToggle = {\n  bind(el, binding, vnode) {\n    const targets = bindTargets(vnode, binding, toggle_listenTypes, handleTargets);\n\n    if (env[\"j\" /* isBrowser */] && vnode.context && targets.length > 0) {\n      // Add targets array to element\n      el[BV_TOGGLE_TARGETS] = targets; // Add aria attributes to element\n\n      el[BV_TOGGLE_CONTROLS] = targets.join(' '); // State is initially collapsed until we receive a state event\n\n      el[BV_TOGGLE_STATE] = false;\n      setAttr(el, 'aria-controls', el[BV_TOGGLE_CONTROLS]);\n      setAttr(el, 'aria-expanded', 'false'); // If element is not a button, we add `role=\"button\"` for accessibility\n\n      if (el.tagName !== 'BUTTON') {\n        setAttr(el, 'role', 'button');\n      } // Toggle state handler, stored on element\n\n\n      el[BV_TOGGLE] = function toggleDirectiveHandler(id, state) {\n        const targets = el[BV_TOGGLE_TARGETS] || [];\n\n        if (targets.indexOf(id) !== -1) {\n          // Set aria-expanded state\n          setAttr(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state\n\n          el[BV_TOGGLE_STATE] = state;\n\n          if (state) {\n            removeClass(el, 'collapsed');\n          } else {\n            addClass(el, 'collapsed');\n          }\n        }\n      }; // Listen for toggle state changes (public)\n\n\n      vnode.context.$root.$on(toggle_EVENT_STATE, el[BV_TOGGLE]); // Listen for toggle state sync (private)\n\n      vnode.context.$root.$on(toggle_EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    }\n  },\n\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n\n  unbind(el, binding, vnode)\n  /* istanbul ignore next */\n  {\n    unbindTargets(vnode, binding, toggle_listenTypes); // Remove our $root listener\n\n    if (el[BV_TOGGLE]) {\n      vnode.context.$root.$off(toggle_EVENT_STATE, el[BV_TOGGLE]);\n      vnode.context.$root.$off(toggle_EVENT_STATE_SYNC, el[BV_TOGGLE]);\n    } // Reset custom  props\n\n\n    resetProp(el, BV_TOGGLE);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_CONTROLS);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs\n\n    removeClass(el, 'collapsed');\n    removeAttr(el, 'aria-expanded');\n    removeAttr(el, 'aria-controls');\n    removeAttr(el, 'role');\n  }\n\n};\n/* harmony default export */ var toggle_toggle = (VBToggle);\n// CONCATENATED MODULE: ./src/components/collapse/index.js\n\n\n\nconst CollapsePlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BCollapse: BCollapse\n  },\n  directives: {\n    VBToggle: VBToggle\n  }\n});\n\n/* harmony default export */ var components_collapse = (CollapsePlugin);\n// CONCATENATED MODULE: ./src/utils/safe-types.js\n/**\n * SSR safe types\n */\n\nconst safe_types_w = env[\"i\" /* hasWindowSupport */] ? window : {};\nconst HTMLElement = safe_types_w.HTMLElement || Object;\n// EXTERNAL MODULE: ./node_modules/popper.js/dist/esm/popper.js\nvar popper = __webpack_require__(21);\n\n// CONCATENATED MODULE: ./src/utils/bv-event.class.js\n\n\nclass bv_event_class_BvEvent {\n  constructor(type) {\n    let eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Start by emulating native Event constructor.\n    if (!type) {\n      /* istanbul ignore next */\n      throw new TypeError(\"Failed to construct '\".concat(this.constructor.name, \"'. 1 argument required, \").concat(arguments.length, \" given.\"));\n    } // Assign defaults first, the eventInit,\n    // and the type last so it can't be overwritten.\n\n\n    Object(object[\"a\" /* assign */])(this, bv_event_class_BvEvent.Defaults, this.constructor.Defaults, eventInit, {\n      type\n    }); // Freeze some props as readonly, but leave them enumerable.\n\n    Object(object[\"d\" /* defineProperties */])(this, {\n      type: Object(object[\"l\" /* readonlyDescriptor */])(),\n      cancelable: Object(object[\"l\" /* readonlyDescriptor */])(),\n      nativeEvent: Object(object[\"l\" /* readonlyDescriptor */])(),\n      target: Object(object[\"l\" /* readonlyDescriptor */])(),\n      relatedTarget: Object(object[\"l\" /* readonlyDescriptor */])(),\n      vueTarget: Object(object[\"l\" /* readonlyDescriptor */])(),\n      componentId: Object(object[\"l\" /* readonlyDescriptor */])()\n    }); // Create a private variable using closure scoping.\n\n    let defaultPrevented = false; // Recreate preventDefault method. One way setter.\n\n    this.preventDefault = function preventDefault() {\n      if (this.cancelable) {\n        defaultPrevented = true;\n      }\n    }; // Create 'defaultPrevented' publicly accessible prop\n    // that can only be altered by the preventDefault method.\n\n\n    Object(object[\"e\" /* defineProperty */])(this, 'defaultPrevented', {\n      enumerable: true,\n\n      get() {\n        return defaultPrevented;\n      }\n\n    });\n  }\n\n  static get Defaults() {\n    return {\n      type: '',\n      cancelable: true,\n      nativeEvent: null,\n      target: null,\n      relatedTarget: null,\n      vueTarget: null,\n      componentId: null\n    };\n  }\n\n} // Named Exports\n\n\n // Default Export\n\n/* harmony default export */ var bv_event_class = (bv_event_class_BvEvent);\n// CONCATENATED MODULE: ./src/mixins/click-out.js\n // @vue/component\n\n/* harmony default export */ var click_out = ({\n  data() {\n    return {\n      listenForClickOut: false\n    };\n  },\n\n  watch: {\n    listenForClickOut(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n\n        if (newValue) {\n          eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n        }\n      }\n    }\n\n  },\n\n  beforeCreate() {\n    // Declare non-reactive properties\n    this.clickOutElement = null;\n    this.clickOutEventName = null;\n  },\n\n  mounted() {\n    if (!this.clickOutElement) {\n      this.clickOutElement = document;\n    }\n\n    if (!this.clickOutEventName) {\n      this.clickOutEventName = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';\n    }\n\n    if (this.listenForClickOut) {\n      eventOn(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n    }\n  },\n\n  beforeDestroy()\n  /* istanbul ignore next */\n  {\n    eventOff(this.clickOutElement, this.clickOutEventName, this._clickOutHandler, false);\n  },\n\n  methods: {\n    isClickOut(evt) {\n      return !contains(this.$el, evt.target);\n    },\n\n    _clickOutHandler(evt) {\n      if (this.clickOutHandler && this.isClickOut(evt)) {\n        this.clickOutHandler(evt);\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/mixins/focus-in.js\n // @vue/component\n\n/* harmony default export */ var focus_in = ({\n  data() {\n    return {\n      listenForFocusIn: false\n    };\n  },\n\n  watch: {\n    listenForFocusIn(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        eventOff(this.focusInElement, 'focusin', this._focusInHandler, false);\n\n        if (newValue) {\n          eventOn(this.focusInElement, 'focusin', this._focusInHandler, false);\n        }\n      }\n    }\n\n  },\n\n  beforeCreate() {\n    // Declare non-reactive properties\n    this.focusInElement = null;\n  },\n\n  mounted() {\n    if (!this.focusInElement) {\n      this.focusInElement = document;\n    }\n\n    if (this.listenForFocusIn) {\n      eventOn(this.focusInElement, 'focusin', this._focusInHandler, false);\n    }\n  },\n\n  beforeDestroy()\n  /* istanbul ignore next */\n  {\n    eventOff(this.focusInElement, 'focusin', this._focusInHandler, false);\n  },\n\n  methods: {\n    _focusInHandler(evt) {\n      if (this.focusInHandler) {\n        this.focusInHandler(evt);\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/mixins/dropdown.js\n\n\n\n\n\n\n\n\n\n // Return an Array of visible items\n\nfunction filterVisibles(els) {\n  return (els || []).filter(isVisible);\n} // Dropdown item CSS selectors\n\n\nconst Selector = {\n  FORM_CHILD: '.dropdown form',\n  ITEM_SELECTOR: ['.dropdown-item', '.b-dropdown-form'].map(selector => \"\".concat(selector, \":not(.disabled):not([disabled])\")).join(', ') // Popper attachment positions\n\n};\nconst AttachmentMap = {\n  // Dropup left align\n  TOP: 'top-start',\n  // Dropup right align\n  TOPEND: 'top-end',\n  // Dropdown left align\n  BOTTOM: 'bottom-start',\n  // Dropdown right align\n  BOTTOMEND: 'bottom-end',\n  // Dropright left align\n  RIGHT: 'right-start',\n  // Dropright right align\n  RIGHTEND: 'right-end',\n  // Dropleft left align\n  LEFT: 'left-start',\n  // Dropleft right align\n  LEFTEND: 'left-end' // @vue/component\n\n};\n/* harmony default export */ var mixins_dropdown = ({\n  mixins: [click_out, focus_in],\n\n  provide() {\n    return {\n      bvDropdown: this\n    };\n  },\n\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    text: {\n      // Button label\n      type: String,\n      default: ''\n    },\n    html: {\n      // Button label\n      type: String\n    },\n    dropup: {\n      // place on top if possible\n      type: Boolean,\n      default: false\n    },\n    dropright: {\n      // place right if possible\n      type: Boolean,\n      default: false\n    },\n    dropleft: {\n      // place left if possible\n      type: Boolean,\n      default: false\n    },\n    right: {\n      // Right align menu (default is left align)\n      type: Boolean,\n      default: false\n    },\n    offset: {\n      // Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)\n      type: [Number, String],\n      default: 0\n    },\n    noFlip: {\n      // Disable auto-flipping of menu from bottom<=>top\n      type: Boolean,\n      default: false\n    },\n    popperOpts: {\n      // type: Object,\n      default: () => {}\n    }\n  },\n\n  data() {\n    return {\n      visible: false,\n      inNavbar: null,\n      visibleChangePrevented: false\n    };\n  },\n\n  computed: {\n    toggler() {\n      const toggle = this.$refs.toggle;\n      return toggle ? toggle.$el || toggle : null;\n    },\n\n    directionClass() {\n      if (this.dropup) {\n        return 'dropup';\n      } else if (this.dropright) {\n        return 'dropright';\n      } else if (this.dropleft) {\n        return 'dropleft';\n      }\n\n      return '';\n    }\n\n  },\n  watch: {\n    visible(newValue, oldValue) {\n      if (this.visibleChangePrevented) {\n        this.visibleChangePrevented = false;\n        return;\n      }\n\n      if (newValue !== oldValue) {\n        const evtName = newValue ? 'show' : 'hide';\n        let bvEvt = new bv_event_class(evtName, {\n          cancelable: true,\n          vueTarget: this,\n          target: this.$refs.menu,\n          relatedTarget: null\n        });\n        this.emitEvent(bvEvt);\n\n        if (bvEvt.defaultPrevented) {\n          // Reset value and exit if canceled\n          this.visibleChangePrevented = true;\n          this.visible = oldValue; // Just in case a child element triggereded this.hide(true)\n\n          this.$off('hidden', this.focusToggler);\n          return;\n        }\n\n        if (evtName === 'show') {\n          this.showMenu();\n        } else {\n          this.hideMenu();\n        }\n      }\n    },\n\n    disabled(newValue, oldValue) {\n      if (newValue !== oldValue && newValue && this.visible) {\n        // Hide dropdown if disabled changes to true\n        this.visible = false;\n      }\n    }\n\n  },\n\n  created() {\n    // Create non-reactive property\n    this._popper = null;\n  },\n\n  deactivated()\n  /* istanbul ignore next: not easy to test */\n  {\n    // In case we are inside a `<keep-alive>`\n    this.visible = false;\n    this.whileOpenListen(false);\n    this.removePopper();\n  },\n\n  beforeDestroy() {\n    this.visible = false;\n    this.whileOpenListen(false);\n    this.removePopper();\n  },\n\n  methods: {\n    // Event emitter\n    emitEvent(bvEvt) {\n      const type = bvEvt.type;\n      this.$emit(type, bvEvt);\n      this.$root.$emit(\"bv::dropdown::\".concat(type), bvEvt);\n    },\n\n    showMenu() {\n      if (this.disabled) {\n        /* istanbul ignore next */\n        return;\n      } // Ensure other menus are closed\n\n\n      this.$root.$emit('bv::dropdown::shown', this); // Are we in a navbar ?\n\n      if (isNull(this.inNavbar) && this.isNav) {\n        // We should use an injection for this\n\n        /* istanbul ignore next */\n        this.inNavbar = Boolean(closest('.navbar', this.$el));\n      } // Disable totally Popper.js for Dropdown in Navbar\n\n\n      if (!this.inNavbar) {\n        if (typeof popper[\"a\" /* default */] === 'undefined') {\n          /* istanbul ignore next */\n          utils_warn('b-dropdown: Popper.js not found. Falling back to CSS positioning.');\n        } else {\n          // for dropup with alignment we use the parent element as popper container\n          let element = this.dropup && this.right || this.split ? this.$el : this.$refs.toggle; // Make sure we have a reference to an element, not a component!\n\n          element = element.$el || element; // Instantiate popper.js\n\n          this.createPopper(element);\n        }\n      }\n\n      this.whileOpenListen(true); // Wrap in nextTick to ensure menu is fully rendered/shown\n\n      this.$nextTick(() => {\n        // Focus on the menu container on show\n        this.focusMenu(); // Emit the shown event\n\n        this.$emit('shown');\n      });\n    },\n\n    hideMenu() {\n      this.whileOpenListen(false);\n      this.$root.$emit('bv::dropdown::hidden', this);\n      this.$emit('hidden');\n      this.removePopper();\n    },\n\n    createPopper(element) {\n      this.removePopper();\n      this._popper = new popper[\"a\" /* default */](element, this.$refs.menu, this.getPopperConfig());\n    },\n\n    removePopper() {\n      if (this._popper) {\n        // Ensure popper event listeners are removed cleanly\n        this._popper.destroy();\n      }\n\n      this._popper = null;\n    },\n\n    getPopperConfig() {\n      let placement = AttachmentMap.BOTTOM;\n\n      if (this.dropup) {\n        placement = this.right ? AttachmentMap.TOPEND : AttachmentMap.TOP;\n      } else if (this.dropright) {\n        placement = AttachmentMap.RIGHT;\n      } else if (this.dropleft) {\n        placement = AttachmentMap.LEFT;\n      } else if (this.right) {\n        placement = AttachmentMap.BOTTOMEND;\n      }\n\n      let popperConfig = {\n        placement,\n        modifiers: {\n          offset: {\n            offset: this.offset || 0\n          },\n          flip: {\n            enabled: !this.noFlip\n          }\n        }\n      };\n\n      if (this.boundary) {\n        popperConfig.modifiers.preventOverflow = {\n          boundariesElement: this.boundary\n        };\n      }\n\n      return Object(objectSpread[\"a\" /* default */])({}, popperConfig, this.popperOpts || {});\n    },\n\n    whileOpenListen(open) {\n      // turn listeners on/off while open\n      if (open) {\n        // If another dropdown is opened\n        this.$root.$on('bv::dropdown::shown', this.rootCloseListener); // Hide the dropdown when clicked outside\n\n        this.listenForClickOut = true; // Hide the dropdown when it loses focus\n\n        this.listenForFocusIn = true;\n      } else {\n        this.$root.$off('bv::dropdown::shown', this.rootCloseListener);\n        this.listenForClickOut = false;\n        this.listenForFocusIn = false;\n      }\n    },\n\n    rootCloseListener(vm) {\n      if (vm !== this) {\n        this.visible = false;\n      }\n    },\n\n    show() {\n      // Public method to show dropdown\n      if (this.disabled) {\n        return;\n      } // Wrap in a requestAnimationFrame to allow any previous\n      // click handling to occur first\n\n\n      requestAF(() => {\n        this.visible = true;\n      });\n    },\n\n    hide() {\n      let refocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // Public method to hide dropdown\n      if (this.disabled) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.visible = false;\n\n      if (refocus) {\n        // Child element is closing the dropdown on click\n        this.$once('hidden', this.focusToggler);\n      }\n    },\n\n    toggle(evt) {\n      // Called only by a button that toggles the menu\n      evt = evt || {};\n      const type = evt.type;\n      const key = evt.keyCode;\n\n      if (type !== 'click' && !(type === 'keydown' && (key === key_codes.ENTER || key === key_codes.SPACE || key === key_codes.DOWN))) {\n        // We only toggle on Click, Enter, Space, and Arrow Down\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (this.disabled) {\n        /* istanbul ignore next */\n        this.visible = false;\n        /* istanbul ignore next */\n\n        return;\n      }\n\n      this.$emit('toggle', evt);\n\n      if (evt.defaultPrevented) {\n        // Exit if canceled\n        return;\n      }\n\n      evt.preventDefault();\n      evt.stopPropagation(); // Toggle visibility\n\n      this.visible = !this.visible;\n    },\n\n    click(evt) {\n      // Called only in split button mode, for the split button\n      if (this.disabled) {\n        /* istanbul ignore next */\n        this.visible = false;\n        /* istanbul ignore next */\n\n        return;\n      }\n\n      this.$emit('click', evt);\n    },\n\n    onKeydown(evt) {\n      // Called from dropdown menu context\n      const key = evt.keyCode;\n\n      if (key === key_codes.ESC) {\n        // Close on ESC\n        this.onEsc(evt);\n      } else if (key === key_codes.DOWN) {\n        // Down Arrow\n        this.focusNext(evt, false);\n      } else if (key === key_codes.UP) {\n        // Up Arrow\n        this.focusNext(evt, true);\n      }\n    },\n\n    onEsc(evt) {\n      if (this.visible) {\n        this.visible = false;\n        evt.preventDefault();\n        evt.stopPropagation(); // Return focus to original trigger button\n\n        this.$once('hidden', this.focusToggler);\n      }\n    },\n\n    // Document click out listener\n    clickOutHandler() {\n      if (this.visible) {\n        this.visible = false;\n      }\n    },\n\n    // Document focusin listener\n    focusInHandler(evt) {\n      // If focus leaves dropdown, hide it\n      if (this.visible && !contains(this.$refs.menu, evt.target) && !contains(this.$refs.toggle, evt.target)) {\n        this.visible = false;\n      }\n    },\n\n    // Keyboard nav\n    focusNext(evt, up) {\n      if (!this.visible || evt && closest(Selector.FORM_CHILD, evt.target)) {\n        // Ignore key up/down on form elements\n\n        /* istanbul ignore next: should never happen */\n        return;\n      }\n\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.$nextTick(() => {\n        const items = this.getItems();\n\n        if (items.length < 1) {\n          /* istanbul ignore next: should never happen */\n          return;\n        }\n\n        let index = items.indexOf(evt.target);\n\n        if (up && index > 0) {\n          index--;\n        } else if (!up && index < items.length - 1) {\n          index++;\n        }\n\n        if (index < 0) {\n          /* istanbul ignore next: should never happen */\n          index = 0;\n        }\n\n        this.focusItem(index, items);\n      });\n    },\n\n    focusItem(idx, items) {\n      let el = items.find((el, i) => i === idx);\n\n      if (el && el.focus) {\n        el.focus();\n      }\n    },\n\n    getItems() {\n      // Get all items\n      return filterVisibles(selectAll(Selector.ITEM_SELECTOR, this.$refs.menu));\n    },\n\n    focusMenu() {\n      this.$refs.menu.focus && this.$refs.menu.focus();\n    },\n\n    focusToggler() {\n      let toggler = this.toggler;\n\n      if (toggler && toggler.focus) {\n        toggler.focus();\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.js\n\n\n\n\n\n\n\n\n\nconst dropdown_NAME = 'BDropdown';\nconst dropdown_props = {\n  toggleText: {\n    // This really should be toggleLabel\n    type: String,\n    default: () => getComponentConfig(dropdown_NAME, 'toggleText')\n  },\n  size: {\n    type: String,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: () => getComponentConfig(dropdown_NAME, 'variant')\n  },\n  menuClass: {\n    type: [String, Array],\n    default: null\n  },\n  toggleTag: {\n    type: String,\n    default: 'button'\n  },\n  toggleClass: {\n    type: [String, Array],\n    default: null\n  },\n  noCaret: {\n    type: Boolean,\n    default: false\n  },\n  split: {\n    type: Boolean,\n    default: false\n  },\n  splitHref: {\n    type: String // default: undefined\n\n  },\n  splitTo: {\n    type: [String, Object] // default: undefined\n\n  },\n  splitVariant: {\n    type: String,\n    default: () => getComponentConfig(dropdown_NAME, 'splitVariant')\n  },\n  role: {\n    type: String,\n    default: 'menu'\n  },\n  boundary: {\n    // String: `scrollParent`, `window` or `viewport`\n    // HTMLElement: HTML Element reference\n    type: [String, HTMLElement],\n    default: 'scrollParent'\n  } // @vue/component\n\n};\nconst BDropdown =\n/*#__PURE__*/\nvue.extend({\n  name: dropdown_NAME,\n  mixins: [mixins_id, mixins_dropdown, mixins_normalize_slot],\n  props: dropdown_props,\n  computed: {\n    dropdownClasses() {\n      return [this.directionClass, {\n        show: this.visible,\n        // Position `static` is needed to allow menu to \"breakout\" of the scrollParent boundaries\n        // when boundary is anything other than `scrollParent`\n        // See https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786\n        'position-static': this.boundary !== 'scrollParent' || !this.boundary\n      }];\n    },\n\n    menuClasses() {\n      return [this.menuClass, {\n        'dropdown-menu-right': this.right,\n        show: this.visible\n      }];\n    },\n\n    toggleClasses() {\n      return [this.toggleClass, {\n        'dropdown-toggle-split': this.split,\n        'dropdown-toggle-no-caret': this.noCaret && !this.split\n      }];\n    }\n\n  },\n\n  render(h) {\n    let split = h(false);\n    const buttonContent = this.normalizeSlot('button-content') || this.normalizeSlot('text') || this.html || stripTags(this.text);\n\n    if (this.split) {\n      const btnProps = {\n        disabled: this.disabled,\n        variant: this.splitVariant || this.variant,\n        size: this.size // We add these as needed due to router-link issues with defined property with undefined/null values\n\n      };\n\n      if (this.splitTo) {\n        btnProps.to = this.splitTo;\n      }\n\n      if (this.splitHref) {\n        btnProps.href = this.splitHref;\n      }\n\n      split = h(BButton, {\n        ref: 'button',\n        props: btnProps,\n        attrs: {\n          id: this.safeId('_BV_button_')\n        },\n        on: {\n          click: this.click\n        }\n      }, [buttonContent]);\n    }\n\n    const toggle = h(BButton, {\n      ref: 'toggle',\n      staticClass: 'dropdown-toggle',\n      class: this.toggleClasses,\n      props: {\n        variant: this.variant,\n        size: this.size,\n        disabled: this.disabled,\n        tag: this.toggleTag\n      },\n      attrs: {\n        id: this.safeId('_BV_toggle_'),\n        'aria-haspopup': 'true',\n        'aria-expanded': this.visible ? 'true' : 'false'\n      },\n      on: {\n        click: this.toggle,\n        // click\n        keydown: this.toggle // enter, space, down\n\n      }\n    }, [this.split ? h('span', {\n      class: ['sr-only']\n    }, [this.toggleText]) : buttonContent]);\n    const menu = h('ul', {\n      ref: 'menu',\n      staticClass: 'dropdown-menu',\n      class: this.menuClasses,\n      attrs: {\n        role: this.role,\n        tabindex: '-1',\n        'aria-labelledby': this.safeId(this.split ? '_BV_button_' : '_BV_toggle_')\n      },\n      on: {\n        keydown: this.onKeydown // up, down, esc\n\n      }\n    }, this.normalizeSlot('default', {\n      hide: this.hide\n    }));\n    return h('div', {\n      staticClass: 'dropdown btn-group b-dropdown',\n      class: this.dropdownClasses,\n      attrs: {\n        id: this.safeId()\n      }\n    }, [split, toggle, menu]);\n  }\n\n});\n/* harmony default export */ var dropdown_dropdown = (BDropdown);\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown-item.js\n\n\n\n\n\nconst dropdown_item_props = propsFactory(); // @vue/component\n\nconst BDropdownItem =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownItem',\n  mixins: [mixins_normalize_slot],\n  inheritAttrs: false,\n  inject: {\n    bvDropdown: {\n      default: null\n    }\n  },\n  props: Object(objectSpread[\"a\" /* default */])({}, dropdown_item_props, {\n    variant: {\n      type: String,\n      default: null\n    }\n  }),\n  methods: {\n    closeDropdown() {\n      // Close on next animation frame to allow <b-link> time to process\n      requestAF(() => {\n        if (this.bvDropdown) {\n          this.bvDropdown.hide(true);\n        }\n      });\n    },\n\n    onClick(evt) {\n      this.$emit('click', evt);\n      this.closeDropdown();\n    }\n\n  },\n\n  render(h) {\n    return h('li', [h(BLink, {\n      props: this.$props,\n      staticClass: 'dropdown-item',\n      class: {\n        [\"text-\".concat(this.variant)]: this.variant && !(this.active || this.disabled)\n      },\n      attrs: Object(objectSpread[\"a\" /* default */])({}, this.$attrs, {\n        role: 'menuitem'\n      }),\n      on: {\n        click: this.onClick\n      },\n      ref: 'item'\n    }, this.normalizeSlot('default'))]);\n  }\n\n});\n/* harmony default export */ var dropdown_item = (BDropdownItem);\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown-item-button.js\n\n\n\nconst dropdown_item_button_props = {\n  active: {\n    type: Boolean,\n    default: false\n  },\n  activeClass: {\n    type: String,\n    default: 'active'\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  variant: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nconst BDropdownItemButton =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownItemButton',\n  mixins: [mixins_normalize_slot],\n  inheritAttrs: false,\n  inject: {\n    bvDropdown: {\n      default: null\n    }\n  },\n  props: dropdown_item_button_props,\n  methods: {\n    closeDropdown() {\n      if (this.bvDropdown) {\n        this.bvDropdown.hide(true);\n      }\n    },\n\n    onClick(evt) {\n      this.$emit('click', evt);\n      this.closeDropdown();\n    }\n\n  },\n\n  render(h) {\n    return h('li', [h('button', {\n      staticClass: 'dropdown-item',\n      class: {\n        [this.activeClass]: this.active,\n        [\"text-\".concat(this.variant)]: this.variant && !(this.active || this.disabled)\n      },\n      attrs: Object(objectSpread[\"a\" /* default */])({}, this.$attrs, {\n        role: 'menuitem',\n        type: 'button',\n        disabled: this.disabled\n      }),\n      on: {\n        click: this.onClick\n      },\n      ref: 'button'\n    }, this.normalizeSlot('default'))]);\n  }\n\n});\n/* harmony default export */ var dropdown_item_button = (BDropdownItemButton);\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown-header.js\n\n\nconst dropdown_header_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'header'\n  },\n  variant: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nconst BDropdownHeader =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownHeader',\n  functional: true,\n  inheritAttrs: false,\n  props: dropdown_header_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h('li', [h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'dropdown-header',\n      class: {\n        [\"text-\".concat(props.variant)]: props.variant\n      },\n      attrs: {\n        id: props.id || null,\n        role: 'heading'\n      },\n      ref: 'header'\n    }), children)]);\n  }\n\n});\n/* harmony default export */ var dropdown_header = (BDropdownHeader);\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown-divider.js\n\n\nconst dropdown_divider_props = {\n  tag: {\n    type: String,\n    default: 'hr'\n  } // @vue/component\n\n};\nconst BDropdownDivider =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownDivider',\n  functional: true,\n  inheritAttrs: false,\n  props: dropdown_divider_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data\n    } = _ref;\n    return h('li', [h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'dropdown-divider',\n      attrs: {\n        role: 'separator',\n        'aria-orientation': 'horizontal'\n      },\n      ref: 'divider'\n    }))]);\n  }\n\n});\n/* harmony default export */ var dropdown_divider = (BDropdownDivider);\n// CONCATENATED MODULE: ./src/components/form/form.js\n\n\nconst form_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  inline: {\n    type: Boolean,\n    default: false\n  },\n  novalidate: {\n    type: Boolean,\n    default: false\n  },\n  validated: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BForm =\n/*#__PURE__*/\nvue.extend({\n  name: 'BForm',\n  functional: true,\n  props: form_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h('form', Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        'form-inline': props.inline,\n        'was-validated': props.validated\n      },\n      attrs: {\n        id: props.id,\n        novalidate: props.novalidate\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var form_form = (BForm);\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown-form.js\n\n\n\n\nconst BDropdownForm =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownForm',\n  functional: true,\n  inheritAttrs: false,\n  props: Object(objectSpread[\"a\" /* default */])({}, form_props, {\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  }),\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h('li', [h(BForm, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      ref: 'form',\n      staticClass: 'b-dropdown-form',\n      class: {\n        disabled: props.disabled\n      },\n      props,\n      attrs: {\n        disabled: props.disabled,\n        // Tab index of -1 for keyboard navigation\n        tabindex: props.disabled ? null : '-1'\n      }\n    }), children)]);\n  }\n\n});\n/* harmony default export */ var dropdown_form = (BDropdownForm);\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown-text.js\n\n // @vue/component\n\nconst BDropdownText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownText',\n  functional: true,\n  inheritAttrs: false,\n  props: {\n    tag: {\n      type: String,\n      default: 'p'\n    },\n    variant: {\n      type: String,\n      default: null\n    }\n  },\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h('li', [h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'b-dropdown-text',\n      class: {\n        [\"text-\".concat(props.variant)]: props.variant\n      },\n      props,\n      ref: 'text'\n    }), children)]);\n  }\n\n});\n/* harmony default export */ var dropdown_text = (BDropdownText);\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown-group.js\n\n\n\nconst dropdown_group_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  header: {\n    type: String,\n    default: null\n  },\n  headerTag: {\n    type: String,\n    default: 'header'\n  },\n  headerVariant: {\n    type: String,\n    default: null\n  },\n  headerClasses: {\n    type: [String, Array, Object],\n    default: null\n  },\n  ariaDescribedby: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nconst BDropdownGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BDropdownGroup',\n  functional: true,\n  inheritAttrs: false,\n  props: dropdown_group_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      slots,\n      scopedSlots\n    } = _ref;\n    const $slots = slots();\n    const $scopedSlots = scopedSlots || {};\n    let header;\n    let headerId = null;\n\n    if (hasNormalizedSlot('header', $scopedSlots, $slots) || props.header) {\n      headerId = props.id ? \"_bv_\".concat(props.id, \"_group_dd_header\") : null;\n      header = h(props.headerTag, {\n        staticClass: 'dropdown-header',\n        class: [props.headerClasses, {\n          [\"text-\".concat(props.variant)]: props.variant\n        }],\n        attrs: {\n          id: headerId,\n          role: 'heading'\n        }\n      }, normalize_slot_normalizeSlot('header', {}, $scopedSlots, $slots) || props.header);\n    }\n\n    const adb = [headerId, props.ariaDescribedBy].filter(Boolean).join(' ').trim();\n    return h('li', [header || h(false), h('ul', Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'list-unstyled',\n      attrs: {\n        id: props.id || null,\n        'aria-describedby': adb || null\n      }\n    }), normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots))]);\n  }\n\n});\n/* harmony default export */ var dropdown_group = (BDropdownGroup);\n// CONCATENATED MODULE: ./src/components/dropdown/index.js\n\n\n\n\n\n\n\n\n\nconst DropdownPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BDropdown: BDropdown,\n    BDd: BDropdown,\n    BDropdownItem: BDropdownItem,\n    BDdItem: BDropdownItem,\n    BDropdownItemButton: BDropdownItemButton,\n    BDropdownItemBtn: BDropdownItemButton,\n    BDdItemButton: BDropdownItemButton,\n    BDdItemBtn: BDropdownItemButton,\n    BDropdownHeader: BDropdownHeader,\n    BDdHeader: BDropdownHeader,\n    BDropdownDivider: BDropdownDivider,\n    BDdDivider: BDropdownDivider,\n    BDropdownForm: BDropdownForm,\n    BDdForm: BDropdownForm,\n    BDropdownText: BDropdownText,\n    BDdText: BDropdownText,\n    BDropdownGroup: BDropdownGroup,\n    BDdGroup: BDropdownGroup\n  }\n});\n\n/* harmony default export */ var components_dropdown = (DropdownPlugin);\n// CONCATENATED MODULE: ./src/components/embed/embed.js\n\n\n\nconst embed_props = {\n  type: {\n    type: String,\n    default: 'iframe',\n    validator: str => Object(array[\"a\" /* arrayIncludes */])(['iframe', 'embed', 'video', 'object', 'img', 'b-img', 'b-img-lazy'], str)\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  aspect: {\n    type: String,\n    default: '16by9'\n  } // @vue/component\n\n};\nconst BEmbed =\n/*#__PURE__*/\nvue.extend({\n  name: 'BEmbed',\n  functional: true,\n  props: embed_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, {\n      ref: data.ref,\n      staticClass: 'embed-responsive',\n      class: {\n        [\"embed-responsive-\".concat(props.aspect)]: Boolean(props.aspect)\n      }\n    }, [h(props.type, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      ref: '',\n      staticClass: 'embed-responsive-item'\n    }), children)]);\n  }\n\n});\n/* harmony default export */ var embed_embed = (BEmbed);\n// CONCATENATED MODULE: ./src/components/embed/index.js\n\n\nconst EmbedPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BEmbed: BEmbed\n  }\n});\n\n/* harmony default export */ var components_embed = (EmbedPlugin);\n// CONCATENATED MODULE: ./src/mixins/form-options.js\n\n\n // @vue/component\n\n/* harmony default export */ var form_options = ({\n  props: {\n    options: {\n      type: [Array, Object],\n\n      default() {\n        return [];\n      }\n\n    },\n    valueField: {\n      type: String,\n      default: 'value'\n    },\n    textField: {\n      type: String,\n      default: 'text'\n    },\n    htmlField: {\n      type: String,\n      default: 'html'\n    },\n    disabledField: {\n      type: String,\n      default: 'disabled'\n    }\n  },\n  computed: {\n    formOptions() {\n      let options = this.options;\n      const valueField = this.valueField;\n      const textField = this.textField;\n      const htmlField = this.htmlField;\n      const disabledField = this.disabledField;\n\n      if (Object(array[\"d\" /* isArray */])(options)) {\n        // Normalize flat-ish arrays to Array of Objects\n        return options.map(option => {\n          if (Object(object[\"i\" /* isPlainObject */])(option)) {\n            const value = option[valueField];\n            const text = String(option[textField]);\n            return {\n              value: isUndefined(value) ? text : value,\n              text: stripTags(text),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: option,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      } else {\n        // options is Object\n        // Normalize Objects to Array of Objects\n        return Object(object[\"j\" /* keys */])(options).map(key => {\n          let option = options[key] || {};\n\n          if (Object(object[\"i\" /* isPlainObject */])(option)) {\n            const value = option[valueField];\n            const text = option[textField];\n            return {\n              value: isUndefined(value) ? key : value,\n              text: isUndefined(text) ? stripTags(String(key)) : stripTags(String(text)),\n              html: option[htmlField],\n              disabled: Boolean(option[disabledField])\n            };\n          }\n\n          return {\n            value: key,\n            text: stripTags(String(option)),\n            disabled: false\n          };\n        });\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/form/form-datalist.js\n\n\n\n\n // @vue/component\n\nconst BFormDatalist =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormDatalist',\n  mixins: [form_options, mixins_normalize_slot],\n  props: {\n    id: {\n      type: String,\n      default: null,\n      required: true\n    }\n  },\n\n  render(h) {\n    const options = this.formOptions.map((option, index) => {\n      return h('option', {\n        key: \"option_\".concat(index, \"_opt\"),\n        attrs: {\n          disabled: option.disabled\n        },\n        domProps: Object(objectSpread[\"a\" /* default */])({}, htmlOrText(option.html, option.text), {\n          value: option.value\n        })\n      });\n    });\n    return h('datalist', {\n      attrs: {\n        id: this.id\n      }\n    }, [options, this.normalizeSlot('default')]);\n  }\n\n});\n/* harmony default export */ var form_datalist = (BFormDatalist);\n// CONCATENATED MODULE: ./src/components/form/form-text.js\n\n\n\nconst form_text_NAME = 'BFormText';\nconst form_text_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'small'\n  },\n  textVariant: {\n    type: String,\n    default: () => getComponentConfig(form_text_NAME, 'textVariant')\n  },\n  inline: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BFormText =\n/*#__PURE__*/\nvue.extend({\n  name: form_text_NAME,\n  functional: true,\n  props: form_text_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        'form-text': !props.inline,\n        [\"text-\".concat(props.textVariant)]: Boolean(props.textVariant)\n      },\n      attrs: {\n        id: props.id\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var form_text = (BFormText);\n// CONCATENATED MODULE: ./src/components/form/form-invalid-feedback.js\n\n\nconst form_invalid_feedback_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  tooltip: {\n    type: Boolean,\n    default: false\n  },\n  forceShow: {\n    type: Boolean,\n    default: false\n  },\n  state: {\n    type: [Boolean, String],\n    default: null\n  },\n  ariaLive: {\n    type: String,\n    default: null\n  },\n  role: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nconst BFormInvalidFeedback =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormInvalidFeedback',\n  functional: true,\n  props: form_invalid_feedback_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    const show = props.forceShow === true || props.state === false || props.state === 'invalid';\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        'invalid-feedback': !props.tooltip,\n        'invalid-tooltip': props.tooltip,\n        'd-block': show\n      },\n      attrs: {\n        id: props.id,\n        role: props.role,\n        'aria-live': props.ariaLive,\n        'aria-atomic': props.ariaLive ? 'true' : null\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var form_invalid_feedback = (BFormInvalidFeedback);\n// CONCATENATED MODULE: ./src/components/form/form-valid-feedback.js\n\n\nconst form_valid_feedback_props = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  tooltip: {\n    type: Boolean,\n    default: false\n  },\n  forceShow: {\n    type: Boolean,\n    default: false\n  },\n  state: {\n    type: [Boolean, String],\n    default: null\n  },\n  ariaLive: {\n    type: String,\n    default: null\n  },\n  role: {\n    type: String,\n    default: null\n  } // @vue/component\n\n};\nconst BFormValidFeedback =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormValidFeedback',\n  functional: true,\n  props: form_valid_feedback_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    const show = props.forceShow === true || props.state === true || props.state === 'valid';\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        'valid-feedback': !props.tooltip,\n        'valid-tooltip': props.tooltip,\n        'd-block': show\n      },\n      attrs: {\n        id: props.id,\n        role: props.role,\n        'aria-live': props.ariaLive,\n        'aria-atomic': props.ariaLive ? 'true' : null\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var form_valid_feedback = (BFormValidFeedback);\n// CONCATENATED MODULE: ./src/components/layout/form-row.js\n\n\nconst form_row_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nconst BFormRow =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormRow',\n  functional: true,\n  props: form_row_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'form-row'\n    }), children);\n  }\n\n});\n/* harmony default export */ var form_row = (BFormRow);\n// CONCATENATED MODULE: ./src/components/form/index.js\n\n\n\n\n\n\n\nconst FormPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BForm: BForm,\n    BFormDatalist: BFormDatalist,\n    BDatalist: BFormDatalist,\n    BFormText: BFormText,\n    BFormInvalidFeedback: BFormInvalidFeedback,\n    BFormFeedback: BFormInvalidFeedback,\n    BFormValidFeedback: BFormValidFeedback,\n    // Added here for convenience\n    BFormRow: BFormRow\n  }\n}); // BFormRow is not exported here as a named export, as it is exported by Layout\n\n\n/* harmony default export */ var components_form = (FormPlugin);\n// CONCATENATED MODULE: ./src/mixins/form-state.js\n/* Form control contextual state class computation\n *\n * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop\n * state can be one of five values:\n *  - true or 'valid' for is-valid\n *  - false or 'invalid' for is-invalid\n *  - null (or empty string) for no contextual state\n */\n// @vue/component\n/* harmony default export */ var form_state = ({\n  props: {\n    state: {\n      // true/'valid', false/'invalid', '',null\n      // The order must be String first, then Boolean!\n      type: [String, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    computedState() {\n      const state = this.state;\n\n      if (state === '') {\n        return null;\n      } else if (state === true || state === 'valid') {\n        return true;\n      } else if (state === false || state === 'invalid') {\n        return false;\n      }\n\n      return null;\n    },\n\n    stateClass() {\n      const state = this.computedState;\n\n      if (state === true) {\n        return 'is-valid';\n      } else if (state === false) {\n        return 'is-invalid';\n      }\n\n      return null;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/utils/suffix-prop-name.js\n\n/**\n * Suffix can be a falsey value so nothing is appended to string.\n * (helps when looping over props & some shouldn't change)\n * Use data last parameters to allow for currying.\n * @param {string} suffix\n * @param {string} str\n */\n\nconst suffixPropName = (suffix, str) => str + (suffix ? upper_first(suffix) : '');\n\n/* harmony default export */ var suffix_prop_name = (suffixPropName);\n// CONCATENATED MODULE: ./src/components/layout/col.js\n\n\n\n\n\n\n\n\n\n/**\n * Generates a prop object with a type of\n * [Boolean, String, Number]\n */\n\nfunction boolStrNum() {\n  return {\n    type: [Boolean, String, Number],\n    default: false\n  };\n}\n/**\n * Generates a prop object with a type of\n * [String, Number]\n */\n\n\nfunction strNum() {\n  return {\n    type: [String, Number],\n    default: null\n  };\n} // Memoized function for better performance on generating class names\n\n\nconst computeBkPtClass = utils_memoize(function computeBkPt(type, breakpoint, val) {\n  let className = type;\n\n  if (isUndefined(val) || isNull(val) || val === false) {\n    return undefined;\n  }\n\n  if (breakpoint) {\n    className += \"-\".concat(breakpoint);\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <b-col sm></b-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += \"-\".concat(val);\n  return className.toLowerCase();\n}); // Cached copy of the breakpoint prop names\n\nlet breakpointPropMap = Object(object[\"b\" /* create */])(null); // Lazy evaled props factory for BCol\n\nconst generateProps = () => {\n  // Grab the breakpoints from the cached config (exclude the '' (xs) breakpoint)\n  const breakpoints = getBreakpointsUpCached().filter(Boolean); // Supports classes like: .col-sm, .col-md-6, .col-lg-auto\n\n  const breakpointCol = breakpoints.reduce((propMap, breakpoint) => {\n    if (breakpoint) {\n      // We filter out the '' breakpoint (xs), as making a prop name ''\n      // would not work. The `cols` prop is used for `xs`\n      propMap[breakpoint] = boolStrNum();\n    }\n\n    return propMap;\n  }, Object(object[\"b\" /* create */])(null)); // Supports classes like: .offset-md-1, .offset-lg-12\n\n  const breakpointOffset = breakpoints.reduce((propMap, breakpoint) => {\n    propMap[suffix_prop_name(breakpoint, 'offset')] = strNum();\n    return propMap;\n  }, Object(object[\"b\" /* create */])(null)); // Supports classes like: .order-md-1, .order-lg-12\n\n  const breakpointOrder = breakpoints.reduce((propMap, breakpoint) => {\n    propMap[suffix_prop_name(breakpoint, 'order')] = strNum();\n    return propMap;\n  }, Object(object[\"b\" /* create */])(null)); // For loop doesn't need to check hasOwnProperty\n  // when using an object created from null\n\n  breakpointPropMap = Object(object[\"a\" /* assign */])(Object(object[\"b\" /* create */])(null), {\n    col: Object(object[\"j\" /* keys */])(breakpointCol),\n    offset: Object(object[\"j\" /* keys */])(breakpointOffset),\n    order: Object(object[\"j\" /* keys */])(breakpointOrder)\n  }); // Return the generated props\n\n  return Object(objectSpread[\"a\" /* default */])({\n    // Generic flexbox .col (xs)\n    col: {\n      type: Boolean,\n      default: false\n    },\n    // .col-[1-12]|auto  (xs)\n    cols: strNum()\n  }, breakpointCol, {\n    offset: strNum()\n  }, breakpointOffset, {\n    order: strNum()\n  }, breakpointOrder, {\n    // Flex alignment\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: str => Object(array[\"a\" /* arrayIncludes */])(['auto', 'start', 'end', 'center', 'baseline', 'stretch'], str)\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  });\n}; // We do not use Vue.extend here as that would evaluate the props\n// immediately, which we do not want to happen\n// @vue/component\n\n\nconst BCol = {\n  name: 'BCol',\n  functional: true,\n\n  get props() {\n    // Allow props to be lazy evaled on first access and\n    // then they become a non-getter afterwards.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\n    delete this.props; // eslint-disable-next-line no-return-assign\n\n    return this.props = generateProps();\n  },\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    const classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n    for (const type in breakpointPropMap) {\n      // Returns colSm, offset, offsetSm, orderMd, etc.\n      const keys = breakpointPropMap[type];\n\n      for (let i = 0; i < keys.length; i++) {\n        // computeBkPt(col, colSm => Sm, value=[String, Number, Boolean])\n        const c = computeBkPtClass(type, keys[i].replace(type, ''), props[keys[i]]); // If a class is returned, push it onto the array.\n\n        if (c) {\n          classList.push(c);\n        }\n      }\n    }\n\n    const hasColClasses = classList.some(className => /^col-/.test(className));\n    classList.push({\n      // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n      col: props.col || !hasColClasses && !props.cols,\n      [\"col-\".concat(props.cols)]: props.cols,\n      [\"offset-\".concat(props.offset)]: props.offset,\n      [\"order-\".concat(props.order)]: props.order,\n      [\"align-self-\".concat(props.alignSelf)]: props.alignSelf\n    });\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: classList\n    }), children);\n  }\n\n};\n/* harmony default export */ var col = (BCol);\n// CONCATENATED MODULE: ./src/components/form-group/form-group.js\n\n\n// Utils\n\n\n\n\n\n\n\n\n // Mixins\n\n\n\n // Sub components\n\n\n\n\n\n // Component name\n\nconst form_group_NAME = 'BFormGroup'; // Selector for finding first input in the form-group\n\nconst SELECTOR = 'input:not([disabled]),textarea:not([disabled]),select:not([disabled])';\nconst DEPRECATED_MSG = 'Props \"horizontal\" and \"breakpoint\" are deprecated. Use \"label-cols(-{breakpoint})\" props instead.'; // Render helper functions (here rather than polluting the instance with more methods)\n\nconst renderInvalidFeedback = (h, ctx) => {\n  let content = ctx.normalizeSlot('invalid-feedback') || ctx.invalidFeedback;\n  let invalidFeedback = h(false);\n\n  if (content) {\n    invalidFeedback = h(BFormInvalidFeedback, {\n      props: {\n        id: ctx.invalidFeedbackId,\n        // If state is explicitly false, always show the feedback\n        state: ctx.computedState,\n        tooltip: ctx.tooltip,\n        ariaLive: ctx.feedbackAriaLive,\n        role: ctx.feedbackAriaLive ? 'alert' : null\n      },\n      attrs: {\n        tabindex: content ? '-1' : null\n      }\n    }, [content]);\n  }\n\n  return invalidFeedback;\n};\n\nconst renderValidFeedback = (h, ctx) => {\n  const content = ctx.normalizeSlot('valid-feedback') || ctx.validFeedback;\n  let validFeedback = h(false);\n\n  if (content) {\n    validFeedback = h(BFormValidFeedback, {\n      props: {\n        id: ctx.validFeedbackId,\n        // If state is explicitly true, always show the feedback\n        state: ctx.computedState,\n        tooltip: ctx.tooltip,\n        ariaLive: ctx.feedbackAriaLive,\n        role: ctx.feedbackAriaLive ? 'alert' : null\n      },\n      attrs: {\n        tabindex: content ? '-1' : null\n      }\n    }, [content]);\n  }\n\n  return validFeedback;\n};\n\nconst renderHelpText = (h, ctx) => {\n  // Form help text (description)\n  const content = ctx.normalizeSlot('description') || ctx.description;\n  let description = h(false);\n\n  if (content) {\n    description = h(BFormText, {\n      attrs: {\n        id: ctx.descriptionId,\n        tabindex: content ? '-1' : null\n      }\n    }, [content]);\n  }\n\n  return description;\n};\n\nconst renderLabel = (h, ctx) => {\n  // Render label/legend inside b-col if necessary\n  const content = ctx.normalizeSlot('label') || ctx.label;\n  const labelFor = ctx.labelFor;\n  const isLegend = !labelFor;\n  const isHorizontal = ctx.isHorizontal;\n  const labelTag = isLegend ? 'legend' : 'label';\n\n  if (!content && !isHorizontal) {\n    return h(false);\n  } else if (ctx.labelSrOnly) {\n    let label = h(false);\n\n    if (content) {\n      label = h(labelTag, {\n        class: 'sr-only',\n        attrs: {\n          id: ctx.labelId,\n          for: labelFor || null\n        }\n      }, [content]);\n    }\n\n    return h(isHorizontal ? BCol : 'div', {\n      props: isHorizontal ? ctx.labelColProps : {}\n    }, [label]);\n  } else {\n    return h(isHorizontal ? BCol : labelTag, {\n      on: isLegend ? {\n        click: ctx.legendClick\n      } : {},\n      props: isHorizontal ? Object(objectSpread[\"a\" /* default */])({\n        tag: labelTag\n      }, ctx.labelColProps) : {},\n      attrs: {\n        id: ctx.labelId,\n        for: labelFor || null,\n        // We add a tab index to legend so that screen readers\n        // will properly read the aria-labelledby in IE.\n        tabindex: isLegend ? '-1' : null\n      },\n      class: [// When horizontal or if a legend is rendered, add col-form-label\n      // for correct sizing as Bootstrap has inconsistent font styling\n      // for legend in non-horizontal form-groups.\n      // See: https://github.com/twbs/bootstrap/issues/27805\n      isHorizontal || isLegend ? 'col-form-label' : '', // Emulate label padding top of 0 on legend when not horizontal\n      !isHorizontal && isLegend ? 'pt-0' : '', // If not horizontal and not a legend, we add d-block to label\n      // so that label-align works\n      !isHorizontal && !isLegend ? 'd-block' : '', ctx.labelSize ? \"col-form-label-\".concat(ctx.labelSize) : '', ctx.labelAlignClasses, ctx.labelClass]\n    }, [content]);\n  }\n}; // -- BFormGroup Prop factory -- used for lazy generation of props\n// Memoize this function to return cached values to\n// save time in computed functions\n\n\nconst makePropName = utils_memoize(function () {\n  let breakpoint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let prefix = arguments.length > 1 ? arguments[1] : undefined;\n  return \"\".concat(prefix).concat(upper_first(breakpoint));\n}); // BFormGroup prop generator for lazy generation of props\n\nconst form_group_generateProps = () => {\n  const BREAKPOINTS = getBreakpointsUpCached(); // Generate the labelCol breakpoint props\n\n  const bpLabelColProps = BREAKPOINTS.reduce((props, breakpoint) => {\n    // i.e. label-cols, label-cols-sm, label-cols-md, ...\n    props[makePropName(breakpoint, 'labelCols')] = {\n      type: [Number, String, Boolean],\n      default: breakpoint ? false : null\n    };\n    return props;\n  }, Object(object[\"b\" /* create */])(null)); // Generate the labelAlign breakpoint props\n\n  const bpLabelAlignProps = BREAKPOINTS.reduce((props, breakpoint) => {\n    // label-align, label-align-sm, label-align-md, ...\n    props[makePropName(breakpoint, 'labelAlign')] = {\n      type: String,\n      // left, right, center\n      default: null\n    };\n    return props;\n  }, Object(object[\"b\" /* create */])(null));\n  return Object(objectSpread[\"a\" /* default */])({\n    label: {\n      type: String,\n      default: null\n    },\n    labelFor: {\n      type: String,\n      default: null\n    },\n    labelSize: {\n      type: String,\n      default: null\n    },\n    labelSrOnly: {\n      type: Boolean,\n      default: false\n    }\n  }, bpLabelColProps, bpLabelAlignProps, {\n    labelClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    description: {\n      type: String,\n      default: null\n    },\n    invalidFeedback: {\n      type: String,\n      default: null\n    },\n    validFeedback: {\n      type: String,\n      default: null\n    },\n    tooltip: {\n      // Enable tooltip style feedback\n      type: Boolean,\n      default: false\n    },\n    feedbackAriaLive: {\n      type: String,\n      default: 'assertive'\n    },\n    validated: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    horizontal: {\n      // Deprecated\n      type: Boolean,\n      default: false,\n      deprecated: DEPRECATED_MSG\n    },\n    breakpoint: {\n      // Deprecated (ignored if horizontal is not true)\n      type: String,\n      default: null,\n      // legacy value 'sm',\n      deprecated: DEPRECATED_MSG\n    }\n  });\n}; // We do not use Vue.extend here as that would evaluate the props\n// immediately, which we do not want to happen\n// @vue/component\n\n\nconst BFormGroup = {\n  name: form_group_NAME,\n  mixins: [mixins_id, form_state, mixins_normalize_slot],\n\n  get props() {\n    // Allow props to be lazy evaled on first access and\n    // then they become a non-getter afterwards.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters\n    delete this.props; // eslint-disable-next-line no-return-assign\n\n    return this.props = form_group_generateProps();\n  },\n\n  computed: {\n    labelColProps() {\n      const props = {};\n      /* istanbul ignore next: deprecated */\n\n      if (this.horizontal) {\n        // Deprecated setting of horizontal/breakpoint props\n\n        /* istanbul ignore next */\n        utils_warn(\"b-form-group: \".concat(DEPRECATED_MSG)); // Legacy default is breakpoint sm and cols 3\n\n        const bp = this.breakpoint || getBreakpointsUpCached()[1]; // 'sm'\n\n        const cols = parseInt(this.labelCols, 10) || 3;\n        props[bp] = cols > 0 ? cols : 3; // We then return the single breakpoint prop for legacy compatibility\n\n        return props;\n      }\n\n      getBreakpointsUpCached().forEach(breakpoint => {\n        // Grab the value if the label column breakpoint prop\n        let propVal = this[makePropName(breakpoint, 'labelCols')]; // Handle case where the prop's value is an empty string,\n        // which represents true\n\n        propVal = propVal === '' ? true : propVal || false;\n\n        if (!isBoolean(propVal)) {\n          // Convert to column size to number\n          propVal = parseInt(propVal, 10) || 0; // Ensure column size is greater than 0\n\n          propVal = propVal > 0 ? propVal : false;\n        }\n\n        if (propVal) {\n          // Add the prop to the list of props to give to b-col\n          // If breakpoint is '' (labelCols=true), then we use the\n          // col prop to make equal width at xs\n          const bColPropName = breakpoint || (isBoolean(propVal) ? 'col' : 'cols'); // Add it to the props\n\n          props[bColPropName] = propVal;\n        }\n      });\n      return props;\n    },\n\n    labelAlignClasses() {\n      const classes = [];\n      getBreakpointsUpCached().forEach(breakpoint => {\n        // Assemble the label column breakpoint align classes\n        const propVal = this[makePropName(breakpoint, 'labelAlign')] || null;\n\n        if (propVal) {\n          const className = breakpoint ? \"text-\".concat(breakpoint, \"-\").concat(propVal) : \"text-\".concat(propVal);\n          classes.push(className);\n        }\n      });\n      return classes;\n    },\n\n    isHorizontal() {\n      // Determine if the resultant form-group will be rendered\n      // horizontal (meaning it has label-col breakpoints)\n      return Object(object[\"j\" /* keys */])(this.labelColProps).length > 0;\n    },\n\n    labelId() {\n      return this.$slots['label'] || this.label ? this.safeId('_BV_label_') : null;\n    },\n\n    descriptionId() {\n      return this.$slots['description'] || this.description ? this.safeId('_BV_description_') : null;\n    },\n\n    hasInvalidFeedback() {\n      // Used for computing aria-describedby\n      const $slots = this.$slots;\n      return this.computedState === false && ($slots['invalid-feedback'] || this.invalidFeedback);\n    },\n\n    invalidFeedbackId() {\n      return this.hasInvalidFeedback ? this.safeId('_BV_feedback_invalid_') : null;\n    },\n\n    hasValidFeedback() {\n      // Used for computing aria-describedby\n      return this.computedState === true && (this.$slots['valid-feedback'] || this.validFeedback);\n    },\n\n    validFeedbackId() {\n      return this.hasValidFeedback ? this.safeId('_BV_feedback_valid_') : null;\n    },\n\n    describedByIds() {\n      // Screen readers will read out any content linked to by aria-describedby\n      // even if the content is hidden with `display: none;`, hence we only include\n      // feedback IDs if the form-group's state is explicitly valid or invalid.\n      return [this.descriptionId, this.invalidFeedbackId, this.validFeedbackId].filter(Boolean).join(' ') || null;\n    }\n\n  },\n  watch: {\n    describedByIds(add, remove) {\n      if (add !== remove) {\n        this.setInputDescribedBy(add, remove);\n      }\n    }\n\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      // Set the aria-describedby IDs on the input specified by label-for\n      // We do this in a nextTick to ensure the children have finished rendering\n      this.setInputDescribedBy(this.describedByIds);\n    });\n  },\n\n  methods: {\n    legendClick(evt) {\n      if (this.labelFor) {\n        // Don't do anything if labelFor is set\n\n        /* istanbul ignore next: clicking a label will focus the input, so no need to test */\n        return;\n      }\n\n      const tagName = evt.target ? evt.target.tagName : '';\n\n      if (/^(input|select|textarea|label|button|a)$/i.test(tagName)) {\n        // If clicked an interactive element inside legend,\n        // we just let the default happen\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      const inputs = selectAll(SELECTOR, this.$refs.content).filter(isVisible);\n\n      if (inputs && inputs.length === 1 && inputs[0].focus) {\n        // if only a single input, focus it, emulating label behaviour\n        inputs[0].focus();\n      }\n    },\n\n    setInputDescribedBy(add, remove) {\n      // Sets the `aria-describedby` attribute on the input if label-for is set.\n      // Optionally accepts a string of IDs to remove as the second parameter.\n      // Preserves any aria-describedby value(s) user may have on input.\n      if (this.labelFor && env[\"j\" /* isBrowser */]) {\n        const input = dom_select(\"#\".concat(this.labelFor), this.$refs.content);\n\n        if (input) {\n          const adb = 'aria-describedby';\n          let ids = (getAttr(input, adb) || '').split(/\\s+/);\n          add = (add || '').split(/\\s+/);\n          remove = (remove || '').split(/\\s+/); // Update ID list, preserving any original IDs\n          // and ensuring the ID's are unique\n\n          ids = ids.filter(id => !Object(array[\"a\" /* arrayIncludes */])(remove, id)).concat(add).filter(Boolean);\n          ids = Object(object[\"j\" /* keys */])(ids.reduce((memo, id) => Object(objectSpread[\"a\" /* default */])({}, memo, {\n            [id]: true\n          }), {})).join(' ').trim();\n\n          if (ids) {\n            setAttr(input, adb, ids);\n          } else {\n            // No IDs, so remove the attribute\n            removeAttr(input, adb);\n          }\n        }\n      }\n    }\n\n  },\n\n  render(h) {\n    const isFieldset = !this.labelFor;\n    const isHorizontal = this.isHorizontal; // Generate the label\n\n    const label = renderLabel(h, this); // Generate the content\n\n    const content = h(isHorizontal ? BCol : 'div', {\n      ref: 'content',\n      attrs: {\n        tabindex: isFieldset ? '-1' : null,\n        role: isFieldset ? 'group' : null\n      }\n    }, [this.normalizeSlot('default') || h(false), renderInvalidFeedback(h, this), renderValidFeedback(h, this), renderHelpText(h, this)]); // Create the form-group\n\n    const data = {\n      staticClass: 'form-group',\n      class: [this.validated ? 'was-validated' : null, this.stateClass],\n      attrs: {\n        id: this.safeId(),\n        disabled: isFieldset ? this.disabled : null,\n        role: isFieldset ? null : 'group',\n        'aria-invalid': this.computedState === false ? 'true' : null,\n        // Only apply aria-labelledby if we are a horizontal fieldset\n        // as the legend is no longer a direct child of fieldset\n        'aria-labelledby': isFieldset && isHorizontal ? this.labelId : null,\n        // Only apply aria-describedby IDs if we are a fieldset\n        // as the input will have the IDs when not a fieldset\n        'aria-describedby': isFieldset ? this.describedByIds : null\n      } // Return it wrapped in a form-group\n      // Note: Fieldsets do not support adding `row` or `form-row` directly\n      // to them due to browser specific render issues, so we move the `form-row`\n      // to an inner wrapper div when horizontal and using a fieldset\n\n    };\n    return h(isFieldset ? 'fieldset' : isHorizontal ? BFormRow : 'div', data, isHorizontal && isFieldset ? [h(BFormRow, {}, [label, content])] : [label, content]);\n  }\n\n};\n/* harmony default export */ var form_group = (BFormGroup);\n// CONCATENATED MODULE: ./src/components/form-group/index.js\n\n\nconst FormGroupPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BFormGroup: BFormGroup,\n    BFormFieldset: BFormGroup\n  }\n});\n\n/* harmony default export */ var components_form_group = (FormGroupPlugin);\n// CONCATENATED MODULE: ./src/utils/loose-index-of.js\n\n\nconst looseIndexOf = (arr, val) => {\n  // Assumes that the first argument is an array\n  for (let i = 0; i < arr.length; i++) {\n    if (loose_equal(arr[i], val)) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/* harmony default export */ var loose_index_of = (looseIndexOf);\n// CONCATENATED MODULE: ./src/mixins/form.js\n\nconst form_SELECTOR = 'input, textarea, select'; // @vue/component\n\n/* harmony default export */ var mixins_form = ({\n  props: {\n    name: {\n      type: String // default: undefined\n\n    },\n    id: {\n      type: String // default: undefined\n\n    },\n    disabled: {\n      type: Boolean\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    form: {\n      type: String,\n      default: null\n    },\n    autofocus: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  mounted() {\n    this.handleAutofocus();\n  },\n\n  activated()\n  /* istanbul ignore next */\n  {\n    this.handleAutofocus();\n  },\n\n  methods: {\n    handleAutofocus() {\n      this.$nextTick(() => {\n        requestAF(() => {\n          let el = this.$el;\n\n          if (this.autofocus && isVisible(el)) {\n            if (!matches(el, form_SELECTOR)) {\n              el = dom_select(form_SELECTOR, el);\n            }\n\n            el && el.focus && el.focus();\n          }\n        });\n      });\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/mixins/form-radio-check.js\n // @vue/component\n\n/* harmony default export */ var form_radio_check = ({\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    value: {// Value when checked\n      // type: Object,\n      // default: undefined\n    },\n    checked: {// This is the v-model\n      // type: Object,\n      // default: undefined\n    },\n    inline: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    button: {\n      // Only applicable in standalone mode (non group)\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: null\n    },\n    ariaLabel: {\n      // Placed on the input if present.\n      type: String,\n      default: null\n    },\n    ariaLabelledby: {\n      // Placed on the input if present.\n      type: String,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      localChecked: this.isGroup ? this.bvGroup.checked : this.checked,\n      hasFocus: false\n    };\n  },\n\n  computed: {\n    computedLocalChecked: {\n      get() {\n        return this.isGroup ? this.bvGroup.localChecked : this.localChecked;\n      },\n\n      set(val) {\n        if (this.isGroup) {\n          this.bvGroup.localChecked = val;\n        } else {\n          this.localChecked = val;\n        }\n      }\n\n    },\n\n    isGroup() {\n      // Is this check/radio a child of check-group or radio-group?\n      return Boolean(this.bvGroup);\n    },\n\n    isBtnMode() {\n      // Support button style in single input mode\n      return this.isGroup ? this.bvGroup.buttons : this.button;\n    },\n\n    isPlain() {\n      return this.isBtnMode ? false : this.isGroup ? this.bvGroup.plain : this.plain;\n    },\n\n    isCustom() {\n      return this.isBtnMode ? false : !this.isPlain;\n    },\n\n    isSwitch() {\n      // Custom switch styling (checkboxes only)\n      return this.isBtnMode || this.isRadio || this.isPlain ? false : this.isGroup ? this.bvGroup.switches : this.switch;\n    },\n\n    isInline() {\n      return this.isGroup ? this.bvGroup.inline : this.inline;\n    },\n\n    isDisabled() {\n      // Child can be disabled while parent isn't, but is always disabled if group is\n      return this.isGroup ? this.bvGroup.disabled || this.disabled : this.disabled;\n    },\n\n    isRequired() {\n      // Required only works when a name is provided for the input(s)\n      // Child can only be required when parent is\n      // Groups will always have a name (either user supplied or auto generated)\n      return Boolean(this.getName && (this.isGroup ? this.bvGroup.required : this.required));\n    },\n\n    getName() {\n      // Group name preferred over local name\n      return (this.isGroup ? this.bvGroup.groupName : this.name) || null;\n    },\n\n    getForm() {\n      return (this.isGroup ? this.bvGroup.form : this.form) || null;\n    },\n\n    getSize() {\n      return (this.isGroup ? this.bvGroup.size : this.size) || '';\n    },\n\n    getState() {\n      return this.isGroup ? this.bvGroup.computedState : this.computedState;\n    },\n\n    getButtonVariant() {\n      // Local variant preferred over group variant\n      if (this.buttonVariant) {\n        return this.buttonVariant;\n      } else if (this.isGroup && this.bvGroup.buttonVariant) {\n        return this.bvGroup.buttonVariant;\n      } // default variant\n\n\n      return 'secondary';\n    },\n\n    buttonClasses() {\n      // Same for radio & check\n      return ['btn', \"btn-\".concat(this.getButtonVariant), this.getSize ? \"btn-\".concat(this.getSize) : '', // 'disabled' class makes \"button\" look disabled\n      this.isDisabled ? 'disabled' : '', // 'active' class makes \"button\" look pressed\n      this.isChecked ? 'active' : '', // Focus class makes button look focused\n      this.hasFocus ? 'focus' : ''];\n    }\n\n  },\n  watch: {\n    checked(newVal, oldVal) {\n      this.computedLocalChecked = newVal;\n    }\n\n  },\n  methods: {\n    handleFocus(evt) {\n      // When in buttons mode, we need to add 'focus' class to label when input focused\n      // As it is the hidden input which has actual focus\n      if (evt.target) {\n        if (evt.type === 'focus') {\n          this.hasFocus = true;\n        } else if (evt.type === 'blur') {\n          this.hasFocus = false;\n        }\n      }\n    },\n\n    // Convenience methods for focusing the input\n    focus() {\n      if (!this.isDisabled && this.$refs.input && this.$refs.input.focus) {\n        this.$refs.input.focus();\n      }\n    },\n\n    blur() {\n      if (!this.isDisabled && this.$refs.input && this.$refs.input.blur) {\n        this.$refs.input.blur();\n      }\n    }\n\n  },\n\n  render(h) {\n    const defaultSlot = this.normalizeSlot('default'); // Generate the input element\n\n    const on = {\n      change: this.handleChange\n    };\n\n    if (this.isBtnMode) {\n      // Handlers for focus styling when in button mode\n      on.focus = on.blur = this.handleFocus;\n    }\n\n    const input = h('input', {\n      ref: 'input',\n      key: 'input',\n      on,\n      class: {\n        'form-check-input': this.isPlain,\n        'custom-control-input': this.isCustom,\n        'is-valid': this.getState === true && !this.isBtnMode,\n        'is-invalid': this.getState === false && !this.isBtnMode,\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n        'position-static': this.isPlain && !defaultSlot\n      },\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: this.computedLocalChecked,\n        expression: 'computedLocalChecked'\n      }],\n      attrs: {\n        id: this.safeId(),\n        type: this.isRadio ? 'radio' : 'checkbox',\n        name: this.getName,\n        form: this.getForm,\n        disabled: this.isDisabled,\n        required: this.isRequired,\n        autocomplete: 'off',\n        'aria-required': this.isRequired || null,\n        'aria-label': this.ariaLabel || null,\n        'aria-labelledby': this.ariaLabelledby || null\n      },\n      domProps: {\n        value: this.value,\n        checked: this.isChecked\n      }\n    });\n\n    if (this.isBtnMode) {\n      // Button mode\n      let button = h('label', {\n        class: this.buttonClasses\n      }, [input, defaultSlot]);\n\n      if (!this.isGroup) {\n        // Standalone button mode, so wrap in 'btn-group-toggle'\n        // and flag it as inline-block to mimic regular buttons\n        button = h('div', {\n          class: ['btn-group-toggle', 'd-inline-block']\n        }, [button]);\n      }\n\n      return button;\n    } else {\n      // Not button mode\n      let label = h(false); // If no label content in plain mode we dont render the label\n      // https://github.com/bootstrap-vue/bootstrap-vue/issues/2911\n\n      if (!(this.isPlain && !defaultSlot)) {\n        label = h('label', {\n          class: {\n            'form-check-label': this.isPlain,\n            'custom-control-label': this.isCustom\n          },\n          attrs: {\n            for: this.safeId()\n          }\n        }, defaultSlot);\n      } // Wrap it in a div\n\n\n      return h('div', {\n        class: {\n          'form-check': this.isPlain,\n          'form-check-inline': this.isPlain && this.isInline,\n          'custom-control': this.isCustom,\n          'custom-control-inline': this.isCustom && this.isInline,\n          'custom-checkbox': this.isCustom && this.isCheck && !this.isSwitch,\n          'custom-switch': this.isSwitch,\n          'custom-radio': this.isCustom && this.isRadio,\n          // Temporary until Bootstrap v4 supports sizing (most likely in V5)\n          [\"form-control-\".concat(this.getSize)]: Boolean(this.getSize && !this.isBtnMode)\n        }\n      }, [input, label]);\n    }\n  }\n\n});\n// CONCATENATED MODULE: ./src/mixins/form-size.js\n// @vue/component\n/* harmony default export */ var form_size = ({\n  props: {\n    size: {\n      type: String,\n      default: null\n    }\n  },\n  computed: {\n    sizeFormClass() {\n      return [this.size ? \"form-control-\".concat(this.size) : null];\n    },\n\n    sizeBtnClass()\n    /* istanbul ignore next: don't think this is used */\n    {\n      return [this.size ? \"btn-\".concat(this.size) : null];\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/form-checkbox/form-checkbox.js\n\n\n\n\n\n\n\n\n // @vue/component\n\nconst BFormCheckbox =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormCheckbox',\n  mixins: [form_radio_check, // Includes shared render function\n  mixins_id, mixins_form, form_size, form_state],\n  inject: {\n    bvGroup: {\n      from: 'bvCheckGroup',\n      default: false\n    }\n  },\n  props: {\n    value: {\n      // type: [Object, Boolean],\n      default: true\n    },\n    uncheckedValue: {\n      // type: [Object, Boolean],\n      // Not applicable in multi-check mode\n      default: false\n    },\n    indeterminate: {\n      // Not applicable in multi-check mode\n      type: Boolean,\n      default: false\n    },\n    switch: {\n      // Custom switch styling\n      type: Boolean,\n      default: false\n    },\n    checked: {\n      // v-model\n      type: [String, Number, Object, Array, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    isChecked() {\n      const checked = this.computedLocalChecked;\n      const value = this.value;\n\n      if (Object(array[\"d\" /* isArray */])(checked)) {\n        return loose_index_of(checked, value) > -1;\n      } else {\n        return loose_equal(checked, value);\n      }\n    },\n\n    isRadio() {\n      return false;\n    },\n\n    isCheck() {\n      return true;\n    }\n\n  },\n  watch: {\n    computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n\n      if (this.$refs && this.$refs.input) {\n        this.$emit('update:indeterminate', this.$refs.input.indeterminate);\n      }\n    },\n\n    indeterminate(newVal, oldVal) {\n      this.setIndeterminate(newVal);\n    }\n\n  },\n\n  mounted() {\n    // Set initial indeterminate state\n    this.setIndeterminate(this.indeterminate);\n  },\n\n  methods: {\n    handleChange(_ref) {\n      let {\n        target: {\n          checked,\n          indeterminate\n        }\n      } = _ref;\n      let localChecked = this.computedLocalChecked;\n      const value = this.value;\n      const isArr = Object(array[\"d\" /* isArray */])(localChecked);\n      const uncheckedValue = isArr ? null : this.uncheckedValue; // Update computedLocalChecked\n\n      if (isArr) {\n        const idx = loose_index_of(localChecked, value);\n\n        if (checked && idx < 0) {\n          // Add value to array\n          localChecked = localChecked.concat(value);\n        } else if (!checked && idx > -1) {\n          // Remove value from array\n          localChecked = localChecked.slice(0, idx).concat(localChecked.slice(idx + 1));\n        }\n      } else {\n        localChecked = checked ? value : uncheckedValue;\n      }\n\n      this.computedLocalChecked = localChecked; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : uncheckedValue); // If this is a child of form-checkbox-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', localChecked);\n      }\n\n      this.$emit('update:indeterminate', indeterminate);\n    },\n\n    setIndeterminate(state) {\n      // Indeterminate only supported in single checkbox mode\n      if (Object(array[\"d\" /* isArray */])(this.computedLocalChecked)) {\n        state = false;\n      }\n\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.indeterminate = state; // Emit update event to prop\n\n        this.$emit('update:indeterminate', state);\n      }\n    }\n\n  }\n});\n/* harmony default export */ var form_checkbox = (BFormCheckbox);\n// CONCATENATED MODULE: ./src/components/form-radio/form-radio.js\n\n\n\n\n\n\n // @vue/component\n\nconst BFormRadio =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormRadio',\n  mixins: [mixins_id, form_radio_check, // Includes shared render function\n  mixins_form, form_size, form_state],\n  inject: {\n    bvGroup: {\n      from: 'bvRadioGroup',\n      default: false\n    }\n  },\n  props: {\n    checked: {\n      // v-model\n      type: [String, Object, Number, Boolean],\n      default: null\n    }\n  },\n  computed: {\n    // Radio Groups can only have a single value, so determining if checked is simple\n    isChecked() {\n      return loose_equal(this.value, this.computedLocalChecked);\n    },\n\n    // Flags for form-radio-check mixin\n    isRadio() {\n      return true;\n    },\n\n    isCheck() {\n      return false;\n    }\n\n  },\n  watch: {\n    // Radio Groups can only have a single value, so our watchers are simple\n    computedLocalChecked(newVal, oldVal) {\n      this.$emit('input', this.computedLocalChecked);\n    }\n\n  },\n  methods: {\n    handleChange(_ref) {\n      let {\n        target: {\n          checked\n        }\n      } = _ref;\n      const value = this.value;\n      this.computedLocalChecked = value; // Change is only emitted on user interaction\n\n      this.$emit('change', checked ? value : null); // If this is a child of form-radio-group, we emit a change event on it as well\n\n      if (this.isGroup) {\n        this.bvGroup.$emit('change', checked ? value : null);\n      }\n    }\n\n  }\n});\n/* harmony default export */ var form_radio = (BFormRadio);\n// CONCATENATED MODULE: ./src/mixins/form-radio-check-group.js\n\n\n\n // @vue/component\n\n/* harmony default export */ var form_radio_check_group = ({\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'checked',\n    event: 'input'\n  },\n  props: {\n    validated: {\n      type: Boolean,\n      default: false\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    stacked: {\n      type: Boolean,\n      default: false\n    },\n    plain: {\n      type: Boolean,\n      default: false\n    },\n    buttons: {\n      // Render as button style\n      type: Boolean,\n      default: false\n    },\n    buttonVariant: {\n      // Only applicable when rendered with button style\n      type: String,\n      default: 'secondary'\n    }\n  },\n  computed: {\n    inline() {\n      return !this.stacked;\n    },\n\n    groupName() {\n      // Checks/Radios tied to the same model must have the same name,\n      // especially for ARIA accessibility.\n      return this.name || this.safeId();\n    },\n\n    groupClasses() {\n      if (this.buttons) {\n        return ['btn-group-toggle', this.inline ? 'btn-group' : 'btn-group-vertical', this.size ? \"btn-group-\".concat(this.size) : '', this.validated ? \"was-validated\" : ''];\n      }\n\n      return [this.validated ? \"was-validated\" : ''];\n    },\n\n    computedAriaInvalid() {\n      const ariaInvalid = this.ariaInvalid;\n\n      if (ariaInvalid === true || ariaInvalid === 'true' || ariaInvalid === '') {\n        return 'true';\n      }\n\n      return this.computedState === false ? 'true' : null;\n    }\n\n  },\n  watch: {\n    checked(newVal, oldVal) {\n      this.localChecked = newVal;\n    },\n\n    localChecked(newVal, oldVal) {\n      this.$emit('input', newVal);\n    }\n\n  },\n\n  render(h) {\n    const inputs = this.formOptions.map((option, idx) => {\n      const uid = \"_BV_option_\".concat(idx, \"_\");\n      return h(this.isRadioGroup ? BFormRadio : BFormCheckbox, {\n        key: uid,\n        props: {\n          id: this.safeId(uid),\n          value: option.value,\n          // Individual radios or checks can be disabled in a group\n          disabled: option.disabled || false // We don't need to include these, since the input's will know they are inside here\n          // name: this.groupName,\n          // form: this.form || null,\n          // required: Boolean(this.name && this.required)\n\n        }\n      }, [h('span', {\n        domProps: htmlOrText(option.html, option.text)\n      })]);\n    });\n    return h('div', {\n      class: this.groupClasses,\n      attrs: {\n        id: this.safeId(),\n        role: this.isRadioGroup ? 'radiogroup' : 'group',\n        // Tabindex to allow group to be focused if needed\n        tabindex: '-1',\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      }\n    }, [this.normalizeSlot('first'), inputs, this.normalizeSlot('default')]);\n  }\n\n});\n// CONCATENATED MODULE: ./src/components/form-checkbox/form-checkbox-group.js\n\n\n\n\n\n\n\nconst form_checkbox_group_props = {\n  switches: {\n    // Custom switch styling\n    type: Boolean,\n    default: false\n  },\n  checked: {\n    type: [String, Number, Object, Array, Boolean],\n    default: null\n  } // @vue/component\n\n};\nconst BFormCheckboxGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormCheckboxGroup',\n  mixins: [mixins_id, mixins_form, form_radio_check_group, // Includes render function\n  form_options, form_size, form_state],\n\n  provide() {\n    return {\n      bvCheckGroup: this\n    };\n  },\n\n  props: form_checkbox_group_props,\n\n  data() {\n    return {\n      localChecked: this.checked || []\n    };\n  },\n\n  computed: {\n    isRadioGroup() {\n      return false;\n    }\n\n  }\n});\n/* harmony default export */ var form_checkbox_group = (BFormCheckboxGroup);\n// CONCATENATED MODULE: ./src/components/form-checkbox/index.js\n\n\n\nconst FormCheckboxPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BFormCheckbox: BFormCheckbox,\n    BCheckbox: BFormCheckbox,\n    BCheck: BFormCheckbox,\n    BFormCheckboxGroup: BFormCheckboxGroup,\n    BCheckboxGroup: BFormCheckboxGroup,\n    BCheckGroup: BFormCheckboxGroup\n  }\n});\n\n/* harmony default export */ var components_form_checkbox = (FormCheckboxPlugin);\n// CONCATENATED MODULE: ./src/components/form-radio/form-radio-group.js\n\n\n\n\n\n\n\nconst form_radio_group_props = {\n  checked: {\n    type: [String, Object, Number, Boolean],\n    default: null\n  } // @vue/component\n\n};\nconst BFormRadioGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormRadioGroup',\n  mixins: [mixins_id, mixins_form, form_radio_check_group, // Includes render function\n  form_options, form_size, form_state],\n\n  provide() {\n    return {\n      bvRadioGroup: this\n    };\n  },\n\n  props: form_radio_group_props,\n\n  data() {\n    return {\n      localChecked: this.checked\n    };\n  },\n\n  computed: {\n    isRadioGroup() {\n      return true;\n    }\n\n  }\n});\n/* harmony default export */ var form_radio_group = (BFormRadioGroup);\n// CONCATENATED MODULE: ./src/components/form-radio/index.js\n\n\n\nconst FormRadioPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BFormRadio: BFormRadio,\n    BRadio: BFormRadio,\n    BFormRadioGroup: BFormRadioGroup,\n    BRadioGroup: BFormRadioGroup\n  }\n});\n\n/* harmony default export */ var components_form_radio = (FormRadioPlugin);\n// CONCATENATED MODULE: ./src/mixins/form-text.js\n // @vue/component\n\n/* harmony default export */ var mixins_form_text = ({\n  model: {\n    prop: 'value',\n    event: 'update'\n  },\n  props: {\n    value: {\n      type: [String, Number],\n      default: ''\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    plaintext: {\n      type: Boolean,\n      default: false\n    },\n    autocomplete: {\n      type: String,\n      default: null\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    formatter: {\n      type: Function,\n      default: null\n    },\n    trim: {\n      type: Boolean,\n      default: false\n    },\n    number: {\n      type: Boolean,\n      default: false\n    },\n    lazyFormatter: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  data() {\n    return {\n      localValue: this.stringifyValue(this.value)\n    };\n  },\n\n  computed: {\n    computedClass() {\n      return [{\n        // Range input needs class custom-range\n        'custom-range': this.type === 'range',\n        // plaintext not supported by type=range or type=color\n        'form-control-plaintext': this.plaintext && this.type !== 'range' && this.type !== 'color',\n        // form-control not used by type=range or plaintext. Always used by type=color\n        'form-control': !this.plaintext && this.type !== 'range' || this.type === 'color'\n      }, this.sizeFormClass, this.stateClass];\n    },\n\n    computedAriaInvalid() {\n      if (!this.ariaInvalid || this.ariaInvalid === 'false') {\n        // this.ariaInvalid is null or false or 'false'\n        return this.computedState === false ? 'true' : null;\n      }\n\n      if (this.ariaInvalid === true) {\n        // User wants explicit aria-invalid=true\n        return 'true';\n      } // Most likely a string value (which could be the string 'true')\n\n\n      return this.ariaInvalid;\n    }\n\n  },\n  watch: {\n    value(newVal) {\n      if (newVal !== this.localValue) {\n        this.localValue = this.stringifyValue(newVal);\n      }\n    }\n\n  },\n\n  mounted() {\n    const value = this.stringifyValue(this.value);\n\n    if (value !== this.localValue) {\n      /* istanbul ignore next */\n      this.localValue = value;\n    }\n  },\n\n  methods: {\n    stringifyValue(value) {\n      return isUndefined(value) || isNull(value) ? '' : String(value);\n    },\n\n    getFormatted(value, evt) {\n      let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      value = this.stringifyValue(value);\n\n      if ((!this.lazyFormatter || force) && isFunction(this.formatter)) {\n        value = this.formatter(value, evt);\n      }\n\n      return value;\n    },\n\n    updateValue(value) {\n      value = this.stringifyValue(value);\n\n      if (value !== this.localValue) {\n        // Keep the input set to the value before modifiers\n        this.localValue = value;\n\n        if (this.number) {\n          // Emulate `.number` modifier behaviour\n          const num = parseFloat(value);\n          value = isNaN(num) ? value : num;\n        } else if (this.trim) {\n          // Emulate `.trim` modifier behaviour\n          value = value.trim();\n        } // Update the v-model\n\n\n        this.$emit('update', value);\n      } else if (this.$refs.input && value !== this.$refs.input.value) {\n        // When the `localValue` hasn't changed but the actual input value\n        // is out of sync, make sure to change it to the given one.\n        // Usually casued by browser autocomplete and how it triggers the\n        // change or input event, or depending on the formatter function.\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/2657\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/3498\n\n        /* istanbul ignore next: hard to test */\n        this.$refs.input.value = value;\n      }\n    },\n\n    onInput(evt) {\n      // `evt.target.composing` is set by Vue\n      // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n\n      /* istanbul ignore if: hard to test composition events */\n      if (evt.target.composing) {\n        return;\n      }\n\n      const formatted = this.getFormatted(evt.target.value, evt); // Exit when the `formatter` function strictly returned `false`\n      // or prevented the input event\n\n      if (formatted === false || evt.defaultPrevented) {\n        /* istanbul ignore next */\n        evt.preventDefault();\n        return;\n      }\n\n      this.updateValue(formatted);\n      this.$emit('input', formatted);\n    },\n\n    onChange(evt) {\n      // `evt.target.composing` is set by Vue\n      // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n\n      /* istanbul ignore if: hard to test composition events */\n      if (evt.target.composing) {\n        return;\n      }\n\n      const formatted = this.getFormatted(evt.target.value, evt); // Exit when the `formatter` function strictly returned `false`\n      // or prevented the input event\n\n      if (formatted === false || evt.defaultPrevented) {\n        /* istanbul ignore next */\n        evt.preventDefault();\n        return;\n      }\n\n      this.updateValue(formatted);\n      this.$emit('change', formatted);\n    },\n\n    onBlur(evt) {\n      // Lazy formatter\n      if (this.lazyFormatter) {\n        const formatted = this.getFormatted(evt.target.value, evt, true); // Exit when the `formatter` function strictly returned `false`\n\n        if (formatted === false) {\n          return;\n        }\n\n        this.updateValue(formatted);\n      } // Emit native blur event\n\n\n      this.$emit('blur', evt);\n    },\n\n    focus() {\n      // For external handler that may want a focus method\n      if (!this.disabled) {\n        this.$el.focus();\n      }\n    },\n\n    blur() {\n      // For external handler that may want a blur method\n      if (!this.disabled) {\n        this.$el.blur();\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/mixins/form-selection.js\n// @vue/component\n/* harmony default export */ var form_selection = ({\n  computed: {\n    selectionStart: {\n      // Expose selectionStart for formatters, etc\n      cache: false,\n\n      get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.selectionStart;\n      },\n\n      set(val)\n      /* istanbul ignore next */\n      {\n        this.$refs.input.selectionStart = val;\n      }\n\n    },\n    selectionEnd: {\n      // Expose selectionEnd for formatters, etc\n      cache: false,\n\n      get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.selectionEnd;\n      },\n\n      set(val)\n      /* istanbul ignore next */\n      {\n        this.$refs.input.selectionEnd = val;\n      }\n\n    },\n    selectionDirection: {\n      // Expose selectionDirection for formatters, etc\n      cache: false,\n\n      get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.selectionDirection;\n      },\n\n      set(val)\n      /* istanbul ignore next */\n      {\n        this.$refs.input.selectionDirection = val;\n      }\n\n    }\n  },\n  methods: {\n    select()\n    /* istanbul ignore next */\n    {\n      // For external handler that may want a select() method\n      this.$refs.input.select(...arguments);\n    },\n\n    setSelectionRange()\n    /* istanbul ignore next */\n    {\n      // For external handler that may want a setSelectionRange(a,b,c) method\n      this.$refs.input.setSelectionRange(...arguments);\n    },\n\n    setRangeText()\n    /* istanbul ignore next */\n    {\n      // For external handler that may want a setRangeText(a,b,c) method\n      this.$refs.input.setRangeText(...arguments);\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/mixins/form-validity.js\n// @vue/component\n/* harmony default export */ var form_validity = ({\n  computed: {\n    validity: {\n      // Expose validity property\n      cache: false,\n\n      get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.validity;\n      }\n\n    },\n    validationMessage: {\n      // Expose validationMessage property\n      cache: false,\n\n      get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.validationMessage;\n      }\n\n    },\n    willValidate: {\n      // Expose willValidate property\n      cache: false,\n\n      get()\n      /* istanbul ignore next */\n      {\n        return this.$refs.input.willValidate;\n      }\n\n    }\n  },\n  methods: {\n    setCustomValidity()\n    /* istanbul ignore next */\n    {\n      // For external handler that may want a setCustomValidity(...) method\n      return this.$refs.input.setCustomValidity(...arguments);\n    },\n\n    checkValidity()\n    /* istanbul ignore next */\n    {\n      // For external handler that may want a checkValidity(...) method\n      return this.$refs.input.checkValidity(...arguments);\n    },\n\n    reportValidity()\n    /* istanbul ignore next */\n    {\n      // For external handler that may want a reportValidity(...) method\n      return this.$refs.input.reportValidity(...arguments);\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/form-input/form-input.js\n\n\n\n\n\n\n\n\n\n\n // Valid supported input types\n\nconst TYPES = ['text', 'password', 'email', 'number', 'url', 'tel', 'search', 'range', 'color', 'date', 'time', 'datetime', 'datetime-local', 'month', 'week']; // @vue/component\n\nconst BFormInput =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormInput',\n  mixins: [mixins_id, mixins_form, form_size, form_state, mixins_form_text, form_selection, form_validity],\n  props: {\n    // value prop defined in form-text mixin\n    // value: { },\n    type: {\n      type: String,\n      default: 'text',\n      validator: type => Object(array[\"a\" /* arrayIncludes */])(TYPES, type)\n    },\n    noWheel: {\n      // Disable mousewheel to prevent wheel from changing values (i.e. number/date).\n      type: Boolean,\n      default: false\n    },\n    min: {\n      type: [String, Number],\n      default: null\n    },\n    max: {\n      type: [String, Number],\n      default: null\n    },\n    step: {\n      type: [String, Number],\n      default: null\n    },\n    list: {\n      type: String,\n      default: null\n    }\n  },\n  computed: {\n    localType() {\n      // We only allow certain types\n      return Object(array[\"a\" /* arrayIncludes */])(TYPES, this.type) ? this.type : 'text';\n    }\n\n  },\n  watch: {\n    noWheel(newVal) {\n      this.setWheelStopper(newVal);\n    }\n\n  },\n\n  mounted() {\n    this.setWheelStopper(this.noWheel);\n  },\n\n  deactivated() {\n    // Turn off listeners when keep-alive component deactivated\n\n    /* istanbul ignore next */\n    this.setWheelStopper(false);\n  },\n\n  activated() {\n    // Turn on listeners (if no-wheel) when keep-alive component activated\n\n    /* istanbul ignore next */\n    this.setWheelStopper(this.noWheel);\n  },\n\n  beforeDestroy() {\n    /* istanbul ignore next */\n    this.setWheelStopper(false);\n  },\n\n  methods: {\n    setWheelStopper(on) {\n      const input = this.$el; // We use native events, so that we don't interfere with propgation\n\n      if (on) {\n        eventOn(input, 'focus', this.onWheelFocus);\n        eventOn(input, 'blur', this.onWheelBlur);\n      } else {\n        eventOff(input, 'focus', this.onWheelFocus);\n        eventOff(input, 'blur', this.onWheelBlur);\n        eventOff(document, 'wheel', this.stopWheel);\n      }\n    },\n\n    onWheelFocus(evt) {\n      eventOn(document, 'wheel', this.stopWheel);\n    },\n\n    onWheelBlur(evt) {\n      eventOff(document, 'wheel', this.stopWheel);\n    },\n\n    stopWheel(evt) {\n      evt.preventDefault();\n      this.$el.blur();\n    }\n\n  },\n\n  render(h) {\n    var self = this;\n    return h('input', {\n      ref: 'input',\n      class: self.computedClass,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: self.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: self.safeId(),\n        name: self.name,\n        form: self.form || null,\n        type: self.localType,\n        disabled: self.disabled,\n        placeholder: self.placeholder,\n        required: self.required,\n        autocomplete: self.autocomplete || null,\n        readonly: self.readonly || self.plaintext,\n        min: self.min,\n        max: self.max,\n        step: self.step,\n        list: self.localType !== 'password' ? self.list : null,\n        'aria-required': self.required ? 'true' : null,\n        'aria-invalid': self.computedAriaInvalid\n      },\n      domProps: {\n        value: self.localValue\n      },\n      on: Object(objectSpread[\"a\" /* default */])({}, self.$listeners, {\n        input: self.onInput,\n        change: self.onChange,\n        blur: self.onBlur\n      })\n    });\n  }\n\n});\n/* harmony default export */ var form_input = (BFormInput);\n// CONCATENATED MODULE: ./src/components/form-input/index.js\n\n\nconst FormInputPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BFormInput: BFormInput,\n    BInput: BFormInput\n  }\n});\n\n/* harmony default export */ var components_form_input = (FormInputPlugin);\n// CONCATENATED MODULE: ./src/components/form-textarea/form-textarea.js\n\n\n\n\n\n\n\n\n\n\n // @vue/component\n\nconst BFormTextarea =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormTextarea',\n  mixins: [mixins_id, mixins_form, form_size, form_state, mixins_form_text, form_selection, form_validity],\n  props: {\n    rows: {\n      type: [Number, String],\n      default: 2\n    },\n    maxRows: {\n      type: [Number, String],\n      default: null\n    },\n    wrap: {\n      // 'soft', 'hard' or 'off'. Browser default is 'soft'\n      type: String,\n      default: 'soft'\n    },\n    noResize: {\n      // Disable the resize handle of textarea\n      type: Boolean,\n      default: false\n    },\n    noAutoShrink: {\n      // When in auto resize mode, disable shrinking to content height\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      dontResize: true,\n      heightInPx: null\n    };\n  },\n\n  computed: {\n    computedStyle() {\n      const styles = {\n        // Setting `noResize` to true will disable the ability for the user to\n        // manually resize the textarea. We also disable when in auto height mode\n        resize: !this.computedRows || this.noResize ? 'none' : null\n      };\n\n      if (!this.computedRows) {\n        // Conditionaly set the computed CSS height when auto rows/height is enabled.\n        // We avoid setting the style to null, which can override user manual resize handle.\n        styles.height = this.heightInPx; // We always add a vertical scrollbar to the textarea when auto-height is\n        // enabled so that the computed height calcaultion returns a stable value.\n\n        styles.overflowY = 'scroll';\n      }\n\n      return styles;\n    },\n\n    computedMinRows() {\n      // Ensure rows is at least 2 and positive (2 is the native textarea value).\n      // A value of 1 can cause issues in some browsers, and most browsers only support\n      // 2 as the smallest value.\n      return Math.max(parseInt(this.rows, 10) || 2, 2);\n    },\n\n    computedMaxRows() {\n      return Math.max(this.computedMinRows, parseInt(this.maxRows, 10) || 0);\n    },\n\n    computedRows() {\n      // This is used to set the attribute 'rows' on the textarea.\n      // If auto-height is enabled, then we return null as we use CSS to control height.\n      return this.computedMinRows === this.computedMaxRows ? this.computedMinRows : null;\n    }\n\n  },\n  watch: {\n    dontResize(newVal, oldval) {\n      if (!newVal) {\n        this.setHeight();\n      }\n    },\n\n    localValue(newVal, oldVal) {\n      this.setHeight();\n    }\n\n  },\n\n  mounted() {\n    // Enable opt-in resizing once mounted\n    this.$nextTick(() => {\n      this.dontResize = false;\n    });\n  },\n\n  activated() {\n    // If we are being re-activated in <keep-alive>, enable opt-in resizing\n    this.$nextTick(() => {\n      this.dontResize = false;\n    });\n  },\n\n  deactivated() {\n    // If we are in a deactivated <keep-alive>, disable opt-in resizing\n    this.dontResize = true;\n  },\n\n  beforeDestroy() {\n    /* istanbul ignore next */\n    this.dontResize = true;\n  },\n\n  methods: {\n    setHeight() {\n      this.$nextTick(() => {\n        this.heightInPx = this.computeHeight();\n      });\n    },\n\n    computeHeight()\n    /* istanbul ignore next: can't test getComputedStyle in JSDOM */\n    {\n      if (this.$isServer || !isNull(this.computedRows)) {\n        return null;\n      }\n\n      const el = this.$el; // Element must be visible (not hidden) and in document.\n      // Must be checked after above checks\n\n      if (!isVisible(el)) {\n        return null;\n      } // Get current computed styles\n\n\n      const computedStyle = getCS(el); // Height of one line of text in px\n\n      const lineHeight = parseFloat(computedStyle.lineHeight); // Calculate height of border and padding\n\n      const border = (parseFloat(computedStyle.borderTopWidth) || 0) + (parseFloat(computedStyle.borderBottomWidth) || 0);\n      const padding = (parseFloat(computedStyle.paddingTop) || 0) + (parseFloat(computedStyle.paddingBottom) || 0); // Calculate offset\n\n      const offset = border + padding; // Minimum height for min rows (which must be 2 rows or greater for cross-browser support)\n\n      const minHeight = lineHeight * this.computedMinRows + offset; // Get the current style height (with `px` units)\n\n      const oldHeight = el.style.height || computedStyle.height; // Probe scrollHeight by temporarily changing the height to `auto`\n\n      el.style.height = 'auto';\n      const scrollHeight = el.scrollHeight; // Place the original old height back on the element, just in case this computedProp\n      // returns the same value as before.\n\n      el.style.height = oldHeight; // Calculate content height in \"rows\" (scrollHeight includes padding but not border)\n\n      const contentRows = Math.max((scrollHeight - padding) / lineHeight, 2); // Calculate number of rows to display (limited within min/max rows)\n\n      const rows = Math.min(Math.max(contentRows, this.computedMinRows), this.computedMaxRows); // Calculate the required height of the textarea including border and padding (in pixels)\n\n      const height = Math.max(Math.ceil(rows * lineHeight + offset), minHeight); // Computed height remains the larger of oldHeight and new height,\n      // when height is in `sticky` mode (prop `no-auto-shrink` is true)\n\n      if (this.noAutoShrink && (parseFloat(oldHeight) || 0) > height) {\n        return oldHeight;\n      } // Return the new computed CSS height in px units\n\n\n      return \"\".concat(height, \"px\");\n    }\n\n  },\n\n  render(h) {\n    // Using self instead of this helps reduce code size during minification\n    const self = this;\n    return h('textarea', {\n      ref: 'input',\n      class: self.computedClass,\n      style: self.computedStyle,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: self.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: self.safeId(),\n        name: self.name,\n        form: self.form || null,\n        disabled: self.disabled,\n        placeholder: self.placeholder,\n        required: self.required,\n        autocomplete: self.autocomplete || null,\n        readonly: self.readonly || self.plaintext,\n        rows: self.computedRows,\n        wrap: self.wrap || null,\n        'aria-required': self.required ? 'true' : null,\n        'aria-invalid': self.computedAriaInvalid\n      },\n      domProps: {\n        value: self.localValue\n      },\n      on: Object(objectSpread[\"a\" /* default */])({}, self.$listeners, {\n        input: self.onInput,\n        change: self.onChange,\n        blur: self.onBlur\n      })\n    });\n  }\n\n});\n/* harmony default export */ var form_textarea = (BFormTextarea);\n// CONCATENATED MODULE: ./src/components/form-textarea/index.js\n\n\nconst FormTextareaPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BFormTextarea: BFormTextarea,\n    BTextarea: BFormTextarea\n  }\n});\n\n/* harmony default export */ var components_form_textarea = (FormTextareaPlugin);\n// CONCATENATED MODULE: ./src/mixins/form-custom.js\n// @vue/component\n/* harmony default export */ var form_custom = ({\n  props: {\n    plain: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    custom() {\n      return !this.plain;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/form-file/form-file.js\n\n\n\n\n\n\n\n\n\n\nconst form_file_NAME = 'BFormFile'; // @vue/component\n\nconst BFormFile =\n/*#__PURE__*/\nvue.extend({\n  name: form_file_NAME,\n  mixins: [mixins_id, mixins_form, form_state, form_custom, mixins_normalize_slot],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    value: {\n      // type: Object,\n      default: null\n    },\n    accept: {\n      type: String,\n      default: ''\n    },\n    // Instruct input to capture from camera\n    capture: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: () => getComponentConfig(form_file_NAME, 'placeholder')\n    },\n    browseText: {\n      type: String,\n      default: () => getComponentConfig(form_file_NAME, 'browseText')\n    },\n    dropPlaceholder: {\n      type: String,\n      default: () => getComponentConfig(form_file_NAME, 'dropPlaceholder')\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    directory: {\n      type: Boolean,\n      default: false\n    },\n    noTraverse: {\n      type: Boolean,\n      default: false\n    },\n    noDrop: {\n      type: Boolean,\n      default: false\n    },\n    fileNameFormatter: {\n      type: Function,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      selectedFile: null,\n      dragging: false,\n      hasFocus: false\n    };\n  },\n\n  computed: {\n    selectLabel() {\n      // Draging active\n      if (this.dragging && this.dropPlaceholder) {\n        return this.dropPlaceholder;\n      } // No file chosen\n\n\n      if (!this.selectedFile || this.selectedFile.length === 0) {\n        return this.placeholder;\n      } // Convert selectedFile to an array (if not already one)\n\n\n      const files = Object(array[\"b\" /* concat */])(this.selectedFile).filter(Boolean);\n\n      if (this.hasNormalizedSlot('file-name')) {\n        // There is a slot for formatting the files/names\n        return [this.normalizeSlot('file-name', {\n          files: files,\n          names: files.map(f => f.name)\n        })];\n      } else {\n        // Use the user supplied formatter, or the built in one.\n        return isFunction(this.fileNameFormatter) ? String(this.fileNameFormatter(files)) : files.map(file => file.name).join(', ');\n      }\n    }\n\n  },\n  watch: {\n    selectedFile(newVal, oldVal) {\n      // The following test is needed when the file input is \"reset\" or the\n      // exact same file(s) are selected to prevent an infinite loop.\n      // When in `multiple` mode we need to check for two empty arrays or\n      // two arrays with identical files\n      if (newVal === oldVal || Object(array[\"d\" /* isArray */])(newVal) && Object(array[\"d\" /* isArray */])(oldVal) && newVal.length === oldVal.length && newVal.every((v, i) => v === oldVal[i])) {\n        return;\n      }\n\n      if (!newVal && this.multiple) {\n        this.$emit('input', []);\n      } else {\n        this.$emit('input', newVal);\n      }\n    },\n\n    value(newVal) {\n      if (!newVal || Object(array[\"d\" /* isArray */])(newVal) && newVal.length === 0) {\n        this.reset();\n      }\n    }\n\n  },\n  methods: {\n    focusHandler(evt) {\n      // Bootstrap v4 doesn't have focus styling for custom file input\n      // Firefox has a '[type=file]:focus ~ sibling' selector issue,\n      // so we add a 'focus' class to get around these bugs\n      if (this.plain || evt.type === 'focusout') {\n        this.hasFocus = false;\n      } else {\n        // Add focus styling for custom file input\n        this.hasFocus = true;\n      }\n    },\n\n    reset() {\n      try {\n        // Wrapped in try in case IE 11 craps out\n        this.$refs.input.value = '';\n      } catch (e) {} // IE 11 doesn't support setting `input.value` to '' or null\n      // So we use this little extra hack to reset the value, just in case.\n      // This also appears to work on modern browsers as well.\n\n\n      this.$refs.input.type = '';\n      this.$refs.input.type = 'file';\n      this.selectedFile = this.multiple ? [] : null;\n    },\n\n    onFileChange(evt) {\n      // Always emit original event\n      this.$emit('change', evt); // Check if special `items` prop is available on event (drop mode)\n      // Can be disabled by setting no-traverse\n\n      const items = evt.dataTransfer && evt.dataTransfer.items;\n      /* istanbul ignore next: not supported in JSDOM */\n\n      if (items && !this.noTraverse) {\n        const queue = [];\n\n        for (let i = 0; i < items.length; i++) {\n          const item = items[i].webkitGetAsEntry();\n\n          if (item) {\n            queue.push(this.traverseFileTree(item));\n          }\n        }\n\n        Promise.all(queue).then(filesArr => {\n          this.setFiles(Object(array[\"c\" /* from */])(filesArr));\n        });\n        return;\n      } // Normal handling\n\n\n      this.setFiles(evt.target.files || evt.dataTransfer.files);\n    },\n\n    setFiles() {\n      let files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!files) {\n        /* istanbul ignore next: this will probably not happen */\n        this.selectedFile = null;\n      } else if (this.multiple) {\n        // Convert files to array\n        const filesArray = [];\n\n        for (let i = 0; i < files.length; i++) {\n          filesArray.push(files[i]);\n        } // Return file(s) as array\n\n\n        this.selectedFile = filesArray;\n      } else {\n        // Return single file object\n        this.selectedFile = files[0] || null;\n      }\n    },\n\n    onReset() {\n      // Triggered when the parent form (if any) is reset\n      this.selectedFile = this.multiple ? [] : null;\n    },\n\n    onDragover(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.noDrop || !this.custom) {\n        return;\n      }\n\n      this.dragging = true;\n      evt.dataTransfer.dropEffect = 'copy';\n    },\n\n    onDragleave(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.dragging = false;\n    },\n\n    onDrop(evt)\n    /* istanbul ignore next: difficult to test in JSDOM */\n    {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.noDrop) {\n        return;\n      }\n\n      this.dragging = false;\n\n      if (evt.dataTransfer.files && evt.dataTransfer.files.length > 0) {\n        this.onFileChange(evt);\n      }\n    },\n\n    traverseFileTree(item, path)\n    /* istanbul ignore next: not supported in JSDOM */\n    {\n      // Based on http://stackoverflow.com/questions/3590058\n      return new Promise(resolve => {\n        path = path || '';\n\n        if (item.isFile) {\n          // Get file\n          item.file(file => {\n            file.$path = path; // Inject $path to file obj\n\n            resolve(file);\n          });\n        } else if (item.isDirectory) {\n          // Get folder contents\n          item.createReader().readEntries(entries => {\n            const queue = [];\n\n            for (let i = 0; i < entries.length; i++) {\n              queue.push(this.traverseFileTree(entries[i], path + item.name + '/'));\n            }\n\n            Promise.all(queue).then(filesArr => {\n              resolve(Object(array[\"c\" /* from */])(filesArr));\n            });\n          });\n        }\n      });\n    }\n\n  },\n\n  render(h) {\n    // Form Input\n    const input = h('input', {\n      ref: 'input',\n      class: [{\n        'form-control-file': this.plain,\n        'custom-file-input': this.custom,\n        focus: this.custom && this.hasFocus\n      }, this.stateClass],\n      attrs: {\n        type: 'file',\n        id: this.safeId(),\n        name: this.name,\n        disabled: this.disabled,\n        required: this.required,\n        form: this.form || null,\n        capture: this.capture || null,\n        accept: this.accept || null,\n        multiple: this.multiple,\n        webkitdirectory: this.directory,\n        'aria-required': this.required ? 'true' : null\n      },\n      on: {\n        change: this.onFileChange,\n        focusin: this.focusHandler,\n        focusout: this.focusHandler,\n        reset: this.onReset\n      }\n    });\n\n    if (this.plain) {\n      return input;\n    } // Overlay Labels\n\n\n    const label = h('label', {\n      staticClass: 'custom-file-label',\n      class: [this.dragging ? 'dragging' : null],\n      attrs: {\n        for: this.safeId(),\n        'data-browse': this.browseText || null\n      }\n    }, this.selectLabel); // Return rendered custom file input\n\n    return h('div', {\n      staticClass: 'custom-file b-form-file',\n      class: this.stateClass,\n      attrs: {\n        id: this.safeId('_BV_file_outer_')\n      },\n      on: {\n        dragover: this.onDragover,\n        dragleave: this.onDragleave,\n        drop: this.onDrop\n      }\n    }, [input, label]);\n  }\n\n});\n/* harmony default export */ var form_file = (BFormFile);\n// CONCATENATED MODULE: ./src/components/form-file/index.js\n\n\nconst FormFilePlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BFormFile: BFormFile,\n    BFile: BFormFile\n  }\n});\n\n/* harmony default export */ var components_form_file = (FormFilePlugin);\n// CONCATENATED MODULE: ./src/components/form-select/form-select.js\n\n\n\n\n\n\n\n\n\n\n // @vue/component\n\nconst BFormSelect =\n/*#__PURE__*/\nvue.extend({\n  name: 'BFormSelect',\n  mixins: [mixins_id, mixins_normalize_slot, mixins_form, form_size, form_state, form_custom, form_options],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: {\n    value: {// type: [Object, Array, String, Number, Boolean],\n      // default: undefined\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    selectSize: {\n      // Browsers default size to 0, which shows 4 rows in most browsers in multiple mode\n      // Size of 1 can bork out Firefox\n      type: Number,\n      default: 0\n    },\n    ariaInvalid: {\n      type: [Boolean, String],\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      localValue: this.value\n    };\n  },\n\n  computed: {\n    computedSelectSize() {\n      // Custom selects with a size of zero causes the arrows to be hidden,\n      // so dont render the size attribute in this case\n      return !this.plain && this.selectSize === 0 ? null : this.selectSize;\n    },\n\n    inputClass() {\n      return [this.plain ? 'form-control' : 'custom-select', this.size && this.plain ? \"form-control-\".concat(this.size) : null, this.size && !this.plain ? \"custom-select-\".concat(this.size) : null, this.stateClass];\n    },\n\n    computedAriaInvalid() {\n      if (this.ariaInvalid === true || this.ariaInvalid === 'true') {\n        return 'true';\n      }\n\n      return this.stateClass === 'is-invalid' ? 'true' : null;\n    }\n\n  },\n  watch: {\n    value(newVal, oldVal) {\n      this.localValue = newVal;\n    },\n\n    localValue(newVal, oldVal) {\n      this.$emit('input', this.localValue);\n    }\n\n  },\n  methods: {\n    focus() {\n      this.$refs.input.focus();\n    },\n\n    blur() {\n      this.$refs.input.blur();\n    }\n\n  },\n\n  render(h) {\n    const options = this.formOptions.map((option, index) => {\n      return h('option', {\n        key: \"option_\".concat(index, \"_opt\"),\n        attrs: {\n          disabled: Boolean(option.disabled)\n        },\n        domProps: Object(objectSpread[\"a\" /* default */])({}, htmlOrText(option.html, option.text), {\n          value: option.value\n        })\n      });\n    });\n    return h('select', {\n      ref: 'input',\n      class: this.inputClass,\n      directives: [{\n        name: 'model',\n        rawName: 'v-model',\n        value: this.localValue,\n        expression: 'localValue'\n      }],\n      attrs: {\n        id: this.safeId(),\n        name: this.name,\n        form: this.form || null,\n        multiple: this.multiple || null,\n        size: this.computedSelectSize,\n        disabled: this.disabled,\n        required: this.required,\n        'aria-required': this.required ? 'true' : null,\n        'aria-invalid': this.computedAriaInvalid\n      },\n      on: {\n        change: evt => {\n          const target = evt.target;\n          const selectedVal = Object(array[\"c\" /* from */])(target.options).filter(o => o.selected).map(o => '_value' in o ? o._value : o.value);\n          this.localValue = target.multiple ? selectedVal : selectedVal[0];\n          this.$nextTick(() => {\n            this.$emit('change', this.localValue);\n          });\n        }\n      }\n    }, [this.normalizeSlot('first'), options, this.normalizeSlot('default')]);\n  }\n\n});\n/* harmony default export */ var form_select = (BFormSelect);\n// CONCATENATED MODULE: ./src/components/form-select/index.js\n\n\nconst FormSelectPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BFormSelect: BFormSelect,\n    BSelect: BFormSelect\n  }\n});\n\n/* harmony default export */ var components_form_select = (FormSelectPlugin);\n// CONCATENATED MODULE: ./src/components/image/index.js\n\n\n\nconst ImagePlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BImg: BImg,\n    BImgLazy: BImgLazy\n  }\n});\n\n/* harmony default export */ var components_image = (ImagePlugin);\n// CONCATENATED MODULE: ./src/components/input-group/input-group-text.js\n\n\nconst input_group_text_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nconst BInputGroupText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupText',\n  functional: true,\n  props: input_group_text_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'input-group-text'\n    }), children);\n  }\n\n});\n/* harmony default export */ var input_group_text = (BInputGroupText);\n// CONCATENATED MODULE: ./src/components/input-group/input-group-addon.js\n\n\n\n\nconst commonProps = {\n  id: {\n    type: String,\n    default: null\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  isText: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BInputGroupAddon =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupAddon',\n  functional: true,\n  props: Object(objectSpread[\"a\" /* default */])({}, commonProps, {\n    append: {\n      type: Boolean,\n      default: false\n    }\n  }),\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        'input-group-append': props.append,\n        'input-group-prepend': !props.append\n      },\n      attrs: {\n        id: props.id\n      }\n    }), props.isText ? [h(BInputGroupText, children)] : children);\n  }\n\n});\n/* harmony default export */ var input_group_addon = (BInputGroupAddon);\n// CONCATENATED MODULE: ./src/components/input-group/input-group-prepend.js\n\n\n\n // @vue/component\n\nconst BInputGroupPrepend =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupPrepend',\n  functional: true,\n  props: commonProps,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    // pass all our props/attrs down to child, and set`append` to false\n    return h(BInputGroupAddon, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      props: Object(objectSpread[\"a\" /* default */])({}, props, {\n        append: false\n      })\n    }), children);\n  }\n\n});\n/* harmony default export */ var input_group_prepend = (BInputGroupPrepend);\n// CONCATENATED MODULE: ./src/components/input-group/input-group-append.js\n\n\n\n // @vue/component\n\nconst BInputGroupAppend =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroupAppend',\n  functional: true,\n  props: commonProps,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    // pass all our props/attrs down to child, and set`append` to true\n    return h(BInputGroupAddon, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      props: Object(objectSpread[\"a\" /* default */])({}, props, {\n        append: true\n      })\n    }), children);\n  }\n\n});\n/* harmony default export */ var input_group_append = (BInputGroupAppend);\n// CONCATENATED MODULE: ./src/components/input-group/input-group.js\n\n\n\n\n\n\n\nconst input_group_props = {\n  id: {\n    type: String\n  },\n  size: {\n    type: String\n  },\n  prepend: {\n    type: String\n  },\n  prependHtml: {\n    type: String\n  },\n  append: {\n    type: String\n  },\n  appendHtml: {\n    type: String\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nconst BInputGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BInputGroup',\n  functional: true,\n  props: input_group_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      slots,\n      scopedSlots\n    } = _ref;\n    const $slots = slots();\n    const $scopedSlots = scopedSlots || {};\n    const childNodes = []; // Prepend prop/slot\n\n    if (props.prepend || props.prependHtml || hasNormalizedSlot('prepend', $scopedSlots, $slots)) {\n      childNodes.push(h(BInputGroupPrepend, [// Prop\n      props.prepend || props.prependHtml ? h(BInputGroupText, {\n        domProps: htmlOrText(props.prependHtml, props.prepend)\n      }) : h(false), // Slot\n      normalize_slot_normalizeSlot('prepend', {}, $scopedSlots, $slots) || h(false)]));\n    } else {\n      childNodes.push(h(false));\n    } // Default slot\n\n\n    if (hasNormalizedSlot('default', $scopedSlots, $slots)) {\n      childNodes.push(...normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots));\n    } else {\n      childNodes.push(h(false));\n    } // Append prop\n\n\n    if (props.append || props.appendHtml || hasNormalizedSlot('append', $scopedSlots, $slots)) {\n      childNodes.push(h(BInputGroupAppend, [// prop\n      props.append || props.appendHtml ? h(BInputGroupText, {\n        domProps: htmlOrText(props.appendHtml, props.append)\n      }) : h(false), // Slot\n      normalize_slot_normalizeSlot('append', {}, $scopedSlots, $slots) || h(false)]));\n    } else {\n      childNodes.push(h(false));\n    }\n\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'input-group',\n      class: {\n        [\"input-group-\".concat(props.size)]: Boolean(props.size)\n      },\n      attrs: {\n        id: props.id || null,\n        role: 'group'\n      }\n    }), childNodes);\n  }\n\n});\n/* harmony default export */ var input_group = (BInputGroup);\n// CONCATENATED MODULE: ./src/components/input-group/index.js\n\n\n\n\n\n\nconst InputGroupPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BInputGroup: BInputGroup,\n    BInputGroupAddon: BInputGroupAddon,\n    BInputGroupPrepend: BInputGroupPrepend,\n    BInputGroupAppend: BInputGroupAppend,\n    BInputGroupText: BInputGroupText\n  }\n});\n\n/* harmony default export */ var components_input_group = (InputGroupPlugin);\n// CONCATENATED MODULE: ./src/components/layout/container.js\n\n\nconst container_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  fluid: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BContainer =\n/*#__PURE__*/\nvue.extend({\n  name: 'BContainer',\n  functional: true,\n  props: container_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        container: !props.fluid,\n        'container-fluid': props.fluid\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var layout_container = (BContainer);\n// CONCATENATED MODULE: ./src/components/jumbotron/jumbotron.js\n\n\n\n\n\n\nconst jumbotron_NAME = 'BJumbotron';\nconst jumbotron_props = {\n  fluid: {\n    type: Boolean,\n    default: false\n  },\n  containerFluid: {\n    type: Boolean,\n    default: false\n  },\n  header: {\n    type: String,\n    default: null\n  },\n  headerHtml: {\n    type: String,\n    default: null\n  },\n  headerTag: {\n    type: String,\n    default: 'h1'\n  },\n  headerLevel: {\n    type: [Number, String],\n    default: '3'\n  },\n  lead: {\n    type: String,\n    default: null\n  },\n  leadHtml: {\n    type: String,\n    default: null\n  },\n  leadTag: {\n    type: String,\n    default: 'p'\n  },\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  bgVariant: {\n    type: String,\n    default: () => getComponentConfig(jumbotron_NAME, 'bgVariant')\n  },\n  borderVariant: {\n    type: String,\n    default: () => getComponentConfig(jumbotron_NAME, 'borderVariant')\n  },\n  textVariant: {\n    type: String,\n    default: () => getComponentConfig(jumbotron_NAME, 'textVariant')\n  } // @vue/component\n\n};\nconst BJumbotron =\n/*#__PURE__*/\nvue.extend({\n  name: jumbotron_NAME,\n  functional: true,\n  props: jumbotron_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      slots,\n      scopedSlots\n    } = _ref;\n    // The order of the conditionals matter.\n    // We are building the component markup in order.\n    let childNodes = [];\n    const $slots = slots();\n    const $scopedSlots = scopedSlots || {}; // Header\n\n    if (props.header || hasNormalizedSlot('header', $scopedSlots, $slots) || props.headerHtml) {\n      childNodes.push(h(props.headerTag, {\n        class: {\n          [\"display-\".concat(props.headerLevel)]: Boolean(props.headerLevel)\n        }\n      }, normalize_slot_normalizeSlot('header', {}, $scopedSlots, $slots) || props.headerHtml || stripTags(props.header)));\n    } // Lead\n\n\n    if (props.lead || hasNormalizedSlot('lead', $scopedSlots, $slots) || props.leadHtml) {\n      childNodes.push(h(props.leadTag, {\n        staticClass: 'lead'\n      }, normalize_slot_normalizeSlot('lead', {}, $scopedSlots, $slots) || props.leadHtml || stripTags(props.lead)));\n    } // Default slot\n\n\n    if (hasNormalizedSlot('default', $scopedSlots, $slots)) {\n      childNodes.push(normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots));\n    } // If fluid, wrap content in a container/container-fluid\n\n\n    if (props.fluid) {\n      // Children become a child of a container\n      childNodes = [h(BContainer, {\n        props: {\n          fluid: props.containerFluid\n        }\n      }, childNodes)];\n    } // Return the jumbotron\n\n\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'jumbotron',\n      class: {\n        'jumbotron-fluid': props.fluid,\n        [\"text-\".concat(props.textVariant)]: Boolean(props.textVariant),\n        [\"bg-\".concat(props.bgVariant)]: Boolean(props.bgVariant),\n        [\"border-\".concat(props.borderVariant)]: Boolean(props.borderVariant),\n        border: Boolean(props.borderVariant)\n      }\n    }), childNodes);\n  }\n\n});\n/* harmony default export */ var jumbotron = (BJumbotron);\n// CONCATENATED MODULE: ./src/components/jumbotron/index.js\n\n\nconst JumbotronPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BJumbotron: BJumbotron\n  }\n});\n\n/* harmony default export */ var components_jumbotron = (JumbotronPlugin);\n// CONCATENATED MODULE: ./src/components/layout/row.js\n\n\n\nconst COMMON_ALIGNMENT = ['start', 'end', 'center'];\nconst row_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  noGutters: {\n    type: Boolean,\n    default: false\n  },\n  alignV: {\n    type: String,\n    default: null,\n    validator: str => Object(array[\"a\" /* arrayIncludes */])(COMMON_ALIGNMENT.concat(['baseline', 'stretch']), str)\n  },\n  alignH: {\n    type: String,\n    default: null,\n    validator: str => Object(array[\"a\" /* arrayIncludes */])(COMMON_ALIGNMENT.concat(['between', 'around']), str)\n  },\n  alignContent: {\n    type: String,\n    default: null,\n    validator: str => Object(array[\"a\" /* arrayIncludes */])(COMMON_ALIGNMENT.concat(['between', 'around', 'stretch']), str)\n  } // @vue/component\n\n};\nconst BRow =\n/*#__PURE__*/\nvue.extend({\n  name: 'BRow',\n  functional: true,\n  props: row_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'row',\n      class: {\n        'no-gutters': props.noGutters,\n        [\"align-items-\".concat(props.alignV)]: props.alignV,\n        [\"justify-content-\".concat(props.alignH)]: props.alignH,\n        [\"align-content-\".concat(props.alignContent)]: props.alignContent\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var layout_row = (BRow);\n// CONCATENATED MODULE: ./src/components/layout/index.js\n\n\n\n\n\nconst LayoutPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BContainer: BContainer,\n    BRow: BRow,\n    BCol: BCol,\n    BFormRow: BFormRow\n  }\n});\n\n/* harmony default export */ var layout = (LayoutPlugin);\n// CONCATENATED MODULE: ./src/components/link/index.js\n\n\nconst LinkPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BLink: BLink\n  }\n});\n\n/* harmony default export */ var components_link = (LinkPlugin);\n// CONCATENATED MODULE: ./src/components/list-group/list-group.js\n\n\n\nconst list_group_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  flush: {\n    type: Boolean,\n    default: false\n  },\n  horizontal: {\n    type: [Boolean, String],\n    default: false\n  } // @vue/component\n\n};\nconst BListGroup =\n/*#__PURE__*/\nvue.extend({\n  name: 'BListGroup',\n  functional: true,\n  props: list_group_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    let horizontal = props.horizontal === '' ? true : props.horizontal;\n    horizontal = props.flush ? false : horizontal;\n    const componentData = {\n      staticClass: 'list-group',\n      class: {\n        'list-group-flush': props.flush,\n        'list-group-horizontal': horizontal === true,\n        [\"list-group-horizontal-\".concat(horizontal)]: isString(horizontal)\n      }\n    };\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, componentData), children);\n  }\n\n});\n/* harmony default export */ var list_group = (BListGroup);\n// CONCATENATED MODULE: ./src/components/list-group/list-group-item.js\n\n\n\n\n\n\n\nconst list_group_item_NAME = 'BListGroupItem';\nconst actionTags = ['a', 'router-link', 'button', 'b-link'];\nlet list_group_item_linkProps = propsFactory();\ndelete list_group_item_linkProps.href.default;\ndelete list_group_item_linkProps.to.default;\nconst list_group_item_props = Object(objectSpread[\"a\" /* default */])({\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  action: {\n    type: Boolean,\n    default: null\n  },\n  button: {\n    type: Boolean,\n    default: null\n  },\n  variant: {\n    type: String,\n    default: () => getComponentConfig(list_group_item_NAME, 'variant')\n  }\n}, list_group_item_linkProps); // @vue/component\n\nconst BListGroupItem =\n/*#__PURE__*/\nvue.extend({\n  name: list_group_item_NAME,\n  functional: true,\n  props: list_group_item_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    const tag = props.button ? 'button' : !props.href && !props.to ? props.tag : BLink;\n    const isAction = Boolean(props.href || props.to || props.action || props.button || Object(array[\"a\" /* arrayIncludes */])(actionTags, props.tag));\n    const attrs = {};\n    let itemProps = {};\n\n    if (tag === 'button') {\n      if (!data.attrs || !data.attrs.type) {\n        // Add a type for button is one not provided in passed attributes\n        attrs.type = 'button';\n      }\n\n      if (props.disabled) {\n        // Set disabled attribute if button and disabled\n        attrs.disabled = true;\n      }\n    } else {\n      itemProps = pluck_props(list_group_item_linkProps, props);\n    }\n\n    const componentData = {\n      attrs,\n      props: itemProps,\n      staticClass: 'list-group-item',\n      class: {\n        [\"list-group-item-\".concat(props.variant)]: Boolean(props.variant),\n        'list-group-item-action': isAction,\n        active: props.active,\n        disabled: props.disabled\n      }\n    };\n    return h(tag, Object(lib_esm[\"a\" /* mergeData */])(data, componentData), children);\n  }\n\n});\n/* harmony default export */ var list_group_item = (BListGroupItem);\n// CONCATENATED MODULE: ./src/components/list-group/index.js\n\n\n\nconst ListGroupPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BListGroup: BListGroup,\n    BListGroupItem: BListGroupItem\n  }\n});\n\n/* harmony default export */ var components_list_group = (ListGroupPlugin);\n// CONCATENATED MODULE: ./src/components/media/media-body.js\n\n\nconst media_body_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n};\nconst BMediaBody =\n/*#__PURE__*/\nvue.extend({\n  name: 'BMediaBody',\n  functional: true,\n  props: media_body_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'media-body'\n    }), children);\n  }\n\n});\n/* harmony default export */ var media_body = (BMediaBody);\n// CONCATENATED MODULE: ./src/components/media/media-aside.js\n\n\nconst media_aside_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  verticalAlign: {\n    type: String,\n    default: 'top'\n  } // @vue/component\n\n};\nconst BMediaAside =\n/*#__PURE__*/\nvue.extend({\n  name: 'BMediaAside',\n  functional: true,\n  props: media_aside_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'd-flex',\n      class: {\n        [\"align-self-\".concat(props.verticalAlign)]: props.verticalAlign\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var media_aside = (BMediaAside);\n// CONCATENATED MODULE: ./src/components/media/media.js\n\n\n\n\n\nconst media_props = {\n  tag: {\n    type: String,\n    default: 'div'\n  },\n  rightAlign: {\n    type: Boolean,\n    default: false\n  },\n  verticalAlign: {\n    type: String,\n    default: 'top'\n  },\n  noBody: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BMedia =\n/*#__PURE__*/\nvue.extend({\n  name: 'BMedia',\n  functional: true,\n  props: media_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      slots,\n      scopedSlots,\n      children\n    } = _ref;\n    let childNodes = props.noBody ? children : [];\n\n    if (!props.noBody) {\n      const $slots = slots();\n      const $scopedSlots = scopedSlots || {};\n      const $aside = normalize_slot_normalizeSlot('aside', {}, $scopedSlots, $slots);\n      const $default = normalize_slot_normalizeSlot('default', {}, $scopedSlots, $slots);\n\n      if ($aside && !props.rightAlign) {\n        childNodes.push(h(BMediaAside, {\n          staticClass: 'mr-3',\n          props: {\n            verticalAlign: props.verticalAlign\n          }\n        }, $aside));\n      }\n\n      childNodes.push(h(BMediaBody, {}, $default));\n\n      if ($aside && props.rightAlign) {\n        childNodes.push(h(BMediaAside, {\n          staticClass: 'ml-3',\n          props: {\n            verticalAlign: props.verticalAlign\n          }\n        }, $aside));\n      }\n    }\n\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'media'\n    }), childNodes);\n  }\n\n});\n/* harmony default export */ var media = (BMedia);\n// CONCATENATED MODULE: ./src/components/media/index.js\n\n\n\n\nconst MediaPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BMedia: BMedia,\n    BMediaAside: BMediaAside,\n    BMediaBody: BMediaBody\n  }\n});\n\n/* harmony default export */ var components_media = (MediaPlugin);\n// CONCATENATED MODULE: ./src/components/modal/helpers/modal-manager.js\n/**\n * Private ModalManager helper\n * Handles controlling modal stacking zIndexes and body adjustments/classes\n */\n\n\n\n // --- Constants ---\n// Default modal backdrop z-index\n\nconst DEFAULT_ZINDEX = 1040; // Selectors for padding/margin adjustments\n\nconst modal_manager_Selector = {\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top',\n  NAVBAR_TOGGLER: '.navbar-toggler' // @vue/component\n\n};\nconst ModalManager =\n/*#__PURE__*/\nvue.extend({\n  data() {\n    return {\n      modals: [],\n      baseZIndex: null,\n      scrollbarWidth: null,\n      isBodyOverflowing: false\n    };\n  },\n\n  computed: {\n    modalCount() {\n      return this.modals.length;\n    },\n\n    modalsAreOpen() {\n      return this.modalCount > 0;\n    }\n\n  },\n  watch: {\n    modalCount(newCount, oldCount) {\n      if (env[\"j\" /* isBrowser */]) {\n        this.getScrollbarWidth();\n\n        if (newCount > 0 && oldCount === 0) {\n          // Transitioning to modal(s) open\n          this.checkScrollbar();\n          this.setScrollbar();\n          addClass(document.body, 'modal-open');\n        } else if (newCount === 0 && oldCount > 0) {\n          // Transitioning to modal(s) closed\n          this.resetScrollbar();\n          removeClass(document.body, 'modal-open');\n        }\n\n        setAttr(document.body, 'data-modal-open-count', String(newCount));\n      }\n    },\n\n    modals(newVal, oldVal) {\n      this.checkScrollbar();\n      requestAF(() => {\n        this.updateModals(newVal || []);\n      });\n    }\n\n  },\n  methods: {\n    // Public methods\n    registerModal(modal) {\n      // Register the modal if not already registered\n      if (modal && this.modals.indexOf(modal) === -1) {\n        // Add modal to modals array\n        this.modals.push(modal);\n        modal.$once('hook:beforeDestroy', () => {\n          this.unregisterModal(modal);\n        });\n      }\n    },\n\n    unregisterModal(modal) {\n      const index = this.modals.indexOf(modal);\n\n      if (index > -1) {\n        // Remove modal from modals array\n        this.modals.splice(index, 1); // Reset the modal's data\n\n        if (!(modal._isBeingDestroyed || modal._isDestroyed)) {\n          this.resetModal(modal);\n        }\n      }\n    },\n\n    getBaseZIndex() {\n      if (isNull(this.baseZIndex) && env[\"j\" /* isBrowser */]) {\n        // Create a temporary `div.modal-backdrop` to get computed z-index\n        const div = document.createElement('div');\n        div.className = 'modal-backdrop d-none';\n        div.style.display = 'none';\n        document.body.appendChild(div);\n        this.baseZIndex = parseInt(getCS(div).zIndex || DEFAULT_ZINDEX, 10);\n        document.body.removeChild(div);\n      }\n\n      return this.baseZIndex || DEFAULT_ZINDEX;\n    },\n\n    getScrollbarWidth() {\n      if (isNull(this.scrollbarWidth) && env[\"j\" /* isBrowser */]) {\n        // Create a temporary `div.measure-scrollbar` to get computed z-index\n        const div = document.createElement('div');\n        div.className = 'modal-scrollbar-measure';\n        document.body.appendChild(div);\n        this.scrollbarWidth = getBCR(div).width - div.clientWidth;\n        document.body.removeChild(div);\n      }\n\n      return this.scrollbarWidth || 0;\n    },\n\n    // Private methods\n    updateModals(modals) {\n      const baseZIndex = this.getBaseZIndex();\n      const scrollbarWidth = this.getScrollbarWidth();\n      modals.forEach((modal, index) => {\n        // We update data values on each modal\n        modal.zIndex = baseZIndex + index;\n        modal.scrollbarWidth = scrollbarWidth;\n        modal.isTop = index === this.modals.length - 1;\n        modal.isBodyOverflowing = this.isBodyOverflowing;\n      });\n    },\n\n    resetModal(modal) {\n      if (modal) {\n        modal.zIndex = this.getBaseZIndex();\n        modal.isTop = true;\n        modal.isBodyOverflowing = false;\n      }\n    },\n\n    checkScrollbar() {\n      // Determine if the body element is overflowing\n      const {\n        left,\n        right\n      } = getBCR(document.body);\n      this.isBodyOverflowing = left + right < window.innerWidth;\n    },\n\n    setScrollbar() {\n      const body = document.body; // Storage place to cache changes to margins and padding\n      // Note: This assumes the following element types are not added to the\n      // document after the modal has opened.\n\n      body._paddingChangedForModal = body._paddingChangedForModal || [];\n      body._marginChangedForModal = body._marginChangedForModal || [];\n\n      if (this.isBodyOverflowing) {\n        const scrollbarWidth = this.scrollbarWidth; // Adjust fixed content padding\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        selectAll(modal_manager_Selector.FIXED_CONTENT).forEach(el => {\n          const actualPadding = el.style.paddingRight;\n          const calculatedPadding = getCS(el).paddingRight || 0;\n          setAttr(el, 'data-padding-right', actualPadding);\n          el.style.paddingRight = \"\".concat(parseFloat(calculatedPadding) + scrollbarWidth, \"px\");\n\n          body._paddingChangedForModal.push(el);\n        }); // Adjust sticky content margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        selectAll(modal_manager_Selector.STICKY_CONTENT).forEach(el => {\n          const actualMargin = el.style.marginRight;\n          const calculatedMargin = getCS(el).marginRight || 0;\n          setAttr(el, 'data-margin-right', actualMargin);\n          el.style.marginRight = \"\".concat(parseFloat(calculatedMargin) - scrollbarWidth, \"px\");\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust <b-navbar-toggler> margin\n\n        /* istanbul ignore next: difficult to test in JSDOM */\n\n        selectAll(modal_manager_Selector.NAVBAR_TOGGLER).forEach(el => {\n          const actualMargin = el.style.marginRight;\n          const calculatedMargin = getCS(el).marginRight || 0;\n          setAttr(el, 'data-margin-right', actualMargin);\n          el.style.marginRight = \"\".concat(parseFloat(calculatedMargin) + scrollbarWidth, \"px\");\n\n          body._marginChangedForModal.push(el);\n        }); // Adjust body padding\n\n        const actualPadding = body.style.paddingRight;\n        const calculatedPadding = getCS(body).paddingRight;\n        setAttr(body, 'data-padding-right', actualPadding);\n        body.style.paddingRight = \"\".concat(parseFloat(calculatedPadding) + scrollbarWidth, \"px\");\n      }\n    },\n\n    resetScrollbar() {\n      const body = document.body;\n\n      if (body._paddingChangedForModal) {\n        // Restore fixed content padding\n        body._paddingChangedForModal.forEach(el => {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if (hasAttr(el, 'data-padding-right')) {\n            el.style.paddingRight = getAttr(el, 'data-padding-right') || '';\n            removeAttr(el, 'data-padding-right');\n          }\n        });\n      }\n\n      if (body._marginChangedForModal) {\n        // Restore sticky content and navbar-toggler margin\n        body._marginChangedForModal.forEach(el => {\n          /* istanbul ignore next: difficult to test in JSDOM */\n          if (hasAttr(el, 'data-margin-right')) {\n            el.style.marginRight = getAttr(el, 'data-margin-right') || '';\n            removeAttr(el, 'data-margin-right');\n          }\n        });\n      }\n\n      body._paddingChangedForModal = null;\n      body._marginChangedForModal = null; // Restore body padding\n\n      if (hasAttr(body, 'data-padding-right')) {\n        body.style.paddingRight = getAttr(body, 'data-padding-right') || '';\n        removeAttr(body, 'data-padding-right');\n      }\n    }\n\n  }\n}); // Export our ModalManager\n\n/* harmony default export */ var modal_manager = (new ModalManager());\n// CONCATENATED MODULE: ./src/components/modal/helpers/bv-modal-event.class.js\n\n\n\n\n\nclass bv_modal_event_class_BvModalEvent extends bv_event_class {\n  constructor(type) {\n    let eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(type, eventInit); // Freeze our new props as readonly, but leave them enumerable\n\n    Object(object[\"d\" /* defineProperties */])(this, {\n      trigger: Object(object[\"l\" /* readonlyDescriptor */])()\n    });\n  }\n\n  get modalId()\n  /* istanbul ignore next */\n  {\n    // Backwards compatability <= 2.0.0-rc.19\n    utils_warn('b-modal: evt.modalId is deprecated. Please use evt.componentId.');\n    return this.componentId;\n  }\n\n  cancel()\n  /* istanbul ignore next */\n  {\n    // Backwards compatibility for BootstrapVue 1.x\n    utils_warn('b-modal: evt.cancel() is deprecated. Please use evt.preventDefault().');\n    this.preventDefault();\n  }\n\n  static get Defaults() {\n    return Object(objectSpread[\"a\" /* default */])({}, super.Defaults, {\n      trigger: null\n    });\n  }\n\n} // Named exports\n\n\n // Default export\n\n/* harmony default export */ var bv_modal_event_class = (bv_modal_event_class_BvModalEvent);\n// CONCATENATED MODULE: ./src/utils/transporter.js\n\n\n\n\n\n\n // BTransporterSingle/BTransporterTargetSingle:\n//\n// Single root node portaling of content, which retains parent/child hierarchy,\n// Unlike Portal-Vue where portaled content is no longer a descendent of\n// it's inteden parent components\n//\n// Private components for use by Tooltips, Popovers and Modals\n//\n// Based on vue-simple-portal\n// https://github.com/LinusBorg/vue-simple-portal\n// Tranporter target used by BTransporterSingle\n// Supports only a single root element.\n// @vue/component\n\nconst BTransporterTargetSingle =\n/*#__PURE__*/\nvue.extend({\n  // as an abstract component, it doesn't appear in the $parent chain of\n  // components, which means the next parent of any component rendered inside\n  // of this one will be the parent from which is was portal'd\n  abstract: true,\n  name: 'BTransporterTargetSingle',\n  props: {\n    nodes: {\n      // Even though we only support a single root element,\n      // vNodes are always passed as an array\n      type: [Array, Function] // default: undefined\n\n    }\n  },\n  data: vm => {\n    return {\n      updatedNodes: vm.nodes\n    };\n  },\n\n  destroyed() {\n    const el = this.$el;\n    el && el.parentNode && el.parentNode.removeChild(el);\n  },\n\n  render(h) {\n    let nodes = isFunction(this.updatedNodes) ? this.updatedNodes({}) : this.updatedNodes;\n    nodes = Object(array[\"b\" /* concat */])(nodes).filter(Boolean);\n    /* istanbul ignore else */\n\n    if (nodes && nodes.length > 0 && !nodes[0].text) {\n      return nodes[0];\n    } else {\n      return h(false);\n    }\n  }\n\n}); // This omponent has no root element, so only a single VNode is allowed\n// @vue/component\n\nconst BTransporterSingle =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTransporterSingle',\n  mixins: [mixins_normalize_slot],\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    container: {\n      // String: CSS selector,\n      // HTMLElement: Element reference\n      // Mainly needed for tooltips/popovers inside modals\n      type: [String, HTMLElement],\n      default: 'body'\n    },\n    tag: {\n      // This should be set to match the root element type\n      type: String,\n      default: 'div'\n    }\n  },\n  watch: {\n    disabled: {\n      immediate: true,\n\n      handler(disabled) {\n        disabled ? this.unmountTarget() : this.$nextTick(this.mountTarget);\n      }\n\n    }\n  },\n\n  created() {\n    this._bv_defaultFn = null;\n    this._bv_target = null;\n  },\n\n  beforeMount() {\n    this.mountTarget();\n  },\n\n  updated() {\n    // Placed in a nextTick to ensure that children have completed\n    // updating before rendering in the target\n    this.$nextTick(() => {\n      this.updateTarget();\n    });\n  },\n\n  beforeDestroy() {\n    this.unmountTarget();\n    this._bv_defaultFn = null;\n  },\n\n  methods: {\n    // Get the element which the target should be appended to\n    getContainer() {\n      /* istanbul ignore else */\n      if (env[\"j\" /* isBrowser */]) {\n        const container = this.container;\n        return isString(container) ? dom_select(container) : container;\n      } else {\n        return null;\n      }\n    },\n\n    // Mount the target\n    mountTarget() {\n      if (!this._bv_target) {\n        const container = this.getContainer();\n\n        if (container) {\n          const el = document.createElement('div');\n          container.appendChild(el);\n          this._bv_target = new BTransporterTargetSingle({\n            el,\n            parent: this,\n            propsData: {\n              // Initial nodes to be rendered\n              nodes: Object(array[\"b\" /* concat */])(this.normalizeSlot('default', {}))\n            }\n          });\n        }\n      }\n    },\n\n    // Update the content of the target\n    updateTarget() {\n      if (env[\"j\" /* isBrowser */] && this._bv_target) {\n        const defaultFn = this.$scopedSlots.default;\n\n        if (!this.disabled) {\n          /* istanbul ignore else: only applicable in Vue 2.5.x */\n          if (defaultFn && this._bv_defaultFn !== defaultFn) {\n            // We only update the target component if the scoped slot\n            // function is a fresh one. The new slot syntax (since Vue 2.6)\n            // can cache unchanged slot functions and we want to respect that here.\n            this._bv_target.updatedNodes = defaultFn;\n          } else if (!defaultFn) {\n            // We also need to be back compatable with non-scoped default slot (i.e. 2.5.x)\n            this._bv_target.updatedNodes = this.$slots.default;\n          }\n        } // Update the scoped slot function cache\n\n\n        this._bv_defaultFn = defaultFn;\n      }\n    },\n\n    // Unmount the target\n    unmountTarget() {\n      if (this._bv_target) {\n        this._bv_target.$destroy();\n\n        this._bv_target = null;\n      }\n    }\n\n  },\n\n  render(h) {\n    if (this.disabled) {\n      const nodes = Object(array[\"b\" /* concat */])(this.normalizeSlot('default', {})).filter(Boolean);\n\n      if (nodes.length > 0 && !nodes[0].text) {\n        return nodes[0];\n      }\n    }\n\n    return h(false);\n  }\n\n});\n// CONCATENATED MODULE: ./src/components/modal/modal.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // --- Constants ---\n\nconst modal_NAME = 'BModal'; // ObserveDom config to detect changes in modal content\n// so that we can adjust the modal padding if needed\n\nconst OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  attributes: true,\n  attributeFilter: ['style', 'class'] // Options for DOM event listeners\n\n};\nconst EVT_OPTIONS = {\n  passive: true,\n  capture: false\n};\nconst modal_props = {\n  title: {\n    type: String,\n    default: ''\n  },\n  titleHtml: {\n    type: String\n  },\n  titleTag: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'titleTag')\n  },\n  size: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'size')\n  },\n  centered: {\n    type: Boolean,\n    default: false\n  },\n  scrollable: {\n    type: Boolean,\n    default: false\n  },\n  buttonSize: {\n    type: String,\n    default: ''\n  },\n  noStacking: {\n    type: Boolean,\n    default: false\n  },\n  noFade: {\n    type: Boolean,\n    default: false\n  },\n  noCloseOnBackdrop: {\n    type: Boolean,\n    default: false\n  },\n  noCloseOnEsc: {\n    type: Boolean,\n    default: false\n  },\n  noEnforceFocus: {\n    type: Boolean,\n    default: false\n  },\n  headerBgVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'headerBgVariant')\n  },\n  headerBorderVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'headerBorderVariant')\n  },\n  headerTextVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'headerTextVariant')\n  },\n  headerCloseVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'headerCloseVariant')\n  },\n  headerClass: {\n    type: [String, Array],\n    default: null\n  },\n  bodyBgVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'bodyBgVariant')\n  },\n  bodyTextVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'bodyTextVariant')\n  },\n  modalClass: {\n    type: [String, Array],\n    default: null\n  },\n  dialogClass: {\n    type: [String, Array],\n    default: null\n  },\n  contentClass: {\n    type: [String, Array],\n    default: null\n  },\n  bodyClass: {\n    type: [String, Array],\n    default: null\n  },\n  footerBgVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'footerBgVariant')\n  },\n  footerBorderVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'footerBorderVariant')\n  },\n  footerTextVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'footerTextVariant')\n  },\n  footerClass: {\n    type: [String, Array],\n    default: null\n  },\n  hideHeader: {\n    type: Boolean,\n    default: false\n  },\n  hideFooter: {\n    type: Boolean,\n    default: false\n  },\n  hideHeaderClose: {\n    type: Boolean,\n    default: false\n  },\n  hideBackdrop: {\n    type: Boolean,\n    default: false\n  },\n  okOnly: {\n    type: Boolean,\n    default: false\n  },\n  okDisabled: {\n    type: Boolean,\n    default: false\n  },\n  cancelDisabled: {\n    type: Boolean,\n    default: false\n  },\n  visible: {\n    type: Boolean,\n    default: false\n  },\n  returnFocus: {\n    // type: Object,\n    default: null\n  },\n  headerCloseLabel: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'headerCloseLabel')\n  },\n  cancelTitle: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'cancelTitle')\n  },\n  cancelTitleHtml: {\n    type: String\n  },\n  okTitle: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'okTitle')\n  },\n  okTitleHtml: {\n    type: String\n  },\n  cancelVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'cancelVariant')\n  },\n  okVariant: {\n    type: String,\n    default: () => getComponentConfig(modal_NAME, 'okVariant')\n  },\n  lazy: {\n    type: Boolean,\n    default: false\n  },\n  busy: {\n    type: Boolean,\n    default: false\n  },\n  static: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BModal =\n/*#__PURE__*/\nvue.extend({\n  name: modal_NAME,\n  mixins: [mixins_id, listen_on_root, mixins_normalize_slot],\n  model: {\n    prop: 'visible',\n    event: 'change'\n  },\n  props: modal_props,\n\n  data() {\n    return {\n      isHidden: true,\n      // If modal should not be in document\n      isVisible: false,\n      // Controls modal visible state\n      isTransitioning: false,\n      // Used for style control\n      isShow: false,\n      // Used for style control\n      isBlock: false,\n      // Used for style control\n      isOpening: false,\n      // To signal that the modal is in the process of opening\n      isClosing: false,\n      // To signal that the modal is in the process of closing\n      ignoreBackdropClick: false,\n      // Used to signify if click out listener should ignore the click\n      isModalOverflowing: false,\n      return_focus: this.returnFocus || null,\n      // The following items are controlled by the modalManager instance\n      scrollbarWidth: 0,\n      zIndex: modal_manager.getBaseZIndex(),\n      isTop: true,\n      isBodyOverflowing: false\n    };\n  },\n\n  computed: {\n    modalClasses() {\n      return [{\n        fade: !this.noFade,\n        show: this.isShow\n      }, this.modalClass];\n    },\n\n    modalStyles() {\n      const sbWidth = \"\".concat(this.scrollbarWidth, \"px\");\n      return {\n        paddingLeft: !this.isBodyOverflowing && this.isModalOverflowing ? sbWidth : '',\n        paddingRight: this.isBodyOverflowing && !this.isModalOverflowing ? sbWidth : '',\n        // Needed to fix issue https://github.com/bootstrap-vue/bootstrap-vue/issues/3457\n        // Even though we are using v-show, we must ensure 'none' is restored in the styles\n        display: this.isBlock ? 'block' : 'none'\n      };\n    },\n\n    dialogClasses() {\n      return [{\n        [\"modal-\".concat(this.size)]: Boolean(this.size),\n        'modal-dialog-centered': this.centered,\n        'modal-dialog-scrollable': this.scrollable\n      }, this.dialogClass];\n    },\n\n    headerClasses() {\n      return [{\n        [\"bg-\".concat(this.headerBgVariant)]: Boolean(this.headerBgVariant),\n        [\"text-\".concat(this.headerTextVariant)]: Boolean(this.headerTextVariant),\n        [\"border-\".concat(this.headerBorderVariant)]: Boolean(this.headerBorderVariant)\n      }, this.headerClass];\n    },\n\n    bodyClasses() {\n      return [{\n        [\"bg-\".concat(this.bodyBgVariant)]: Boolean(this.bodyBgVariant),\n        [\"text-\".concat(this.bodyTextVariant)]: Boolean(this.bodyTextVariant)\n      }, this.bodyClass];\n    },\n\n    footerClasses() {\n      return [{\n        [\"bg-\".concat(this.footerBgVariant)]: Boolean(this.footerBgVariant),\n        [\"text-\".concat(this.footerTextVariant)]: Boolean(this.footerTextVariant),\n        [\"border-\".concat(this.footerBorderVariant)]: Boolean(this.footerBorderVariant)\n      }, this.footerClass];\n    },\n\n    modalOuterStyle() {\n      // Styles needed for proper stacking of modals\n      return {\n        position: 'absolute',\n        zIndex: this.zIndex\n      };\n    },\n\n    slotScope() {\n      return {\n        ok: this.onOk,\n        cancel: this.onCancel,\n        close: this.onClose,\n        hide: this.hide,\n        visible: this.isVisible\n      };\n    }\n\n  },\n  watch: {\n    visible(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this[newVal ? 'show' : 'hide']();\n      }\n    }\n\n  },\n\n  created() {\n    // Define non-reactive properties\n    this._observer = null;\n  },\n\n  mounted() {\n    // Set initial z-index as queried from the DOM\n    this.zIndex = modal_manager.getBaseZIndex(); // Listen for events from others to either open or close ourselves\n    // and listen to all modals to enable/disable enforce focus\n\n    this.listenOnRoot('bv::show::modal', this.showHandler);\n    this.listenOnRoot('bv::hide::modal', this.hideHandler);\n    this.listenOnRoot('bv::toggle::modal', this.toggleHandler); // Listen for `bv:modal::show events`, and close ourselves if the\n    // opening modal not us\n\n    this.listenOnRoot('bv::modal::show', this.modalListener); // Initially show modal?\n\n    if (this.visible === true) {\n      this.$nextTick(this.show);\n    }\n  },\n\n  beforeDestroy() {\n    // Ensure everything is back to normal\n    if (this._observer) {\n      this._observer.disconnect();\n\n      this._observer = null;\n    }\n\n    this.setEnforceFocus(false);\n    this.setResizeEvent(false);\n\n    if (this.isVisible) {\n      this.isVisible = false;\n      this.isShow = false;\n      this.isTransitioning = false;\n    }\n  },\n\n  methods: {\n    // Private method to update the v-model\n    updateModel(val) {\n      if (val !== this.visible) {\n        this.$emit('change', val);\n      }\n    },\n\n    // Private method to create a BvModalEvent object\n    buildEvent(type) {\n      let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new bv_modal_event_class(type, Object(objectSpread[\"a\" /* default */])({\n        // Default options\n        cancelable: false,\n        target: this.$refs.modal || this.$el || null,\n        relatedTarget: null,\n        trigger: null\n      }, opts, {\n        // Options that can't be overridden\n        vueTarget: this,\n        componentId: this.safeId()\n      }));\n    },\n\n    // Public method to show modal\n    show() {\n      if (this.isVisible || this.isOpening) {\n        // If already open, on in the process of opening, do nothing\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (this.isClosing) {\n        // If we are in the process of closing, wait until hidden before re-opening\n\n        /* istanbul ignore next: very difficult to test */\n        this.$once('hidden', this.show);\n        /* istanbul ignore next */\n\n        return;\n      }\n\n      this.isOpening = true; // Set the element to return focus to when closed\n\n      this.return_focus = this.return_focus || this.getActiveElement();\n      const showEvt = this.buildEvent('show', {\n        cancelable: true\n      });\n      this.emitEvent(showEvt); // Don't show if canceled\n\n      if (showEvt.defaultPrevented || this.isVisible) {\n        this.isOpening = false; // Ensure the v-model reflects the current state\n\n        this.updateModel(false);\n        return;\n      } // Show the modal\n\n\n      this.doShow();\n    },\n\n    // Public method to hide modal\n    hide() {\n      let trigger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (!this.isVisible || this.isClosing) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.isClosing = true;\n      const hideEvt = this.buildEvent('hide', {\n        cancelable: trigger !== 'FORCE',\n        trigger: trigger || null\n      }); // We emit specific event for one of the three built-in buttons\n\n      if (trigger === 'ok') {\n        this.$emit('ok', hideEvt);\n      } else if (trigger === 'cancel') {\n        this.$emit('cancel', hideEvt);\n      } else if (trigger === 'headerclose') {\n        this.$emit('close', hideEvt);\n      }\n\n      this.emitEvent(hideEvt); // Hide if not canceled\n\n      if (hideEvt.defaultPrevented || !this.isVisible) {\n        this.isClosing = false; // Ensure v-model reflects current state\n\n        this.updateModel(true);\n        return;\n      } // Stop observing for content changes\n\n\n      if (this._observer) {\n        this._observer.disconnect();\n\n        this._observer = null;\n      } // Trigger the hide transition\n\n\n      this.isVisible = false; // Update the v-model\n\n      this.updateModel(false);\n    },\n\n    // Public method to toggle modal visibility\n    toggle(triggerEl) {\n      if (triggerEl) {\n        this.return_focus = triggerEl;\n      }\n\n      if (this.isVisible) {\n        this.hide('toggle');\n      } else {\n        this.show();\n      }\n    },\n\n    // Private method to get the current document active element\n    getActiveElement() {\n      if (env[\"j\" /* isBrowser */]) {\n        const activeElement = document.activeElement; // Note: On IE11, `document.activeElement` may be null.\n        // So we test it for truthiness first.\n        // https://github.com/bootstrap-vue/bootstrap-vue/issues/3206\n        // Returning focus to document.body may cause unwanted scrolls, so we\n        // exclude setting focus on body\n\n        if (activeElement && activeElement !== document.body && activeElement.focus) {\n          // Preset the fallback return focus value if it is not set\n          // `document.activeElement` should be the trigger element that was clicked or\n          // in the case of using the v-model, which ever element has current focus\n          // Will be overridden by some commands such as toggle, etc.\n          return activeElement;\n        }\n      }\n\n      return null;\n    },\n\n    // Private method to finish showing modal\n    doShow() {\n      /* istanbul ignore next: commenting out for now until we can test stacking */\n      if (modal_manager.modalsAreOpen && this.noStacking) {\n        // If another modal(s) is already open, wait for it(them) to close\n        this.listenOnRootOnce('bv::modal::hidden', this.doShow);\n        return;\n      }\n\n      modal_manager.registerModal(this); // Place modal in DOM\n\n      this.isHidden = false;\n      this.$nextTick(() => {\n        // We do this in `$nextTick()` to ensure the modal is in DOM first\n        // before we show it\n        this.isVisible = true;\n        this.isOpening = false; // Update the v-model\n\n        this.updateModel(true);\n        this.$nextTick(() => {\n          // In a nextTick in case modal content is lazy\n          // Observe changes in modal content and adjust if necessary\n          this._observer = observe_dom(this.$refs.content, this.checkModalOverflow.bind(this), OBSERVER_CONFIG);\n        });\n      });\n    },\n\n    // Transition handlers\n    onBeforeEnter() {\n      this.isTransitioning = true;\n      this.setResizeEvent(true);\n    },\n\n    onEnter() {\n      this.isBlock = true;\n    },\n\n    onAfterEnter() {\n      this.checkModalOverflow();\n      this.isShow = true;\n      this.isTransitioning = false;\n      this.$nextTick(() => {\n        this.emitEvent(this.buildEvent('shown'));\n        this.focusFirst();\n        this.setEnforceFocus(true);\n      });\n    },\n\n    onBeforeLeave() {\n      this.isTransitioning = true;\n      this.setResizeEvent(false);\n    },\n\n    onLeave() {\n      // Remove the 'show' class\n      this.isShow = false;\n    },\n\n    onAfterLeave() {\n      this.isBlock = false;\n      this.isTransitioning = false;\n      this.setEnforceFocus(false);\n      this.isModalOverflowing = false;\n      this.isHidden = true;\n      this.$nextTick(() => {\n        this.returnFocusTo();\n        this.isClosing = false;\n        this.return_focus = null;\n        modal_manager.unregisterModal(this); // TODO: Need to find a way to pass the `trigger` property\n        //       to the `hidden` event, not just only the `hide` event\n\n        this.emitEvent(this.buildEvent('hidden'));\n      });\n    },\n\n    // Event emitter\n    emitEvent(bvModalEvt) {\n      const type = bvModalEvt.type; // We emit on root first incase a global listener wants to cancel\n      // the event first before the instance emits it's event\n\n      this.emitOnRoot(\"bv::modal::\".concat(type), bvModalEvt, bvModalEvt.componentId);\n      this.$emit(type, bvModalEvt);\n    },\n\n    // UI event handlers\n    onDialogMousedown() {\n      // Watch to see if the matching mouseup event occurs outside the dialog\n      // And if it does, cancel the clickOut handler\n      const modal = this.$refs.modal;\n\n      const onceModalMouseup = evt => {\n        eventOff(modal, 'mouseup', onceModalMouseup, EVT_OPTIONS);\n\n        if (evt.target === modal) {\n          this.ignoreBackdropClick = true;\n        }\n      };\n\n      eventOn(modal, 'mouseup', onceModalMouseup, EVT_OPTIONS);\n    },\n\n    onClickOut(evt) {\n      if (this.ignoreBackdropClick) {\n        // Click was initiated inside the modal content, but finished outside.\n        // Set by the above onDialogMousedown handler\n        this.ignoreBackdropClick = false;\n        return;\n      } // Do nothing if not visible, backdrop click disabled, or element\n      // that generated click event is no longer in document body\n\n\n      if (!this.isVisible || this.noCloseOnBackdrop || !contains(document.body, evt.target)) {\n        return;\n      } // If backdrop clicked, hide modal\n\n\n      if (!contains(this.$refs.content, evt.target)) {\n        this.hide('backdrop');\n      }\n    },\n\n    onOk() {\n      this.hide('ok');\n    },\n\n    onCancel() {\n      this.hide('cancel');\n    },\n\n    onClose() {\n      this.hide('headerclose');\n    },\n\n    onEsc(evt) {\n      // If ESC pressed, hide modal\n      if (evt.keyCode === key_codes.ESC && this.isVisible && !this.noCloseOnEsc) {\n        this.hide('esc');\n      }\n    },\n\n    // Document focusin listener\n    focusHandler(evt) {\n      // If focus leaves modal, bring it back\n      const modal = this.$refs.modal;\n\n      if (!this.noEnforceFocus && this.isTop && this.isVisible && modal && document !== evt.target && !contains(modal, evt.target)) {\n        modal.focus({\n          preventScroll: true\n        });\n      }\n    },\n\n    // Turn on/off focusin listener\n    setEnforceFocus(on) {\n      const method = on ? eventOn : eventOff;\n      method(document, 'focusin', this.focusHandler, EVT_OPTIONS);\n    },\n\n    // Resize listener\n    setResizeEvent(on) {\n      const method = on ? eventOn : eventOff; // These events should probably also check if\n      // body is overflowing\n\n      method(window, 'resize', this.checkModalOverflow, EVT_OPTIONS);\n      method(window, 'orientationchange', this.checkModalOverflow, EVT_OPTIONS);\n    },\n\n    // Root listener handlers\n    showHandler(id, triggerEl) {\n      if (id === this.safeId()) {\n        this.return_focus = triggerEl || this.getActiveElement();\n        this.show();\n      }\n    },\n\n    hideHandler(id) {\n      if (id === this.safeId()) {\n        this.hide('event');\n      }\n    },\n\n    toggleHandler(id, triggerEl) {\n      if (id === this.safeId()) {\n        this.toggle(triggerEl);\n      }\n    },\n\n    modalListener(bvEvt) {\n      // If another modal opens, close this one if stacking not permitted\n      if (this.noStacking && bvEvt.vueTarget !== this) {\n        this.hide();\n      }\n    },\n\n    // Focus control handlers\n    focusFirst() {\n      // Don't try and focus if we are SSR\n      if (env[\"j\" /* isBrowser */]) {\n        const modal = this.$refs.modal;\n        const activeElement = this.getActiveElement(); // If the modal contains the activeElement, we don't do anything\n\n        if (modal && !(activeElement && contains(modal, activeElement))) {\n          // Make sure top of modal is showing (if longer than the viewport)\n          // and focus the modal content wrapper\n          this.$nextTick(() => {\n            modal.scrollTop = 0;\n            modal.focus();\n          });\n        }\n      }\n    },\n\n    returnFocusTo() {\n      // Prefer `returnFocus` prop over event specified\n      // `return_focus` value\n      let el = this.returnFocus || this.return_focus || null; // Is el a string CSS selector?\n\n      el = isString(el) ? dom_select(el) : el;\n\n      if (el) {\n        // Possibly could be a component reference\n        el = el.$el || el;\n\n        if (isVisible(el) && el.focus) {\n          el.focus();\n        }\n      }\n    },\n\n    checkModalOverflow() {\n      if (this.isVisible) {\n        const modal = this.$refs.modal;\n        this.isModalOverflowing = modal.scrollHeight > document.documentElement.clientHeight;\n      }\n    },\n\n    makeModal(h) {\n      // Modal header\n      let header = h(false);\n\n      if (!this.hideHeader) {\n        let modalHeader = this.normalizeSlot('modal-header', this.slotScope);\n\n        if (!modalHeader) {\n          let closeButton = h(false);\n\n          if (!this.hideHeaderClose) {\n            closeButton = h(BButtonClose, {\n              props: {\n                disabled: this.isTransitioning,\n                ariaLabel: this.headerCloseLabel,\n                textVariant: this.headerCloseVariant || this.headerTextVariant\n              },\n              on: {\n                click: this.onClose\n              }\n            }, [this.normalizeSlot('modal-header-close', {})]);\n          }\n\n          const domProps = !this.hasNormalizedSlot('modal-title') && this.titleHtml ? {\n            innerHTML: this.titleHtml\n          } : {};\n          modalHeader = [h(this.titleTag, {\n            class: ['modal-title'],\n            domProps\n          }, [this.normalizeSlot('modal-title', this.slotScope) || stripTags(this.title)]), closeButton];\n        }\n\n        header = h('header', {\n          ref: 'header',\n          staticClass: 'modal-header',\n          class: this.headerClasses,\n          attrs: {\n            id: this.safeId('__BV_modal_header_')\n          }\n        }, [modalHeader]);\n      } // Modal body\n\n\n      const body = h('div', {\n        ref: 'body',\n        staticClass: 'modal-body',\n        class: this.bodyClasses,\n        attrs: {\n          id: this.safeId('__BV_modal_body_')\n        }\n      }, this.normalizeSlot('default', this.slotScope)); // Modal footer\n\n      let footer = h(false);\n\n      if (!this.hideFooter) {\n        let modalFooter = this.normalizeSlot('modal-footer', this.slotScope);\n\n        if (!modalFooter) {\n          let cancelButton = h(false);\n\n          if (!this.okOnly) {\n            const cancelHtml = this.cancelTitleHtml ? {\n              innerHTML: this.cancelTitleHtml\n            } : null;\n            cancelButton = h(BButton, {\n              props: {\n                variant: this.cancelVariant,\n                size: this.buttonSize,\n                disabled: this.cancelDisabled || this.busy || this.isTransitioning\n              },\n              on: {\n                click: this.onCancel\n              }\n            }, [this.normalizeSlot('modal-cancel', {}) || (cancelHtml ? h('span', {\n              domProps: cancelHtml\n            }) : stripTags(this.cancelTitle))]);\n          }\n\n          const okHtml = this.okTitleHtml ? {\n            innerHTML: this.okTitleHtml\n          } : null;\n          const okButton = h(BButton, {\n            props: {\n              variant: this.okVariant,\n              size: this.buttonSize,\n              disabled: this.okDisabled || this.busy || this.isTransitioning\n            },\n            on: {\n              click: this.onOk\n            }\n          }, [this.normalizeSlot('modal-ok', {}) || (okHtml ? h('span', {\n            domProps: okHtml\n          }) : stripTags(this.okTitle))]);\n          modalFooter = [cancelButton, okButton];\n        }\n\n        footer = h('footer', {\n          ref: 'footer',\n          staticClass: 'modal-footer',\n          class: this.footerClasses,\n          attrs: {\n            id: this.safeId('__BV_modal_footer_')\n          }\n        }, [modalFooter]);\n      } // Assemble modal content\n\n\n      const modalContent = h('div', {\n        ref: 'content',\n        staticClass: 'modal-content',\n        class: this.contentClass,\n        attrs: {\n          role: 'document',\n          id: this.safeId('__BV_modal_content_'),\n          'aria-labelledby': this.hideHeader ? null : this.safeId('__BV_modal_header_'),\n          'aria-describedby': this.safeId('__BV_modal_body_')\n        }\n      }, [header, body, footer]); // Modal dialog wrapper\n\n      const modalDialog = h('div', {\n        staticClass: 'modal-dialog',\n        class: this.dialogClasses,\n        on: {\n          mousedown: this.onDialogMousedown\n        }\n      }, [modalContent]); // Modal\n\n      let modal = h('div', {\n        ref: 'modal',\n        staticClass: 'modal',\n        class: this.modalClasses,\n        style: this.modalStyles,\n        directives: [{\n          name: 'show',\n          rawName: 'v-show',\n          value: this.isVisible,\n          expression: 'isVisible'\n        }],\n        attrs: {\n          id: this.safeId(),\n          role: 'dialog',\n          tabindex: '-1',\n          'aria-hidden': this.isVisible ? null : 'true',\n          'aria-modal': this.isVisible ? 'true' : null\n        },\n        on: {\n          keydown: this.onEsc,\n          click: this.onClickOut\n        }\n      }, [modalDialog]); // Wrap modal in transition\n      // Sadly, we can't use BVTransition here due to the differences in\n      // transition durations for .modal and .modal-dialog. Not until\n      // issue https://github.com/vuejs/vue/issues/9986 is resolved\n\n      modal = h('transition', {\n        props: {\n          enterClass: '',\n          enterToClass: '',\n          enterActiveClass: '',\n          leaveClass: '',\n          leaveActiveClass: '',\n          leaveToClass: ''\n        },\n        on: {\n          beforeEnter: this.onBeforeEnter,\n          enter: this.onEnter,\n          afterEnter: this.onAfterEnter,\n          beforeLeave: this.onBeforeLeave,\n          leave: this.onLeave,\n          afterLeave: this.onAfterLeave\n        }\n      }, [modal]); // Modal backdrop\n\n      let backdrop = h(false);\n\n      if (!this.hideBackdrop && this.isVisible) {\n        backdrop = h('div', {\n          staticClass: 'modal-backdrop',\n          attrs: {\n            id: this.safeId('__BV_modal_backdrop_')\n          }\n        }, [this.normalizeSlot('modal-backdrop', {})]);\n      }\n\n      backdrop = h(bv_transition, {\n        props: {\n          noFade: this.noFade\n        }\n      }, [backdrop]); // Tab trap to prevent page from scrolling to next element in\n      // tab index during enforce focus tab cycle\n\n      let tabTrap = h(false);\n\n      if (this.isVisible && this.isTop && !this.noEnforceFocus) {\n        tabTrap = h('div', {\n          attrs: {\n            tabindex: '0'\n          }\n        });\n      } // Assemble modal and backdrop in an outer <div>\n\n\n      return h('div', {\n        key: \"modal-outer-\".concat(this._uid),\n        style: this.modalOuterStyle,\n        attrs: {\n          id: this.safeId('__BV_modal_outer_')\n        }\n      }, [modal, tabTrap, backdrop]);\n    }\n\n  },\n\n  render(h) {\n    if (this.static) {\n      return this.lazy && this.isHidden ? h(false) : this.makeModal(h);\n    } else {\n      return this.isHidden ? h(false) : h(BTransporterSingle, {}, [this.makeModal(h)]);\n    }\n  }\n\n});\n/* harmony default export */ var modal_modal = (BModal);\n// CONCATENATED MODULE: ./src/directives/modal/modal.js\n\n // Target listen types\n\nconst modal_listenTypes = {\n  click: true // Emitted show event for modal\n\n};\nconst EVENT_SHOW = 'bv::show::modal';\n\nconst setRole = (el, binding, vnode) => {\n  if (el.tagName !== 'BUTTON') {\n    setAttr(el, 'role', 'button');\n  }\n};\n/*\n * Export our directive\n */\n\n\nconst VBModal = {\n  // eslint-disable-next-line no-shadow-restricted-names\n  bind(el, binding, vnode) {\n    bindTargets(vnode, binding, modal_listenTypes, (_ref) => {\n      let {\n        targets,\n        vnode\n      } = _ref;\n      targets.forEach(target => {\n        vnode.context.$root.$emit(EVENT_SHOW, target, vnode.elm);\n      });\n    }); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    setRole(el, binding, vnode);\n  },\n\n  updated: setRole,\n  componentUpdated: setRole,\n\n  unbind(el, binding, vnode) {\n    unbindTargets(vnode, binding, modal_listenTypes); // If element is not a button, we add `role=\"button\"` for accessibility\n\n    if (el.tagName !== 'BUTTON') {\n      removeAttr(el, 'role', 'button');\n    }\n  }\n\n};\n/* harmony default export */ var directives_modal_modal = (VBModal);\n// CONCATENATED MODULE: ./src/components/modal/helpers/bv-modal.js\n\n\n/**\n * Plugin for adding `$bvModal` property to all Vue instances\n */\n\n\n\n\n\n\n // --- Constants ---\n\nconst bv_modal_PROP_NAME = '$bvModal';\nconst PROP_NAME_PRIV = '_bv__modal'; // Base modal props that are allowed\n// Some may be ignored or overridden on some message boxes\n// Prop ID is allowed, but really only should be used for testing\n// We need to add it in explicitly as it comes from the `idMixin`\n\nconst BASE_PROPS = ['id', ...Object(object[\"j\" /* keys */])(Object(object[\"k\" /* omit */])(modal_props, ['busy', 'lazy', 'noStacking', \"static\", 'visible']))]; // Fallback event resolver (returns undefined)\n\nconst defaultResolver = bvModalEvt => {}; // Map prop names to modal slot names\n\n\nconst propsToSlots = {\n  msgBoxContent: 'default',\n  title: 'modal-title',\n  okTitle: 'modal-ok',\n  cancelTitle: 'modal-cancel' // --- Utility methods ---\n  // Method to filter only recognized props that are not undefined\n\n};\n\nconst filterOptions = options => {\n  return BASE_PROPS.reduce((memo, key) => {\n    if (!isUndefined(options[key])) {\n      memo[key] = options[key];\n    }\n\n    return memo;\n  }, {});\n}; // Method to install `$bvModal` VM injection\n\n\nconst bv_modal_plugin = Vue => {\n  // Create a private sub-component that extends BModal\n  // which self-destructs after hidden\n  // @vue/component\n  const BMsgBox = Vue.extend({\n    name: 'BMsgBox',\n    extends: modal_modal,\n\n    destroyed() {\n      // Make sure we not in document any more\n      if (this.$el && this.$el.parentNode) {\n        this.$el.parentNode.removeChild(this.$el);\n      }\n    },\n\n    mounted() {\n      // Self destruct handler\n      const handleDestroy = () => {\n        const self = this;\n        this.$nextTick(() => {\n          // In a `setTimeout()` to release control back to application\n          setTimeout(() => self.$destroy(), 0);\n        });\n      }; // Self destruct if parent destroyed\n\n\n      this.$parent.$once('hook:destroyed', handleDestroy); // Self destruct after hidden\n\n      this.$once('hidden', handleDestroy); // Self destruct on route change\n\n      /* istanbul ignore if */\n\n      if (this.$router && this.$route) {\n        const unwatch = this.$watch('$router', handleDestroy);\n        this.$once('hook:beforeDestroy', unwatch);\n      } // Show the `BMsgBox`\n\n\n      this.show();\n    }\n\n  }); // Method to generate the on-demand modal message box\n  // Returns a promise that resolves to a value returned by the resolve\n\n  const asyncMsgBox = function asyncMsgBox(props, $parent) {\n    let resolver = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultResolver;\n\n    if (warnNotClient(bv_modal_PROP_NAME) || warnNoPromiseSupport(bv_modal_PROP_NAME)) {\n      /* istanbul ignore next */\n      return;\n    } // Create an instance of `BMsgBox` component\n\n\n    const msgBox = new BMsgBox({\n      // We set parent as the local VM so these modals can emit events on\n      // the app `$root`, as needed by things like tooltips and popovers\n      // And it helps to ensure `BMsgBox` is destroyed when parent is destroyed\n      parent: $parent,\n      // Preset the prop values\n      propsData: Object(objectSpread[\"a\" /* default */])({}, filterOptions(getComponentConfig('BModal') || {}), {\n        // Defaults that user can override\n        hideHeaderClose: true,\n        hideHeader: !(props.title || props.titleHtml)\n      }, Object(object[\"k\" /* omit */])(props, Object(object[\"j\" /* keys */])(propsToSlots)), {\n        // Props that can't be overridden\n        lazy: false,\n        busy: false,\n        visible: false,\n        noStacking: false,\n        noEnforceFocus: false\n      })\n    }); // Convert certain props to scoped slots\n\n    Object(object[\"j\" /* keys */])(propsToSlots).forEach(prop => {\n      if (!isUndefined(props[prop])) {\n        // Can be a string, or array of VNodes.\n        // Alternatively, user can use HTML version of prop to pass an HTML string.\n        msgBox.$slots[propsToSlots[prop]] = Object(array[\"b\" /* concat */])(props[prop]);\n      }\n    }); // Return a promise that resolves when hidden, or rejects on destroyed\n\n    return new Promise((resolve, reject) => {\n      let resolved = false;\n      msgBox.$once('hook:destroyed', () => {\n        if (!resolved) {\n          /* istanbul ignore next */\n          reject(new Error('BootstrapVue MsgBox destroyed before resolve'));\n        }\n      });\n      msgBox.$on('hide', bvModalEvt => {\n        if (!bvModalEvt.defaultPrevented) {\n          const result = resolver(bvModalEvt); // If resolver didn't cancel hide, we resolve\n\n          if (!bvModalEvt.defaultPrevented) {\n            resolved = true;\n            resolve(result);\n          }\n        }\n      }); // Create a mount point (a DIV) and mount the msgBo which will trigger it to show\n\n      const div = document.createElement('div');\n      document.body.appendChild(div);\n      msgBox.$mount(div);\n    });\n  }; // BvModal instance class\n\n\n  class BvModal {\n    constructor(vm) {\n      // Assign the new properties to this instance\n      Object(object[\"a\" /* assign */])(this, {\n        _vm: vm,\n        _root: vm.$root\n      }); // Set these properties as read-only and non-enumerable\n\n      Object(object[\"d\" /* defineProperties */])(this, {\n        _vm: Object(object[\"l\" /* readonlyDescriptor */])(),\n        _root: Object(object[\"l\" /* readonlyDescriptor */])()\n      });\n    } // --- Instance methods ---\n    // Show modal with the specified ID args are for future use\n\n\n    show(id) {\n      if (id && this._root) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        this._root.$emit('bv::show::modal', id, ...args);\n      }\n    } // Hide modal with the specified ID args are for future use\n\n\n    hide(id) {\n      if (id && this._root) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        this._root.$emit('bv::hide::modal', id, ...args);\n      }\n    } // The following methods require Promise support!\n    // IE 11 and others do not support Promise natively, so users\n    // should have a Polyfill loaded (which they need anyways for IE 11 support)\n    // Opens a user defined message box and returns a promise\n    // Not yet documented\n\n\n    msgBox(content) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let resolver = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (!content || warnNoPromiseSupport(bv_modal_PROP_NAME) || warnNotClient(bv_modal_PROP_NAME) || !isFunction(resolver)) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      return asyncMsgBox(Object(objectSpread[\"a\" /* default */])({}, filterOptions(options), {\n        msgBoxContent: content\n      }), this._vm, resolver);\n    } // Open a message box with OK button only and returns a promise\n\n\n    msgBoxOk(message) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // Pick the modal props we support from options\n      const props = Object(objectSpread[\"a\" /* default */])({}, options, {\n        // Add in overrides and our content prop\n        okOnly: true,\n        okDisabled: false,\n        hideFooter: false,\n        msgBoxContent: message\n      });\n\n      return this.msgBox(message, props, bvModalEvt => {\n        // Always resolve to true for OK\n        return true;\n      });\n    } // Open a message box modal with OK and CANCEL buttons\n    // and returns a promise\n\n\n    msgBoxConfirm(message) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // Set the modal props we support from options\n      const props = Object(objectSpread[\"a\" /* default */])({}, options, {\n        // Add in overrides and our content prop\n        okOnly: false,\n        okDisabled: false,\n        cancelDisabled: false,\n        hideFooter: false\n      });\n\n      return this.msgBox(message, props, bvModalEvt => {\n        const trigger = bvModalEvt.trigger;\n        return trigger === 'ok' ? true : trigger === 'cancel' ? false : null;\n      });\n    }\n\n  } // Add our instance mixin\n\n\n  Vue.mixin({\n    beforeCreate() {\n      // Because we need access to `$root` for `$emits`, and VM for parenting,\n      // we have to create a fresh instance of `BvModal` for each VM\n      this[PROP_NAME_PRIV] = new BvModal(this);\n    }\n\n  }); // Define our read-only `$bvModal` instance property\n  // Placed in an if just in case in HMR mode\n\n  if (!Vue.prototype.hasOwnProperty(bv_modal_PROP_NAME)) {\n    Object(object[\"e\" /* defineProperty */])(Vue.prototype, bv_modal_PROP_NAME, {\n      get() {\n        /* istanbul ignore next */\n        if (!this || !this[PROP_NAME_PRIV]) {\n          warn(\"'\".concat(bv_modal_PROP_NAME, \"' must be accessed from a Vue instance 'this' context\"));\n        }\n\n        return this[PROP_NAME_PRIV];\n      }\n\n    });\n  }\n};\n\nconst BVModalPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  plugins: {\n    plugin: bv_modal_plugin\n  }\n});\n/* harmony default export */ var bv_modal = (BVModalPlugin);\n// CONCATENATED MODULE: ./src/components/modal/index.js\n\n\n\n\nconst ModalPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BModal: BModal\n  },\n  directives: {\n    VBModal: VBModal\n  },\n  // $bvModal injection\n  plugins: {\n    BVModalPlugin: BVModalPlugin\n  }\n});\n\n/* harmony default export */ var components_modal = (ModalPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.small.js\nvar es6_string_small = __webpack_require__(43);\n\n// CONCATENATED MODULE: ./src/components/nav/nav.js\n\n\n // -- Constants --\n\nconst nav_DEPRECATED_MSG = 'Setting prop \"is-nav-bar\" is deprecated. Use the <b-navbar-nav> component instead.';\nconst nav_props = {\n  tag: {\n    type: String,\n    default: 'ul'\n  },\n  fill: {\n    type: Boolean,\n    default: false\n  },\n  justified: {\n    type: Boolean,\n    default: false\n  },\n  align: {\n    type: String,\n    default: null\n  },\n  tabs: {\n    type: Boolean,\n    default: false\n  },\n  pills: {\n    type: Boolean,\n    default: false\n  },\n  vertical: {\n    type: Boolean,\n    default: false\n  },\n  small: {\n    type: Boolean,\n    default: false\n  },\n  isNavBar: {\n    type: Boolean,\n    default: false,\n    // `deprecated` -> Don't use this prop\n    // `deprecation` -> Refers to a change in prop usage\n    deprecated: nav_DEPRECATED_MSG\n  } // -- Utils --\n\n};\n\nconst computeJustifyContent = value => {\n  // Normalize value\n  value = value === 'left' ? 'start' : value === 'right' ? 'end' : value;\n  return \"justify-content-\".concat(value);\n}; // @vue/component\n\n\nconst BNav =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNav',\n  functional: true,\n  props: nav_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      class: {\n        nav: !props.isNavBar,\n        'navbar-nav': props.isNavBar,\n        'nav-tabs': props.tabs && !props.isNavBar,\n        'nav-pills': props.pills && !props.isNavBar,\n        'flex-column': props.vertical && !props.isNavBar,\n        'nav-fill': !props.vertical && props.fill,\n        'nav-justified': !props.vertical && props.justified,\n        [computeJustifyContent(props.align)]: !props.vertical && props.align,\n        small: props.small\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var nav_nav = (BNav);\n// CONCATENATED MODULE: ./src/components/nav/nav-item.js\n\n\n\n\nconst nav_item_props = propsFactory(); // @vue/component\n\nconst BNavItem =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavItem',\n  functional: true,\n  props: Object(objectSpread[\"a\" /* default */])({}, nav_item_props, {\n    linkAttrs: {\n      type: Object,\n\n      default() {\n        return {};\n      }\n\n    },\n    linkClasses: {\n      type: [String, Object, Array],\n      default: null\n    }\n  }),\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      listeners,\n      children\n    } = _ref;\n    // We transfer the listeners to the link\n    delete data.on;\n    return h('li', Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'nav-item'\n    }), [h(BLink, {\n      staticClass: 'nav-link',\n      class: props.linkClasses,\n      attrs: props.linkAttrs,\n      props,\n      on: listeners\n    }, children)]);\n  }\n\n});\n/* harmony default export */ var nav_item = (BNavItem);\n// CONCATENATED MODULE: ./src/components/nav/nav-text.js\n\n\nconst nav_text_props = {\n  tag: {\n    type: String,\n    default: 'span'\n  } // @vue/component\n\n};\nconst BNavText =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavText',\n  functional: true,\n  props: nav_text_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'navbar-text'\n    }), children);\n  }\n\n});\n/* harmony default export */ var nav_text = (BNavText);\n// CONCATENATED MODULE: ./src/components/nav/nav-form.js\n\n\n\n\n\nconst nav_form_props = Object(object[\"k\" /* omit */])(form_props, ['inline']); // @vue/component\n\nconst BNavForm =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavForm',\n  functional: true,\n  props: nav_form_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(BForm, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      props: Object(objectSpread[\"a\" /* default */])({}, props, {\n        inline: true\n      })\n    }), children);\n  }\n\n});\n/* harmony default export */ var nav_form = (BNavForm);\n// CONCATENATED MODULE: ./src/components/nav/nav-item-dropdown.js\n\n\n\n\n\n\n\n\n // -- Constants --\n\nconst nav_item_dropdown_props = Object(objectSpread[\"a\" /* default */])({}, pluck_props(['menuClass', 'toggleClass', 'noCaret', 'role'], dropdown_props), {\n  extraMenuClasses: {\n    type: String,\n    default: '',\n    // `deprecated` -> Don't use this prop\n    // `deprecation` -> Refers to a change in prop usage\n    deprecated: 'Setting prop \"extra-menu-classes\" is deprecated. Use \"menu-class\" prop instead.'\n  },\n  extraToggleClasses: {\n    type: String,\n    default: '',\n    // `deprecated` -> Don't use this prop\n    // `deprecation` -> Refers to a change in prop usage\n    deprecated: 'Setting prop \"extra-toggle-classes\" is deprecated. Use \"toggle-class\" prop instead.'\n  } // @vue/component\n\n});\nconst BNavItemDropdown =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavItemDropdown',\n  mixins: [mixins_id, mixins_dropdown, mixins_normalize_slot],\n  props: nav_item_dropdown_props,\n  computed: {\n    isNav() {\n      // Signal to dropdown mixin that we are in a navbar\n      return true;\n    },\n\n    dropdownClasses() {\n      return [this.directionClass, {\n        show: this.visible\n      }];\n    },\n\n    menuClasses() {\n      return [this.extraMenuClasses, // Deprecated\n      this.menuClass, {\n        'dropdown-menu-right': this.right,\n        show: this.visible\n      }];\n    },\n\n    toggleClasses() {\n      return [this.extraToggleClasses, // Deprecated\n      this.toggleClass, {\n        disabled: this.disabled,\n        'dropdown-toggle-no-caret': this.noCaret\n      }];\n    }\n\n  },\n\n  render(h) {\n    const button = h(BLink, {\n      ref: 'toggle',\n      staticClass: 'nav-link dropdown-toggle',\n      class: this.toggleClasses,\n      props: {\n        href: '#',\n        disabled: this.disabled\n      },\n      attrs: {\n        id: this.safeId('_BV_button_'),\n        'aria-haspopup': 'true',\n        'aria-expanded': String(this.visible)\n      },\n      on: {\n        click: this.toggle,\n        keydown: this.toggle // space, enter, down\n\n      }\n    }, [this.$slots['button-content'] || this.$slots.text || h('span', {\n      domProps: htmlOrText(this.html, this.text)\n    })]);\n    const menu = h('ul', {\n      staticClass: 'dropdown-menu',\n      class: this.menuClasses,\n      ref: 'menu',\n      attrs: {\n        tabindex: '-1',\n        'aria-labelledby': this.safeId('_BV_button_')\n      },\n      on: {\n        keydown: this.onKeydown // up, down, esc\n\n      }\n    }, [this.normalizeSlot('default', {\n      hide: this.hide\n    })]);\n    return h('li', {\n      staticClass: 'nav-item b-nav-dropdown dropdown',\n      class: this.dropdownClasses,\n      attrs: {\n        id: this.safeId()\n      }\n    }, [button, menu]);\n  }\n\n});\n/* harmony default export */ var nav_item_dropdown = (BNavItemDropdown);\n// CONCATENATED MODULE: ./src/components/nav/index.js\n\n\n\n\n\n\n\nconst NavPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BNav: BNav,\n    BNavItem: BNavItem,\n    BNavText: BNavText,\n    BNavForm: BNavForm,\n    BNavItemDropdown: BNavItemDropdown,\n    BNavItemDd: BNavItemDropdown,\n    BNavDropdown: BNavItemDropdown,\n    BNavDd: BNavItemDropdown\n  },\n  plugins: {\n    DropdownPlugin: DropdownPlugin\n  }\n});\n\n/* harmony default export */ var components_nav = (NavPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.fixed.js\nvar es6_string_fixed = __webpack_require__(117);\n\n// CONCATENATED MODULE: ./src/components/navbar/navbar.js\n\n\n\n\n\nconst navbar_NAME = 'BNavbar';\nconst navbar_props = {\n  tag: {\n    type: String,\n    default: 'nav'\n  },\n  type: {\n    type: String,\n    default: 'light'\n  },\n  variant: {\n    type: String,\n    default: () => getComponentConfig(navbar_NAME, 'variant')\n  },\n  toggleable: {\n    type: [Boolean, String],\n    default: false\n  },\n  fixed: {\n    type: String\n  },\n  sticky: {\n    type: Boolean,\n    default: false\n  },\n  print: {\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BNavbar =\n/*#__PURE__*/\nvue.extend({\n  name: navbar_NAME,\n  functional: true,\n  props: navbar_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    let breakpoint = '';\n    let xs = getBreakpoints()[0];\n\n    if (props.toggleable && isString(props.toggleable) && props.toggleable !== xs) {\n      breakpoint = \"navbar-expand-\".concat(props.toggleable);\n    } else if (props.toggleable === false) {\n      breakpoint = 'navbar-expand';\n    }\n\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'navbar',\n      class: {\n        'd-print': props.print,\n        'sticky-top': props.sticky,\n        [\"navbar-\".concat(props.type)]: Boolean(props.type),\n        [\"bg-\".concat(props.variant)]: Boolean(props.variant),\n        [\"fixed-\".concat(props.fixed)]: Boolean(props.fixed),\n        [\"\".concat(breakpoint)]: Boolean(breakpoint)\n      },\n      attrs: {\n        role: props.tag === 'nav' ? null : 'navigation'\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var navbar = (BNavbar);\n// CONCATENATED MODULE: ./src/components/navbar/navbar-nav.js\n\n\n\n\n // -- Constants --\n\nconst navbar_nav_props = pluck_props(['tag', 'fill', 'justified', 'align', 'small'], nav_props); // -- Utils --\n\nconst navbar_nav_computeJustifyContent = value => {\n  // Normalize value\n  value = value === 'left' ? 'start' : value === 'right' ? 'end' : value;\n  return \"justify-content-\".concat(value);\n}; // @vue/component\n\n\nconst BNavbarNav =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavbarNav',\n  functional: true,\n  props: navbar_nav_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'navbar-nav',\n      class: {\n        'nav-fill': props.fill,\n        'nav-justified': props.justified,\n        [navbar_nav_computeJustifyContent(props.align)]: props.align,\n        small: props.small\n      }\n    }), children);\n  }\n\n});\n/* harmony default export */ var navbar_nav = (BNavbarNav);\n// CONCATENATED MODULE: ./src/components/navbar/navbar-brand.js\n\n\n\n\n\nconst navbar_brand_linkProps = propsFactory();\nnavbar_brand_linkProps.href.default = undefined;\nnavbar_brand_linkProps.to.default = undefined;\nconst navbar_brand_props = Object(objectSpread[\"a\" /* default */])({}, navbar_brand_linkProps, {\n  tag: {\n    type: String,\n    default: 'div'\n  } // @vue/component\n\n});\nconst BNavbarBrand =\n/*#__PURE__*/\nvue.extend({\n  name: 'BNavbarBrand',\n  functional: true,\n  props: navbar_brand_props,\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      children\n    } = _ref;\n    const isLink = Boolean(props.to || props.href);\n    const tag = isLink ? BLink : props.tag;\n    return h(tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      staticClass: 'navbar-brand',\n      props: isLink ? pluck_props(navbar_brand_linkProps, props) : {}\n    }), children);\n  }\n\n});\n/* harmony default export */ var navbar_brand = (BNavbarBrand);\n// CONCATENATED MODULE: ./src/components/navbar/navbar-toggle.js\n\n\n\n\nconst navbar_toggle_NAME = 'BNavbarToggle'; // TODO: Switch to using VBToggle directive, will reduce code footprint\n// Events we emit on $root\n\nconst navbar_toggle_EVENT_TOGGLE = 'bv::toggle::collapse'; // Events we listen to on $root\n\nconst navbar_toggle_EVENT_STATE = 'bv::collapse::state'; // This private event is NOT to be documented as people should not be using it.\n\nconst navbar_toggle_EVENT_STATE_SYNC = 'bv::collapse::sync::state'; // @vue/component\n\nconst BNavbarToggle =\n/*#__PURE__*/\nvue.extend({\n  name: navbar_toggle_NAME,\n  mixins: [listen_on_root, mixins_normalize_slot],\n  props: {\n    label: {\n      type: String,\n      default: () => getComponentConfig(navbar_toggle_NAME, 'label')\n    },\n    target: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      toggleState: false\n    };\n  },\n\n  created() {\n    this.listenOnRoot(navbar_toggle_EVENT_STATE, this.handleStateEvt);\n    this.listenOnRoot(navbar_toggle_EVENT_STATE_SYNC, this.handleStateEvt);\n  },\n\n  methods: {\n    onClick(evt) {\n      this.$emit('click', evt);\n\n      if (!evt.defaultPrevented) {\n        this.$root.$emit(navbar_toggle_EVENT_TOGGLE, this.target);\n      }\n    },\n\n    handleStateEvt(id, state) {\n      if (id === this.target) {\n        this.toggleState = state;\n      }\n    }\n\n  },\n\n  render(h) {\n    return h('button', {\n      class: ['navbar-toggler'],\n      attrs: {\n        type: 'button',\n        'aria-label': this.label,\n        'aria-controls': this.target,\n        'aria-expanded': this.toggleState ? 'true' : 'false'\n      },\n      on: {\n        click: this.onClick\n      }\n    }, [this.normalizeSlot('default') || h('span', {\n      class: ['navbar-toggler-icon']\n    })]);\n  }\n\n});\n/* harmony default export */ var navbar_toggle = (BNavbarToggle);\n// CONCATENATED MODULE: ./src/components/navbar/index.js\n\n\n\n\n\n\n\n\nconst NavbarPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BNavbar: BNavbar,\n    BNavbarNav: BNavbarNav,\n    BNavbarBrand: BNavbarBrand,\n    BNavbarToggle: BNavbarToggle,\n    BNavToggle: BNavbarToggle\n  },\n  plugins: {\n    NavPlugin: NavPlugin,\n    CollapsePlugin: CollapsePlugin,\n    DropdownPlugin: DropdownPlugin\n  }\n});\n\n/* harmony default export */ var components_navbar = (NavbarPlugin);\n// CONCATENATED MODULE: ./src/utils/range.js\n/**\n * @param {number} length\n * @return {Array}\n */\nconst range = length => Array.apply(null, {\n  length\n});\n\n/* harmony default export */ var utils_range = (range);\n// CONCATENATED MODULE: ./src/mixins/pagination.js\n/*\n * Common props, computed, data, render function, and methods\n * for <b-pagination> and <b-pagination-nav>\n */\n\n\n\n\n\n\n\n // Threshold of limit size when we start/stop showing ellipsis\n\nconst ELLIPSIS_THRESHOLD = 3; // Default # of buttons limit\n\nconst DEFAULT_LIMIT = 5; // Make an array of N to N+X\n\nfunction makePageArray(startNum, numPages) {\n  return utils_range(numPages).map(function (value, index) {\n    return {\n      number: index + startNum,\n      classes: null\n    };\n  });\n} // Sanitize the provided Limit value (converting to a number)\n\n\nfunction sanitizeLimit(value) {\n  const limit = parseInt(value, 10) || 1;\n  return limit < 1 ? DEFAULT_LIMIT : limit;\n} // Sanitize the provided current page number (converting to a number)\n\n\nfunction sanitizeCurPage(value, numPages) {\n  const page = parseInt(value, 10) || 1;\n  return page > numPages ? numPages : page < 1 ? 1 : page;\n} // Links don't normally respond to SPACE, so we add that functionality via this handler\n\n\nfunction onSpaceKey(evt) {\n  if (evt.keyCode === key_codes.SPACE) {\n    evt.preventDefault(); // Stop page from scrolling\n\n    evt.stopImmediatePropagation();\n    evt.stopPropagation(); // Trigger the click event on the link\n\n    evt.currentTarget.click();\n    return false;\n  }\n} // Props object\n\n\nconst pagination_props = {\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  value: {\n    type: [Number, String],\n    default: null,\n\n    validator(value) {\n      const num = parseInt(value, 10);\n      /* istanbul ignore if */\n\n      if (!isNull(value) && (isNaN(num) || num < 1)) {\n        utils_warn('pagination: v-model value must be a number greater than 0');\n        return false;\n      }\n\n      return true;\n    }\n\n  },\n  limit: {\n    type: [Number, String],\n    default: DEFAULT_LIMIT,\n\n    validator(value) {\n      const num = parseInt(value, 10);\n      /* istanbul ignore if */\n\n      if (isNaN(num) || num < 1) {\n        utils_warn('pagination: prop \"limit\" must be a number greater than 0');\n        return false;\n      }\n\n      return true;\n    }\n\n  },\n  size: {\n    type: String,\n    default: 'md'\n  },\n  align: {\n    type: String,\n    default: 'left'\n  },\n  hideGotoEndButtons: {\n    type: Boolean,\n    default: false\n  },\n  ariaLabel: {\n    type: String,\n    default: 'Pagination'\n  },\n  labelFirstPage: {\n    type: String,\n    default: 'Go to first page'\n  },\n  firstText: {\n    type: String,\n    default: '\\u00AB' // '«'\n\n  },\n  labelPrevPage: {\n    type: String,\n    default: 'Go to previous page'\n  },\n  prevText: {\n    type: String,\n    default: '\\u2039' // '‹'\n\n  },\n  labelNextPage: {\n    type: String,\n    default: 'Go to next page'\n  },\n  nextText: {\n    type: String,\n    default: '\\u203A' // '›'\n\n  },\n  labelLastPage: {\n    type: String,\n    default: 'Go to last page'\n  },\n  lastText: {\n    type: String,\n    default: '\\u00BB' // '»'\n\n  },\n  labelPage: {\n    type: [String, Function],\n    default: 'Go to page'\n  },\n  hideEllipsis: {\n    type: Boolean,\n    default: false\n  },\n  ellipsisText: {\n    type: String,\n    default: '\\u2026' // '…'\n\n  } // @vue/component\n\n};\n/* harmony default export */ var mixins_pagination = ({\n  mixins: [mixins_normalize_slot],\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: pagination_props,\n\n  data() {\n    const curr = parseInt(this.value, 10);\n    return {\n      // -1 signifies no page initially selected\n      currentPage: curr > 0 ? curr : -1,\n      localNumPages: 1,\n      localLimit: DEFAULT_LIMIT\n    };\n  },\n\n  computed: {\n    btnSize() {\n      return this.size ? \"pagination-\".concat(this.size) : '';\n    },\n\n    alignment() {\n      const align = this.align;\n\n      if (align === 'center') {\n        return 'justify-content-center';\n      } else if (align === 'end' || align === 'right') {\n        return 'justify-content-end';\n      } else if (align === 'fill') {\n        // The page-items will also have 'flex-fill' added.\n        // We ad text centering to make the button appearance better in fill mode.\n        return 'text-center';\n      }\n\n      return '';\n    },\n\n    computedCurrentPage() {\n      return sanitizeCurPage(this.currentPage, this.localNumPages);\n    },\n\n    paginationParams() {\n      // Determine if we should show the the ellipsis\n      const limit = this.limit;\n      const numPages = this.localNumPages;\n      const curPage = this.computedCurrentPage;\n      const hideEllipsis = this.hideEllipsis;\n      let showFirstDots = false;\n      let showLastDots = false;\n      let numLinks = limit;\n      let startNum = 1;\n\n      if (numPages <= limit) {\n        // Special Case: Less pages available than the limit of displayed pages\n        numLinks = numPages;\n      } else if (curPage < limit - 1 && limit > ELLIPSIS_THRESHOLD) {\n        // We are near the beginning of the page list\n        if (!hideEllipsis) {\n          showLastDots = true;\n          numLinks = limit - 1;\n        }\n      } else if (numPages - curPage + 2 < limit && limit > ELLIPSIS_THRESHOLD) {\n        // We are near the end of the list\n        if (!hideEllipsis) {\n          numLinks = limit - 1;\n          showFirstDots = true;\n        }\n\n        startNum = numPages - numLinks + 1;\n      } else {\n        // We are somewhere in the middle of the page list\n        if (limit > ELLIPSIS_THRESHOLD && !hideEllipsis) {\n          numLinks = limit - 2;\n          showFirstDots = showLastDots = true;\n        }\n\n        startNum = curPage - Math.floor(numLinks / 2);\n      } // Sanity checks\n\n\n      if (startNum < 1) {\n        /* istanbul ignore next */\n        startNum = 1;\n      } else if (startNum > numPages - numLinks) {\n        startNum = numPages - numLinks + 1;\n      }\n\n      return {\n        showFirstDots,\n        showLastDots,\n        numLinks,\n        startNum\n      };\n    },\n\n    pageList() {\n      // Generates the pageList array\n      const {\n        numLinks,\n        startNum\n      } = this.paginationParams;\n      const currPage = this.computedCurrentPage; // Generate list of page numbers\n\n      const pages = makePageArray(startNum, numLinks); // We limit to a total of 3 page buttons on XS screens\n      // So add classes to page links to hide them for XS breakpoint\n      // Note: Ellipsis will also be hidden on XS screens\n      // TODO: Make this visual limit configurable based on breakpoint(s)\n\n      if (pages.length > 3) {\n        const idx = currPage - startNum; // THe following is a bootstrap-vue custom utility class\n\n        const classes = 'bv-d-xs-down-none';\n\n        if (idx === 0) {\n          // Keep leftmost 3 buttons visible when current page is first page\n          for (let i = 3; i < pages.length; i++) {\n            pages[i].classes = classes;\n          }\n        } else if (idx === pages.length - 1) {\n          // Keep rightmost 3 buttons visible when current page is last page\n          for (let i = 0; i < pages.length - 3; i++) {\n            pages[i].classes = classes;\n          }\n        } else {\n          // Hide all except current page, current page - 1 and current page + 1\n          for (let i = 0; i < idx - 1; i++) {\n            // hide some left button(s)\n            pages[i].classes = classes;\n          }\n\n          for (let i = pages.length - 1; i > idx + 1; i--) {\n            // hide some right button(s)\n            pages[i].classes = classes;\n          }\n        }\n      }\n\n      return pages;\n    }\n\n  },\n  watch: {\n    value(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.currentPage = sanitizeCurPage(newValue, this.localNumPages);\n      }\n    },\n\n    currentPage(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        // Emit null if no page selected\n        this.$emit('input', newValue > 0 ? newValue : null);\n      }\n    },\n\n    limit(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.localLimit = sanitizeLimit(newValue);\n      }\n    }\n\n  },\n\n  created() {\n    // Set our default values in data\n    this.localLimit = sanitizeLimit(this.limit);\n    this.$nextTick(() => {\n      // Sanity check\n      this.currentPage = this.currentPage > this.localNumPages ? this.localNumPages : this.currentPage;\n    });\n  },\n\n  methods: {\n    getButtons() {\n      // Return only buttons that are visible\n      return selectAll('a.page-link', this.$el).filter(btn => isVisible(btn));\n    },\n\n    setBtnFocus(btn) {\n      btn.focus();\n    },\n\n    focusCurrent() {\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(() => {\n        const btn = this.getButtons().find(el => parseInt(getAttr(el, 'aria-posinset'), 10) === this.computedCurrentPage);\n\n        if (btn && btn.focus) {\n          this.setBtnFocus(btn);\n        } else {\n          // Fallback if current page is not in button list\n          this.focusFirst();\n        }\n      });\n    },\n\n    focusFirst() {\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(() => {\n        const btn = this.getButtons().find(el => !dom_isDisabled(el));\n\n        if (btn && btn.focus && btn !== document.activeElement) {\n          this.setBtnFocus(btn);\n        }\n      });\n    },\n\n    focusLast() {\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(() => {\n        const btn = this.getButtons().reverse().find(el => !dom_isDisabled(el));\n\n        if (btn && btn.focus && btn !== document.activeElement) {\n          this.setBtnFocus(btn);\n        }\n      });\n    },\n\n    focusPrev() {\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(() => {\n        const buttons = this.getButtons();\n        const idx = buttons.indexOf(document.activeElement);\n\n        if (idx > 0 && !dom_isDisabled(buttons[idx - 1]) && buttons[idx - 1].focus) {\n          this.setBtnFocus(buttons[idx - 1]);\n        }\n      });\n    },\n\n    focusNext() {\n      // We do this in next tick to ensure buttons have finished rendering\n      this.$nextTick(() => {\n        const buttons = this.getButtons();\n        const idx = buttons.indexOf(document.activeElement);\n        const cnt = buttons.length - 1;\n\n        if (idx < cnt && !dom_isDisabled(buttons[idx + 1]) && buttons[idx + 1].focus) {\n          this.setBtnFocus(buttons[idx + 1]);\n        }\n      });\n    }\n\n  },\n\n  render(h) {\n    const buttons = [];\n    const numberOfPages = this.localNumPages;\n    const disabled = this.disabled;\n    const {\n      showFirstDots,\n      showLastDots\n    } = this.paginationParams;\n    const currPage = this.computedCurrentPage;\n    const fill = this.align === 'fill'; // Helper function and flag\n\n    const isActivePage = pageNum => pageNum === currPage;\n\n    const noCurrPage = this.currentPage < 1; // Factory function for prev/next/first/last buttons\n\n    const makeEndBtn = (linkTo, ariaLabel, btnSlot, btnText, pageTest, key) => {\n      const isDisabled = disabled || isActivePage(pageTest) || noCurrPage || linkTo < 1 || linkTo > numberOfPages;\n      const pageNum = linkTo < 1 ? 1 : linkTo > numberOfPages ? numberOfPages : linkTo;\n      const scope = {\n        disabled: isDisabled,\n        page: pageNum,\n        index: pageNum - 1\n      };\n      const btnContent = this.normalizeSlot(btnSlot, scope) || to_string(btnText) || h(false);\n      const inner = h(isDisabled ? 'span' : BLink, {\n        staticClass: 'page-link',\n        props: isDisabled ? {} : this.linkProps(linkTo),\n        attrs: {\n          role: 'menuitem',\n          tabindex: isDisabled ? null : '-1',\n          'aria-label': ariaLabel,\n          'aria-controls': this.ariaControls || null,\n          'aria-disabled': isDisabled ? 'true' : null\n        },\n        on: isDisabled ? {} : {\n          click: evt => {\n            this.onClick(linkTo, evt);\n          },\n          keydown: onSpaceKey\n        }\n      }, [btnContent]);\n      return h('li', {\n        key,\n        staticClass: 'page-item',\n        class: {\n          disabled: isDisabled,\n          'flex-fill': fill\n        },\n        attrs: {\n          role: 'none presentation',\n          'aria-hidden': isDisabled ? 'true' : null\n        }\n      }, [inner]);\n    }; // Ellipsis factory\n\n\n    const makeEllipsis = isLast => {\n      return h('li', {\n        key: \"ellipsis-\".concat(isLast ? 'last' : 'first'),\n        staticClass: 'page-item',\n        class: ['disabled', 'bv-d-xs-down-none', fill ? 'flex-fill' : ''],\n        attrs: {\n          role: 'separator'\n        }\n      }, [h('span', {\n        staticClass: 'page-link'\n      }, [this.normalizeSlot('ellipsis-text', {}) || to_string(this.ellipsisText) || h(false)])]);\n    }; // Goto First Page button bookend\n\n\n    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtn(1, this.labelFirstPage, 'first-text', this.firstText, 1, 'bookend-goto-first')); // Goto Previous page button bookend\n\n    buttons.push(makeEndBtn(currPage - 1, this.labelPrevPage, 'prev-text', this.prevText, 1, 'bookend-goto-prev')); // First Ellipsis Bookend\n\n    buttons.push(showFirstDots ? makeEllipsis(false) : h(false)); // Individual Page links\n\n    this.pageList.forEach((page, idx) => {\n      const active = isActivePage(page.number) && !noCurrPage; // Active page will have tabindex of 0, or if no current page and first page button\n\n      let tabIndex = disabled ? null : active || noCurrPage && idx === 0 ? '0' : '-1';\n      const attrs = {\n        role: 'menuitemradio',\n        'aria-disabled': disabled ? 'true' : null,\n        'aria-controls': this.ariaControls || null,\n        'aria-label': isFunction(this.labelPage) ? this.labelPage(page.number) : \"\".concat(this.labelPage, \" \").concat(page.number),\n        'aria-checked': active ? 'true' : 'false',\n        'aria-posinset': page.number,\n        'aria-setsize': numberOfPages,\n        // ARIA \"roving tabindex\" method\n        tabindex: tabIndex\n      };\n      const btnContent = to_string(this.makePage(page.number));\n      const scope = {\n        page: page.number,\n        index: page.number - 1,\n        content: btnContent,\n        active,\n        disabled\n      };\n      const inner = h(disabled ? 'span' : BLink, {\n        props: disabled ? {} : this.linkProps(page.number),\n        staticClass: 'page-link',\n        attrs,\n        on: disabled ? {} : {\n          click: evt => {\n            this.onClick(page.number, evt);\n          },\n          keydown: onSpaceKey\n        }\n      }, [this.normalizeSlot('page', scope) || btnContent]);\n      buttons.push(h('li', {\n        key: \"page-\".concat(page.number),\n        staticClass: 'page-item',\n        class: [{\n          disabled,\n          active,\n          'flex-fill': fill\n        }, page.classes],\n        attrs: {\n          role: 'none presentation'\n        }\n      }, [inner]));\n    }); // Last Ellipsis Bookend\n\n    buttons.push(showLastDots ? makeEllipsis(true) : h(false)); // Goto Next page button bookend\n\n    buttons.push(makeEndBtn(currPage + 1, this.labelNextPage, 'next-text', this.nextText, numberOfPages, 'bookend-goto-next')); // Goto Last Page button bookend\n\n    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtn(numberOfPages, this.labelLastPage, 'last-text', this.lastText, numberOfPages, 'bookend-goto-last')); // Assemble the pagination buttons\n\n    const pagination = h('ul', {\n      ref: 'ul',\n      staticClass: 'pagination',\n      class: ['b-pagination', this.btnSize, this.alignment],\n      attrs: {\n        role: 'menubar',\n        'aria-disabled': disabled ? 'true' : 'false',\n        'aria-label': this.ariaLabel || null\n      },\n      on: {\n        keydown: evt => {\n          const keyCode = evt.keyCode;\n          const shift = evt.shiftKey;\n\n          if (keyCode === key_codes.LEFT) {\n            evt.preventDefault();\n            shift ? this.focusFirst() : this.focusPrev();\n          } else if (keyCode === key_codes.RIGHT) {\n            evt.preventDefault();\n            shift ? this.focusLast() : this.focusNext();\n          }\n        }\n      }\n    }, buttons); // if we are pagination-nav, wrap in '<nav>' wrapper\n\n    if (this.isNav) {\n      return h('nav', {\n        attrs: {\n          'aria-disabled': disabled ? 'true' : null,\n          'aria-hidden': disabled ? 'true' : 'false'\n        }\n      }, [pagination]);\n    } else {\n      return pagination;\n    }\n  }\n\n});\n// CONCATENATED MODULE: ./src/components/pagination/pagination.js\n\n\n\nconst DEFAULT_PER_PAGE = 20;\nconst DEFAULT_TOTAL_ROWS = 0;\n\nfunction sanitizePerPage(value) {\n  const perPage = parseInt(value, 10) || DEFAULT_PER_PAGE;\n  return perPage < 1 ? 1 : perPage;\n}\n\nfunction sanitizeTotalRows(value) {\n  const totalRows = parseInt(value, 10) || DEFAULT_TOTAL_ROWS;\n  return totalRows < 0 ? 0 : totalRows;\n}\n\nconst pagination_pagination_props = {\n  perPage: {\n    type: [Number, String],\n    default: DEFAULT_PER_PAGE\n  },\n  totalRows: {\n    type: [Number, String],\n    default: DEFAULT_TOTAL_ROWS\n  },\n  ariaControls: {\n    type: String,\n    default: null\n  } // Our render function is brought in from the pagination mixin\n  // @vue/component\n\n};\nconst BPagination =\n/*#__PURE__*/\nvue.extend({\n  name: 'BPagination',\n  mixins: [mixins_pagination],\n  props: pagination_pagination_props,\n  computed: {\n    numberOfPages() {\n      const result = Math.ceil(sanitizeTotalRows(this.totalRows) / sanitizePerPage(this.perPage));\n      return result < 1 ? 1 : result;\n    }\n\n  },\n  watch: {\n    numberOfPages(newVal) {\n      if (newVal === this.localNumPages) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localNumPages = newVal;\n      this.currentPage = 1;\n    }\n\n  },\n\n  created() {\n    // Set the initial page count\n    this.localNumPages = this.numberOfPages; // Set the initial page value\n\n    const curr = parseInt(this.value, 10) || 0;\n\n    if (curr > 0) {\n      this.currentPage = curr;\n    } else {\n      this.$nextTick(() => {\n        // If this value parses to NaN or a value less than 1\n        // Trigger an initial emit of 'null' if no page specified\n        this.currentPage = 0;\n      });\n    }\n  },\n\n  mounted() {\n    // Set the initial page count\n    this.localNumPages = this.numberOfPages;\n  },\n\n  methods: {\n    // These methods are used by the render function\n    onClick(num, evt) {\n      // Handle edge cases where number of pages has changed (i.e. if perPage changes)\n      // This should normally not happen, but just in case.\n      if (num > this.numberOfPages) {\n        /* istanbul ignore next */\n        num = this.numberOfPages;\n      } else if (num < 1) {\n        /* istanbul ignore next */\n        num = 1;\n      } // Update the v-model\n\n\n      this.currentPage = num; // Emit event triggered by user interaction\n\n      this.$emit('change', this.currentPage);\n      this.$nextTick(() => {\n        // Keep the current button focused if possible\n        const target = evt.target;\n\n        if (isVisible(target) && this.$el.contains(target) && target.focus) {\n          target.focus();\n        } else {\n          this.focusCurrent();\n        }\n      });\n    },\n\n    makePage(pageNum) {\n      return pageNum;\n    },\n\n    linkProps(pageNum) {\n      // Always '#' for pagination component\n      return {\n        href: '#'\n      };\n    }\n\n  }\n});\n/* harmony default export */ var pagination_pagination = (BPagination);\n// CONCATENATED MODULE: ./src/components/pagination/index.js\n\n\nconst PaginationPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BPagination: BPagination\n  }\n});\n\n/* harmony default export */ var components_pagination = (PaginationPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.search.js\nvar es6_regexp_search = __webpack_require__(100);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.link.js\nvar es6_string_link = __webpack_require__(118);\n\n// CONCATENATED MODULE: ./src/components/pagination-nav/pagination-nav.js\n\n\n\n\n\n\n\n\n\n\n\n // Props object\n\nconst pagination_nav_props = {\n  // pagination-nav specific props\n  numberOfPages: {\n    type: [Number, String],\n    default: 1,\n\n    validator(value) {\n      const num = parseInt(value, 10);\n      /* istanbul ignore if */\n\n      if (isNaN(num) || num < 1) {\n        utils_warn('b-pagination: prop \"number-of-pages\" must be a number greater than 0');\n        return false;\n      }\n\n      return true;\n    }\n\n  },\n  baseUrl: {\n    type: String,\n    default: '/'\n  },\n  useRouter: {\n    type: Boolean,\n    default: false\n  },\n  linkGen: {\n    type: Function,\n    default: null\n  },\n  pageGen: {\n    type: Function,\n    default: null\n  },\n  pages: {\n    // Optional array of page links\n    type: Array,\n    default: null\n  },\n  noPageDetect: {\n    // Disable auto page number detection if true\n    type: Boolean,\n    default: false\n  },\n  // router-link specific props\n  activeClass: {\n    type: String // default: undefined\n\n  },\n  exact: {\n    type: Boolean,\n    default: false\n  },\n  exactActiveClass: {\n    type: String // default: undefined\n\n  },\n  // nuxt-link specific prop(s)\n  noPrefetch: {\n    type: Boolean,\n    default: false\n  } // TODO: move this to an instance method in pagination mixin\n\n};\n\nconst sanitizeNumPages = value => {\n  let num = parseInt(value, 10) || 1;\n  return num < 1 ? 1 : num;\n}; // Our render function is brought in via the pagination mixin\n// @vue/component\n\n\nconst BPaginationNav =\n/*#__PURE__*/\nvue.extend({\n  name: 'BPaginationNav',\n  mixins: [mixins_pagination],\n  props: pagination_nav_props,\n  computed: {\n    // Used by render function to trigger wrapping in '<nav>' element\n    isNav() {\n      return true;\n    },\n\n    computedValue() {\n      // Returns the value prop as a number or `null` if undefined or < 1\n      const val = parseInt(this.value, 10);\n      return isNaN(val) || val < 1 ? null : val;\n    }\n\n  },\n  watch: {\n    numberOfPages(newVal, oldVal) {\n      this.$nextTick(() => {\n        this.setNumPages();\n      });\n    },\n\n    pages(newVal, oldVal) {\n      this.$nextTick(() => {\n        this.setNumPages();\n      });\n    }\n\n  },\n\n  created() {\n    this.setNumPages();\n  },\n\n  mounted() {\n    if (this.$router) {\n      // We only add the watcher if vue router is detected\n      this.$watch('$route', (to, from) => {\n        this.$nextTick(() => {\n          requestAF(() => {\n            this.guessCurrentPage();\n          });\n        });\n      });\n    }\n  },\n\n  methods: {\n    setNumPages() {\n      if (Object(array[\"d\" /* isArray */])(this.pages) && this.pages.length > 0) {\n        this.localNumPages = this.pages.length;\n      } else {\n        this.localNumPages = sanitizeNumPages(this.numberOfPages);\n      }\n\n      this.$nextTick(() => {\n        this.guessCurrentPage();\n      });\n    },\n\n    onClick(pageNum, evt) {\n      // Dont do anything if clicking the current active page\n      if (pageNum === this.currentPage) {\n        return;\n      }\n\n      requestAF(() => {\n        // Update the v-model\n        // Done in in requestAF() to allow browser to complete the\n        // native browser click handling of a link\n        this.currentPage = pageNum;\n        this.$emit('change', pageNum);\n      });\n      this.$nextTick(() => {\n        // Done in a nextTick() to ensure rendering complete\n        try {\n          // Emulate native link click page reloading behaviour by blurring the\n          // paginator and returning focus to the document\n          const target = evt.currentTarget || evt.target;\n          target.blur();\n        } catch (e) {}\n      });\n    },\n\n    getPageInfo(pageNum) {\n      if (!Object(array[\"d\" /* isArray */])(this.pages) || this.pages.length === 0 || isUndefined(this.pages[pageNum - 1])) {\n        const link = \"\".concat(this.baseUrl).concat(pageNum);\n        return {\n          link: this.useRouter ? {\n            path: link\n          } : link,\n          text: to_string(pageNum)\n        };\n      }\n\n      const info = this.pages[pageNum - 1];\n\n      if (Object(object[\"h\" /* isObject */])(info)) {\n        const link = info.link;\n        return {\n          // Normalize link for router use\n          link: Object(object[\"h\" /* isObject */])(link) ? link : this.useRouter ? {\n            path: link\n          } : link,\n          // Make sure text has a value\n          text: to_string(info.text || pageNum)\n        };\n      } else {\n        return {\n          link: to_string(info),\n          text: to_string(pageNum)\n        };\n      }\n    },\n\n    makePage(pageNum) {\n      const info = this.getPageInfo(pageNum);\n\n      if (this.pageGen && isFunction(this.pageGen)) {\n        return this.pageGen(pageNum, info);\n      }\n\n      return info.text;\n    },\n\n    makeLink(pageNum) {\n      const info = this.getPageInfo(pageNum);\n\n      if (this.linkGen && isFunction(this.linkGen)) {\n        return this.linkGen(pageNum, info);\n      }\n\n      return info.link;\n    },\n\n    linkProps(pageNum) {\n      const link = this.makeLink(pageNum);\n      const props = {\n        target: this.target || null,\n        rel: this.rel || null,\n        disabled: this.disabled,\n        // The following props are only used if BLink detects router\n        exact: this.exact,\n        activeClass: this.activeClass,\n        exactActiveClass: this.exactActiveClass,\n        append: this.append,\n        replace: this.replace,\n        // nuxt-link specific prop\n        noPrefetch: this.noPrefetch\n      };\n\n      if (this.useRouter || Object(object[\"h\" /* isObject */])(link)) {\n        props.to = link;\n      } else {\n        props.href = link;\n      }\n\n      return props;\n    },\n\n    resolveLink() {\n      let to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      // Given a to (or href string), convert to normalized route-like structure\n      // Works only client side!!\n      let link;\n\n      try {\n        // Convert the `to` to a HREF via a temporary `a` tag\n        link = document.createElement('a');\n        link.href = router_computeHref({\n          to\n        }, 'a', '/', '/'); // We need to add the anchor to the document to make sure the\n        // `pathname` is correctly detected in any browser (i.e. IE)\n\n        document.body.appendChild(link); // Once href is assigned, the link will be normalized to the full URL bits\n\n        const {\n          pathname,\n          hash,\n          search\n        } = link; // Remove link from document\n\n        document.body.removeChild(link); // Return the location in a route-like object\n\n        return {\n          path: pathname,\n          hash: hash,\n          query: parseQuery(search)\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        try {\n          link && link.parentNode && link.parentNode.removeChild(link);\n        } catch (e) {}\n        /* istanbul ignore next */\n\n\n        return {};\n      }\n    },\n\n    resolveRoute() {\n      let to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      // Given a to (or href string), convert to normalized route location structure\n      // works only when router available!!\n      try {\n        const route = this.$router.resolve(to, this.$route).route;\n        return {\n          path: route.path,\n          hash: route.hash,\n          query: route.query\n        };\n      } catch (e) {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n\n    guessCurrentPage() {\n      let guess = this.computedValue;\n      const $router = this.$router;\n      const $route = this.$route; // This section only occurs if we are client side, or server-side with $router\n\n      /* istanbul ignore else */\n\n      if (!this.noPageDetect && !guess && (env[\"j\" /* isBrowser */] || !env[\"j\" /* isBrowser */] && $router)) {\n        // Current route (if router available)\n        const currRoute = $router && $route ? {\n          path: $route.path,\n          hash: $route.hash,\n          query: $route.query\n        } : {}; // Current page full HREF (if client side). Can't be done as a computed prop!\n\n        const loc = env[\"j\" /* isBrowser */] ? window.location || document.location : null;\n        const currLink = loc ? {\n          path: loc.pathname,\n          hash: loc.hash,\n          query: parseQuery(loc.search)\n        } : {}; // Loop through the possible pages looking for a match until found\n\n        for (let page = 1; !guess && page <= this.localNumPages; page++) {\n          const to = this.makeLink(page);\n\n          if ($router && (Object(object[\"h\" /* isObject */])(to) || this.useRouter)) {\n            // Resolve the page via the $router\n            guess = loose_equal(this.resolveRoute(to), currRoute) ? page : null;\n          } else if (env[\"j\" /* isBrowser */]) {\n            // If no $router available (or !this.useRouter when `to` is a string)\n            // we compare using parsed URIs\n            guess = loose_equal(this.resolveLink(to), currLink) ? page : null;\n          } else {\n            // probably SSR, but no $router so we can't guess, so lets break out of\n            // the loop early\n\n            /* istanbul ignore next */\n            guess = -1;\n          }\n        }\n      } // We set currentPage to 0 to trigger an $emit('input', null)\n      // As the default for this.currentPage is -1 when no value is specified\n      // And valid page numbers are greater than 0\n\n\n      this.currentPage = guess > 0 ? guess : 0;\n    }\n\n  }\n});\n/* harmony default export */ var pagination_nav = (BPaginationNav);\n// CONCATENATED MODULE: ./src/components/pagination-nav/index.js\n\n\nconst PaginationNavPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BPaginationNav: BPaginationNav\n  }\n});\n\n/* harmony default export */ var components_pagination_nav = (PaginationNavPlugin);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.constructor.js\nvar es6_regexp_constructor = __webpack_require__(39);\n\n// CONCATENATED MODULE: ./src/utils/tooltip.class.js\n\n\n\n\n\n\n\n\n\n\n\nconst tooltip_class_NAME = 'tooltip';\nconst CLASS_PREFIX = 'bs-tooltip';\nconst BS_CLASS_PREFIX_REGEX = new RegExp(\"\\\\b\".concat(CLASS_PREFIX, \"\\\\S+\"), 'g');\nconst TRANSITION_DURATION = 150; // Modal $root hidden event\n\nconst MODAL_CLOSE_EVENT = 'bv::modal::hidden'; // Modal container for appending tooltip/popover\n\nconst MODAL_CLASS = '.modal-content';\nconst tooltip_class_AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: 'right',\n  BOTTOM: 'bottom',\n  LEFT: 'left',\n  TOPLEFT: 'top',\n  TOPRIGHT: 'top',\n  RIGHTTOP: 'right',\n  RIGHTBOTTOM: 'right',\n  BOTTOMLEFT: 'bottom',\n  BOTTOMRIGHT: 'bottom',\n  LEFTTOP: 'left',\n  LEFTBOTTOM: 'left'\n};\nconst OffsetMap = {\n  AUTO: 0,\n  TOPLEFT: -1,\n  TOP: 0,\n  TOPRIGHT: +1,\n  RIGHTTOP: -1,\n  RIGHT: 0,\n  RIGHTBOTTOM: +1,\n  BOTTOMLEFT: -1,\n  BOTTOM: 0,\n  BOTTOMRIGHT: +1,\n  LEFTTOP: -1,\n  LEFT: 0,\n  LEFTBOTTOM: +1\n};\nconst HoverState = {\n  SHOW: 'show',\n  OUT: 'out'\n};\nconst ClassName = {\n  FADE: 'fade',\n  SHOW: 'show'\n};\nconst tooltip_class_Selector = {\n  TOOLTIP: '.tooltip',\n  TOOLTIP_INNER: '.tooltip-inner',\n  ARROW: '.arrow'\n};\nconst Defaults = {\n  animation: true,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n  trigger: 'hover focus',\n  title: '',\n  delay: 0,\n  html: false,\n  placement: 'top',\n  offset: 0,\n  arrowPadding: 6,\n  container: false,\n  fallbackPlacement: 'flip',\n  callbacks: {},\n  boundary: 'scrollParent',\n  boundaryPadding: 5 // Transition event names\n\n};\nconst tooltip_class_TransitionEndEvents = {\n  WebkitTransition: ['webkitTransitionEnd'],\n  MozTransition: ['transitionend'],\n  OTransition: ['otransitionend', 'oTransitionEnd'],\n  transition: ['transitionend'] // Options for Native Event Listeners (since we never call preventDefault)\n\n};\nconst EvtOpts = {\n  passive: true,\n  capture: false // Client-side tip ID counter for aria-describedby attribute\n  // Each tooltip requires a unique client side ID\n\n};\nlet NEXTID = 1;\n/* istanbul ignore next */\n\nconst generateId = name => \"__BV_\".concat(name, \"_\").concat(NEXTID++, \"__\");\n/*\n * ToolTip class definition\n */\n\n\nclass tooltip_class_ToolTip {\n  // Main constructor\n  constructor(element, config, $parent) {\n    // New tooltip object\n    this.$isEnabled = true;\n    this.$fadeTimeout = null;\n    this.$hoverTimeout = null;\n    this.$visibleInterval = null;\n    this.$hoverState = '';\n    this.$activeTrigger = {};\n    this.$popper = null;\n    this.$element = element;\n    this.$tip = null;\n    this.$id = generateId(this.constructor.NAME);\n    this.$parent = $parent || null;\n    this.$root = $parent && $parent.$root ? $parent.$root : null;\n    this.$routeWatcher = null; // We use a bound version of the following handlers for root/modal\n    // listeners to maintain the 'this' context\n\n    this.$forceHide = this.forceHide.bind(this);\n    this.$doHide = this.doHide.bind(this);\n    this.$doShow = this.doShow.bind(this);\n    this.$doDisable = this.doDisable.bind(this);\n    this.$doEnable = this.doEnable.bind(this);\n    this._noop = utils_noop.bind(this); // Set the configuration\n\n    this.updateConfig(config); // Destroy ourselves if the parent is destroyed\n\n    if ($parent) {\n      $parent.$once('hook:beforeDestroy', this.destroy.bind(this));\n    }\n  } // NOTE: Overridden by PopOver class\n\n\n  static get Default() {\n    return Defaults;\n  } // NOTE: Overridden by PopOver class\n\n\n  static get NAME() {\n    return tooltip_class_NAME;\n  } // Update config\n\n\n  updateConfig(config) {\n    // Merge config into defaults. We use \"this\" here because PopOver overrides Default\n    let updatedConfig = Object(objectSpread[\"a\" /* default */])({}, this.constructor.Default, config); // Sanitize delay\n\n\n    if (config.delay && isNumber(config.delay)) {\n      /* istanbul ignore next */\n      updatedConfig.delay = {\n        show: config.delay,\n        hide: config.delay\n      };\n    } // Title for tooltip and popover\n\n\n    if (config.title && isNumber(config.title)) {\n      /* istanbul ignore next */\n      updatedConfig.title = config.title.toString();\n    } // Content only for popover\n\n\n    if (config.content && isNumber(config.content)) {\n      /* istanbul ignore next */\n      updatedConfig.content = config.content.toString();\n    } // Hide element original title if needed\n\n\n    this.fixTitle(); // Update the config\n\n    this.$config = updatedConfig; // Stop/Restart listening\n\n    this.unListen();\n    this.listen();\n  } // Destroy this instance\n\n\n  destroy() {\n    // Stop listening to trigger events\n    this.unListen(); // Disable while open listeners/watchers\n\n    this.setWhileOpenListeners(false); // Clear any timeouts\n\n    clearTimeout(this.$hoverTimeout);\n    this.$hoverTimeout = null;\n    clearTimeout(this.$fadeTimeout);\n    this.$fadeTimeout = null; // Remove popper\n\n    if (this.$popper) {\n      this.$popper.destroy();\n    }\n\n    this.$popper = null; // Remove tip from document\n\n    if (this.$tip && this.$tip.parentElement) {\n      this.$tip.parentElement.removeChild(this.$tip);\n    }\n\n    this.$tip = null; // Null out other properties\n\n    this.$id = null;\n    this.$isEnabled = null;\n    this.$parent = null;\n    this.$root = null;\n    this.$element = null;\n    this.$config = null;\n    this.$hoverState = null;\n    this.$activeTrigger = null;\n    this.$forceHide = null;\n    this.$doHide = null;\n    this.$doShow = null;\n    this.$doDisable = null;\n    this.$doEnable = null;\n  }\n\n  enable() {\n    // Create a non-cancelable BvEvent\n    const enabledEvt = new bv_event_class('enabled', {\n      cancelable: false,\n      target: this.$element,\n      relatedTarget: null\n    });\n    this.$isEnabled = true;\n    this.emitEvent(enabledEvt);\n  }\n\n  disable() {\n    // Create a non-cancelable BvEvent\n    const disabledEvt = new bv_event_class('disabled', {\n      cancelable: false,\n      target: this.$element,\n      relatedTarget: null\n    });\n    this.$isEnabled = false;\n    this.emitEvent(disabledEvt);\n  } // Click toggler\n\n\n  toggle(event) {\n    if (!this.$isEnabled) {\n      /* istanbul ignore next */\n      return;\n    }\n    /* istanbul ignore else */\n\n\n    if (event) {\n      this.$activeTrigger.click = !this.$activeTrigger.click;\n\n      if (this.isWithActiveTrigger()) {\n        this.enter(null);\n      } else {\n        this.leave(null);\n      }\n    } else {\n      if (hasClass(this.getTipElement(), ClassName.SHOW)) {\n        this.leave(null);\n      } else {\n        this.enter(null);\n      }\n    }\n  } // Show tooltip\n\n\n  show() {\n    if (!document.body.contains(this.$element) || !isVisible(this.$element)) {\n      // If trigger element isn't in the DOM or is not visible\n      return;\n    } // Build tooltip element (also sets this.$tip)\n\n\n    const tip = this.getTipElement();\n    this.fixTitle();\n    this.setContent(tip);\n\n    if (!this.isWithContent(tip)) {\n      // If no content, don't bother showing\n\n      /* istanbul ignore next */\n      this.$tip = null;\n      /* istanbul ignore next */\n\n      return;\n    } // Set ID on tip and aria-describedby on element\n\n\n    setAttr(tip, 'id', this.$id);\n    this.addAriaDescribedby(); // Set animation on or off\n\n    if (this.$config.animation) {\n      addClass(tip, ClassName.FADE);\n    } else {\n      removeClass(tip, ClassName.FADE);\n    }\n\n    const placement = this.getPlacement();\n    const attachment = this.constructor.getAttachment(placement);\n    this.addAttachmentClass(attachment); // Create a cancelable BvEvent\n\n    const showEvt = new bv_event_class('show', {\n      cancelable: true,\n      target: this.$element,\n      relatedTarget: tip\n    });\n    this.emitEvent(showEvt);\n\n    if (showEvt.defaultPrevented) {\n      // Don't show if event cancelled\n      this.$tip = null;\n      return;\n    } // Insert tooltip if needed\n\n\n    const container = this.getContainer();\n\n    if (!document.body.contains(tip)) {\n      container.appendChild(tip);\n    } // Refresh popper\n\n\n    this.removePopper();\n    this.$popper = new popper[\"a\" /* default */](this.$element, tip, this.getPopperConfig(placement, tip)); // Transitionend callback\n\n    const complete = () => {\n      if (this.$config.animation) {\n        this.fixTransition(tip);\n      }\n\n      const prevHoverState = this.$hoverState;\n      this.$hoverState = null;\n\n      if (prevHoverState === HoverState.OUT) {\n        this.leave(null);\n      } // Create a non-cancelable BvEvent\n\n\n      const shownEvt = new bv_event_class('shown', {\n        cancelable: false,\n        target: this.$element,\n        relatedTarget: tip\n      });\n      this.emitEvent(shownEvt);\n    }; // Enable while open listeners/watchers\n\n\n    this.setWhileOpenListeners(true); // Show tip\n\n    addClass(tip, ClassName.SHOW); // Start the transition/animation\n\n    this.transitionOnce(tip, complete);\n  } // Handler for periodic visibility check\n\n\n  visibleCheck(on) {\n    clearInterval(this.$visibleInterval);\n    this.$visibleInterval = null;\n\n    if (on) {\n      this.$visibleInterval = setInterval(() => {\n        const tip = this.$tip;\n\n        if (tip && !isVisible(this.$element) && hasClass(tip, ClassName.SHOW)) {\n          // Element is no longer visible, so force-hide the tooltip\n          this.forceHide();\n        }\n      }, 100);\n    }\n  }\n\n  setWhileOpenListeners(on) {\n    // Modal close events\n    this.setModalListener(on); // Periodic $element visibility check\n    // For handling when tip is in <keepalive>, tabs, carousel, etc\n\n    this.visibleCheck(on); // On-touch start listeners\n\n    this.setOnTouchStartListener(on);\n\n    if (on && /(focus|blur)/.test(this.$config.trigger)) {\n      // If focus moves between trigger element and tip container, don't close\n      eventOn(this.$tip, 'focusout', this, EvtOpts);\n    } else {\n      eventOff(this.$tip, 'focusout', this, EvtOpts);\n    }\n  } // Force hide of tip (internal method)\n\n\n  forceHide() {\n    if (!this.$tip || !hasClass(this.$tip, ClassName.SHOW)) {\n      /* istanbul ignore next */\n      return;\n    } // Disable while open listeners/watchers\n\n\n    this.setWhileOpenListeners(false); // Clear any hover enter/leave event\n\n    clearTimeout(this.$hoverTimeout);\n    this.$hoverTimeout = null;\n    this.$hoverState = ''; // Hide the tip\n\n    this.hide(null, true);\n  } // Hide tooltip\n\n\n  hide(callback, force) {\n    const tip = this.$tip;\n\n    if (!tip) {\n      /* istanbul ignore next */\n      return;\n    } // Create a cancelable BvEvent\n\n\n    const hideEvt = new bv_event_class('hide', {\n      // We disable cancelling if force is true\n      cancelable: !force,\n      target: this.$element,\n      relatedTarget: tip\n    });\n    this.emitEvent(hideEvt);\n\n    if (hideEvt.defaultPrevented) {\n      // Don't hide if event cancelled\n      return;\n    } // Transitionend callback\n\n\n    const complete = () => {\n      if (this.$hoverState !== HoverState.SHOW && tip.parentNode) {\n        // Remove tip from DOM, and force recompile on next show\n        tip.parentNode.removeChild(tip);\n        this.removeAriaDescribedby();\n        this.removePopper();\n        this.$tip = null;\n      }\n\n      if (callback) {\n        callback();\n      } // Create a non-cancelable BvEvent\n\n\n      const hiddenEvt = new bv_event_class('hidden', {\n        cancelable: false,\n        target: this.$element,\n        relatedTarget: null\n      });\n      this.emitEvent(hiddenEvt);\n    }; // Disable while open listeners/watchers\n\n\n    this.setWhileOpenListeners(false); // If forced close, disable animation\n\n    if (force) {\n      removeClass(tip, ClassName.FADE);\n    } // Hide tip\n\n\n    removeClass(tip, ClassName.SHOW);\n    this.$activeTrigger.click = false;\n    this.$activeTrigger.focus = false;\n    this.$activeTrigger.hover = false; // Start the hide transition\n\n    this.transitionOnce(tip, complete);\n    this.$hoverState = '';\n  }\n\n  emitEvent(evt) {\n    const evtName = evt.type;\n    const $root = this.$root;\n\n    if ($root && $root.$emit) {\n      // Emit an event on $root\n      $root.$emit(\"bv::\".concat(this.constructor.NAME, \"::\").concat(evtName), evt);\n    }\n\n    const callbacks = this.$config.callbacks || {};\n\n    if (isFunction(callbacks[evtName])) {\n      callbacks[evtName](evt);\n    }\n  }\n\n  getContainer() {\n    const container = this.$config.container;\n    const body = document.body; // If we are in a modal, we append to the modal instead of body,\n    // unless a container is specified\n\n    return container === false ? closest(MODAL_CLASS, this.$element) || body : dom_select(container, body) || body;\n  } // Will be overridden by PopOver if needed\n\n\n  addAriaDescribedby() {\n    // Add aria-describedby on trigger element, without removing any other IDs\n    let desc = getAttr(this.$element, 'aria-describedby') || '';\n    desc = desc.split(/\\s+/).concat(this.$id).join(' ').trim();\n    setAttr(this.$element, 'aria-describedby', desc);\n  } // Will be overridden by PopOver if needed\n\n\n  removeAriaDescribedby() {\n    let desc = getAttr(this.$element, 'aria-describedby') || '';\n    desc = desc.split(/\\s+/).filter(d => d !== this.$id).join(' ').trim();\n\n    if (desc) {\n      /* istanbul ignore next */\n      setAttr(this.$element, 'aria-describedby', desc);\n    } else {\n      removeAttr(this.$element, 'aria-describedby');\n    }\n  }\n\n  removePopper() {\n    if (this.$popper) {\n      this.$popper.destroy();\n    }\n\n    this.$popper = null;\n  }\n\n  transitionOnce(tip, complete) {\n    const transEvents = this.getTransitionEndEvents();\n    let called = false;\n    clearTimeout(this.$fadeTimeout);\n    this.$fadeTimeout = null;\n\n    const fnOnce = () => {\n      if (called) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      called = true;\n      clearTimeout(this.$fadeTimeout);\n      this.$fadeTimeout = null;\n      transEvents.forEach(evtName => {\n        eventOff(tip, evtName, fnOnce, EvtOpts);\n      }); // Call complete callback\n\n      complete();\n    };\n\n    if (hasClass(tip, ClassName.FADE)) {\n      transEvents.forEach(evtName => {\n        eventOn(tip, evtName, fnOnce, EvtOpts);\n      }); // Fallback to setTimeout()\n\n      this.$fadeTimeout = setTimeout(fnOnce, TRANSITION_DURATION);\n    } else {\n      fnOnce();\n    }\n  } // What transitionend event(s) to use? (returns array of event names)\n\n\n  getTransitionEndEvents() {\n    for (const name in tooltip_class_TransitionEndEvents) {\n      if (!isUndefined(this.$element.style[name])) {\n        return tooltip_class_TransitionEndEvents[name];\n      }\n    } // Fallback\n\n    /* istanbul ignore next */\n\n\n    return [];\n  }\n  /* istanbul ignore next */\n\n\n  update() {\n    if (!isNull(this.$popper)) {\n      this.$popper.scheduleUpdate();\n    }\n  } // NOTE: Overridden by PopOver class\n\n\n  isWithContent(tip) {\n    tip = tip || this.$tip;\n\n    if (!tip) {\n      /* istanbul ignore next */\n      return false;\n    }\n\n    return Boolean((dom_select(tooltip_class_Selector.TOOLTIP_INNER, tip) || {}).innerHTML);\n  } // NOTE: Overridden by PopOver class\n\n\n  addAttachmentClass(attachment) {\n    addClass(this.getTipElement(), \"\".concat(CLASS_PREFIX, \"-\").concat(attachment));\n  }\n\n  getTipElement() {\n    if (!this.$tip) {\n      // Try and compile user supplied template, or fallback to default template\n      this.$tip = this.compileTemplate(this.$config.template) || this.compileTemplate(this.constructor.Default.template);\n    } // Add tab index so tip can be focused, and to allow it to be\n    // set as relatedTarget in focusin/out events\n\n\n    this.$tip.tabIndex = -1;\n    return this.$tip;\n  }\n\n  compileTemplate(html) {\n    if (!html || !isString(html)) {\n      /* istanbul ignore next */\n      return null;\n    }\n\n    let div = document.createElement('div');\n    div.innerHTML = html.trim();\n    const node = div.firstElementChild ? div.removeChild(div.firstElementChild) : null;\n    div = null;\n    return node;\n  } // NOTE: Overridden by PopOver class\n\n\n  setContent(tip) {\n    this.setElementContent(dom_select(tooltip_class_Selector.TOOLTIP_INNER, tip), this.getTitle());\n    removeClass(tip, ClassName.FADE);\n    removeClass(tip, ClassName.SHOW);\n  }\n\n  setElementContent(container, content) {\n    if (!container) {\n      // If container element doesn't exist, just return\n\n      /* istanbul ignore next */\n      return;\n    }\n\n    const allowHtml = this.$config.html;\n\n    if (Object(object[\"h\" /* isObject */])(content) && content.nodeType) {\n      // Content is a DOM node\n      if (allowHtml) {\n        if (content.parentElement !== container) {\n          container.innerHTML = '';\n          container.appendChild(content);\n        }\n      } else {\n        /* istanbul ignore next */\n        container.innerText = content.innerText;\n      }\n    } else {\n      // We have a plain HTML string or Text\n      container[allowHtml ? 'innerHTML' : 'innerText'] = content;\n    }\n  } // NOTE: Overridden by PopOver class\n\n\n  getTitle() {\n    let title = this.$config.title || '';\n\n    if (isFunction(title)) {\n      // Call the function to get the title value\n\n      /* istanbul ignore next */\n      title = title(this.$element);\n    }\n\n    if (Object(object[\"h\" /* isObject */])(title) && title.nodeType && !title.innerHTML.trim()) {\n      // We have a DOM node, but without inner content,\n      // so just return empty string\n\n      /* istanbul ignore next */\n      title = '';\n    }\n\n    if (isString(title)) {\n      title = title.trim();\n    }\n\n    if (!title) {\n      // If an explicit title is not given, try element's title attributes\n      title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\n      title = title.trim();\n    }\n\n    return title;\n  }\n\n  static getAttachment(placement) {\n    return tooltip_class_AttachmentMap[placement.toUpperCase()];\n  }\n\n  listen() {\n    const el = this.$element;\n    /* istanbul ignore next */\n\n    if (!el) {\n      return;\n    }\n\n    const triggers = this.$config.trigger.trim().split(/\\s+/); // Listen for global show/hide events\n\n    this.setRootListener(true); // Using 'this' as the handler will get automatically directed to\n    // this.handleEvent and maintain our binding to 'this'\n\n    triggers.forEach(trigger => {\n      if (trigger === 'click') {\n        eventOn(el, 'click', this, EvtOpts);\n      } else if (trigger === 'focus') {\n        eventOn(el, 'focusin', this, EvtOpts);\n        eventOn(el, 'focusout', this, EvtOpts);\n      } else if (trigger === 'blur') {\n        // Used to close $tip when element looses focus\n        eventOn(el, 'focusout', this, EvtOpts);\n      } else if (trigger === 'hover') {\n        eventOn(el, 'mouseenter', this, EvtOpts);\n        eventOn(el, 'mouseleave', this, EvtOpts);\n      }\n    }, this);\n  }\n\n  unListen() {\n    const el = this.$element;\n    /* istanbul ignore next */\n\n    if (!el) {\n      return;\n    }\n\n    const events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave']; // Using \"this\" as the handler will get automatically directed to this.handleEvent\n\n    events.forEach(evt => {\n      eventOff(el, evt, this, EvtOpts);\n    }, this); // Stop listening for global show/hide/enable/disable events\n\n    this.setRootListener(false);\n  }\n\n  handleEvent(e) {\n    // This special method allows us to use \"this\" as the event handlers\n    if (dom_isDisabled(this.$element)) {\n      // If disabled, don't do anything. Note: If tip is shown before element gets\n      // disabled, then tip not close until no longer disabled or forcefully closed.\n\n      /* istanbul ignore next */\n      return;\n    }\n\n    if (!this.$isEnabled) {\n      // If not enable\n      return;\n    }\n\n    const type = e.type;\n    const target = e.target;\n    const relatedTarget = e.relatedTarget;\n    const $element = this.$element;\n    const $tip = this.$tip;\n\n    if (type === 'click') {\n      this.toggle(e);\n    } else if (type === 'focusin' || type === 'mouseenter') {\n      this.enter(e);\n    } else if (type === 'focusout') {\n      // target is the element which is loosing focus\n      // and relatedTarget is the element gaining focus\n      if ($tip && $element && $element.contains(target) && $tip.contains(relatedTarget)) {\n        // If focus moves from $element to $tip, don't trigger a leave\n\n        /* istanbul ignore next */\n        return;\n      }\n\n      if ($tip && $element && $tip.contains(target) && $element.contains(relatedTarget)) {\n        // If focus moves from $tip to $element, don't trigger a leave\n\n        /* istanbul ignore next */\n        return;\n      }\n      /* istanbul ignore next: difficult to test */\n\n\n      if ($tip && $tip.contains(target) && $tip.contains(relatedTarget)) {\n        // If focus moves within $tip, don't trigger a leave\n        return;\n      }\n      /* istanbul ignore next: difficult to test */\n\n\n      if ($element && $element.contains(target) && $element.contains(relatedTarget)) {\n        // If focus moves within $element, don't trigger a leave\n        return;\n      } // Otherwise trigger a leave\n\n\n      this.leave(e);\n    } else if (type === 'mouseleave') {\n      this.leave(e);\n    }\n  }\n  /* istanbul ignore next */\n\n\n  setModalListener(on) {\n    const el = this.$element;\n    /* istanbul ignore next */\n\n    if (!el || !this.$root) {\n      return;\n    }\n\n    const modal = closest(MODAL_CLASS, el);\n\n    if (!modal) {\n      // If we are not in a modal, don't worry. be happy\n      return;\n    } // We can listen for modal hidden events on $root\n\n\n    this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.$forceHide);\n  }\n\n  setRootListener(on) {\n    // Listen for global 'bv::{hide|show}::{tooltip|popover}' hide request event\n    const $root = this.$root;\n\n    if ($root) {\n      $root[on ? '$on' : '$off'](\"bv::hide::\".concat(this.constructor.NAME), this.$doHide);\n      $root[on ? '$on' : '$off'](\"bv::show::\".concat(this.constructor.NAME), this.$doShow);\n      $root[on ? '$on' : '$off'](\"bv::disable::\".concat(this.constructor.NAME), this.$doDisable);\n      $root[on ? '$on' : '$off'](\"bv::enable::\".concat(this.constructor.NAME), this.$doEnable);\n    }\n  }\n\n  doHide(id) {\n    // Programmatically hide tooltip or popover\n    if (!id) {\n      // Close all tooltips or popovers\n      this.forceHide();\n    } else if (this.$element && this.$element.id && this.$element.id === id) {\n      // Close this specific tooltip or popover\n      this.hide();\n    }\n  }\n\n  doShow(id) {\n    // Programmatically show tooltip or popover\n    if (!id) {\n      // Open all tooltips or popovers\n      this.show();\n    } else if (id && this.$element && this.$element.id && this.$element.id === id) {\n      // Show this specific tooltip or popover\n      this.show();\n    }\n  }\n\n  doDisable(id) {\n    // Programmatically disable tooltip or popover\n    if (!id) {\n      // Disable all tooltips or popovers\n      this.disable();\n    } else if (this.$element && this.$element.id && this.$element.id === id) {\n      // Disable this specific tooltip or popover\n      this.disable();\n    }\n  }\n\n  doEnable(id) {\n    // Programmatically enable tooltip or popover\n    if (!id) {\n      // Enable all tooltips or popovers\n      this.enable();\n    } else if (this.$element && this.$element.id && this.$element.id === id) {\n      // Enable this specific tooltip or popover\n      this.enable();\n    }\n  }\n\n  setOnTouchStartListener(on) {\n    // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children\n    // Only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n    if ('ontouchstart' in document.documentElement) {\n      /* istanbul ignore next: JSDOM does not support 'ontouchstart' event */\n      Object(array[\"c\" /* from */])(document.body.children).forEach(el => {\n        if (on) {\n          eventOn(el, 'mouseover', this._noop);\n        } else {\n          eventOff(el, 'mouseover', this._noop);\n        }\n      });\n    }\n  }\n\n  fixTitle() {\n    const el = this.$element;\n\n    if (getAttr(el, 'title') || !isString(getAttr(el, 'data-original-title'))) {\n      setAttr(el, 'data-original-title', getAttr(el, 'title') || '');\n      setAttr(el, 'title', '');\n    }\n  } // Enter handler\n\n\n  enter(e) {\n    if (e) {\n      this.$activeTrigger[e.type === 'focusin' ? 'focus' : 'hover'] = true;\n    }\n\n    if (hasClass(this.getTipElement(), ClassName.SHOW) || this.$hoverState === HoverState.SHOW) {\n      this.$hoverState = HoverState.SHOW;\n      return;\n    }\n\n    clearTimeout(this.$hoverTimeout);\n    this.$hoverState = HoverState.SHOW;\n\n    if (!this.$config.delay || !this.$config.delay.show) {\n      this.show();\n      return;\n    }\n\n    this.$hoverTimeout = setTimeout(() => {\n      if (this.$hoverState === HoverState.SHOW) {\n        this.show();\n      }\n    }, this.$config.delay.show);\n  } // Leave handler\n\n\n  leave(e) {\n    if (e) {\n      this.$activeTrigger[e.type === 'focusout' ? 'focus' : 'hover'] = false;\n\n      if (e.type === 'focusout' && /blur/.test(this.$config.trigger)) {\n        // Special case for `blur`: we clear out the other triggers\n        this.$activeTrigger.click = false;\n        this.$activeTrigger.hover = false;\n      }\n    }\n\n    if (this.isWithActiveTrigger()) {\n      return;\n    }\n\n    clearTimeout(this.$hoverTimeout);\n    this.$hoverState = HoverState.OUT;\n\n    if (!this.$config.delay || !this.$config.delay.hide) {\n      this.hide();\n      return;\n    }\n\n    this.$hoverTimeout = setTimeout(() => {\n      if (this.$hoverState === HoverState.OUT) {\n        this.hide();\n      }\n    }, this.$config.delay.hide);\n  }\n\n  getPopperConfig(placement, tip) {\n    return {\n      placement: this.constructor.getAttachment(placement),\n      modifiers: {\n        offset: {\n          offset: this.getOffset(placement, tip)\n        },\n        flip: {\n          behavior: this.$config.fallbackPlacement\n        },\n        arrow: {\n          element: '.arrow'\n        },\n        preventOverflow: {\n          padding: this.$config.boundaryPadding,\n          boundariesElement: this.$config.boundary\n        }\n      },\n      onCreate: data => {\n        // Handle flipping arrow classes\n\n        /* istanbul ignore next */\n        if (data.originalPlacement !== data.placement) {\n          this.handlePopperPlacementChange(data);\n        }\n      },\n      onUpdate: data => {\n        // Handle flipping arrow classes\n\n        /* istanbul ignore next */\n        this.handlePopperPlacementChange(data);\n      }\n    };\n  }\n  /* istanbul ignore next */\n\n\n  getOffset(placement, tip) {\n    if (!this.$config.offset) {\n      const arrow = dom_select(tooltip_class_Selector.ARROW, tip);\n      const arrowOffset = parseFloat(getCS(arrow).width) + parseFloat(this.$config.arrowPadding);\n\n      switch (OffsetMap[placement.toUpperCase()]) {\n        case +1:\n          return \"+50%p - \".concat(arrowOffset, \"px\");\n\n        case -1:\n          return \"-50%p + \".concat(arrowOffset, \"px\");\n\n        default:\n          return 0;\n      }\n    }\n\n    return this.$config.offset;\n  }\n\n  getPlacement() {\n    const placement = this.$config.placement;\n\n    if (isFunction(placement)) {\n      /* istanbul ignore next */\n      return placement.call(this, this.$tip, this.$element);\n    }\n\n    return placement;\n  }\n\n  isWithActiveTrigger() {\n    for (const trigger in this.$activeTrigger) {\n      if (this.$activeTrigger[trigger]) {\n        return true;\n      }\n    }\n\n    return false;\n  } // NOTE: Overridden by PopOver class\n\n  /* istanbul ignore next */\n\n\n  cleanTipClass() {\n    const tip = this.getTipElement();\n    const tabClass = tip.className.match(BS_CLASS_PREFIX_REGEX);\n\n    if (!isNull(tabClass) && tabClass.length > 0) {\n      tabClass.forEach(cls => {\n        removeClass(tip, cls);\n      });\n    }\n  }\n  /* istanbul ignore next */\n\n\n  handlePopperPlacementChange(data) {\n    this.cleanTipClass();\n    this.addAttachmentClass(this.constructor.getAttachment(data.placement));\n  }\n  /* istanbul ignore next */\n\n\n  fixTransition(tip) {\n    const initConfigAnimation = this.$config.animation || false;\n\n    if (!isNull(getAttr(tip, 'x-placement'))) {\n      return;\n    }\n\n    removeClass(tip, ClassName.FADE);\n    this.$config.animation = false;\n    this.hide();\n    this.show();\n    this.$config.animation = initConfigAnimation;\n  }\n\n}\n\n/* harmony default export */ var tooltip_class = (tooltip_class_ToolTip);\n// CONCATENATED MODULE: ./src/utils/popover.class.js\n\n\n\n\n\n\nconst popover_class_NAME = 'popover';\nconst popover_class_CLASS_PREFIX = 'bs-popover';\nconst popover_class_BS_CLASS_PREFIX_REGEX = new RegExp(\"\\\\b\".concat(popover_class_CLASS_PREFIX, \"\\\\S+\"), 'g');\n\nconst popover_class_Defaults = Object(objectSpread[\"a\" /* default */])({}, tooltip_class.Default, {\n  placement: 'right',\n  trigger: 'click',\n  content: '',\n  template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n});\n\nconst popover_class_ClassName = {\n  FADE: 'fade',\n  SHOW: 'show'\n};\nconst popover_class_Selector = {\n  TITLE: '.popover-header',\n  CONTENT: '.popover-body'\n};\n\nclass popover_class_PopOver extends tooltip_class {\n  // --- Getter overrides ---\n  static get Default() {\n    return popover_class_Defaults;\n  }\n\n  static get NAME() {\n    return popover_class_NAME;\n  } // --- Method overrides ---\n\n\n  isWithContent(tip) {\n    tip = tip || this.$tip;\n\n    if (!tip) {\n      /* istanbul ignore next */\n      return false;\n    }\n\n    const hasTitle = Boolean((dom_select(popover_class_Selector.TITLE, tip) || {}).innerHTML);\n    const hasContent = Boolean((dom_select(popover_class_Selector.CONTENT, tip) || {}).innerHTML);\n    return hasTitle || hasContent;\n  }\n\n  addAttachmentClass(attachment)\n  /* istanbul ignore next */\n  {\n    addClass(this.getTipElement(), \"\".concat(popover_class_CLASS_PREFIX, \"-\").concat(attachment));\n  }\n\n  setContent(tip) {\n    // we use append for html objects to maintain js events/components\n    this.setElementContent(dom_select(popover_class_Selector.TITLE, tip), this.getTitle());\n    this.setElementContent(dom_select(popover_class_Selector.CONTENT, tip), this.getContent());\n    removeClass(tip, popover_class_ClassName.FADE);\n    removeClass(tip, popover_class_ClassName.SHOW);\n  } // This method may look identical to ToolTip version, but it uses a different RegEx defined above\n\n\n  cleanTipClass()\n  /* istanbul ignore next */\n  {\n    const tip = this.getTipElement();\n    const tabClass = tip.className.match(popover_class_BS_CLASS_PREFIX_REGEX);\n\n    if (!isNull(tabClass) && tabClass.length > 0) {\n      tabClass.forEach(cls => {\n        removeClass(tip, cls);\n      });\n    }\n  }\n\n  getTitle() {\n    let title = this.$config.title || '';\n    /* istanbul ignore next */\n\n    if (isFunction(title)) {\n      title = title(this.$element);\n    }\n    /* istanbul ignore next */\n\n\n    if (Object(object[\"h\" /* isObject */])(title) && title.nodeType && !title.innerHTML.trim()) {\n      // We have a dom node, but without inner content, so just return an empty string\n      title = '';\n    }\n\n    if (isString(title)) {\n      title = title.trim();\n    }\n\n    if (!title) {\n      // Try and grab element's title attribute\n      title = getAttr(this.$element, 'title') || getAttr(this.$element, 'data-original-title') || '';\n      title = title.trim();\n    }\n\n    return title;\n  } // New methods\n\n\n  getContent() {\n    let content = this.$config.content || '';\n    /* istanbul ignore next */\n\n    if (isFunction(content)) {\n      content = content(this.$element);\n    }\n    /* istanbul ignore next */\n\n\n    if (Object(object[\"h\" /* isObject */])(content) && content.nodeType && !content.innerHTML.trim()) {\n      // We have a dom node, but without inner content, so just return an empty string\n      content = '';\n    }\n\n    if (isString(content)) {\n      content = content.trim();\n    }\n\n    return content;\n  }\n\n}\n\n/* harmony default export */ var popover_class = (popover_class_PopOver);\n// CONCATENATED MODULE: ./src/mixins/toolpop.js\n\n\n/*\n * Tooltip/Popover component mixin\n * Common props\n */\n\n\n\n // --- Constants ---\n\nconst PLACEMENTS = {\n  top: 'top',\n  topleft: 'topleft',\n  topright: 'topright',\n  right: 'right',\n  righttop: 'righttop',\n  rightbottom: 'rightbottom',\n  bottom: 'bottom',\n  bottomleft: 'bottomleft',\n  bottomright: 'bottomright',\n  left: 'left',\n  lefttop: 'lefttop',\n  leftbottom: 'leftbottom',\n  auto: 'auto'\n};\nconst toolpop_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  attributes: true,\n  attributeFilter: ['class', 'style'] // @vue/component\n\n};\n/* harmony default export */ var toolpop = ({\n  props: {\n    target: {\n      // String ID of element, or element/component reference\n      type: [String, Object, HTMLElement, Function] // default: undefined\n\n    },\n    offset: {\n      type: [Number, String],\n      default: 0\n    },\n    noFade: {\n      type: Boolean,\n      default: false\n    },\n    container: {\n      // String ID of container, if null body is used (default)\n      type: String,\n      default: null\n    },\n    show: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      // semaphore for preventing multiple show events\n      localShow: false\n    };\n  },\n\n  computed: {\n    baseConfig() {\n      const cont = this.container;\n      let delay = Object(object[\"h\" /* isObject */])(this.delay) ? this.delay : parseInt(this.delay, 10) || 0;\n      return {\n        // Title prop\n        title: (this.title || '').trim() || '',\n        // Content prop (if popover)\n        content: (this.content || '').trim() || '',\n        // Tooltip/Popover placement\n        placement: PLACEMENTS[this.placement] || 'auto',\n        // Tooltip/popover fallback placemenet\n        fallbackPlacement: this.fallbackPlacement || 'flip',\n        // Container currently needs to be an ID with '#' prepended, if null then body is used\n        container: cont ? /^#/.test(cont) ? cont : \"#\".concat(cont) : false,\n        // boundariesElement passed to popper\n        boundary: this.boundary,\n        // boundariesElement padding passed to popper\n        boundaryPadding: this.boundaryPadding,\n        // Show/Hide delay\n        delay: delay || 0,\n        // Offset can be css distance. if no units, pixels are assumed\n        offset: this.offset || 0,\n        // Disable fade Animation?\n        animation: !this.noFade,\n        // Open/Close Trigger(s)\n        trigger: Object(array[\"d\" /* isArray */])(this.triggers) ? this.triggers.join(' ') : this.triggers,\n        // Callbacks so we can trigger events on component\n        callbacks: {\n          show: this.onShow,\n          shown: this.onShown,\n          hide: this.onHide,\n          hidden: this.onHidden,\n          enabled: this.onEnabled,\n          disabled: this.onDisabled\n        }\n      };\n    }\n\n  },\n  watch: {\n    show(show, old) {\n      if (show !== old) {\n        show ? this.onOpen() : this.onClose();\n      }\n    },\n\n    disabled(disabled, old) {\n      if (disabled !== old) {\n        disabled ? this.onDisable() : this.onEnable();\n      }\n    },\n\n    localShow(show, old) {\n      if (show !== this.show) {\n        this.$emit('update:show', show);\n      }\n    }\n\n  },\n\n  created() {\n    // Create non-reactive property\n    this._toolpop = null;\n    this._obs_title = null;\n    this._obs_content = null;\n  },\n\n  mounted() {\n    // We do this in a next tick to ensure DOM has rendered first\n    this.$nextTick(() => {\n      // Instantiate ToolTip/PopOver on target\n      // The createToolpop method must exist in main component\n      if (this.createToolpop()) {\n        if (this.disabled) {\n          // Initially disabled\n          this.onDisable();\n        } // Listen to open signals from others\n\n\n        this.$on('open', this.onOpen); // Listen to close signals from others\n\n        this.$on('close', this.onClose); // Listen to disable signals from others\n\n        this.$on('disable', this.onDisable); // Listen to enable signals from others\n\n        this.$on('enable', this.onEnable); // Observe content Child changes so we can notify popper of possible size change\n\n        this.setObservers(true); // Set initially open state\n\n        if (this.show) {\n          this.onOpen();\n        }\n      }\n    });\n  },\n\n  updated() {\n    // If content/props changes, etc\n    if (this._toolpop) {\n      this._toolpop.updateConfig(this.getConfig());\n    }\n  },\n\n  activated()\n  /* istanbul ignore next: can't easily test in JSDOM */\n  {\n    // Called when component is inside a <keep-alive> and component brought offline\n    this.setObservers(true);\n  },\n\n  deactivated()\n  /* istanbul ignore next: can't easily test in JSDOM */\n  {\n    // Called when component is inside a <keep-alive> and component taken offline\n    if (this._toolpop) {\n      this.setObservers(false);\n\n      this._toolpop.hide();\n    }\n  },\n\n  beforeDestroy() {\n    // Shutdown our local event listeners\n    this.$off('open', this.onOpen);\n    this.$off('close', this.onClose);\n    this.$off('disable', this.onDisable);\n    this.$off('enable', this.onEnable);\n    this.setObservers(false); // bring our content back if needed\n\n    this.bringItBack();\n\n    if (this._toolpop) {\n      this._toolpop.destroy();\n\n      this._toolpop = null;\n    }\n  },\n\n  methods: {\n    getConfig() {\n      const cfg = Object(objectSpread[\"a\" /* default */])({}, this.baseConfig);\n\n      if (this.$refs.title && this.$refs.title.innerHTML.trim()) {\n        // If slot has content, it overrides 'title' prop\n        // We use the DOM node as content to allow components!\n        cfg.title = this.$refs.title;\n        cfg.html = true;\n      }\n\n      if (this.$refs.content && this.$refs.content.innerHTML.trim()) {\n        // If slot has content, it overrides 'content' prop\n        // We use the DOM node as content to allow components!\n        cfg.content = this.$refs.content;\n        cfg.html = true;\n      }\n\n      return cfg;\n    },\n\n    onOpen() {\n      if (this._toolpop && !this.localShow) {\n        this.localShow = true;\n\n        this._toolpop.show();\n      }\n    },\n\n    onClose(callback) {\n      // What is callback for ? it is not documented\n\n      /* istanbul ignore else */\n      if (this._toolpop && this.localShow) {\n        this._toolpop.hide(callback);\n      } else if (isFunction(callback)) {\n        // Is this even used?\n        callback();\n      }\n    },\n\n    onDisable() {\n      if (this._toolpop) {\n        this._toolpop.disable();\n      }\n    },\n\n    onEnable() {\n      if (this._toolpop) {\n        this._toolpop.enable();\n      }\n    },\n\n    updatePosition() {\n      /* istanbul ignore next: can't test in JSDOM until mutation observer is implemented */\n      if (this._toolpop) {\n        // Instruct popper to reposition popover if necessary\n        this._toolpop.update();\n      }\n    },\n\n    getTarget() {\n      let target = this.target;\n\n      if (isFunction(target)) {\n        /* istanbul ignore next */\n        target = target();\n      }\n      /* istanbul ignore else */\n\n\n      if (isString(target)) {\n        // Assume ID of element\n        return getById(target);\n      } else if (Object(object[\"h\" /* isObject */])(target) && isElement(target.$el)) {\n        // Component reference\n\n        /* istanbul ignore next */\n        return target.$el;\n      } else if (Object(object[\"h\" /* isObject */])(target) && isElement(target)) {\n        // Element reference\n\n        /* istanbul ignore next */\n        return target;\n      }\n      /* istanbul ignore next */\n\n\n      return null;\n    },\n\n    // Callbacks called by Tooltip/Popover class instance\n    onShow(evt) {\n      this.$emit('show', evt);\n      this.localShow = !(evt && evt.defaultPrevented);\n    },\n\n    onShown(evt) {\n      this.setObservers(true);\n      this.$emit('shown', evt);\n      this.localShow = true;\n    },\n\n    onHide(evt) {\n      this.$emit('hide', evt);\n      this.localShow = !!(evt && evt.defaultPrevented);\n    },\n\n    onHidden(evt) {\n      this.setObservers(false); // bring our content back if needed to keep Vue happy\n      // Tooltip class will move it back to tip when shown again\n\n      this.bringItBack();\n      this.$emit('hidden', evt);\n      this.localShow = false;\n    },\n\n    onEnabled(evt) {\n      /* istanbul ignore next */\n      if (!evt || evt.type !== 'enabled') {\n        // Prevent possible endless loop if user mistakenly fires enabled instead of enable\n        return;\n      }\n\n      this.$emit('update:disabled', false);\n      this.$emit('disabled');\n    },\n\n    onDisabled(evt) {\n      /* istanbul ignore next */\n      if (!evt || evt.type !== 'disabled') {\n        // Prevent possible endless loop if user mistakenly fires disabled instead of disable\n        return;\n      }\n\n      this.$emit('update:disabled', true);\n      this.$emit('enabled');\n    },\n\n    bringItBack() {\n      // bring our content back if needed to keep Vue happy\n      if (this.$el && this.$refs.title) {\n        this.$el.appendChild(this.$refs.title);\n      }\n\n      if (this.$el && this.$refs.content) {\n        this.$el.appendChild(this.$refs.content);\n      }\n    },\n\n    setObservers(on) {\n      if (on) {\n        if (this.$refs.title) {\n          this._obs_title = observe_dom(this.$refs.title, this.updatePosition.bind(this), toolpop_OBSERVER_CONFIG);\n        }\n\n        if (this.$refs.content) {\n          this._obs_content = observe_dom(this.$refs.content, this.updatePosition.bind(this), toolpop_OBSERVER_CONFIG);\n        }\n      } else {\n        if (this._obs_title) {\n          this._obs_title.disconnect();\n\n          this._obs_title = null;\n        }\n\n        if (this._obs_content) {\n          this._obs_content.disconnect();\n\n          this._obs_content = null;\n        }\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/popover/popover.js\n\n\n\n\n\n\n\n\nconst popover_NAME = 'BPopover';\nconst popover_props = {\n  title: {\n    type: String,\n    default: ''\n  },\n  content: {\n    type: String,\n    default: ''\n  },\n  triggers: {\n    type: [String, Array],\n    default: 'click'\n  },\n  placement: {\n    type: String,\n    default: 'right'\n  },\n  fallbackPlacement: {\n    type: [String, Array],\n    default: 'flip',\n\n    validator(value) {\n      return Object(array[\"d\" /* isArray */])(value) || Object(array[\"a\" /* arrayIncludes */])(['flip', 'clockwise', 'counterclockwise'], value);\n    }\n\n  },\n  delay: {\n    type: [Number, Object, String],\n    default: () => getComponentConfig(popover_NAME, 'delay')\n  },\n  boundary: {\n    // String: scrollParent, window, or viewport\n    // Element: element reference\n    type: [String, HTMLElement],\n    default: () => getComponentConfig(popover_NAME, 'boundary')\n  },\n  boundaryPadding: {\n    type: Number,\n    default: () => getComponentConfig(popover_NAME, 'boundaryPadding')\n  } // @vue/component\n\n};\nconst BPopover =\n/*#__PURE__*/\nvue.extend({\n  name: popover_NAME,\n  mixins: [toolpop, mixins_normalize_slot],\n  props: popover_props,\n\n  data() {\n    return {};\n  },\n\n  methods: {\n    createToolpop() {\n      // getTarget is in toolpop mixin\n      const target = this.getTarget();\n      /* istanbul ignore else */\n\n      if (target) {\n        this._toolpop = new popover_class(target, this.getConfig(), this);\n      } else {\n        this._toolpop = null;\n        utils_warn(\"b-popover: 'target' element not found!\");\n      }\n\n      return this._toolpop;\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      class: ['d-none'],\n      style: {\n        display: 'none'\n      },\n      attrs: {\n        'aria-hidden': true\n      }\n    }, [h('div', {\n      ref: 'title'\n    }, this.normalizeSlot('title')), h('div', {\n      ref: 'content'\n    }, this.normalizeSlot('default'))]);\n  }\n\n});\n/* harmony default export */ var popover = (BPopover);\n// CONCATENATED MODULE: ./src/directives/popover/popover.js\n\n\n\n\n\n\n\n\n // Key which we use to store tooltip object on element\n\nconst BV_POPOVER = '__BV_PopOver__'; // Valid event triggers\n\nconst validTriggers = {\n  focus: true,\n  hover: true,\n  click: true,\n  blur: true // Build a PopOver config based on bindings (if any)\n  // Arguments and modifiers take precedence over passed value config object\n\n  /* istanbul ignore next: not easy to test */\n\n};\n\nconst parseBindings = bindings =>\n/* istanbul ignore next: not easy to test */\n{\n  // We start out with a basic config\n  const NAME = 'BPopover';\n  let config = {\n    delay: getComponentConfig(NAME, 'delay'),\n    boundary: String(getComponentConfig(NAME, 'boundary')),\n    boundaryPadding: parseInt(getComponentConfig(NAME, 'boundaryPadding'), 10) || 0 // Process bindings.value\n\n  };\n\n  if (isString(bindings.value)) {\n    // Value is popover content (html optionally supported)\n    config.content = bindings.value;\n  } else if (isFunction(bindings.value)) {\n    // Content generator function\n    config.content = bindings.value;\n  } else if (Object(object[\"h\" /* isObject */])(bindings.value)) {\n    // Value is config object, so merge\n    config = Object(objectSpread[\"a\" /* default */])({}, config, bindings.value);\n  } // If argument, assume element ID of container element\n\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.container = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  Object(object[\"j\" /* keys */])(bindings.modifiers).forEach(mod => {\n    if (/^html$/.test(mod)) {\n      // Title allows HTML\n      config.html = true;\n    } else if (/^nofade$/.test(mod)) {\n      // no animation\n      config.animation = false;\n    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\n      // placement of popover\n      config.placement = mod;\n    } else if (/^(window|viewport|scrollParent)$/.test(mod)) {\n      // Boundary of popover\n      config.boundary = mod;\n    } else if (/^d\\d+$/.test(mod)) {\n      // Delay value\n      const delay = parseInt(mod.slice(1), 10) || 0;\n\n      if (delay) {\n        config.delay = delay;\n      }\n    } else if (/^o-?\\d+$/.test(mod)) {\n      // Offset value (negative allowed)\n      const offset = parseInt(mod.slice(1), 10) || 0;\n\n      if (offset) {\n        config.offset = offset;\n      }\n    }\n  }); // Special handling of event trigger modifiers trigger is\n  // a space separated list\n\n  const selectedTriggers = {}; // Parse current config object trigger\n\n  let triggers = isString(config.trigger) ? config.trigger.trim().split(/\\s+/) : [];\n  triggers.forEach(trigger => {\n    if (validTriggers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Parse modifiers for triggers\n\n  Object(object[\"j\" /* keys */])(validTriggers).forEach(trigger => {\n    if (bindings.modifiers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Sanitize triggers\n\n  config.trigger = Object(object[\"j\" /* keys */])(selectedTriggers).join(' ');\n\n  if (config.trigger === 'blur') {\n    // Blur by itself is useless, so convert it to focus\n    config.trigger = 'focus';\n  }\n\n  if (!config.trigger) {\n    // Remove trigger config\n    delete config.trigger;\n  }\n\n  return config;\n}; // Add or update PopOver on our element\n\n\nconst applyPopover = (el, bindings, vnode) => {\n  if (!env[\"j\" /* isBrowser */]) {\n    /* istanbul ignore next */\n    return;\n  } // Popper is required for PopOvers to work\n\n\n  if (!popper[\"a\" /* default */]) {\n    /* istanbul ignore next */\n    utils_warn('v-b-popover: Popper.js is required for PopOvers to work');\n    /* istanbul ignore next */\n\n    return;\n  }\n\n  const config = parseBindings(bindings);\n\n  if (el[BV_POPOVER]) {\n    el[BV_POPOVER].updateConfig(config);\n  } else {\n    el[BV_POPOVER] = new popover_class(el, config, vnode.context);\n  }\n}; // Remove PopOver on our element\n\n\nconst removePopover = el => {\n  if (el[BV_POPOVER]) {\n    el[BV_POPOVER].destroy();\n    el[BV_POPOVER] = null;\n    delete el[BV_POPOVER];\n  }\n};\n/*\n * Export our directive\n */\n\n\nconst VBPopover = {\n  bind(el, bindings, vnode) {\n    applyPopover(el, bindings, vnode);\n  },\n\n  inserted(el, bindings, vnode) {\n    applyPopover(el, bindings, vnode);\n  },\n\n  update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyPopover(el, bindings, vnode);\n    }\n  },\n\n  componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyPopover(el, bindings, vnode);\n    }\n  },\n\n  unbind(el) {\n    removePopover(el);\n  }\n\n};\n/* harmony default export */ var popover_popover = (VBPopover);\n// CONCATENATED MODULE: ./src/components/popover/index.js\n\n\n\nconst PopoverPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BPopover: BPopover\n  },\n  directives: {\n    VBPopover: VBPopover\n  }\n});\n\n/* harmony default export */ var components_popover = (PopoverPlugin);\n// CONCATENATED MODULE: ./src/components/progress/progress-bar.js\n\n\n\n\n\n\nconst progress_bar_NAME = 'BProgressBar'; // @vue/component\n\nconst BProgressBar =\n/*#__PURE__*/\nvue.extend({\n  name: progress_bar_NAME,\n  mixins: [mixins_normalize_slot],\n  inject: {\n    bvProgress: {\n      default()\n      /* istanbul ignore next */\n      {\n        return {};\n      }\n\n    }\n  },\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    labelHtml: {\n      type: String\n    },\n    // $parent (this.bvProgress) prop values may take precedence over the following props\n    // Which is why they are defaulted to null\n    max: {\n      type: Number,\n      default: null\n    },\n    precision: {\n      type: Number,\n      default: null\n    },\n    variant: {\n      type: String,\n      default: () => getComponentConfig(progress_bar_NAME, 'variant')\n    },\n    striped: {\n      type: Boolean,\n      default: null\n    },\n    animated: {\n      type: Boolean,\n      default: null\n    },\n    showProgress: {\n      type: Boolean,\n      default: null\n    },\n    showValue: {\n      type: Boolean,\n      default: null\n    }\n  },\n  computed: {\n    progressBarClasses() {\n      return [this.computedVariant ? \"bg-\".concat(this.computedVariant) : '', this.computedStriped || this.computedAnimated ? 'progress-bar-striped' : '', this.computedAnimated ? 'progress-bar-animated' : ''];\n    },\n\n    progressBarStyles() {\n      return {\n        width: 100 * (this.value / this.computedMax) + '%'\n      };\n    },\n\n    computedProgress() {\n      const p = Math.pow(10, this.computedPrecision);\n      return Math.round(100 * p * this.value / this.computedMax) / p;\n    },\n\n    computedMax() {\n      // Prefer our max over parent setting\n      return isNumber(this.max) ? this.max : this.bvProgress.max || 100;\n    },\n\n    computedVariant() {\n      // Prefer our variant over parent setting\n      return this.variant || this.bvProgress.variant;\n    },\n\n    computedPrecision() {\n      // Prefer our precision over parent setting\n      return isNumber(this.precision) ? this.precision : this.bvProgress.precision || 0;\n    },\n\n    computedStriped() {\n      // Prefer our striped over parent setting\n      return isBoolean(this.striped) ? this.striped : this.bvProgress.striped || false;\n    },\n\n    computedAnimated() {\n      // Prefer our animated over parent setting\n      return isBoolean(this.animated) ? this.animated : this.bvProgress.animated || false;\n    },\n\n    computedShowProgress() {\n      // Prefer our showProgress over parent setting\n      return isBoolean(this.showProgress) ? this.showProgress : this.bvProgress.showProgress || false;\n    },\n\n    computedShowValue() {\n      // Prefer our showValue over parent setting\n      return isBoolean(this.showValue) ? this.showValue : this.bvProgress.showValue || false;\n    }\n\n  },\n\n  render(h) {\n    let childNodes = h(false);\n\n    if (this.hasNormalizedSlot('default')) {\n      childNodes = this.normalizeSlot('default');\n    } else if (this.label || this.labelHtml) {\n      childNodes = h('span', {\n        domProps: htmlOrText(this.labelHtml, this.label)\n      });\n    } else if (this.computedShowProgress) {\n      childNodes = this.computedProgress.toFixed(this.computedPrecision);\n    } else if (this.computedShowValue) {\n      childNodes = this.value.toFixed(this.computedPrecision);\n    }\n\n    return h('div', {\n      staticClass: 'progress-bar',\n      class: this.progressBarClasses,\n      style: this.progressBarStyles,\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': '0',\n        'aria-valuemax': this.computedMax.toString(),\n        'aria-valuenow': this.value.toFixed(this.computedPrecision)\n      }\n    }, [childNodes]);\n  }\n\n});\n/* harmony default export */ var progress_bar = (BProgressBar);\n// CONCATENATED MODULE: ./src/components/progress/progress.js\n\n\n\n\nconst progress_NAME = 'BProgress'; // @vue/component\n\nconst BProgress =\n/*#__PURE__*/\nvue.extend({\n  name: progress_NAME,\n  mixins: [mixins_normalize_slot],\n\n  provide() {\n    return {\n      bvProgress: this\n    };\n  },\n\n  props: {\n    // These props can be inherited via the child b-progress-bar(s)\n    variant: {\n      type: String,\n      default: () => getComponentConfig(progress_NAME, 'variant')\n    },\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    animated: {\n      type: Boolean,\n      default: false\n    },\n    height: {\n      type: String,\n      default: null\n    },\n    precision: {\n      type: Number,\n      default: 0\n    },\n    showProgress: {\n      type: Boolean,\n      default: false\n    },\n    showValue: {\n      type: Boolean,\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    // This prop is not inherited by child b-progress-bar(s)\n    value: {\n      type: Number,\n      default: 0\n    }\n  },\n  computed: {\n    progressHeight() {\n      return {\n        height: this.height || null\n      };\n    }\n\n  },\n\n  render(h) {\n    let childNodes = this.normalizeSlot('default');\n\n    if (!childNodes) {\n      childNodes = h(BProgressBar, {\n        props: {\n          value: this.value,\n          max: this.max,\n          precision: this.precision,\n          variant: this.variant,\n          animated: this.animated,\n          striped: this.striped,\n          showProgress: this.showProgress,\n          showValue: this.showValue\n        }\n      });\n    }\n\n    return h('div', {\n      class: ['progress'],\n      style: this.progressHeight\n    }, [childNodes]);\n  }\n\n});\n/* harmony default export */ var progress = (BProgress);\n// CONCATENATED MODULE: ./src/components/progress/index.js\n\n\n\nconst ProgressPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BProgress: BProgress,\n    BProgressBar: BProgressBar\n  }\n});\n\n/* harmony default export */ var components_progress = (ProgressPlugin);\n// CONCATENATED MODULE: ./src/components/spinner/spinner.js\n\n\n\n\n\nconst spinner_NAME = 'BSpinner'; // @vue/component\n\nconst BSpinner =\n/*#__PURE__*/\nvue.extend({\n  name: spinner_NAME,\n  functional: true,\n  props: {\n    type: {\n      type: String,\n      default: 'border' // SCSS currently supports 'border' or 'grow'\n\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    variant: {\n      type: String,\n      default: () => getComponentConfig(spinner_NAME, 'variant')\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    role: {\n      type: String,\n      default: 'status'\n    },\n    tag: {\n      type: String,\n      default: 'span'\n    }\n  },\n\n  render(h, _ref) {\n    let {\n      props,\n      data,\n      slots,\n      scopedSlots\n    } = _ref;\n    const $slots = slots();\n    const $scopedSlots = scopedSlots || {};\n    let label = normalize_slot_normalizeSlot('label', {}, $scopedSlots, $slots) || props.label;\n\n    if (label) {\n      label = h('span', {\n        staticClass: 'sr-only'\n      }, label);\n    }\n\n    return h(props.tag, Object(lib_esm[\"a\" /* mergeData */])(data, {\n      attrs: {\n        role: label ? props.role || 'status' : null,\n        'aria-hidden': label ? null : 'true'\n      },\n      class: {\n        [\"spinner-\".concat(props.type)]: Boolean(props.type),\n        [\"spinner-\".concat(props.type, \"-sm\")]: props.small,\n        [\"text-\".concat(props.variant)]: Boolean(props.variant)\n      }\n    }), [label || h(false)]);\n  }\n\n});\n/* harmony default export */ var spinner = (BSpinner);\n// CONCATENATED MODULE: ./src/components/spinner/index.js\n\n\nconst SpinnerPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BSpinner: BSpinner\n  }\n});\n\n/* harmony default export */ var components_spinner = (SpinnerPlugin);\n// CONCATENATED MODULE: ./src/utils/startcase.js\n\n\n/**\n * Converts a string, including strings in camelCase or snake_case, into Start Case (a variant\n * of Title Case where all words start with a capital letter), it keeps original single quote\n * and hyphen in the word.\n *\n * Copyright (c) 2017 Compass (MIT)\n * https://github.com/UrbanCompass/to-start-case\n * @author Zhuoyuan Zhang <https://github.com/drawyan>\n * @author Wei Wang <https://github.com/onlywei>\n *\n *\n *   'management_companies' to 'Management Companies'\n *   'managementCompanies' to 'Management Companies'\n *   `hell's kitchen` to `Hell's Kitchen`\n *   `co-op` to `Co-op`\n *\n * @param {String} str\n * @returns {String}\n */\nconst startCase = str => str.replace(/_/g, ' ').replace(/([a-z])([A-Z])/g, (str, $1, $2) => $1 + ' ' + $2).replace(/(\\s|^)(\\w)/g, (str, $1, $2) => $1 + $2.toUpperCase());\n\n/* harmony default export */ var startcase = (startCase);\n// CONCATENATED MODULE: ./src/components/table/helpers/constants.js\n// Constants used by table helpers\n// Object of item keys that should be ignored for headers and stringification and filter events\nconst IGNORED_FIELD_KEYS = {\n  _rowVariant: true,\n  _cellVariants: true,\n  _showDetails: true // Filter CSS Selector for click/dblclick/etc events\n  // If any of these selectors match the clicked element, we ignore the event\n\n};\nconst EVENT_FILTER = ['a', 'a *', // include content inside links\n'button', 'button *', // include content inside buttons\n'input:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'textarea:not(.disabled):not([disabled])', '[role=\"link\"]', '[role=\"link\"] *', '[role=\"button\"]', '[role=\"button\"] *', '[tabindex]:not(.disabled):not([disabled])'].join(',');\n// CONCATENATED MODULE: ./src/components/table/helpers/normalize-fields.js\n\n\n\n\n // Private function to massage field entry into common object format\n\nconst processField = (key, value) => {\n  let field = null;\n\n  if (isString(value)) {\n    // Label shortcut\n    field = {\n      key: key,\n      label: value\n    };\n  } else if (isFunction(value)) {\n    // Formatter shortcut\n    field = {\n      key: key,\n      formatter: value\n    };\n  } else if (Object(object[\"h\" /* isObject */])(value)) {\n    field = Object(objectSpread[\"a\" /* default */])({}, value);\n    field.key = field.key || key;\n  } else if (value !== false) {\n    // Fallback to just key\n\n    /* istanbul ignore next */\n    field = {\n      key: key\n    };\n  }\n\n  return field;\n}; // We normalize fields into an array of objects\n// [ { key:..., label:..., ...}, {...}, ..., {..}]\n\n\nconst normalizeFields = (origFields, items) => {\n  let fields = [];\n\n  if (Object(array[\"d\" /* isArray */])(origFields)) {\n    // Normalize array Form\n    origFields.filter(f => f).forEach(f => {\n      if (isString(f)) {\n        fields.push({\n          key: f,\n          label: startcase(f)\n        });\n      } else if (Object(object[\"h\" /* isObject */])(f) && f.key && isString(f.key)) {\n        // Full object definition. We use assign so that we don't mutate the original\n        fields.push(Object(objectSpread[\"a\" /* default */])({}, f));\n      } else if (Object(object[\"h\" /* isObject */])(f) && Object(object[\"j\" /* keys */])(f).length === 1) {\n        // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }\n        const key = Object(object[\"j\" /* keys */])(f)[0];\n        const field = processField(key, f[key]);\n\n        if (field) {\n          fields.push(field);\n        }\n      }\n    });\n  } else if (origFields && Object(object[\"h\" /* isObject */])(origFields) && Object(object[\"j\" /* keys */])(origFields).length > 0) {\n    // Normalize object Form (deprecated)\n    Object(object[\"j\" /* keys */])(origFields).forEach(key => {\n      let field = processField(key, origFields[key]);\n\n      if (field) {\n        fields.push(field);\n      }\n    });\n  } // If no field provided, take a sample from first record (if exits)\n\n\n  if (fields.length === 0 && Object(array[\"d\" /* isArray */])(items) && items.length > 0) {\n    const sample = items[0];\n    Object(object[\"j\" /* keys */])(sample).forEach(k => {\n      if (!IGNORED_FIELD_KEYS[k]) {\n        fields.push({\n          key: k,\n          label: startcase(k)\n        });\n      }\n    });\n  } // Ensure we have a unique array of fields and that they have String labels\n\n\n  const memo = {};\n  return fields.filter(f => {\n    if (!memo[f.key]) {\n      memo[f.key] = true;\n      f.label = isString(f.label) ? f.label : startcase(f.key);\n      return true;\n    }\n\n    return false;\n  });\n};\n\n/* harmony default export */ var normalize_fields = (normalizeFields);\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-items.js\n\n\n\n/* harmony default export */ var mixin_items = ({\n  props: {\n    items: {\n      // Provider mixin adds in `Function` type\n      type: Array,\n\n      default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n\n    },\n    fields: {\n      // Object format is deprecated and should be avoided\n      type: [Array, Object],\n      default: null\n    },\n    primaryKey: {\n      // Primary key for record.\n      // If provided the value in each row must be unique!!!\n      type: String,\n      default: null\n    },\n    value: {\n      // v-model for retrieving the current displayed rows\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    }\n  },\n\n  data() {\n    return {\n      // Our local copy of the items. Must be an array\n      localItems: Object(array[\"d\" /* isArray */])(this.items) ? this.items.slice() : []\n    };\n  },\n\n  computed: {\n    computedFields() {\n      // We normalize fields into an array of objects\n      // [ { key:..., label:..., ...}, {...}, ..., {..}]\n      return normalize_fields(this.fields, this.localItems);\n    },\n\n    computedFieldsObj() {\n      // Fields as a simple lookup hash object\n      // Mainly for formatter lookup and scopedSlots for convenience\n      return this.computedFields.reduce((obj, f) => {\n        obj[f.key] = f;\n        return obj;\n      }, {});\n    },\n\n    computedItems() {\n      // Fallback if various mixins not provided\n      return (this.paginatedItems || this.sortedItems || this.filteredItems || this.localItems || []).slice();\n    },\n\n    context() {\n      // Current state of sorting, filtering and pagination props/values\n      return {\n        filter: this.localFilter,\n        sortBy: this.localSortBy,\n        sortDesc: this.localSortDesc,\n        perPage: parseInt(this.perPage, 10) || 0,\n        currentPage: parseInt(this.currentPage, 10) || 1,\n        apiUrl: this.apiUrl\n      };\n    }\n\n  },\n  watch: {\n    items(newItems) {\n      /* istanbul ignore else */\n      if (Object(array[\"d\" /* isArray */])(newItems)) {\n        // Set localItems/filteredItems to a copy of the provided array\n        this.localItems = newItems.slice();\n      } else if (isUndefined(newItems) || isNull(newItems)) {\n        /* istanbul ignore next */\n        this.localItems = [];\n      }\n    },\n\n    // Watch for changes on computedItems and update the v-model\n    computedItems(newVal) {\n      this.$emit('input', newVal);\n    },\n\n    // Watch for context changes\n    context(newVal, oldVal) {\n      // Emit context info for external paging/filtering/sorting handling\n      if (!loose_equal(newVal, oldVal)) {\n        this.$emit('context-changed', newVal);\n      }\n    }\n\n  },\n\n  mounted() {\n    // Initially update the v-model of displayed items\n    this.$emit('input', this.computedItems);\n  },\n\n  methods: {\n    // Method to get the formatter method for a given field key\n    getFieldFormatter(key) {\n      const fieldsObj = this.computedFieldsObj;\n      const field = fieldsObj[key];\n      const parent = this.$parent;\n      let formatter = field && field.formatter;\n\n      if (isString(formatter) && isFunction(parent[formatter])) {\n        formatter = parent[formatter];\n      } else if (!isFunction(formatter)) {\n        formatter = undefined;\n      } // Return formatter function or undefined if none\n\n\n      return formatter;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/sanitize-row.js\n\n // Return a copy of a row after all reserved fields have been filtered out\n// TODO: add option to specify which fields to include\n\nfunction sanitizeRow(row) {\n  return Object(object[\"j\" /* keys */])(row).reduce((obj, key) => {\n    // Ignore special fields that start with _\n    if (!IGNORED_FIELD_KEYS[key]) {\n      obj[key] = row[key];\n    }\n\n    return obj;\n  }, {});\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.sort.js\nvar es6_array_sort = __webpack_require__(38);\n\n// CONCATENATED MODULE: ./src/components/table/helpers/stringify-object-values.js\n\n\n // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Primitives (numbers/strings) are returned as-is\n// Null and undefined values are filtered out\n// Dates are converted to their native string format\n//\n\nfunction stringifyObjectValues(val) {\n  if (isUndefined(val) || isNull(val)) {\n    /* istanbul ignore next */\n    return '';\n  }\n\n  if (val instanceof Object && !(val instanceof Date)) {\n    // Arrays are also object, and keys just returns the array indexes\n    // Date objects we convert to strings\n    return Object(object[\"j\" /* keys */])(val).sort()\n    /* sort to prevent SSR issues on pre-rendered sorted tables */\n    .filter(v => !isUndefined(v) && !isNull(v))\n    /* ignore undefined/null values */\n    .map(k => stringifyObjectValues(val[k])).join(' ');\n  }\n\n  return String(val);\n}\n// CONCATENATED MODULE: ./src/components/table/helpers/stringify-record-values.js\n\n // Stringifies the values of a record, ignoring any special top level field keys\n// TODO: add option to strigify formatted/scopedSlot items, and only specific fields\n\nfunction stringifyRecordValues(row) {\n  /* istanbul ignore else */\n  if (row instanceof Object) {\n    return stringifyObjectValues(sanitizeRow(row));\n  } else {\n    /* istanbul ignore next */\n    return '';\n  }\n}\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-filtering.js\n\n\n\n\n\n\n\nconst DEPRECATION_MSG = 'Supplying a function to prop \"filter\" is deprecated. Use \"filter-function\" instead.';\n/* harmony default export */ var mixin_filtering = ({\n  props: {\n    filter: {\n      // Passing a function to filter is deprecated and should be avoided\n      type: [String, RegExp, Object, Array, Function],\n      default: null,\n      // `deprecated` -> Don't use this prop\n      // `deprecation` -> Refers to a change in prop usage\n      deprecation: DEPRECATION_MSG\n    },\n    filterFunction: {\n      type: Function,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      // Flag for displaying which empty slot to show and some event triggering\n      isFiltered: false\n    };\n  },\n\n  computed: {\n    localFiltering() {\n      return this.hasProvider ? !!this.noProviderFiltering : true;\n    },\n\n    // For watching changes to `filteredItems` vs `localItems`\n    filteredCheck() {\n      return {\n        filteredItems: this.filteredItems,\n        localItems: this.localItems,\n        localFilter: this.localFilter\n      };\n    },\n\n    // Sanitized/normalized version of filter prop\n    localFilter() {\n      // Deprecate setting prop filter to a function\n      // `localFilterFn` will contain the correct function ref\n      if (isFunction(this.filter)) {\n        /* istanbul ignore next */\n        return '';\n      } // Using internal filter function, which only accepts string or RegExp\n\n\n      if (this.localFiltering && !isFunction(this.filterFunction) && !(isString(this.filter) || isRegExp(this.filter))) {\n        return '';\n      } // Could be a string, object or array, as needed by external filter function\n      // We use `cloneDeep` to ensure we have a new copy of an object or array\n      // without Vue reactive observers\n\n\n      return clone_deep(this.filter);\n    },\n\n    // Sanitized/normalize filter-function prop\n    localFilterFn() {\n      const filterFn = this.filterFunction;\n      const filter = this.filter; // Prefer `filterFn` prop\n\n      if (isFunction(filterFn)) {\n        return filterFn;\n      } // Deprecate setting `filter` prop to a function\n\n\n      if (isFunction(filter)) {\n        /* istanbul ignore next */\n        utils_warn(\"b-table: \".concat(DEPRECATION_MSG));\n        /* istanbul ignore next */\n\n        return filter;\n      } // No `filterFunction`, so signal to use internal filter function\n\n\n      return null;\n    },\n\n    // Returns the records in `localItems` that match the filter criteria\n    // Returns the original `localItems` array if not sorting\n    filteredItems() {\n      let items = this.localItems || []; // Resolve the filtering function, when requested\n      // We prefer the provided filtering function and fallback to the internal one\n      // When no filtering criteria is specified the filtering factories will return `null`\n\n      let filterFn = null;\n\n      if (this.localFiltering) {\n        const criteria = this.localFilter;\n        filterFn = this.filterFnFactory(this.localFilterFn, criteria) || this.defaultFilterFnFactory(criteria);\n      } // We only do local filtering when requested and there are records to filter\n\n\n      if (filterFn && items.length > 0) {\n        return items.filter(filterFn);\n      } // Otherwise return all items\n\n\n      return items;\n    }\n\n  },\n  watch: {\n    // Watch for changes to the filter criteria and filtered items vs localItems).\n    // And set visual state and emit events as required\n    filteredCheck(_ref) {\n      let {\n        filteredItems,\n        localItems,\n        localFilter\n      } = _ref;\n      // Determine if the dataset is filtered or not\n      let isFiltered = false;\n\n      if (!localFilter) {\n        // If filter criteria is falsey\n        isFiltered = false;\n      } else if (loose_equal(localFilter, []) || loose_equal(localFilter, {})) {\n        // If filter criteria is an empty array or object\n        isFiltered = false;\n      } else if (localFilter) {\n        // If filter criteria is truthy\n        isFiltered = true;\n      }\n\n      if (isFiltered) {\n        this.$emit('filtered', filteredItems, filteredItems.length);\n      }\n\n      this.isFiltered = isFiltered;\n    },\n\n    isFiltered(newVal, oldVal) {\n      if (newVal === false && oldVal === true) {\n        // We need to emit a filtered event if isFiltered transitions from true to\n        // false so that users can update their pagination controls.\n        this.$emit('filtered', this.localItems, this.localItems.length);\n      }\n    }\n\n  },\n\n  created() {\n    // Set the initial filtered state.\n    // In a nextTick so that we trigger a filtered event if needed\n    this.$nextTick(() => {\n      this.isFiltered = Boolean(this.localFilter);\n    });\n  },\n\n  methods: {\n    // Filter Function factories\n    filterFnFactory(filterFn, criteria) {\n      // Wrapper factory for external filter functions.\n      // Wrap the provided filter-function and return a new function.\n      // Returns null if no filter-function defined or if criteria is falsey.\n      // Rather than directly grabbing this.computedLocalFilterFn or this.filterFunction\n      // we have it passed, so that the caller computed prop will be reactive to changes\n      // in the original filter-function (as this routine is a method)\n      if (!filterFn || !isFunction(filterFn) || !criteria || loose_equal(criteria, []) || loose_equal(criteria, {})) {\n        return null;\n      } // Build the wrapped filter test function, passing the criteria to the provided function\n\n\n      const fn = item => {\n        // Generated function returns true if the criteria matches part\n        // of the serialized data, otherwise false\n        return filterFn(item, criteria);\n      }; // Return the wrapped function\n\n\n      return fn;\n    },\n\n    defaultFilterFnFactory(criteria) {\n      // Generates the default filter function, using the given filter criteria\n      if (!criteria || !(isString(criteria) || isRegExp(criteria))) {\n        // Built in filter can only support strings or RegExp criteria (at the moment)\n        return null;\n      } // Build the regexp needed for filtering\n\n\n      let regexp = criteria;\n\n      if (isString(regexp)) {\n        // Escape special RegExp characters in the string and convert contiguous\n        // whitespace to \\s+ matches\n        const pattern = criteria.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&').replace(/[\\s\\uFEFF\\xA0]+/g, '\\\\s+'); // Build the RegExp (no need for global flag, as we only need\n        // to find the value once in the string)\n\n        regexp = new RegExp(\".*\".concat(pattern, \".*\"), 'i');\n      } // Generate the wrapped filter test function to use\n\n\n      const fn = item => {\n        // This searches all row values (and sub property values) in the entire (excluding\n        // special _ prefixed keys), because we convert the record to a space-separated\n        // string containing all the value properties (recursively), even ones that are\n        // not visible (not specified in this.fields).\n        //\n        // TODO: Enable searching on formatted fields and scoped slots\n        // TODO: Should we filter only on visible fields (i.e. ones in this.fields) by default?\n        // TODO: Allow for searching on specific fields/key, this could be combined with the previous TODO\n        // TODO: Give stringifyRecordValues extra options for filtering (i.e. passing the\n        //       fields definition and a reference to $scopedSlots)\n        //\n        // Generated function returns true if the criteria matches part of\n        // the serialized data, otherwise false\n        // We set lastIndex = 0 on regex in case someone uses the /g global flag\n        regexp.lastIndex = 0;\n        return regexp.test(stringifyRecordValues(item));\n      }; // Return the generated function\n\n\n      return fn;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/utils/stable-sort.js\n\n\n/*\n * Consistent and stable sort function across JavaScript platforms\n *\n * Inconsistent sorts can cause SSR problems between client and server\n * such as in <b-table> if sortBy is applied to the data on server side render.\n * Chrome and V8 native sorts are inconsistent/unstable\n *\n * This function uses native sort with fallback to index compare when the a and b\n * compare returns 0\n *\n * Algorithm based on:\n * https://stackoverflow.com/questions/1427608/fast-stable-sorting-algorithm-implementation-in-javascript/45422645#45422645\n *\n * @param {array} array to sort\n * @param {function} sort compare function\n * @return {array}\n */\nconst stableSort = (array, compareFn) => {\n  // Using `.bind(compareFn)` on the wrapped anonymous function improves\n  // performance by avoiding the function call setup. We don't use an arrow\n  // function here as it binds `this` to the `stableSort` context rather than\n  // the `compareFn` context, which wouldn't give us the performance increase.\n  return array.map((a, index) => [index, a]).sort(function (a, b) {\n    return this(a[1], b[1]) || a[0] - b[0];\n  }.bind(compareFn)).map(e => e[1]);\n};\n\n/* harmony default export */ var stable_sort = (stableSort);\n// CONCATENATED MODULE: ./src/components/table/helpers/default-sort-compare.js\n\n\n // Default sort compare routine\n//\n// TODO: Add option to sort by multiple columns (tri-state per column,\n//       plus order of columns in sort)  where sortBy could be an array\n//       of objects [ {key: 'foo', sortDir: 'asc'}, {key:'bar', sortDir: 'desc'} ...]\n//       or an array of arrays [ ['foo','asc'], ['bar','desc'] ]\n//       Multisort will most likely be handled in mixin-sort.js by\n//       calling this method for each sortBy\n\nfunction defaultSortCompare(a, b, sortBy, formatter, localeOpts, locale) {\n  let aa = utils_get(a, sortBy, '');\n  let bb = utils_get(b, sortBy, '');\n\n  if (isFunction(formatter)) {\n    aa = formatter(aa, sortBy, a);\n    bb = formatter(bb, sortBy, b);\n  }\n\n  aa = isUndefined(aa) || isNull(aa) ? '' : aa;\n  bb = isUndefined(bb) || isNull(bb) ? '' : bb;\n\n  if (isDate(aa) && isDate(bb) || isNumber(aa) && isNumber(bb)) {\n    // Special case for comparing dates and numbers\n    // Internally dates are compared via their epoch number values\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  } else {\n    // Do localized string comparison\n    return stringifyObjectValues(aa).localeCompare(stringifyObjectValues(bb), locale, localeOpts);\n  }\n}\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-sorting.js\n\n\n\n\n\n\n/* harmony default export */ var mixin_sorting = ({\n  props: {\n    sortBy: {\n      type: String,\n      default: ''\n    },\n    sortDesc: {\n      // To Do: Make this tri-state: true, false, null\n      type: Boolean,\n      default: false\n    },\n    sortDirection: {\n      // This prop is named incorrectly.\n      // It should be initialSortDirection\n      // As it is a bit misleading (not to mention screws up\n      // the Aria Label on the headers)\n      type: String,\n      default: 'asc',\n      validator: direction => Object(array[\"a\" /* arrayIncludes */])(['asc', 'desc', 'last'], direction)\n    },\n    sortCompare: {\n      type: Function,\n      default: null\n    },\n    sortCompareOptions: {\n      // Supported localCompare options, see `options` section of:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n      type: Object,\n      default: () => {\n        return {\n          numeric: true\n        };\n      }\n    },\n    sortCompareLocale: {\n      type: String // default: undefined\n\n    },\n    noSortReset: {\n      // Another prop that should have had a better name.\n      // It should be noSortClear (on non-sortable headers).\n      // We will need to make sure the documentation is clear on what\n      // this prop does (as well as in the code for future reference)\n      type: Boolean,\n      default: false\n    },\n    labelSortAsc: {\n      type: String,\n      default: 'Click to sort Ascending'\n    },\n    labelSortDesc: {\n      type: String,\n      default: 'Click to sort Descending'\n    },\n    labelSortClear: {\n      type: String,\n      default: 'Click to clear sorting'\n    },\n    noLocalSorting: {\n      type: Boolean,\n      default: false\n    },\n    noFooterSorting: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      localSortBy: this.sortBy || '',\n      localSortDesc: this.sortDesc || false\n    };\n  },\n\n  computed: {\n    localSorting() {\n      return this.hasProvider ? !!this.noProviderSorting : !this.noLocalSorting;\n    },\n\n    isSortable() {\n      return this.computedFields.some(f => f.sortable);\n    },\n\n    sortedItems() {\n      // Sorts the filtered items and returns a new array of the sorted items\n      // or the original items array if not sorted.\n      let items = (this.filteredItems || this.localItems || []).slice();\n      const sortBy = this.localSortBy;\n      const sortDesc = this.localSortDesc;\n      const sortCompare = this.sortCompare;\n      const localSorting = this.localSorting;\n\n      const sortOptions = Object(objectSpread[\"a\" /* default */])({}, this.sortCompareOptions, {\n        usage: 'sort'\n      });\n\n      const sortLocale = this.sortCompareLocale || undefined;\n\n      if (sortBy && localSorting) {\n        const formatter = this.getFieldFormatter(sortBy); // stableSort returns a new array, and leaves the original array intact\n\n        return stable_sort(items, (a, b) => {\n          let result = null;\n\n          if (isFunction(sortCompare)) {\n            // Call user provided sortCompare routine\n            result = sortCompare(a, b, sortBy, sortDesc, formatter, sortOptions, sortLocale);\n          }\n\n          if (isUndefined(result) || isNull(result) || result === false) {\n            // Fallback to built-in defaultSortCompare if sortCompare\n            // is not defined or returns null/false\n            result = defaultSortCompare(a, b, sortBy, formatter, sortOptions, sortLocale);\n          } // Negate result if sorting in descending order\n\n\n          return (result || 0) * (sortDesc ? -1 : 1);\n        });\n      }\n\n      return items;\n    }\n\n  },\n  watch: {\n    isSortable(newVal, oldVal)\n    /* istanbul ignore next: pain in the butt to test */\n    {\n      if (newVal) {\n        if (this.isSortable) {\n          this.$on('head-clicked', this.handleSort);\n        }\n      } else {\n        this.$off('head-clicked', this.handleSort);\n      }\n    },\n\n    sortDesc(newVal, oldVal) {\n      if (newVal === this.localSortDesc) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localSortDesc = newVal || false;\n    },\n\n    sortBy(newVal, oldVal) {\n      if (newVal === this.localSortBy) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      this.localSortBy = newVal || '';\n    },\n\n    // Update .sync props\n    localSortDesc(newVal, oldVal) {\n      // Emit update to sort-desc.sync\n      if (newVal !== oldVal) {\n        this.$emit('update:sortDesc', newVal);\n      }\n    },\n\n    localSortBy(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit('update:sortBy', newVal);\n      }\n    }\n\n  },\n\n  created() {\n    if (this.isSortable) {\n      this.$on('head-clicked', this.handleSort);\n    }\n  },\n\n  methods: {\n    // Handlers\n    // Need to move from thead-mixin\n    handleSort(key, field, evt, isFoot) {\n      if (!this.isSortable) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      if (isFoot && this.noFooterSorting) {\n        return;\n      } // TODO: make this tri-state sorting\n      // cycle desc => asc => none => desc => ...\n\n\n      let sortChanged = false;\n\n      const toggleLocalSortDesc = () => {\n        const sortDirection = field.sortDirection || this.sortDirection;\n\n        if (sortDirection === 'asc') {\n          this.localSortDesc = false;\n        } else if (sortDirection === 'desc') {\n          this.localSortDesc = true;\n        } else {// sortDirection === 'last'\n          // Leave at last sort direction from previous column\n        }\n      };\n\n      if (field.sortable) {\n        if (key === this.localSortBy) {\n          // Change sorting direction on current column\n          this.localSortDesc = !this.localSortDesc;\n        } else {\n          // Start sorting this column ascending\n          this.localSortBy = key; // this.localSortDesc = false\n\n          toggleLocalSortDesc();\n        }\n\n        sortChanged = true;\n      } else if (this.localSortBy && !this.noSortReset) {\n        this.localSortBy = '';\n        toggleLocalSortDesc();\n        sortChanged = true;\n      }\n\n      if (sortChanged) {\n        // Sorting parameters changed\n        this.$emit('sort-changed', this.context);\n      }\n    },\n\n    // methods to compute classes and attrs for thead>th cells\n    sortTheadThClasses(key, field, isFoot) {\n      return {// No Classes for sorting currently...\n        // All styles targeted using aria-* attrs\n      };\n    },\n\n    sortTheadThAttrs(key, field, isFoot) {\n      if (!this.isSortable || isFoot && this.noFooterSorting) {\n        // No attributes if not a sortable table\n        return {};\n      }\n\n      const sortable = field.sortable;\n      let ariaLabel = '';\n\n      if ((!field.label || !field.label.trim()) && !field.headerTitle) {\n        // In case field's label and title are empty/blank, we need to\n        // add a hint about what the column is about for non-sighted users.\n        // This is duplicated code from tbody-row mixin, but we need it\n        // here as well, since we overwrite the original aria-label.\n\n        /* istanbul ignore next */\n        ariaLabel = startcase(key);\n      } // The correctness of these labels is very important for screen-reader users.\n\n\n      let ariaLabelSorting = '';\n\n      if (sortable) {\n        if (this.localSortBy === key) {\n          // currently sorted sortable column.\n          ariaLabelSorting = this.localSortDesc ? this.labelSortAsc : this.labelSortDesc;\n        } else {\n          // Not currently sorted sortable column.\n          // Not using nested ternary's here for clarity/readability\n          // Default for ariaLabel\n          ariaLabelSorting = this.localSortDesc ? this.labelSortDesc : this.labelSortAsc; // Handle sortDirection setting\n\n          const sortDirection = this.sortDirection || field.sortDirection;\n\n          if (sortDirection === 'asc') {\n            ariaLabelSorting = this.labelSortAsc;\n          } else if (sortDirection === 'desc') {\n            ariaLabelSorting = this.labelSortDesc;\n          }\n        }\n      } else if (!this.noSortReset) {\n        // Non sortable column\n        ariaLabelSorting = this.localSortBy ? this.labelSortClear : '';\n      } // Assemble the aria-label attribute value\n\n\n      ariaLabel = [ariaLabel.trim(), ariaLabelSorting.trim()].filter(Boolean).join(': '); // Assemble the aria-sort attribute value\n\n      const ariaSort = sortable && this.localSortBy === key ? this.localSortDesc ? 'descending' : 'ascending' : sortable ? 'none' : null; // Return the attributes\n      // (All the above just to get these two values)\n\n      return {\n        'aria-label': ariaLabel || null,\n        'aria-sort': ariaSort\n      };\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-pagination.js\n/* harmony default export */ var mixin_pagination = ({\n  props: {\n    perPage: {\n      type: [Number, String],\n      default: 0\n    },\n    currentPage: {\n      type: [Number, String],\n      default: 1\n    }\n  },\n  computed: {\n    localPaging() {\n      return this.hasProvider ? !!this.noProviderPaging : true;\n    },\n\n    paginatedItems() {\n      let items = this.sortedItems || this.filteredItems || this.localItems || [];\n      const currentPage = Math.max(parseInt(this.currentPage, 10) || 1, 1);\n      const perPage = Math.max(parseInt(this.perPage, 10) || 0, 0); // Apply local pagination\n\n      if (this.localPaging && !!perPage) {\n        // Grab the current page of data (which may be past filtered items limit)\n        items = items.slice((currentPage - 1) * perPage, currentPage * perPage);\n      } // Return the items to display in the table\n\n\n      return items;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-caption.js\n\n/* harmony default export */ var mixin_caption = ({\n  props: {\n    caption: {\n      type: String,\n      default: null\n    },\n    captionHtml: {\n      type: String\n    },\n    captionTop: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    captionClasses() {\n      return {\n        'b-table-caption-top': this.captionTop\n      };\n    },\n\n    captionId() {\n      // Even though this.safeId looks like a method, it is a computed prop\n      // that returns a new function if the underlying ID changes\n      return this.isStacked ? this.safeId('_caption_') : null;\n    }\n\n  },\n  methods: {\n    renderCaption() {\n      const h = this.$createElement; // Build the caption\n\n      const $captionSlot = this.normalizeSlot('table-caption', {});\n      let $caption = h(false);\n\n      if ($captionSlot || this.caption || this.captionHtml) {\n        const data = {\n          key: 'caption',\n          class: this.captionClasses,\n          attrs: {\n            id: this.captionId\n          }\n        };\n\n        if (!$captionSlot) {\n          data.domProps = htmlOrText(this.captionHtml, this.caption);\n        }\n\n        $caption = h('caption', data, [$captionSlot]);\n      }\n\n      return $caption;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-colgroup.js\n/* harmony default export */ var mixin_colgroup = ({\n  methods: {\n    renderColgroup() {\n      const h = this.$createElement;\n      const fields = this.computedFields;\n      let $colgroup = h(false);\n\n      if (this.hasNormalizedSlot('table-colgroup')) {\n        $colgroup = h('colgroup', {\n          key: 'colgroup'\n        }, [this.normalizeSlot('table-colgroup', {\n          columns: fields.length,\n          fields: fields\n        })]);\n      }\n\n      return $colgroup;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/filter-event.js\n\n // Returns true of we should ignore the click/dbclick/keypress event\n// Avoids having the user need to use @click.stop on the form control\n\nfunction filterEvent(evt) {\n  if (!evt || !evt.target) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  const el = evt.target;\n\n  if (el.tagName === 'TD' || el.tagName === 'TH' || el.tagName === 'TR' || el.disabled) {\n    // Shortut all the following tests for efficiency\n    return false;\n  }\n\n  if (closest('.dropdown-menu', el)) {\n    // Click was in a dropdown menu, so ignore\n    return true;\n  }\n\n  const label = el.tagName === 'LABEL' ? el : closest('label', el);\n\n  if (label && label.control && !label.control.disabled) {\n    // If the label's form control is not disabled then we don't propagate evt\n    return true;\n  } // Else check to see if the event target matches one of the selectors in the event filter\n  // i.e. anchors, non disabled inputs, etc. Return true if we should ignore the event.\n\n\n  return matches(el, EVENT_FILTER);\n}\n// CONCATENATED MODULE: ./src/components/table/helpers/text-selection-active.js\n\n// Helper to determine if a there is an active text selection on the document page.\n// Used to filter out click events caused by the mouse up at end of selection\n//\n// Accepts an element as only argument to test to see if selection overlaps or is\n// contained within the element\n\nfunction textSelectionActive() {\n  let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  const win = window;\n  /* istanbul ignore if: JSDOM doesn't support getSelection */\n\n  if (win && win.getSelection && win.getSelection().toString() !== '' && isElement(el)) {\n    /* istanbul ignore next: JSDOM doesn't support getSelection */\n    const sel = win.getSelection();\n    /* istanbul ignore next: JSDOM doesn't support getSelection */\n\n    return sel.containsNode ? sel.containsNode(el, true) : false;\n  } else {\n    return false;\n  }\n}\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-thead.js\n\n\n\n\n\n\n\n/* harmony default export */ var mixin_thead = ({\n  props: {\n    headVariant: {\n      type: String,\n      default: () => getComponentConfig('BTable', 'headVariant')\n    },\n    theadClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    theadTrClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  },\n  computed: {\n    headClasses() {\n      return [this.headVariant ? 'thead-' + this.headVariant : '', this.theadClass];\n    }\n\n  },\n  methods: {\n    fieldClasses(field) {\n      // header field (th) classes\n      return [field.variant ? 'table-' + field.variant : '', field.class ? field.class : '', field.thClass ? field.thClass : ''];\n    },\n\n    headClicked(evt, field, isFoot) {\n      if (this.stopIfBusy && this.stopIfBusy(evt)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (filterEvent(evt)) {\n        // clicked on a non-disabled control so ignore\n        return;\n      } else if (textSelectionActive(this.$el)) {\n        // User is selecting text, so ignore\n\n        /* istanbul ignore next: JSDOM doesn't support getSelection() */\n        return;\n      }\n\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.$emit('head-clicked', field.key, field, evt, isFoot);\n    },\n\n    renderThead() {\n      let isFoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      const h = this.$createElement;\n      const fields = this.computedFields || [];\n\n      if (this.isStacked === true || fields.length === 0) {\n        // In always stacked mode, we don't bother rendering the head/foot.\n        // Or if no field headings (empty table)\n        return h(false);\n      } // Helper function to generate a field TH cell\n\n\n      const makeCell = (field, colIndex) => {\n        let ariaLabel = null;\n\n        if (!field.label.trim() && !field.headerTitle) {\n          // In case field's label and title are empty/blank\n          // We need to add a hint about what the column is about for non-sighted users\n\n          /* istanbul ignore next */\n          ariaLabel = startcase(field.key);\n        }\n\n        const hasHeadClickListener = this.$listeners['head-clicked'] || this.isSortable;\n        const handlers = {};\n\n        if (hasHeadClickListener) {\n          handlers.click = evt => {\n            this.headClicked(evt, field, isFoot);\n          };\n\n          handlers.keydown = evt => {\n            const keyCode = evt.keyCode;\n\n            if (keyCode === key_codes.ENTER || keyCode === key_codes.SPACE) {\n              this.headClicked(evt, field, isFoot);\n            }\n          };\n        }\n\n        const sortAttrs = this.isSortable ? this.sortTheadThAttrs(field.key, field, isFoot) : {};\n        const sortClass = this.isSortable ? this.sortTheadThClasses(field.key, field, isFoot) : null;\n        const data = {\n          key: field.key,\n          class: [this.fieldClasses(field), sortClass],\n          style: field.thStyle || {},\n          attrs: Object(objectSpread[\"a\" /* default */])({\n            // We only add a tabindex of 0 if there is a head-clicked listener\n            tabindex: hasHeadClickListener ? '0' : null,\n            abbr: field.headerAbbr || null,\n            title: field.headerTitle || null,\n            role: 'columnheader',\n            scope: 'col',\n            'aria-colindex': String(colIndex + 1),\n            'aria-label': ariaLabel\n          }, sortAttrs),\n          on: handlers\n        };\n        let fieldScope = {\n          label: field.label,\n          column: field.key,\n          field: field\n        };\n        let slot = isFoot && this.hasNormalizedSlot(\"FOOT_\".concat(field.key)) ? this.normalizeSlot(\"FOOT_\".concat(field.key), fieldScope) : this.normalizeSlot(\"HEAD_\".concat(field.key), fieldScope);\n\n        if (!slot) {\n          data.domProps = htmlOrText(field.labelHtml);\n        }\n\n        return h('th', data, slot || field.label);\n      }; // Generate the array of TH cells\n\n\n      const $cells = fields.map(makeCell).filter(th => th); // Genrate the row(s)\n\n      const $trs = [];\n\n      if (isFoot) {\n        $trs.push(h('tr', {\n          class: this.tfootTrClass,\n          attrs: {\n            role: 'row'\n          }\n        }, $cells));\n      } else {\n        const scope = {\n          columns: fields.length,\n          fields: fields\n        };\n        $trs.push(this.normalizeSlot('thead-top', scope) || h(false));\n        $trs.push(h('tr', {\n          class: this.theadTrClass,\n          attrs: {\n            role: 'row'\n          }\n        }, $cells));\n      }\n\n      return h(isFoot ? 'tfoot' : 'thead', {\n        key: isFoot ? 'tfoot' : 'thead',\n        class: isFoot ? this.footClasses : this.headClasses,\n        attrs: {\n          role: 'rowgroup'\n        }\n      }, $trs);\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-tfoot.js\n\n/* harmony default export */ var mixin_tfoot = ({\n  props: {\n    footClone: {\n      type: Boolean,\n      default: false\n    },\n    footVariant: {\n      type: String,\n      default: () => getComponentConfig('BTable', 'footVariant')\n    },\n    tfootClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    tfootTrClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  },\n  computed: {\n    footClasses() {\n      const variant = this.footVariant || this.headVariant || null;\n      return [variant ? \"thead-\".concat(variant) : '', this.tfootClass];\n    }\n\n  },\n  methods: {\n    renderTfoot() {\n      const h = this.$createElement; // Passing true to renderThead will make it render a tfoot\n\n      return this.footClone ? this.renderThead(true) : h(false);\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-tbody-row.js\n\n\n\n\n\n\n\n\n/* harmony default export */ var mixin_tbody_row = ({\n  props: {\n    tbodyTrClass: {\n      type: [String, Array, Function],\n      default: null\n    }\n  },\n  methods: {\n    // Methods for computing classes, attributes and styles for table cells\n    tdClasses(field, item) {\n      let cellVariant = '';\n\n      if (item._cellVariants && item._cellVariants[field.key]) {\n        cellVariant = \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(item._cellVariants[field.key]);\n      }\n\n      return [field.variant && !cellVariant ? \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(field.variant) : '', cellVariant, field.class ? field.class : '', this.getTdValues(item, field.key, field.tdClass, '')];\n    },\n\n    tdAttrs(field, item, colIndex) {\n      const attrs = {\n        role: 'cell',\n        'aria-colindex': String(colIndex + 1)\n      };\n\n      if (field.isRowHeader) {\n        attrs.scope = 'row';\n        attrs.role = 'rowheader';\n      }\n\n      if (this.isStacked) {\n        // Generate the \"header cell\" label content in stacked mode\n        attrs['data-label'] = field.label;\n      }\n\n      return Object(objectSpread[\"a\" /* default */])({}, attrs, this.getTdValues(item, field.key, field.tdAttr, {}));\n    },\n\n    rowClasses(item) {\n      return [item._rowVariant ? \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(item._rowVariant) : '', isFunction(this.tbodyTrClass) ? this.tbodyTrClass(item, 'row') : this.tbodyTrClass];\n    },\n\n    getTdValues(item, key, tdValue, defValue) {\n      const parent = this.$parent;\n\n      if (tdValue) {\n        const value = utils_get(item, key, '');\n\n        if (isFunction(tdValue)) {\n          return tdValue(value, key, item);\n        } else if (isString(tdValue) && isFunction(parent[tdValue])) {\n          return parent[tdValue](value, key, item);\n        }\n\n        return tdValue;\n      }\n\n      return defValue;\n    },\n\n    // Method to get the value for a field\n    getFormattedValue(item, field) {\n      const key = field.key;\n      const formatter = this.getFieldFormatter(key);\n      let value = utils_get(item, key, null);\n\n      if (isFunction(formatter)) {\n        value = formatter(value, key, item);\n      }\n\n      return isUndefined(value) || isNull(value) ? '' : value;\n    },\n\n    tbodyRowKeydown(evt, item, rowIndex) {\n      const keyCode = evt.keyCode;\n      const target = evt.target;\n      const trs = this.$refs.itemRows;\n\n      if (this.stopIfBusy && this.stopIfBusy(evt)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (!(target && target.tagName === 'TR' && target === document.activeElement)) {\n        // Ignore if not the active tr element\n        return;\n      } else if (target.tabIndex !== 0) {\n        // Ignore if not focusable\n\n        /* istanbul ignore next */\n        return;\n      } else if (trs && trs.length === 0) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      const index = trs.indexOf(target);\n\n      if (keyCode === key_codes.ENTER || keyCode === key_codes.SPACE) {\n        evt.stopPropagation();\n        evt.preventDefault(); // We also allow enter/space to trigger a click (when row is focused)\n        // We translate to a row-clicked event\n\n        this.rowClicked(evt, item, rowIndex);\n      } else if (Object(array[\"a\" /* arrayIncludes */])([key_codes.UP, key_codes.DOWN, key_codes.HOME, key_codes.END], keyCode)) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        const shift = evt.shiftKey;\n\n        if (keyCode === key_codes.HOME || shift && keyCode === key_codes.UP) {\n          // Focus first row\n          trs[0].focus();\n        } else if (keyCode === key_codes.END || shift && keyCode === key_codes.DOWN) {\n          // Focus last row\n          trs[trs.length - 1].focus();\n        } else if (keyCode === key_codes.UP && index > 0) {\n          // Focus previous row\n          trs[index - 1].focus();\n        } else if (keyCode === key_codes.DOWN && index < trs.length - 1) {\n          // Focus next row\n          trs[index + 1].focus();\n        }\n      }\n    },\n\n    // Row event handlers\n    rowClicked(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (filterEvent(e)) {\n        // clicked on a non-disabled control so ignore\n        return;\n      } else if (textSelectionActive(this.$el)) {\n        // User is selecting text, so ignore\n\n        /* istanbul ignore next: JSDOM doesn't support getSelection() */\n        return;\n      }\n\n      this.$emit('row-clicked', item, index, e);\n    },\n\n    middleMouseRowClicked(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-middle-clicked', item, index, e);\n    },\n\n    rowDblClicked(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      } else if (filterEvent(e)) {\n        // clicked on a non-disabled control so ignore\n\n        /* istanbul ignore next: event filtering already tested via click handler */\n        return;\n      }\n\n      this.$emit('row-dblclicked', item, index, e);\n    },\n\n    rowHovered(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-hovered', item, index, e);\n    },\n\n    rowUnhovered(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-unhovered', item, index, e);\n    },\n\n    rowContextmenu(e, item, index) {\n      if (this.stopIfBusy && this.stopIfBusy(e)) {\n        // If table is busy (via provider) then don't propagate\n        return;\n      }\n\n      this.$emit('row-contextmenu', item, index, e);\n    },\n\n    // Render helpers\n    renderTbodyRowCell(field, colIndex, item, rowIndex) {\n      const h = this.$createElement; // Renders a TD or TH for a row's field\n\n      const $scoped = this.$scopedSlots;\n      const detailsSlot = $scoped['row-details'];\n      const formatted = this.getFormattedValue(item, field);\n      const data = {\n        // For the Vue key, we concatenate the column index and\n        // field key (as field keys can be duplicated)\n        key: \"row-\".concat(rowIndex, \"-cell-\").concat(colIndex, \"-\").concat(field.key),\n        class: this.tdClasses(field, item),\n        attrs: this.tdAttrs(field, item, colIndex)\n      };\n\n      const toggleDetailsFn = () => {\n        if (detailsSlot) {\n          this.$set(item, '_showDetails', !item._showDetails);\n        }\n      };\n\n      const slotScope = {\n        item: item,\n        index: rowIndex,\n        field: field,\n        unformatted: utils_get(item, field.key, ''),\n        value: formatted,\n        toggleDetails: toggleDetailsFn,\n        detailsShowing: Boolean(item._showDetails)\n      };\n\n      if (this.selectedRows) {\n        // Add in rowSelected scope property if selectable rows supported\n        slotScope.rowSelected = Boolean(this.selectedRows[rowIndex]);\n      }\n\n      let $childNodes = $scoped[field.key] ? $scoped[field.key](slotScope) : to_string(formatted);\n\n      if (this.isStacked) {\n        // We wrap in a DIV to ensure rendered as a single cell when visually stacked!\n        $childNodes = [h('div', {}, [$childNodes])];\n      } // Render either a td or th cell\n\n\n      return h(field.isRowHeader ? 'th' : 'td', data, [$childNodes]);\n    },\n\n    renderTbodyRow(item, rowIndex) {\n      // Renders an item's row (or rows if details supported)\n      const h = this.$createElement;\n      const $scoped = this.$scopedSlots;\n      const fields = this.computedFields;\n      const tableStriped = this.striped;\n      const hasRowClickHandler = this.$listeners['row-clicked'] || this.selectable;\n      const $detailsSlot = $scoped['row-details'];\n      const rowShowDetails = Boolean(item._showDetails && $detailsSlot); // We can return more than one TR if rowDetails enabled\n\n      const $rows = []; // Details ID needed for aria-describedby when details showing\n\n      const detailsId = rowShowDetails ? this.safeId(\"_details_\".concat(rowIndex, \"_\")) : null;\n\n      const toggleDetailsFn = () => {\n        if ($detailsSlot) {\n          this.$set(item, '_showDetails', !item._showDetails);\n        }\n      }; // For each item data field in row\n\n\n      const $tds = fields.map((field, colIndex) => {\n        return this.renderTbodyRowCell(field, colIndex, item, rowIndex);\n      }); // Calculate the row number in the dataset (indexed from 1)\n\n      let ariaRowIndex = null;\n\n      if (this.currentPage && this.perPage && this.perPage > 0) {\n        ariaRowIndex = String((this.currentPage - 1) * this.perPage + rowIndex + 1);\n      } // Create a unique :key to help ensure that sub components are re-rendered rather than\n      // re-used, which can cause issues. If a primary key is not provided we use the rendered\n      // rows index within the tbody.\n      // See: https://github.com/bootstrap-vue/bootstrap-vue/issues/2410\n\n\n      const primaryKey = this.primaryKey;\n      const rowKey = primaryKey && !isUndefined(item[primaryKey]) && !isNull(item[primaryKey]) ? to_string(item[primaryKey]) : String(rowIndex); // If primary key is provided, use it to generate a unique ID on each tbody > tr\n      // In the format of '{tableId}__row_{primaryKeyValue}'\n\n      const rowId = primaryKey && !isUndefined(item[primaryKey]) && !isNull(item[primaryKey]) ? this.safeId(\"_row_\".concat(item[primaryKey])) : null;\n      const handlers = {};\n\n      if (hasRowClickHandler) {\n        handlers['click'] = evt => {\n          this.rowClicked(evt, item, rowIndex);\n        };\n\n        handlers['keydown'] = evt => {\n          this.tbodyRowKeydown(evt, item, rowIndex);\n        };\n      } // Selctable classes and attributes\n\n\n      const selectableClasses = this.selectableRowClasses ? this.selectableRowClasses(rowIndex) : {};\n      const selectableAttrs = this.selectableRowAttrs ? this.selectableRowAttrs(rowIndex) : {}; // Add the item row\n\n      $rows.push(h('tr', {\n        key: \"__b-table-row-\".concat(rowKey, \"__\"),\n        ref: 'itemRows',\n        refInFor: true,\n        class: [this.rowClasses(item), selectableClasses, {\n          'b-table-has-details': rowShowDetails\n        }],\n        attrs: Object(objectSpread[\"a\" /* default */])({\n          id: rowId,\n          tabindex: hasRowClickHandler ? '0' : null,\n          'data-pk': rowId ? String(item[primaryKey]) : null,\n          'aria-describedby': detailsId,\n          'aria-owns': detailsId,\n          'aria-rowindex': ariaRowIndex,\n          role: 'row'\n        }, selectableAttrs),\n        on: Object(objectSpread[\"a\" /* default */])({}, handlers, {\n          // TODO: Instantiate the following handlers only if we have registered\n          //       listeners i.e. this.$listeners['row-middle-clicked'], etc.\n          auxclick: evt => {\n            if (evt.which === 2) {\n              this.middleMouseRowClicked(evt, item, rowIndex);\n            }\n          },\n          contextmenu: evt => {\n            this.rowContextmenu(evt, item, rowIndex);\n          },\n          // Note: these events are not accessibility friendly!\n          dblclick: evt => {\n            this.rowDblClicked(evt, item, rowIndex);\n          },\n          mouseenter: evt => {\n            this.rowHovered(evt, item, rowIndex);\n          },\n          mouseleave: evt => {\n            this.rowUnhovered(evt, item, rowIndex);\n          }\n        })\n      }, $tds)); // Row Details slot\n\n      if (rowShowDetails) {\n        const tdAttrs = {\n          colspan: String(fields.length),\n          role: 'cell'\n        };\n        const trAttrs = {\n          id: detailsId,\n          role: 'row' // Render the details slot\n\n        };\n        const $details = h('td', {\n          attrs: tdAttrs\n        }, [$detailsSlot({\n          item: item,\n          index: rowIndex,\n          fields: fields,\n          toggleDetails: toggleDetailsFn\n        })]); // Add a hidden row to keep table row striping consistent when details showing\n\n        if (tableStriped) {\n          $rows.push(h('tr', {\n            key: \"__b-table-details-\".concat(rowIndex, \"-stripe__\"),\n            staticClass: 'd-none',\n            attrs: {\n              'aria-hidden': 'true',\n              role: 'presentation'\n            }\n          }));\n        } // Add the actual details row\n\n\n        $rows.push(h('tr', {\n          key: \"__b-table-details-\".concat(rowIndex, \"__\"),\n          staticClass: 'b-table-details',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(item, 'row-details') : this.tbodyTrClass],\n          attrs: trAttrs\n        }, [$details]));\n      } else if ($detailsSlot) {\n        // Only add the placeholder if a the table has a row-details slot defined (but not shown)\n        $rows.push(h(false));\n\n        if (tableStriped) {\n          // add extra placeholder if table is striped\n          $rows.push(h(false));\n        }\n      } // Return the row(s)\n\n\n      return $rows;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-tbody.js\n\n\n/* harmony default export */ var mixin_tbody = ({\n  mixins: [mixin_tbody_row],\n  props: {\n    tbodyClass: {\n      type: [String, Array],\n      default: null\n    },\n    tbodyTransitionProps: {\n      type: Object // default: undefined\n\n    },\n    tbodyTransitionHandlers: {\n      type: Object // default: undefined\n\n    }\n  },\n  methods: {\n    renderTbody() {\n      // Render the tbody element and children\n      const h = this.$createElement;\n      const items = this.computedItems; // Prepare the tbody rows\n\n      const $rows = []; // Add the item data rows or the busy slot\n\n      const $busy = this.renderBusy ? this.renderBusy() : null;\n\n      if ($busy) {\n        // If table is busy and a busy slot, then return only the busy \"row\" indicator\n        $rows.push($busy);\n      } else {\n        // Table isn't busy, or we don't have a busy slot\n        // Add static Top Row slot (hidden in visibly stacked mode as we can't control data-label attr)\n        $rows.push(this.renderTopRow ? this.renderTopRow() : h(false)); // render the rows\n\n        items.forEach((item, rowIndex) => {\n          // Render the individual item row (rows if details slot)\n          $rows.push(this.renderTbodyRow(item, rowIndex));\n        }); // Empty Items / Empty Filtered Row slot (only shows if items.length < 1)\n\n        $rows.push(this.renderEmpty ? this.renderEmpty() : h(false)); // Static bottom row slot (hidden in visibly stacked mode as we can't control data-label attr)\n\n        $rows.push(this.renderBottomRow ? this.renderBottomRow() : h(false));\n      } // If tbody transition enabled\n\n\n      const isTransGroup = this.tbodyTransitionProps || this.tbodyTransitionHandlers;\n      let tbodyProps = {};\n      let tbodyOn = {};\n\n      if (isTransGroup) {\n        tbodyOn = this.tbodyTransitionHandlers || {};\n        tbodyProps = Object(objectSpread[\"a\" /* default */])({}, this.tbodyTransitionProps || {}, {\n          tag: 'tbody'\n        });\n      } // Assemble rows into the tbody\n\n\n      const $tbody = h(isTransGroup ? 'transition-group' : 'tbody', {\n        props: tbodyProps,\n        on: tbodyOn,\n        class: [this.tbodyClass],\n        attrs: {\n          role: 'rowgroup'\n        }\n      }, $rows); // Return the assembled tbody\n\n      return $tbody;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-empty.js\n\n\n/* harmony default export */ var mixin_empty = ({\n  props: {\n    showEmpty: {\n      type: Boolean,\n      default: false\n    },\n    emptyText: {\n      type: String,\n      default: 'There are no records to show'\n    },\n    emptyHtml: {\n      type: String\n    },\n    emptyFilteredText: {\n      type: String,\n      default: 'There are no records matching your request'\n    },\n    emptyFilteredHtml: {\n      type: String\n    }\n  },\n  methods: {\n    renderEmpty() {\n      const h = this.$createElement;\n      const items = this.computedItems;\n      let $empty;\n\n      if (this.showEmpty && (!items || items.length === 0) && !(this.computedBusy && this.hasNormalizedSlot('table-busy'))) {\n        $empty = this.normalizeSlot(this.isFiltered ? 'emptyfiltered' : 'empty', {\n          emptyFilteredHtml: this.emptyFilteredHtml,\n          emptyFilteredText: this.emptyFilteredText,\n          emptyHtml: this.emptyHtml,\n          emptyText: this.emptyText,\n          fields: this.computedFields,\n          // Not sure why this is included, as it will always be an empty array\n          items: this.computedItems\n        });\n\n        if (!$empty) {\n          $empty = h('div', {\n            class: ['text-center', 'my-2'],\n            domProps: this.isFiltered ? htmlOrText(this.emptyFilteredHtml, this.emptyFilteredText) : htmlOrText(this.emptyHtml, this.emptyText)\n          });\n        }\n\n        $empty = h('td', {\n          attrs: {\n            colspan: String(this.computedFields.length),\n            role: 'cell'\n          }\n        }, [h('div', {\n          attrs: {\n            role: 'alert',\n            'aria-live': 'polite'\n          }\n        }, [$empty])]);\n        $empty = h('tr', {\n          key: this.isFiltered ? '_b-table-empty-filtered-row_' : '_b-table-empty-row_',\n          staticClass: 'b-table-empty-row',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-empty') : this.tbodyTrClass],\n          attrs: {\n            role: 'row'\n          }\n        }, [$empty]);\n      }\n\n      return $empty || h(false);\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-top-row.js\n\n/* harmony default export */ var mixin_top_row = ({\n  methods: {\n    renderTopRow() {\n      const h = this.$createElement; // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)\n      // If in always stacked mode, we don't bother rendering the row\n\n      if (!this.hasNormalizedSlot('top-row') || this.isStacked === true) {\n        return h(false);\n      }\n\n      const fields = this.computedFields;\n      return h('tr', {\n        key: 'top-row',\n        staticClass: 'b-table-top-row',\n        class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-top') : this.tbodyTrClass],\n        attrs: {\n          role: 'row'\n        }\n      }, [this.normalizeSlot('top-row', {\n        columns: fields.length,\n        fields: fields\n      })]);\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-bottom-row.js\n\n/* harmony default export */ var mixin_bottom_row = ({\n  methods: {\n    renderBottomRow() {\n      const h = this.$createElement; // Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)\n      // If in always stacked mode, we don't bother rendering the row\n\n      if (!this.hasNormalizedSlot('bottom-row') || this.isStacked === true) {\n        return h(false);\n      }\n\n      const fields = this.computedFields;\n      return h('tr', {\n        key: '__b-table-bottom-row__',\n        staticClass: 'b-table-bottom-row',\n        class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'row-bottom') : this.tbodyTrClass],\n        attrs: {\n          role: 'row'\n        }\n      }, this.normalizeSlot('bottom-row', {\n        columns: fields.length,\n        fields: fields\n      }));\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-busy.js\n\n/* harmony default export */ var mixin_busy = ({\n  props: {\n    busy: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      localBusy: false\n    };\n  },\n\n  computed: {\n    computedBusy() {\n      return this.busy || this.localBusy;\n    }\n\n  },\n  watch: {\n    localBusy(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.$emit('update:busy', newVal);\n      }\n    }\n\n  },\n  methods: {\n    // Event handler helper\n    stopIfBusy(evt) {\n      if (this.computedBusy) {\n        // If table is busy (via provider) then don't propagate\n        evt.preventDefault();\n        evt.stopPropagation();\n        return true;\n      }\n\n      return false;\n    },\n\n    // Renter the busy indicator or return null if not busy\n    renderBusy() {\n      const h = this.$createElement; // Return a busy indicator row, or null if not busy\n\n      if (this.computedBusy && this.hasNormalizedSlot('table-busy')) {\n        // Show the busy slot\n        const trAttrs = {\n          role: this.isStacked ? 'row' : null\n        };\n        const tdAttrs = {\n          colspan: String(this.computedFields.length),\n          role: this.isStacked ? 'cell' : null\n        };\n        return h('tr', {\n          key: 'table-busy-slot',\n          staticClass: 'b-table-busy-slot',\n          class: [isFunction(this.tbodyTrClass) ? this.tbodyTrClass(null, 'table-busy') : this.tbodyTrClass],\n          attrs: trAttrs\n        }, [h('td', {\n          attrs: tdAttrs\n        }, [this.normalizeSlot('table-busy', {})])]);\n      } else {\n        // We return null here so that we can determine if we need to\n        // render the table items rows or not.\n        return null;\n      }\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-selectable.js\n\n\n\n\n/* harmony default export */ var mixin_selectable = ({\n  props: {\n    selectable: {\n      type: Boolean,\n      default: false\n    },\n    selectMode: {\n      type: String,\n      default: 'multi'\n    },\n    selectedVariant: {\n      type: String,\n      default: () => getComponentConfig('BTable', 'selectedVariant')\n    }\n  },\n\n  data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n\n  computed: {\n    selectableTableClasses() {\n      const selectable = this.selectable;\n      const isSelecting = selectable && this.selectedRows && this.selectedRows.some(Boolean);\n      return {\n        'b-table-selectable': selectable,\n        [\"b-table-select-\".concat(this.selectMode)]: selectable,\n        'b-table-selecting': isSelecting\n      };\n    },\n\n    selectableTableAttrs() {\n      return {\n        'aria-multiselectable': this.selectableIsMultiSelect\n      };\n    },\n\n    selectableIsMultiSelect() {\n      if (this.selectable) {\n        return Object(array[\"a\" /* arrayIncludes */])(['range', 'multi'], this.selectMode) ? 'true' : 'false';\n      } else {\n        return null;\n      }\n    }\n\n  },\n  watch: {\n    computedItems(newVal, oldVal) {\n      // Reset for selectable\n      // TODO: Should selectedLastClicked be reset here?\n      //       As changes to _showDetails would trigger it to reset\n      this.selectedLastRow = -1;\n      let equal = false;\n\n      if (this.selectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = Object(array[\"d\" /* isArray */])(newVal) && Object(array[\"d\" /* isArray */])(oldVal) && newVal.length === oldVal.length;\n\n        for (let i = 0; equal && i < newVal.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = loose_equal(sanitizeRow(newVal[i]), sanitizeRow(oldVal[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n\n    selectable(newVal, oldVal) {\n      this.clearSelected();\n      this.setSelectionHandlers(newVal);\n    },\n\n    selectMode(newVal, oldVal) {\n      this.clearSelected();\n    },\n\n    selectedRows(selectedRows, oldVal) {\n      if (this.selectable && !loose_equal(selectedRows, oldVal)) {\n        let items = []; // forEach skips over non-existant indicies (on sparse arrays)\n\n        selectedRows.forEach((v, idx) => {\n          if (v) {\n            items.push(this.computedItems[idx]);\n          }\n        });\n        this.$emit('row-selected', items);\n      }\n    }\n\n  },\n\n  beforeMount() {\n    // Set up handlers\n    if (this.selectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n\n  methods: {\n    isRowSelected(idx) {\n      return Boolean(this.selectedRows[idx]);\n    },\n\n    selectableRowClasses(idx) {\n      const rowSelected = this.isRowSelected(idx);\n      const base = this.dark ? 'bg' : 'table';\n      const variant = this.selectedVariant;\n      return {\n        'b-table-row-selected': this.selectable && rowSelected,\n        [\"\".concat(base, \"-\").concat(variant)]: this.selectable && rowSelected && variant\n      };\n    },\n\n    selectableRowAttrs(idx) {\n      return {\n        'aria-selected': !this.selectable ? null : this.isRowSelected(idx) ? 'true' : 'false'\n      };\n    },\n\n    clearSelected() {\n      let hasSelection = this.selectedRows.reduce((prev, v) => {\n        return prev || v;\n      }, false);\n\n      if (hasSelection) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = [];\n      }\n    },\n\n    setSelectionHandlers(on) {\n      const method = on ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method]('row-clicked', this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method]('filtered', this.clearSelected);\n      this[method]('context-changed', this.clearSelected);\n    },\n\n    selectionHandler(item, index, evt) {\n      /* istanbul ignore if: should never happen */\n      if (!this.selectable) {\n        // Don't do anything if table is not in selectable mode\n\n        /* istanbul ignore next: should never happen */\n        this.clearSelected();\n        /* istanbul ignore next: should never happen */\n\n        return;\n      }\n\n      let selectedRows = this.selectedRows.slice();\n      let selected = !selectedRows[index];\n      let mode = this.selectMode; // Note 'multi' mode needs no special handling\n\n      if (mode === 'single') {\n        selectedRows = [];\n      } else if (mode === 'range') {\n        if (this.selectedLastRow > -1 && evt.shiftKey) {\n          // range\n          for (let idx = Math.min(this.selectedLastRow, index); idx <= Math.max(this.selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(evt.ctrlKey || evt.metaKey)) {\n            // clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          this.selectedLastRow = selected ? index : -1;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-provider.js\n\n\n\n\n\n/* harmony default export */ var mixin_provider = ({\n  mixins: [listen_on_root],\n  props: {\n    // Prop override(s)\n    items: {\n      // Adds in 'Function' support\n      type: [Array, Function],\n\n      default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n\n    },\n    // Additional props\n    noProviderPaging: {\n      type: Boolean,\n      default: false\n    },\n    noProviderSorting: {\n      type: Boolean,\n      default: false\n    },\n    noProviderFiltering: {\n      type: Boolean,\n      default: false\n    },\n    apiUrl: {\n      // Passthrough prop. Passed to the context object. Not used by b-table directly\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    hasProvider() {\n      return this.items instanceof Function;\n    },\n\n    providerTriggerContext() {\n      // Used to trigger the provider function via a watcher. Only the fields that\n      // are needed for triggering a provider update are included. Note that the\n      // regular this.context is sent to the provider during fetches though, as they\n      // may need all the prop info.\n      const ctx = {\n        apiUrl: this.apiUrl,\n        filter: null,\n        sortBy: null,\n        sortDesc: null,\n        perPage: null,\n        currentPage: null\n      };\n\n      if (!this.noProviderFiltering) {\n        // Either a string, or could be an object or array.\n        ctx.filter = this.localFilter;\n      }\n\n      if (!this.noProviderSorting) {\n        ctx.sortBy = this.localSortBy;\n        ctx.sortDesc = this.localSortDesc;\n      }\n\n      if (!this.noProviderPaging) {\n        ctx.perPage = this.perPage;\n        ctx.currentPage = this.currentPage;\n      }\n\n      return Object(objectSpread[\"a\" /* default */])({}, ctx);\n    }\n\n  },\n  watch: {\n    // Provider update triggering\n    items(newVal, oldVal) {\n      // If a new provider has been specified, trigger an update\n      if (this.hasProvider || newVal instanceof Function) {\n        this.$nextTick(this._providerUpdate);\n      }\n    },\n\n    providerTriggerContext(newVal, oldVal) {\n      // Trigger the provider to update as the relevant context values have changed.\n      if (!loose_equal(newVal, oldVal)) {\n        this.$nextTick(this._providerUpdate);\n      }\n    }\n\n  },\n\n  mounted() {\n    // Call the items provider if necessary\n    if (this.hasProvider && (!this.localItems || this.localItems.length === 0)) {\n      // Fetch on mount if localItems is empty\n      this._providerUpdate();\n    } // Listen for global messages to tell us to force refresh the table\n\n\n    this.listenOnRoot('bv::refresh::table', id => {\n      if (id === this.id || id === this) {\n        this.refresh();\n      }\n    });\n  },\n\n  methods: {\n    refresh() {\n      // Public Method: Force a refresh of the provider function\n      this.$off('refreshed', this.refresh);\n\n      if (this.computedBusy) {\n        // Can't force an update when forced busy by user (busy prop === true)\n        if (this.localBusy && this.hasProvider) {\n          // But if provider running (localBusy), re-schedule refresh once `refreshed` emitted\n          this.$on('refreshed', this.refresh);\n        }\n      } else {\n        this.clearSelected();\n\n        if (this.hasProvider) {\n          this.$nextTick(this._providerUpdate);\n        } else {\n          /* istanbul ignore next */\n          this.localItems = Object(array[\"d\" /* isArray */])(this.items) ? this.items.slice() : [];\n        }\n      }\n    },\n\n    // Provider related methods\n    _providerSetLocal(items) {\n      this.localItems = Object(array[\"d\" /* isArray */])(items) ? items.slice() : [];\n      this.localBusy = false;\n      this.$emit('refreshed'); // New root emit\n\n      if (this.id) {\n        this.emitOnRoot('bv::table::refreshed', this.id);\n      }\n    },\n\n    _providerUpdate() {\n      // Refresh the provider function items.\n      if (!this.hasProvider) {\n        // Do nothing if no provider\n        return;\n      } // If table is busy, wait until refreshed before calling again\n\n\n      if (this.computedBusy) {\n        // Schedule a new refresh once `refreshed` is emitted\n        this.$nextTick(this.refresh);\n        return;\n      } // Set internal busy state\n\n\n      this.localBusy = true; // Call provider function with context and optional callback after DOM is fully updated\n\n      this.$nextTick(function () {\n        try {\n          // Call provider function passing it the context and optional callback\n          const data = this.items(this.context, this._providerSetLocal);\n\n          if (data && data.then && isFunction(data.then)) {\n            // Provider returned Promise\n            data.then(items => {\n              // Provider resolved with items\n              this._providerSetLocal(items);\n            });\n          } else if (Object(array[\"d\" /* isArray */])(data)) {\n            // Provider returned Array data\n            this._providerSetLocal(data);\n          } else if (this.items.length !== 2) {\n            // Check number of arguments provider function requested\n            // Provider not using callback (didn't request second argument), so we clear\n            // busy state as most likely there was an error in the provider function\n\n            /* istanbul ignore next */\n            utils_warn(\"b-table provider function didn't request callback and did not return a promise or data\");\n            /* istanbul ignore next */\n\n            this.localBusy = false;\n          }\n        } catch (e)\n        /* istanbul ignore next */\n        {\n          // Provider function borked on us, so we spew out a warning\n          // and clear the busy state\n          utils_warn(\"b-table provider function error [\".concat(e.name, \"] \").concat(e.message));\n          this.localBusy = false;\n          this.$off('refreshed', this.refresh);\n        }\n      });\n    }\n\n  }\n});\n// CONCATENATED MODULE: ./src/components/table/helpers/mixin-table-renderer.js\n\n\n\n// Main `<table>` render mixin\n// Which indlues all main table stlying options\n/* harmony default export */ var mixin_table_renderer = ({\n  // Don't place ATTRS on root element automatically, as table could be wrapped in responsive div\n  inheritAttrs: false,\n  props: {\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    borderless: {\n      type: Boolean,\n      default: false\n    },\n    outlined: {\n      type: Boolean,\n      default: false\n    },\n    dark: {\n      type: Boolean,\n      default: false\n    },\n    hover: {\n      type: Boolean,\n      default: false\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    fixed: {\n      type: Boolean,\n      default: false\n    },\n    responsive: {\n      type: [Boolean, String],\n      default: false\n    },\n    stacked: {\n      type: [Boolean, String],\n      default: false\n    },\n    tableClass: {\n      type: [String, Array, Object],\n      default: null\n    }\n  },\n  computed: {\n    // Layout related computed props\n    isStacked() {\n      return this.stacked === '' ? true : this.stacked;\n    },\n\n    isResponsive() {\n      const responsive = this.responsive === '' ? true : this.responsive;\n      return this.isStacked ? false : responsive;\n    },\n\n    responsiveClass() {\n      return this.isResponsive === true ? 'table-responsive' : this.isResponsive ? \"table-responsive-\".concat(this.responsive) : '';\n    },\n\n    tableClasses() {\n      return [// User supplied classes\n      this.tableClass, // Styling classes\n      {\n        'table-striped': this.striped,\n        'table-hover': this.hover && this.computedItems.length > 0 && !this.computedBusy,\n        'table-dark': this.dark,\n        'table-bordered': this.bordered,\n        'table-borderless': this.borderless,\n        'table-sm': this.small,\n        border: this.outlined,\n        // The following are b-table custom styles\n        'b-table-fixed': this.fixed,\n        'b-table-stacked': this.stacked === true || this.stacked === '',\n        [\"b-table-stacked-\".concat(this.stacked)]: this.stacked !== true && this.stacked\n      }, // Selectable classes\n      this.selectableTableClasses];\n    },\n\n    tableAttrs() {\n      // Preserve user supplied aria-describedby, if provided in $attrs\n      const adb = [(this.$attrs || {})['aria-describedby'], this.captionId].filter(Boolean).join(' ') || null;\n      const items = this.computedItems;\n      const fields = this.computedFields;\n      const selectableAttrs = this.selectableTableAttrs || {};\n      return Object(objectSpread[\"a\" /* default */])({\n        // We set aria-rowcount before merging in $attrs, in case user has supplied their own\n        'aria-rowcount': this.filteredItems && this.filteredItems.length > items.length ? String(this.filteredItems.length) : null\n      }, this.$attrs, {\n        // Now we can override any $attrs here\n        id: this.safeId(),\n        role: this.isStacked ? 'table' : null,\n        'aria-busy': this.computedBusy ? 'true' : 'false',\n        'aria-colcount': String(fields.length),\n        'aria-describedby': adb\n      }, selectableAttrs);\n    }\n\n  },\n\n  render(h) {\n    // Build the caption (from caption mixin)\n    const $caption = this.renderCaption ? this.renderCaption() : null; // Build the colgroup\n\n    const $colgroup = this.renderColgroup ? this.renderColgroup() : null; // Build the thead\n\n    const $thead = this.renderThead(); // Build the tfoot\n\n    const $tfoot = this.renderTfoot(); // Build the tbody\n\n    const $tbody = this.renderTbody(); // Assemble table\n\n    const $table = h('table', {\n      key: 'b-table',\n      staticClass: 'table b-table',\n      class: this.tableClasses,\n      attrs: this.tableAttrs\n    }, [$caption, $colgroup, $thead, $tfoot, $tbody].filter(Boolean)); // Add responsive wrapper if needed and return table\n\n    return this.isResponsive ? h('div', {\n      key: 'b-table-responsive',\n      class: this.responsiveClass\n    }, [$table]) : $table;\n  }\n\n});\n// CONCATENATED MODULE: ./src/components/table/table.js\n // Mixins\n\n\n // Table helper Mixins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Main table renderer mixin\n\n // b-table component definition\n// @vue/component\n\nconst BTable =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTable',\n  // Order of mixins is important!\n  // They are merged from first to last, followed by this component.\n  mixins: [// Required Mixins\n  mixins_id, mixins_normalize_slot, mixin_items, mixin_table_renderer, mixin_thead, mixin_tfoot, mixin_tbody, // Features Mixins\n  mixin_filtering, mixin_sorting, mixin_pagination, mixin_caption, mixin_colgroup, mixin_selectable, mixin_empty, mixin_top_row, mixin_bottom_row, mixin_busy, mixin_provider] // render function provided by table-renderer mixin\n\n});\n/* harmony default export */ var table = (BTable);\n// CONCATENATED MODULE: ./src/components/table/table-lite.js\n // Mixins\n\n\n // Table helper Mixins\n\n\n\n\n\n\n // Main table renderer mixin\n\n // b-table-lite component definition\n// @vue/component\n\nconst BTableLite =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTableLite',\n  // Order of mixins is important!\n  // They are merged from first to last, followed by this component.\n  mixins: [// Required mixins\n  mixins_id, mixins_normalize_slot, mixin_items, mixin_table_renderer, mixin_thead, mixin_tfoot, mixin_tbody, // Features Mixins\n  // These are pretty lightweight, and are useful for plain tables\n  mixin_caption, mixin_colgroup] // render function provided by table-renderer mixin\n\n});\n/* harmony default export */ var table_lite = (BTableLite);\n// CONCATENATED MODULE: ./src/components/table/index.js\n\n\n\nconst TablePlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BTable: BTable,\n    BTableLite: BTableLite\n  }\n});\n\n/* harmony default export */ var components_table = (TablePlugin);\n// CONCATENATED MODULE: ./src/components/tabs/tabs.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // -- Constants --\n\nconst navProps = Object(object[\"k\" /* omit */])(nav_props, ['tabs', 'isNavBar']); // -- Utils --\n// Filter function to filter out disabled tabs\n\nconst notDisabled = tab => !tab.disabled; // --- Helper components ---\n// @vue/component\n\n\nconst BTabButtonHelper =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTabButtonHelper',\n  inject: {\n    bvTabs: {\n      default()\n      /* istanbul ignore next */\n      {\n        return {};\n      }\n\n    }\n  },\n  props: {\n    // Reference to the child <b-tab> instance\n    tab: {\n      default: null\n    },\n    tabs: {\n      type: Array,\n\n      default()\n      /* istanbul ignore next */\n      {\n        return [];\n      }\n\n    },\n    id: {\n      type: String,\n      default: null\n    },\n    controls: {\n      type: String,\n      default: null\n    },\n    tabIndex: {\n      type: Number,\n      default: null\n    },\n    posInSet: {\n      type: Number,\n      default: null\n    },\n    setSize: {\n      type: Number,\n      default: null\n    },\n    noKeyNav: {\n      type: Boolean,\n      default: false\n    }\n  },\n  methods: {\n    focus() {\n      if (this.$refs && this.$refs.link && this.$refs.link.focus) {\n        this.$refs.link.focus();\n      }\n    },\n\n    handleEvt(evt) {\n      function stop() {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n\n      if (this.tab.disabled) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      const type = evt.type;\n      const key = evt.keyCode;\n      const shift = evt.shiftKey;\n\n      if (type === 'click') {\n        stop();\n        this.$emit('click', evt);\n      } else if (type === 'keydown' && !this.noKeyNav && key === key_codes.SPACE) {\n        // In keynav mode, SPACE press will also trigger a click/select\n        stop();\n        this.$emit('click', evt);\n      } else if (type === 'keydown' && !this.noKeyNav) {\n        // For keyboard navigation\n        if (key === key_codes.UP || key === key_codes.LEFT || key === key_codes.HOME) {\n          stop();\n\n          if (shift || key === key_codes.HOME) {\n            this.$emit('first', evt);\n          } else {\n            this.$emit('prev', evt);\n          }\n        } else if (key === key_codes.DOWN || key === key_codes.RIGHT || key === key_codes.END) {\n          stop();\n\n          if (shift || key === key_codes.END) {\n            this.$emit('last', evt);\n          } else {\n            this.$emit('next', evt);\n          }\n        }\n      }\n    }\n\n  },\n\n  render(h) {\n    const link = h(BLink, {\n      ref: 'link',\n      staticClass: 'nav-link',\n      class: [{\n        active: this.tab.localActive && !this.tab.disabled,\n        disabled: this.tab.disabled\n      }, this.tab.titleLinkClass, // Apply <b-tabs> `activeNavItemClass` styles when the tab is active\n      this.tab.localActive ? this.bvTabs.activeNavItemClass : null],\n      props: {\n        href: this.tab.href,\n        // To be deprecated to always be '#'\n        disabled: this.tab.disabled\n      },\n      attrs: {\n        role: 'tab',\n        id: this.id,\n        // Roving tab index when keynav enabled\n        tabindex: this.tabIndex,\n        'aria-selected': this.tab.localActive && !this.tab.disabled ? 'true' : 'false',\n        'aria-setsize': this.setSize,\n        'aria-posinset': this.posInSet,\n        'aria-controls': this.controls\n      },\n      on: {\n        click: this.handleEvt,\n        keydown: this.handleEvt\n      }\n    }, [this.tab.normalizeSlot('title') || this.tab.title]);\n    return h('li', {\n      staticClass: 'nav-item',\n      class: [this.tab.titleItemClass],\n      attrs: {\n        role: 'presentation'\n      }\n    }, [link]);\n  }\n\n}); // @vue/component\n\nconst BTabs =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTabs',\n  mixins: [mixins_id, mixins_normalize_slot],\n\n  provide() {\n    return {\n      bvTabs: this\n    };\n  },\n\n  model: {\n    prop: 'value',\n    event: 'input'\n  },\n  props: Object(objectSpread[\"a\" /* default */])({}, navProps, {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    card: {\n      type: Boolean,\n      default: false\n    },\n    bottom: {\n      type: Boolean,\n      default: false\n    },\n    end: {\n      // Synonym for 'bottom'\n      type: Boolean,\n      default: false\n    },\n    noFade: {\n      type: Boolean,\n      default: false\n    },\n    noNavStyle: {\n      type: Boolean,\n      default: false\n    },\n    noKeyNav: {\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      // This prop is sniffed by the <b-tab> child\n      type: Boolean,\n      default: false\n    },\n    contentClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    navClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    navWrapperClass: {\n      type: [String, Array, Object],\n      default: null\n    },\n    activeNavItemClass: {\n      // Only applied to the currently active <b-nav-item>\n      type: [String, Array, Object],\n      default: null\n    },\n    activeTabClass: {\n      // Only applied to the currently active <b-tab>\n      // This prop is sniffed by the <b-tab> child\n      type: [String, Array, Object],\n      default: null\n    },\n    value: {\n      // v-model\n      type: Number,\n      default: null\n    }\n  }),\n\n  data() {\n    let tabIdx = parseInt(this.value, 10);\n    tabIdx = isNaN(tabIdx) ? -1 : tabIdx;\n    return {\n      // Index of current tab\n      currentTab: tabIdx,\n      // Array of direct child <b-tab> instances, in DOM order\n      tabs: [],\n      // Array of child instances registered (for triggering reactive updates)\n      registeredTabs: [],\n      // Flag to know if we are mounted or not\n      isMounted: false\n    };\n  },\n\n  computed: {\n    fade() {\n      // This computed prop is sniffed by the tab child\n      return !this.noFade;\n    },\n\n    navStyle() {\n      return this.pills ? 'pills' : 'tabs';\n    },\n\n    localNavClass() {\n      let classes = [];\n\n      if (this.card) {\n        if (this.vertical) {\n          classes.push('card-header', 'h-100', 'border-bottom-0', 'rounded-0');\n        } else {\n          classes.push(\"card-header-\".concat(this.navStyle));\n        }\n      }\n\n      return [...classes, this.navClass];\n    }\n\n  },\n  watch: {\n    currentTab(val, old) {\n      let index = -1; // Ensure only one tab is active at most\n\n      this.tabs.forEach((tab, idx) => {\n        if (val === idx && !tab.disabled) {\n          tab.localActive = true;\n          index = idx;\n        } else {\n          tab.localActive = false;\n        }\n      }); // Update the v-model\n\n      this.$emit('input', index);\n    },\n\n    value(val, old) {\n      if (val !== old) {\n        val = parseInt(val, 10);\n        val = isNaN(val) ? -1 : val;\n        old = parseInt(old, 10) || 0;\n        const tabs = this.tabs;\n\n        if (tabs[val] && !tabs[val].disabled) {\n          this.currentTab = val;\n        } else {\n          // Try next or prev tabs\n          if (val < old) {\n            this.previousTab();\n          } else {\n            this.nextTab();\n          }\n        }\n      }\n    },\n\n    registeredTabs(newVal, oldVal) {\n      // Each b-tab will register/unregister itself.\n      // We use this to detect when tabs are added/removed\n      // to trigger the update of the tabs.\n      this.$nextTick(() => {\n        requestAF(() => {\n          this.updateTabs();\n        });\n      });\n    },\n\n    tabs(newVal, oldVal) {\n      // If tabs added, removed, or re-ordered, we emit a `changed` event.\n      // We use `tab._uid` instead of `tab.safeId()`, as the later is changed\n      // in a nextTick if no explicit ID is provided, causing duplicate emits.\n      if (!loose_equal(newVal.map(t => t._uid), oldVal.map(t => t._uid))) {\n        // In a nextTick to ensure currentTab has been set first.\n        this.$nextTick(() => {\n          // We emit shallow copies of the new and old arrays of tabs, to\n          // prevent users from potentially mutating the internal arrays.\n          this.$emit('changed', newVal.slice(), oldVal.slice());\n        });\n      }\n    },\n\n    isMounted(newVal, oldVal) {\n      // Trigger an update after mounted.  Needed for tabs inside lazy modals.\n      if (newVal) {\n        requestAF(() => {\n          this.updateTabs();\n        });\n      } // Enable or disable the observer\n\n\n      this.setObserver(newVal);\n    }\n\n  },\n\n  created() {\n    let tabIdx = parseInt(this.value, 10);\n    this.currentTab = isNaN(tabIdx) ? -1 : tabIdx;\n    this._bvObserver = null; // For SSR and to make sure only a single tab is shown on mount\n    // We wrap this in a `$nextTick()` to ensure the child tabs have been created\n\n    this.$nextTick(() => {\n      this.updateTabs();\n    });\n  },\n\n  mounted() {\n    // Call `updateTabs()` just in case...\n    this.updateTabs();\n    this.$nextTick(() => {\n      // Flag we are now mounted and to switch to DOM for tab probing.\n      // As this.$slots.default appears to lie about component instances\n      // after b-tabs is destroyed and re-instantiated.\n      // And this.$children does not respect DOM order.\n      this.isMounted = true;\n    });\n  },\n\n  deactivated()\n  /* istanbul ignore next */\n  {\n    this.isMounted = false;\n  },\n\n  activated()\n  /* istanbul ignore next */\n  {\n    let tabIdx = parseInt(this.value, 10);\n    this.currentTab = isNaN(tabIdx) ? -1 : tabIdx;\n    this.$nextTick(() => {\n      this.updateTabs();\n      this.isMounted = true;\n    });\n  },\n\n  beforeDestroy() {\n    this.isMounted = false;\n  },\n\n  destroyed() {\n    // Ensure no references to child instances exist\n    this.tabs = [];\n  },\n\n  methods: {\n    registerTab(tab) {\n      if (!Object(array[\"a\" /* arrayIncludes */])(this.registeredTabs, tab)) {\n        this.registeredTabs.push(tab);\n        tab.$once('hook:destroyed', () => {\n          this.unregisterTab(tab);\n        });\n      }\n    },\n\n    unregisterTab(tab) {\n      this.registeredTabs = this.registeredTabs.slice().filter(t => t !== tab);\n    },\n\n    setObserver(on) {\n      // DOM observer is needed to detect changes in order of tabs\n      if (on) {\n        // Make sure no existing observer running\n        this.setObserver(false);\n        const self = this;\n        /* istanbul ignore next: difficult to test mutation observer in JSDOM */\n\n        const handler = () => {\n          // We delay the update to ensure that `tab.safeId()` has\n          // updated with the final ID value.\n          self.$nextTick(() => {\n            requestAF(() => {\n              self.updateTabs();\n            });\n          });\n        }; // Watch for changes to <b-tab> sub components\n\n\n        this._bvObserver = observe_dom(this.$refs.tabsContainer, handler, {\n          childList: true,\n          subtree: false,\n          attributes: true,\n          attributeFilter: ['id']\n        });\n      } else {\n        if (this._bvObserver && this._bvObserver.disconnect) {\n          this._bvObserver.disconnect();\n        }\n\n        this._bvObserver = null;\n      }\n    },\n\n    getTabs() {\n      // We use registeredTabs as the source of truth for child tab components. And we\n      // filter out any BTab components that are extended BTab with a root child BTab.\n      // https://github.com/bootstrap-vue/bootstrap-vue/issues/3260\n      const tabs = this.registeredTabs.filter(tab => tab.$children.filter(t => t._isTab).length === 0); // DOM Order of Tabs\n\n      let order = [];\n\n      if (this.isMounted && tabs.length > 0) {\n        // We rely on the DOM when mounted to get the 'true' order of the b-tab children.\n        // querySelectorAll(...) always returns elements in document order, regardless of\n        // order specified in the selector.\n        const selector = tabs.map(tab => \"#\".concat(tab.safeId())).join(', ');\n        order = selectAll(selector, this.$el).map(el => el.id).filter(Boolean);\n      } // Stable sort keeps the original order if not found in the\n      // `order` array, which will be an empty array before mount.\n\n\n      return stable_sort(tabs, (a, b) => {\n        return order.indexOf(a.safeId()) - order.indexOf(b.safeId());\n      });\n    },\n\n    // Update list of <b-tab> children\n    updateTabs() {\n      // Probe tabs\n      const tabs = this.getTabs(); // Find *last* active non-disabled tab in current tabs\n      // We trust tab state over currentTab, in case tabs were added/removed/re-ordered\n\n      let tabIndex = tabs.indexOf(tabs.slice().reverse().find(tab => tab.localActive && !tab.disabled)); // Else try setting to currentTab\n\n      if (tabIndex < 0) {\n        const currentTab = this.currentTab;\n\n        if (currentTab >= tabs.length) {\n          // Handle last tab being removed, so find the last non-disabled tab\n          tabIndex = tabs.indexOf(tabs.slice().reverse().find(notDisabled));\n        } else if (tabs[currentTab] && !tabs[currentTab].disabled) {\n          // Current tab is not disabled\n          tabIndex = currentTab;\n        }\n      } // Else find *first* non-disabled tab in current tabs\n\n\n      if (tabIndex < 0) {\n        tabIndex = tabs.indexOf(tabs.find(notDisabled));\n      } // Set the current tab state to active\n\n\n      tabs.forEach((tab, idx) => {\n        // tab.localActive = idx === tabIndex && !tab.disabled\n        tab.localActive = false;\n      });\n\n      if (tabs[tabIndex]) {\n        tabs[tabIndex].localActive = true;\n      } // Update the array of tab children\n\n\n      this.tabs = tabs; // Set the currentTab index (can be -1 if no non-disabled tabs)\n\n      this.currentTab = tabIndex;\n    },\n\n    // Find a button that controls a tab, given the tab reference\n    // Returns the button vm instance\n    getButtonForTab(tab) {\n      return (this.$refs.buttons || []).find(btn => btn.tab === tab);\n    },\n\n    // Force a button to re-render it's content, given a <b-tab> instance\n    // Called by <b-tab> on `update()`\n    updateButton(tab) {\n      const button = this.getButtonForTab(tab);\n\n      if (button && button.$forceUpdate) {\n        button.$forceUpdate();\n      }\n    },\n\n    // Activate a tab given a <b-tab> instance\n    // Also accessed by <b-tab>\n    activateTab(tab) {\n      let result = false;\n\n      if (tab) {\n        const index = this.tabs.indexOf(tab);\n\n        if (!tab.disabled && index > -1) {\n          result = true;\n          this.currentTab = index;\n        }\n      }\n\n      if (!result) {\n        // Couldn't set tab, so ensure v-model is set to `this.currentTab`\n\n        /* istanbul ignore next: should rarely happen */\n        this.$emit('input', this.currentTab);\n      }\n\n      return result;\n    },\n\n    // Deactivate a tab given a <b-tab> instance\n    // Accessed by <b-tab>\n    deactivateTab(tab) {\n      if (tab) {\n        // Find first non-disabled tab that isn't the one being deactivated\n        // If no tabs are available, then don't deactivate current tab\n        return this.activateTab(this.tabs.filter(t => t !== tab).find(notDisabled));\n      } else {\n        // No tab specified\n\n        /* istanbul ignore next: should never happen */\n        return false;\n      }\n    },\n\n    // Focus a tab button given it's <b-tab> instance\n    focusButton(tab) {\n      // Wrap in `$nextTick()` to ensure DOM has completed rendering/updating before focusing\n      this.$nextTick(() => {\n        const button = this.getButtonForTab(tab);\n\n        if (button && button.focus) {\n          button.focus();\n        }\n      });\n    },\n\n    // Emit a click event on a specified <b-tab> component instance\n    emitTabClick(tab, evt) {\n      if (evt && evt instanceof Event && tab && tab.$emit && !tab.disabled) {\n        tab.$emit('click', evt);\n      }\n    },\n\n    // Click handler\n    clickTab(tab, evt) {\n      this.activateTab(tab);\n      this.emitTabClick(tab, evt);\n    },\n\n    // Move to first non-disabled tab\n    firstTab(focus) {\n      const tab = this.tabs.find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    },\n\n    // Move to previous non-disabled tab\n    previousTab(focus) {\n      const currentIndex = Math.max(this.currentTab, 0);\n      const tab = this.tabs.slice(0, currentIndex).reverse().find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    },\n\n    // Move to next non-disabled tab\n    nextTab(focus) {\n      const currentIndex = Math.max(this.currentTab, -1);\n      const tab = this.tabs.slice(currentIndex + 1).find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    },\n\n    // Move to last non-disabled tab\n    lastTab(focus) {\n      const tab = this.tabs.slice().reverse().find(notDisabled);\n\n      if (this.activateTab(tab) && focus) {\n        this.focusButton(tab);\n        this.emitTabClick(tab, focus);\n      }\n    }\n\n  },\n\n  render(h) {\n    const tabs = this.tabs; // Currently active tab\n\n    let activeTab = tabs.find(tab => tab.localActive && !tab.disabled); // Tab button to allow focusing when no active tab found (keynav only)\n\n    const fallbackTab = tabs.find(tab => !tab.disabled); // For each <b-tab> found create the tab buttons\n\n    const buttons = tabs.map((tab, index) => {\n      let tabIndex = null; // Ensure at least one tab button is focusable when keynav enabled (if possible)\n\n      if (!this.noKeyNav) {\n        // Buttons are not in tab index unless active, or a fallback tab\n        tabIndex = -1;\n\n        if (activeTab === tab || !activeTab && fallbackTab === tab) {\n          // Place tab button in tab sequence\n          tabIndex = null;\n        }\n      }\n\n      return h(BTabButtonHelper, {\n        key: tab._uid || index,\n        ref: 'buttons',\n        // Needed to make `this.$refs.buttons` an array\n        refInFor: true,\n        props: {\n          tab: tab,\n          tabs: tabs,\n          id: tab.controlledBy || (this.tab && this.tab.safeId ? this.tab.safeId(\"_BV_tab_button_\") : null),\n          controls: this.tab && this.tab.safeId ? this.tab.safeId() : null,\n          tabIndex,\n          setSize: tabs.length,\n          posInSet: index + 1,\n          noKeyNav: this.noKeyNav\n        },\n        on: {\n          click: evt => {\n            this.clickTab(tab, evt);\n          },\n          first: this.firstTab,\n          prev: this.previousTab,\n          next: this.nextTab,\n          last: this.lastTab\n        }\n      });\n    }); // Nav\n\n    let nav = h(BNav, {\n      ref: 'nav',\n      class: this.localNavClass,\n      attrs: {\n        role: 'tablist',\n        id: this.safeId('_BV_tab_controls_')\n      },\n      props: {\n        fill: this.fill,\n        justified: this.justified,\n        align: this.align,\n        tabs: !this.noNavStyle && !this.pills,\n        pills: !this.noNavStyle && this.pills,\n        vertical: this.vertical,\n        small: this.small\n      }\n    }, [buttons, this.normalizeSlot('tabs')]);\n    nav = h('div', {\n      key: 'bv-tabs-nav',\n      class: [{\n        'card-header': this.card && !this.vertical && !(this.end || this.bottom),\n        'card-footer': this.card && !this.vertical && (this.end || this.bottom),\n        'col-auto': this.vertical\n      }, this.navWrapperClass]\n    }, [nav]);\n    let empty = h(false);\n\n    if (!tabs || tabs.length === 0) {\n      empty = h('div', {\n        key: 'bv-empty-tab',\n        class: ['tab-pane', 'active', {\n          'card-body': this.card\n        }]\n      }, this.normalizeSlot('empty'));\n    } // Main content section\n\n\n    const content = h('div', {\n      ref: 'tabsContainer',\n      key: 'bv-tabs-container',\n      staticClass: 'tab-content',\n      class: [{\n        col: this.vertical\n      }, this.contentClass],\n      attrs: {\n        id: this.safeId('_BV_tab_container_')\n      }\n    }, Object(array[\"b\" /* concat */])(this.normalizeSlot('default'), empty)); // Render final output\n\n    return h(this.tag, {\n      staticClass: 'tabs',\n      class: {\n        row: this.vertical,\n        'no-gutters': this.vertical && this.card\n      },\n      attrs: {\n        id: this.safeId()\n      }\n    }, [this.end || this.bottom ? content : h(false), [nav], this.end || this.bottom ? h(false) : content]);\n  }\n\n});\n/* harmony default export */ var tabs_tabs = (BTabs);\n// CONCATENATED MODULE: ./src/components/tabs/tab.js\n\n\n\n\n\nconst tab_DEPRECATED_MSG = 'Setting prop \"href\" is deprecated. Use the <b-nav> component instead.'; // @vue/component\n\nconst BTab =\n/*#__PURE__*/\nvue.extend({\n  name: 'BTab',\n  mixins: [mixins_id, mixins_normalize_slot],\n  inject: {\n    bvTabs: {\n      default() {\n        return {\n          // Don't set a tab index if not rendered inside <b-tabs>\n          noKeyNav: true\n        };\n      }\n\n    }\n  },\n  props: {\n    active: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    buttonId: {\n      type: String,\n      default: ''\n    },\n    title: {\n      type: String,\n      default: ''\n    },\n    titleItemClass: {\n      // Sniffed by tabs.js and added to nav 'li.nav-item'\n      type: [String, Array, Object],\n      default: null\n    },\n    titleLinkClass: {\n      // Sniffed by tabs.js and added to nav 'a.nav-link'\n      type: [String, Array, Object],\n      default: null\n    },\n    headHtml: {\n      // Is this actually ever used?\n      type: String,\n      default: null\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    noBody: {\n      type: Boolean,\n      default: false\n    },\n    href: {\n      // This should be deprecated, as tabs are not navigation (URL) based\n      // <b-nav> + <b-card> + <router-view>/<nuxt-child> should be used instead\n      // We don't support router-links here\n      type: String,\n      default: '#',\n      // `deprecated` -> Don't use this prop\n      // `deprecation` -> Refers to a change in prop usage\n      deprecated: tab_DEPRECATED_MSG\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      localActive: this.active && !this.disabled,\n      show: false\n    };\n  },\n\n  computed: {\n    tabClasses() {\n      return [{\n        active: this.localActive,\n        disabled: this.disabled,\n        'card-body': this.bvTabs.card && !this.noBody\n      }, // Apply <b-tabs> `activeTabClass` styles when this tab is active\n      this.localActive ? this.bvTabs.activeTabClass : null];\n    },\n\n    controlledBy() {\n      return this.buttonId || this.safeId('__BV_tab_button__');\n    },\n\n    computedNoFade() {\n      return !(this.bvTabs.fade || false);\n    },\n\n    computedLazy() {\n      return this.bvTabs.lazy || this.lazy;\n    },\n\n    _isTab() {\n      // For parent sniffing of child\n      return true;\n    }\n\n  },\n  watch: {\n    localActive(newVal, oldVal) {\n      // Make 'active' prop work with `.sync` modifier\n      this.$emit('update:active', newVal);\n    },\n\n    active(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        if (newVal) {\n          // If activated post mount\n          this.activate();\n        } else {\n          if (!this.deactivate()) {\n            // Tab couldn't be deactivated, so we reset the synced active prop\n            // Deactivation will fail if no other tabs to activate\n            this.$emit('update:active', this.localActive);\n          }\n        }\n      }\n    },\n\n    disabled(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        if (newVal && this.localActive && this.bvTabs.firstTab) {\n          this.localActive = false;\n          this.bvTabs.firstTab();\n        }\n      }\n    }\n\n  },\n\n  mounted() {\n    // Inform b-tabs of our presence\n    this.registerTab(); // Initially show on mount if active and not disabled\n\n    this.show = this.localActive; // Deprecate use of `href` prop\n\n    if (this.href && this.href !== '#') {\n      /* istanbul ignore next */\n      utils_warn(\"b-tab: \".concat(tab_DEPRECATED_MSG));\n    }\n  },\n\n  updated() {\n    // Force the tab button content to update (since slots are not reactive)\n    // Only done if we have a title slot, as the title prop is reactive\n    if (this.hasNormalizedSlot('title') && this.bvTabs.updateButton) {\n      this.bvTabs.updateButton(this);\n    }\n  },\n\n  destroyed() {\n    // inform b-tabs of our departure\n    this.unregisterTab();\n  },\n\n  methods: {\n    // Private methods\n    registerTab() {\n      // Inform `b-tabs` of our presence\n      this.bvTabs.registerTab && this.bvTabs.registerTab(this);\n    },\n\n    unregisterTab() {\n      // Inform `b-tabs` of our departure\n      this.bvTabs.unregisterTab && this.bvTabs.unregisterTab(this);\n    },\n\n    // Public methods\n    activate() {\n      if (this.bvTabs.activateTab && !this.disabled) {\n        return this.bvTabs.activateTab(this);\n      } else {\n        // Not inside a <b-tabs> component or tab is disabled\n        return false;\n      }\n    },\n\n    deactivate() {\n      if (this.bvTabs.deactivateTab && this.localActive) {\n        return this.bvTabs.deactivateTab(this);\n      } else {\n        // Not inside a <b-tabs> component or not active to begin with\n        return false;\n      }\n    }\n\n  },\n\n  render(h) {\n    let content = h(this.tag, {\n      ref: 'panel',\n      staticClass: 'tab-pane',\n      class: this.tabClasses,\n      directives: [{\n        name: 'show',\n        rawName: 'v-show',\n        value: this.localActive,\n        expression: 'localActive'\n      }],\n      attrs: {\n        role: 'tabpanel',\n        id: this.safeId(),\n        tabindex: this.localActive && !this.bvTabs.noKeyNav ? '-1' : null,\n        'aria-hidden': this.localActive ? 'false' : 'true',\n        'aria-labelledby': this.controlledBy || null\n      }\n    }, // Render content lazily if requested\n    [this.localActive || !this.computedLazy ? this.normalizeSlot('default') : h(false)]);\n    return h(bv_transition, {\n      props: {\n        mode: 'out-in',\n        noFade: this.computedNoFade\n      }\n    }, [content]);\n  }\n\n});\n/* harmony default export */ var tabs_tab = (BTab);\n// CONCATENATED MODULE: ./src/components/tabs/index.js\n\n\n\nconst TabsPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BTabs: BTabs,\n    BTab: BTab\n  }\n});\n\n/* harmony default export */ var components_tabs = (TabsPlugin);\n// EXTERNAL MODULE: ./node_modules/portal-vue/dist/portal-vue.common.js\nvar portal_vue_common = __webpack_require__(35);\n\n// CONCATENATED MODULE: ./src/components/toast/toaster.js\n\n\n\n\n // --- Constants ---\n\nconst toaster_NAME = 'BToaster';\nconst toaster_props = {\n  name: {\n    type: String,\n    required: true\n  },\n  ariaLive: {\n    type: String,\n    default: () => getComponentConfig(toaster_NAME, 'ariaLive')\n  },\n  ariaAtomic: {\n    type: String,\n    default: () => getComponentConfig(toaster_NAME, 'ariaAtomic') // Allowed: 'true' or 'false' or null\n\n  },\n  role: {\n    // Aria role\n    type: String,\n    default: () => getComponentConfig(toaster_NAME, 'role')\n    /*\n    transition: {\n      type: [Boolean, String, Object],\n      default: false\n    }\n    */\n\n  } // @vue/component\n\n};\nconst DefaultTransition =\n/*#__PURE__*/\nvue.extend({\n  data() {\n    return {\n      // Transition classes base name\n      name: 'b-toaster'\n    };\n  },\n\n  methods: {\n    onAfterEnter(el) {\n      // Handle bug where enter-to class is not removed.\n      // Bug is related to portal-vue and transition-groups.\n      requestAF(() => {\n        removeClass(el, \"\".concat(this.name, \"-enter-to\")); // The *-move class is also stuck on elements that moved,\n        // but there are no javascript hooks to handle after move.\n      });\n    }\n\n  },\n\n  render(h) {\n    return h('transition-group', {\n      props: {\n        tag: 'div',\n        name: this.name\n      },\n      on: {\n        afterEnter: this.onAfterEnter\n      }\n    }, this.$slots.default);\n  }\n\n}); // @vue/component\n\nconst BToaster =\n/*#__PURE__*/\nvue.extend({\n  name: toaster_NAME,\n  props: toaster_props,\n\n  data() {\n    return {\n      // We don't render on SSR or if a an existing target found\n      doRender: false,\n      dead: false,\n      // Toaster names cannot change once created\n      staticName: this.name\n    };\n  },\n\n  beforeMount() {\n    this.staticName = this.name;\n    /* istanbul ignore if */\n\n    if (portal_vue_common[\"Wormhole\"].hasTarget(this.staticName)) {\n      utils_warn(\"b-toaster: A <portal-target> with name '\".concat(this.name, \"' already exists in the document.\"));\n      this.dead = true;\n    } else {\n      this.doRender = true;\n      this.$once('hook:beforeDestroy', () => {\n        // Let toasts made with `this.$bvToast.toast()` know that this toaster\n        // is being destroyed and should should also destroy/hide themselves\n        this.$root.$emit('bv::toaster::destroyed', this.staticName);\n      });\n    }\n  },\n\n  destroyed() {\n    // Remove from DOM if needed\n\n    /* istanbul ignore next: difficult to test */\n    if (this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n  },\n\n  render(h) {\n    let $toaster = h('div', {\n      class: ['d-none', {\n        'b-dead-toaster': this.dead\n      }]\n    });\n\n    if (this.doRender) {\n      const $target = h(portal_vue_common[\"PortalTarget\"], {\n        staticClass: 'b-toaster-slot',\n        props: {\n          name: this.staticName,\n          multiple: true,\n          tag: 'div',\n          slim: false,\n          // transition: this.transition || DefaultTransition\n          transition: DefaultTransition\n        }\n      });\n      $toaster = h('div', {\n        staticClass: 'b-toaster',\n        class: [this.staticName],\n        attrs: {\n          id: this.staticName,\n          role: this.role || null,\n          // Fallback to null to make sure attribute doesn't exist\n          'aria-live': this.ariaLive,\n          'aria-atomic': this.ariaAtomic\n        }\n      }, [$target]);\n    }\n\n    return $toaster;\n  }\n\n});\n/* harmony default export */ var toast_toaster = (BToaster);\n// CONCATENATED MODULE: ./src/components/toast/toast.js\n\n\n\n\n\n\n\n\n\n\n\n\n // --- Constants ---\n\nconst toast_NAME = 'BToast';\nconst MIN_DURATION = 1000;\nconst toast_EVENT_OPTIONS = {\n  passive: true,\n  capture: false // --- Props ---\n\n};\nconst toast_props = {\n  id: {\n    // Even though the ID prop is provided by idMixin, we\n    // add it here for $bvToast props filtering\n    type: String,\n    default: null\n  },\n  title: {\n    type: String,\n    default: null\n  },\n  toaster: {\n    type: String,\n    default: () => getComponentConfig(toast_NAME, 'toaster')\n  },\n  visible: {\n    type: Boolean,\n    default: false\n  },\n  variant: {\n    type: String,\n    default: () => getComponentConfig(toast_NAME, 'variant')\n  },\n  isStatus: {\n    // Switches role to 'status' and aria-live to 'polite'\n    type: Boolean,\n    default: false\n  },\n  appendToast: {\n    type: Boolean,\n    default: false\n  },\n  noAutoHide: {\n    type: Boolean,\n    default: false\n  },\n  autoHideDelay: {\n    type: [Number, String],\n    default: () => getComponentConfig(toast_NAME, 'autoHideDelay')\n  },\n  noCloseButton: {\n    type: Boolean,\n    default: false\n  },\n  noFade: {\n    type: Boolean,\n    default: false\n  },\n  noHoverPause: {\n    type: Boolean,\n    default: false\n  },\n  solid: {\n    type: Boolean,\n    default: false\n  },\n  toastClass: {\n    type: [String, Object, Array],\n    default: () => getComponentConfig(toast_NAME, 'toastClass')\n  },\n  headerClass: {\n    type: [String, Object, Array],\n    default: () => getComponentConfig(toast_NAME, 'headerClass')\n  },\n  bodyClass: {\n    type: [String, Object, Array],\n    default: () => getComponentConfig(toast_NAME, 'bodyClass')\n  },\n  href: {\n    type: String,\n    default: null\n  },\n  to: {\n    type: [String, Object],\n    default: null\n  },\n  static: {\n    // Render the toast in place, rather than in a portal-target\n    type: Boolean,\n    default: false\n  } // @vue/component\n\n};\nconst BToast =\n/*#__PURE__*/\nvue.extend({\n  name: toast_NAME,\n  mixins: [mixins_id, listen_on_root, mixins_normalize_slot],\n  inheritAttrs: false,\n  model: {\n    prop: 'visible',\n    event: 'change'\n  },\n  props: toast_props,\n\n  data() {\n    return {\n      isMounted: false,\n      doRender: false,\n      localShow: false,\n      isTransitioning: false,\n      isHiding: false,\n      order: 0,\n      timer: null,\n      dismissStarted: 0,\n      resumeDismiss: 0\n    };\n  },\n\n  computed: {\n    bToastClasses() {\n      return {\n        'b-toast-solid': this.solid,\n        'b-toast-append': this.appendToast,\n        'b-toast-prepend': !this.appendToast,\n        [\"b-toast-\".concat(this.variant)]: this.variant\n      };\n    },\n\n    slotScope() {\n      return {\n        hide: this.hide\n      };\n    },\n\n    computedDuration() {\n      // Minimum supported duration is 1 second\n      return Math.max(parseInt(this.autoHideDelay, 10) || 0, MIN_DURATION);\n    },\n\n    computedToaster() {\n      return String(this.toaster);\n    },\n\n    transitionHandlers() {\n      return {\n        beforeEnter: this.onBeforeEnter,\n        afterEnter: this.onAfterEnter,\n        beforeLeave: this.onBeforeLeave,\n        afterLeave: this.onAfterLeave\n      };\n    }\n\n  },\n  watch: {\n    visible(newVal) {\n      newVal ? this.show() : this.hide();\n    },\n\n    localShow(newVal) {\n      if (newVal !== this.visible) {\n        this.$emit('change', newVal);\n      }\n    },\n\n    toaster(newVal)\n    /* istanbul ignore next */\n    {\n      // If toaster target changed, make sure toaster exists\n      this.$nextTick(() => this.ensureToaster);\n    },\n\n    static(newVal)\n    /* istanbul ignore next */\n    {\n      // If static changes to true, and the toast is showing,\n      // ensure the toaster target exists\n      if (newVal && this.localShow) {\n        this.ensureToaster();\n      }\n    }\n\n  },\n\n  mounted() {\n    this.isMounted = true;\n    this.$nextTick(() => {\n      if (this.visible) {\n        requestAF(() => {\n          this.show();\n        });\n      }\n    }); // Listen for global $root show events\n\n    this.listenOnRoot('bv::show::toast', id => {\n      if (id === this.safeId()) {\n        this.show();\n      }\n    }); // Listen for global $root hide events\n\n    this.listenOnRoot('bv::hide::toast', id => {\n      if (!id || id === this.safeId()) {\n        this.hide();\n      }\n    }); // Make sure we hide when toaster is destroyed\n\n    /* istanbul ignore next: difficult to test */\n\n    this.listenOnRoot('bv::toaster::destroyed', toaster => {\n      if (toaster === this.computedToaster) {\n        this.hide();\n      }\n    });\n  },\n\n  beforeDestroy() {\n    this.clearDismissTimer();\n  },\n\n  methods: {\n    show() {\n      if (!this.localShow) {\n        this.ensureToaster();\n        const showEvt = this.buildEvent('show');\n        this.emitEvent(showEvt);\n        this.dismissStarted = this.resumeDismiss = 0;\n        this.order = Date.now() * (this.appendToast ? 1 : -1);\n        this.isHiding = false;\n        this.doRender = true;\n        this.$nextTick(() => {\n          // We show the toast after we have rendered the portal and b-toast wrapper\n          // so that screen readers will properly announce the toast\n          requestAF(() => {\n            this.localShow = true;\n          });\n        });\n      }\n    },\n\n    hide() {\n      if (this.localShow) {\n        const hideEvt = this.buildEvent('hide');\n        this.emitEvent(hideEvt);\n        this.setHoverHandler(false);\n        this.dismissStarted = this.resumeDismiss = 0;\n        this.clearDismissTimer();\n        this.isHiding = true;\n        requestAF(() => {\n          this.localShow = false;\n        });\n      }\n    },\n\n    buildEvent(type) {\n      let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new bv_event_class(type, Object(objectSpread[\"a\" /* default */])({\n        cancelable: false,\n        target: this.$el || null,\n        relatedTarget: null\n      }, opts, {\n        vueTarget: this,\n        componentId: this.safeId()\n      }));\n    },\n\n    emitEvent(bvEvt) {\n      const type = bvEvt.type;\n      this.$root.$emit(\"bv::toast:\".concat(type), bvEvt);\n      this.$emit(type, bvEvt);\n    },\n\n    ensureToaster() {\n      if (this.static) {\n        return;\n      }\n\n      if (!portal_vue_common[\"Wormhole\"].hasTarget(this.computedToaster)) {\n        const div = document.createElement('div');\n        document.body.appendChild(div);\n        const toaster = new BToaster({\n          parent: this.$root,\n          propsData: {\n            name: this.computedToaster\n          }\n        });\n        toaster.$mount(div);\n      }\n    },\n\n    startDismissTimer() {\n      this.clearDismissTimer();\n\n      if (!this.noAutoHide) {\n        this.timer = setTimeout(this.hide, this.resumeDismiss || this.computedDuration);\n        this.dismissStarted = Date.now();\n        this.resumeDismiss = 0;\n      }\n    },\n\n    clearDismissTimer() {\n      clearTimeout(this.timer);\n      this.timer = null;\n    },\n\n    setHoverHandler(on) {\n      const method = on ? eventOn : eventOff;\n      method(this.$refs.btoast, 'mouseenter', this.onPause, toast_EVENT_OPTIONS);\n      method(this.$refs.btoast, 'mouseleave', this.onUnPause, toast_EVENT_OPTIONS);\n    },\n\n    onPause(evt) {\n      // Determine time remaining, and then pause timer\n      if (this.noAutoHide || this.noHoverPause || !this.timer || this.resumeDismiss) {\n        return;\n      }\n\n      const passed = Date.now() - this.dismissStarted;\n\n      if (passed > 0) {\n        this.clearDismissTimer();\n        this.resumeDismiss = Math.max(this.computedDuration - passed, MIN_DURATION);\n      }\n    },\n\n    onUnPause(evt) {\n      // Restart timer with max of time remaining or 1 second\n      if (this.noAutoHide || this.noHoverPause || !this.resumeDismiss) {\n        this.resumeDismiss = this.dismissStarted = 0;\n        return;\n      }\n\n      this.startDismissTimer();\n    },\n\n    onLinkClick() {\n      // We delay the close to allow time for the\n      // browser to process the link click\n      this.$nextTick(() => {\n        requestAF(() => {\n          this.hide();\n        });\n      });\n    },\n\n    onBeforeEnter() {\n      this.isTransitioning = true;\n    },\n\n    onAfterEnter() {\n      this.isTransitioning = false;\n      const hiddenEvt = this.buildEvent('shown');\n      this.emitEvent(hiddenEvt);\n      this.startDismissTimer();\n      this.setHoverHandler(true);\n    },\n\n    onBeforeLeave() {\n      this.isTransitioning = true;\n    },\n\n    onAfterLeave() {\n      this.isTransitioning = false;\n      this.order = 0;\n      this.resumeDismiss = this.dismissStarted = 0;\n      const hiddenEvt = this.buildEvent('hidden');\n      this.emitEvent(hiddenEvt);\n      this.doRender = false;\n    },\n\n    makeToast(h) {\n      // Render helper for generating the toast\n      // Assemble the header content\n      const $headerContent = [];\n      let $title = this.normalizeSlot('toast-title', this.slotScope);\n\n      if ($title) {\n        $headerContent.push($title);\n      } else if (this.title) {\n        $headerContent.push(h('strong', {\n          staticClass: 'mr-2'\n        }, this.title));\n      }\n\n      if (!this.noCloseButton) {\n        $headerContent.push(h(BButtonClose, {\n          staticClass: 'ml-auto mb-1',\n          on: {\n            click: evt => {\n              this.hide();\n            }\n          }\n        }));\n      } // Assemble the header (if needed)\n\n\n      let $header = h(false);\n\n      if ($headerContent.length > 0) {\n        $header = h('header', {\n          staticClass: 'toast-header',\n          class: this.headerClass\n        }, $headerContent);\n      } // Toast body\n\n\n      const isLink = this.href || this.to;\n      const $body = h(isLink ? BLink : 'div', {\n        staticClass: 'toast-body',\n        class: this.bodyClass,\n        props: isLink ? {\n          to: this.to,\n          href: this.href\n        } : {},\n        on: isLink ? {\n          click: this.onLinkClick\n        } : {}\n      }, [this.normalizeSlot('default', this.slotScope) || h(false)]); // Build the toast\n\n      const $toast = h('div', {\n        key: \"toast-\".concat(this._uid),\n        ref: 'toast',\n        staticClass: 'toast',\n        class: this.toastClass,\n        attrs: Object(objectSpread[\"a\" /* default */])({}, this.$attrs, {\n          tabindex: '0',\n          id: this.safeId()\n        })\n      }, [$header, $body]);\n      return $toast;\n    }\n\n  },\n\n  render(h) {\n    if (!this.doRender || !this.isMounted) {\n      return h(false);\n    }\n\n    const name = \"b-toast-\".concat(this._uid);\n    return h(portal_vue_common[\"Portal\"], {\n      props: {\n        name: name,\n        to: this.computedToaster,\n        order: this.order,\n        slim: true,\n        disabled: this.static\n      }\n    }, [h('div', {\n      key: name,\n      ref: 'btoast',\n      staticClass: 'b-toast',\n      class: this.bToastClasses,\n      attrs: {\n        id: this.safeId('_toast_outer'),\n        role: this.isHiding ? null : this.isStatus ? 'status' : 'alert',\n        'aria-live': this.isHiding ? null : this.isStatus ? 'polite' : 'assertive',\n        'aria-atomic': this.isHiding ? null : 'true'\n      }\n    }, [h(bv_transition, {\n      props: {\n        noFade: this.noFade\n      },\n      on: this.transitionHandlers\n    }, [this.localShow ? this.makeToast(h) : h(false)])])]);\n  }\n\n});\n/* harmony default export */ var toast_toast = (BToast);\n// CONCATENATED MODULE: ./src/components/toast/helpers/bv-toast.js\n\n\n/**\n * Plugin for adding `$bvToast` property to all Vue instances\n */\n\n\n\n\n\n\n\n // --- Constants ---\n\nconst bv_toast_PROP_NAME = '$bvToast';\nconst bv_toast_PROP_NAME_PRIV = '_bv__toast'; // Base toast props that are allowed\n// Some may be ignored or overridden on some message boxes\n// Prop ID is allowed, but really only should be used for testing\n// We need to add it in explicitly as it comes from the `idMixin`\n\nconst bv_toast_BASE_PROPS = ['id', ...Object(object[\"j\" /* keys */])(Object(object[\"k\" /* omit */])(toast_props, ['static', 'visible']))]; // Map prop names to toast slot names\n\nconst bv_toast_propsToSlots = {\n  toastContent: 'default',\n  title: 'toast-title' // --- Utility methods ---\n  // Method to filter only recognized props that are not undefined\n\n};\n\nconst bv_toast_filterOptions = options => {\n  return bv_toast_BASE_PROPS.reduce((memo, key) => {\n    if (!isUndefined(options[key])) {\n      memo[key] = options[key];\n    }\n\n    return memo;\n  }, {});\n}; // Method to install `$bvToast` VM injection\n\n\nconst bv_toast_plugin = Vue => {\n  // Create a private sub-component constructor that\n  // extends BToast and self-destructs after hidden\n  // @vue/component\n  const BToastPop = Vue.extend({\n    name: 'BToastPop',\n    extends: BToast,\n\n    destroyed() {\n      // Make sure we not in document any more\n      if (this.$el && this.$el.parentNode) {\n        this.$el.parentNode.removeChild(this.$el);\n      }\n    },\n\n    mounted() {\n      const self = this; // Self destruct handler\n\n      const handleDestroy = () => {\n        // Ensure the toast has been force hidden\n        self.localShow = false;\n        self.doRender = false;\n        self.$nextTick(() => {\n          self.$nextTick(() => {\n            // In a `requestAF()` to release control back to application\n            // and to allow the portal-target time to remove the content\n            requestAF(() => {\n              self.$destroy();\n            });\n          });\n        });\n      }; // Self destruct if parent destroyed\n\n\n      this.$parent.$once('hook:destroyed', handleDestroy); // Self destruct after hidden\n\n      this.$once('hidden', handleDestroy); // Self destruct when toaster is destroyed\n\n      this.listenOnRoot('bv::toaster::destroyed', toaster => {\n        /* istanbul ignore next: hard to test */\n        if (toaster === self.toaster) {\n          handleDestroy();\n        }\n      });\n    }\n\n  }); // Private method to generate the on-demand toast\n\n  const makeToast = (props, $parent) => {\n    if (warnNotClient(bv_toast_PROP_NAME)) {\n      /* istanbul ignore next */\n      return;\n    } // Create an instance of `BToastPop` component\n\n\n    const toast = new BToastPop({\n      // We set parent as the local VM so these toasts can emit events on the\n      // app `$root`, and it ensures `BToast` is destroyed when parent is destroyed\n      parent: $parent,\n      propsData: Object(objectSpread[\"a\" /* default */])({}, bv_toast_filterOptions(getComponentConfig('BToast') || {}), Object(object[\"k\" /* omit */])(props, Object(object[\"j\" /* keys */])(bv_toast_propsToSlots)), {\n        // Props that can't be overridden\n        static: false,\n        visible: true\n      })\n    }); // Convert certain props to slots\n\n    Object(object[\"j\" /* keys */])(bv_toast_propsToSlots).forEach(prop => {\n      let value = props[prop];\n\n      if (!isUndefined(value)) {\n        // Can be a string, or array of VNodes\n        if (prop === 'title' && isString(value)) {\n          // Special case for title if it is a string, we wrap in a <strong>\n          value = [$parent.$createElement('strong', {\n            class: 'mr-2'\n          }, value)];\n        }\n\n        toast.$slots[bv_toast_propsToSlots[prop]] = Object(array[\"b\" /* concat */])(value);\n      }\n    }); // Create a mount point (a DIV) and mount it (which triggers the show)\n\n    const div = document.createElement('div');\n    document.body.appendChild(div);\n    toast.$mount(div);\n  }; // Declare BvToast instance property class\n\n\n  class BvToast {\n    constructor(vm) {\n      // Assign the new properties to this instance\n      Object(object[\"a\" /* assign */])(this, {\n        _vm: vm,\n        _root: vm.$root\n      }); // Set these properties as read-only and non-enumerable\n\n      Object(object[\"d\" /* defineProperties */])(this, {\n        _vm: Object(object[\"l\" /* readonlyDescriptor */])(),\n        _root: Object(object[\"l\" /* readonlyDescriptor */])()\n      });\n    } // --- Public Instance methods ---\n    // Opens a user defined toast and returns immediately\n\n\n    toast(content) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!content || warnNotClient(bv_toast_PROP_NAME)) {\n        /* istanbul ignore next */\n        return;\n      }\n\n      makeToast(Object(objectSpread[\"a\" /* default */])({}, bv_toast_filterOptions(options), {\n        toastContent: content\n      }), this._vm);\n    } // shows a `<b-toast>` component with the specified ID\n\n\n    show(id) {\n      if (id) {\n        this._root.$emit('bv::show::toast', id);\n      }\n    } // Hide a toast with specified ID, or if not ID all toasts\n\n\n    hide() {\n      let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      this._root.$emit('bv::hide::toast', id);\n    }\n\n  } // Add our instance mixin\n\n\n  Vue.mixin({\n    beforeCreate() {\n      // Because we need access to `$root` for `$emits`, and VM for parenting,\n      // we have to create a fresh instance of `BvToast` for each VM\n      this[bv_toast_PROP_NAME_PRIV] = new BvToast(this);\n    }\n\n  }); // Define our read-only `$bvToast` instance property\n  // Placed in an if just in case in HMR mode\n\n  if (!Vue.prototype.hasOwnProperty(bv_toast_PROP_NAME)) {\n    Object(object[\"e\" /* defineProperty */])(Vue.prototype, bv_toast_PROP_NAME, {\n      get() {\n        /* istanbul ignore next */\n        if (!this || !this[bv_toast_PROP_NAME_PRIV]) {\n          warn(\"'\".concat(bv_toast_PROP_NAME, \"' must be accessed from a Vue instance 'this' context\"));\n        }\n\n        return this[bv_toast_PROP_NAME_PRIV];\n      }\n\n    });\n  }\n};\n\nconst BVToastPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  plugins: {\n    plugin: bv_toast_plugin\n  }\n}); // Default export is the Plugin\n\n/* harmony default export */ var bv_toast = (BVToastPlugin);\n// CONCATENATED MODULE: ./src/components/toast/index.js\n\n\n\n\nconst ToastPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BToast: BToast,\n    BToaster: BToaster\n  },\n  // $bvToast injection\n  plugins: {\n    BVToastPlugin: BVToastPlugin\n  }\n});\n\n/* harmony default export */ var components_toast = (ToastPlugin);\n// CONCATENATED MODULE: ./src/components/tooltip/tooltip.js\n\n\n\n\n\n\n\n\nconst tooltip_NAME = 'BTooltip'; // @vue/component\n\nconst BTooltip =\n/*#__PURE__*/\nvue.extend({\n  name: tooltip_NAME,\n  mixins: [toolpop, mixins_normalize_slot],\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    triggers: {\n      type: [String, Array],\n      default: 'hover focus'\n    },\n    placement: {\n      type: String,\n      default: 'top'\n    },\n    fallbackPlacement: {\n      type: [String, Array],\n      default: 'flip',\n\n      validator(value) {\n        return Object(array[\"d\" /* isArray */])(value) || Object(array[\"a\" /* arrayIncludes */])(['flip', 'clockwise', 'counterclockwise'], value);\n      }\n\n    },\n    delay: {\n      type: [Number, Object, String],\n      default: () => getComponentConfig(tooltip_NAME, 'delay')\n    },\n    boundary: {\n      // String: scrollParent, window, or viewport\n      // Element: element reference\n      type: [String, HTMLElement],\n      default: () => getComponentConfig(tooltip_NAME, 'boundary')\n    },\n    boundaryPadding: {\n      type: Number,\n      default: () => getComponentConfig(tooltip_NAME, 'boundaryPadding')\n    }\n  },\n\n  data() {\n    return {};\n  },\n\n  methods: {\n    createToolpop() {\n      // getTarget is in toolpop mixin\n      const target = this.getTarget();\n      /* istanbul ignore else */\n\n      if (target) {\n        this._toolpop = new tooltip_class(target, this.getConfig(), this);\n      } else {\n        this._toolpop = null;\n        utils_warn(\"b-tooltip: 'target' element not found!\");\n      }\n\n      return this._toolpop;\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      class: ['d-none'],\n      style: {\n        display: 'none'\n      },\n      attrs: {\n        'aria-hidden': true\n      }\n    }, [h('div', {\n      ref: 'title'\n    }, this.normalizeSlot('default'))]);\n  }\n\n});\n/* harmony default export */ var tooltip = (BTooltip);\n// CONCATENATED MODULE: ./src/directives/tooltip/tooltip.js\n\n\n\n\n\n\n\n\n // Key which we use to store tooltip object on element\n\nconst BV_TOOLTIP = '__BV_ToolTip__'; // Valid event triggers\n\nconst tooltip_validTriggers = {\n  focus: true,\n  hover: true,\n  click: true,\n  blur: true // Build a ToolTip config based on bindings (if any)\n  // Arguments and modifiers take precedence over passed value config object\n\n  /* istanbul ignore next: not easy to test */\n\n};\n\nconst tooltip_parseBindings = bindings =>\n/* istanbul ignore next: not easy to test */\n{\n  // We start out with a basic config\n  const NAME = 'BTooltip';\n  let config = {\n    delay: getComponentConfig(NAME, 'delay'),\n    boundary: String(getComponentConfig(NAME, 'boundary')),\n    boundaryPadding: parseInt(getComponentConfig(NAME, 'boundaryPadding'), 10) || 0 // Process bindings.value\n\n  };\n\n  if (isString(bindings.value)) {\n    // Value is tooltip content (html optionally supported)\n    config.title = bindings.value;\n  } else if (isFunction(bindings.value)) {\n    // Title generator function\n    config.title = bindings.value;\n  } else if (Object(object[\"h\" /* isObject */])(bindings.value)) {\n    // Value is config object, so merge\n    config = Object(objectSpread[\"a\" /* default */])({}, config, bindings.value);\n  } // If argument, assume element ID of container element\n\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.container = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  Object(object[\"j\" /* keys */])(bindings.modifiers).forEach(mod => {\n    if (/^html$/.test(mod)) {\n      // Title allows HTML\n      config.html = true;\n    } else if (/^nofade$/.test(mod)) {\n      // No animation\n      config.animation = false;\n    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {\n      // Placement of tooltip\n      config.placement = mod;\n    } else if (/^(window|viewport|scrollParent)$/.test(mod)) {\n      // Boundary of tooltip\n      config.boundary = mod;\n    } else if (/^d\\d+$/.test(mod)) {\n      // Delay value\n      const delay = parseInt(mod.slice(1), 10) || 0;\n\n      if (delay) {\n        config.delay = delay;\n      }\n    } else if (/^o-?\\d+$/.test(mod)) {\n      // Offset value, negative allowed\n      const offset = parseInt(mod.slice(1), 10) || 0;\n\n      if (offset) {\n        config.offset = offset;\n      }\n    }\n  }); // Special handling of event trigger modifiers trigger is\n  // a space separated list\n\n  const selectedTriggers = {}; // Parse current config object trigger\n\n  let triggers = isString(config.trigger) ? config.trigger.trim().split(/\\s+/) : [];\n  triggers.forEach(trigger => {\n    if (tooltip_validTriggers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Parse modifiers for triggers\n\n  Object(object[\"j\" /* keys */])(tooltip_validTriggers).forEach(trigger => {\n    if (bindings.modifiers[trigger]) {\n      selectedTriggers[trigger] = true;\n    }\n  }); // Sanitize triggers\n\n  config.trigger = Object(object[\"j\" /* keys */])(selectedTriggers).join(' ');\n\n  if (config.trigger === 'blur') {\n    // Blur by itself is useless, so convert it to 'focus'\n    config.trigger = 'focus';\n  }\n\n  if (!config.trigger) {\n    // Remove trigger config\n    delete config.trigger;\n  }\n\n  return config;\n}; // Add or update ToolTip on our element\n\n\nconst applyTooltip = (el, bindings, vnode) => {\n  if (!env[\"j\" /* isBrowser */]) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  if (!popper[\"a\" /* default */]) {\n    // Popper is required for ToolTips to work\n\n    /* istanbul ignore next */\n    utils_warn('v-b-tooltip: Popper.js is required for ToolTips to work');\n    /* istanbul ignore next */\n\n    return;\n  }\n\n  const config = tooltip_parseBindings(bindings);\n\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].updateConfig(config);\n  } else {\n    el[BV_TOOLTIP] = new tooltip_class(el, config, vnode.context);\n  }\n}; // Remove ToolTip on our element\n\n\nconst removeTooltip = el => {\n  if (el[BV_TOOLTIP]) {\n    el[BV_TOOLTIP].destroy();\n    el[BV_TOOLTIP] = null;\n    delete el[BV_TOOLTIP];\n  }\n};\n/*\n * Export our directive\n */\n\n\nconst VBTooltip = {\n  bind(el, bindings, vnode) {\n    applyTooltip(el, bindings, vnode);\n  },\n\n  inserted(el, bindings, vnode) {\n    applyTooltip(el, bindings, vnode);\n  },\n\n  update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyTooltip(el, bindings, vnode);\n    }\n  },\n\n  componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyTooltip(el, bindings, vnode);\n    }\n  },\n\n  unbind(el) {\n    removeTooltip(el);\n  }\n\n};\n/* harmony default export */ var tooltip_tooltip = (VBTooltip);\n// CONCATENATED MODULE: ./src/components/tooltip/index.js\n\n\n\nconst TooltipPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  components: {\n    BTooltip: BTooltip\n  },\n  directives: {\n    VBTooltip: VBTooltip\n  }\n});\n\n/* harmony default export */ var components_tooltip = (TooltipPlugin);\n// CONCATENATED MODULE: ./src/components/index.esm.js\n// Index file used for the main builds, which does not include legacy plugin names\n// Once es/ buld is removed, then this file will be renamed to index.js\n // Component group plugins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Main plugin to install all component group plugins\n\nconst componentsPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  plugins: {\n    AlertPlugin: AlertPlugin,\n    BadgePlugin: BadgePlugin,\n    BreadcrumbPlugin: BreadcrumbPlugin,\n    ButtonPlugin: ButtonPlugin,\n    ButtonGroupPlugin: ButtonGroupPlugin,\n    ButtonToolbarPlugin: ButtonToolbarPlugin,\n    CardPlugin: CardPlugin,\n    CarouselPlugin: CarouselPlugin,\n    CollapsePlugin: CollapsePlugin,\n    DropdownPlugin: DropdownPlugin,\n    EmbedPlugin: EmbedPlugin,\n    FormPlugin: FormPlugin,\n    FormGroupPlugin: FormGroupPlugin,\n    FormCheckboxPlugin: FormCheckboxPlugin,\n    FormRadioPlugin: FormRadioPlugin,\n    FormInputPlugin: FormInputPlugin,\n    FormTextareaPlugin: FormTextareaPlugin,\n    FormFilePlugin: FormFilePlugin,\n    FormSelectPlugin: FormSelectPlugin,\n    ImagePlugin: ImagePlugin,\n    InputGroupPlugin: InputGroupPlugin,\n    JumbotronPlugin: JumbotronPlugin,\n    LayoutPlugin: LayoutPlugin,\n    LinkPlugin: LinkPlugin,\n    ListGroupPlugin: ListGroupPlugin,\n    MediaPlugin: MediaPlugin,\n    ModalPlugin: ModalPlugin,\n    NavPlugin: NavPlugin,\n    NavbarPlugin: NavbarPlugin,\n    PaginationPlugin: PaginationPlugin,\n    PaginationNavPlugin: PaginationNavPlugin,\n    PopoverPlugin: PopoverPlugin,\n    ProgressPlugin: ProgressPlugin,\n    SpinnerPlugin: SpinnerPlugin,\n    TablePlugin: TablePlugin,\n    TabsPlugin: TabsPlugin,\n    ToastPlugin: ToastPlugin,\n    TooltipPlugin: TooltipPlugin\n  }\n}); // Export named injection plugins\n// These two plugins are not directly included in the above installer, as they are\n// installed via the ModalPlugin and ToastPlugin respectively.\n\n\n // Export all individual components and component group plugins as named exports.\n// This is mainly for users who import individual components, directives or plugins.\n//\n// Webpack 4 has optimization difficulties with re-eport of re-exports, so\n// we import the components individulaly here for better tree shaking,\n//\n// Webpack v5 fixes the optimizations with re-export of re-exports so this\n// can be reverted back to `export * from './table'` when Webpack v5 is released.\n// https://github.com/webpack/webpack/pull/9203 (available in Webpack v5.0.0-alpha.15)\n// export * from './alert'\n\n\n // export * from './badge'\n\n\n // export * from './breadcrumb'\n\n\n\n // export * from './button'\n\n\n\n // export * from './button-group'\n\n\n // export * from './button-toolbar'\n\n\n // export * from './card'\n\n\n\n\n\n\n\n\n\n\n\n // export * from './carousel'\n\n\n\n // export * from './collapse'\n\n\n // export * from './dropdown'\n\n\n\n\n\n\n\n\n\n // export * from './embed'\n\n\n // export * from './form'\n\n\n\n\n\n\n // export * from './form-checkbox'\n\n\n\n // export * from './form-file'\n\n\n // export * from './form-group'\n\n\n // export * from './form-input'\n\n\n // export * from './form-radio'\n\n\n\n // export * from './form-select'\n\n\n // export * from './form-textarea'\n\n\n // export * from './image'\n\n\n\n // export * from './input-group'\n\n\n\n\n\n\n // export * from './jumbotron'\n\n\n // export * from './layout'\n\n\n\n\n\n // export * from './link'\n\n\n // export * from './list-group'\n\n\n\n // export * from './media'\n\n\n\n\n // export * from './modal'\n\n\n // export * from './nav'\n\n\n\n\n\n\n // export * from './navbar'\n\n\n\n\n\n // export * from './pagination'\n\n\n // export * from './pagination-nav'\n\n\n // export * from './popover'\n\n\n // export * from './progress'\n\n\n\n // export * from './spinner'\n\n\n // export * from './table'\n\n\n\n // export * from './tabs'\n\n\n\n // export * from './toast'\n\n\n\n // export * from './tooltip'\n\n\n\n// CONCATENATED MODULE: ./src/directives/modal/index.js\n\n\nconst VBModalPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  directives: {\n    VBModal: VBModal\n  }\n});\n\n/* harmony default export */ var directives_modal = (VBModalPlugin);\n// CONCATENATED MODULE: ./src/directives/popover/index.js\n\n\nconst VBPopoverPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  directives: {\n    VBPopover: VBPopover\n  }\n});\n\n/* harmony default export */ var directives_popover = (VBPopoverPlugin);\n// CONCATENATED MODULE: ./src/directives/scrollspy/scrollspy.class.js\n\n\n\n\n\n\n\n\n/*\n * ScrollSpy class definition\n */\n\n\n\n\n/*\n * Constants / Defaults\n */\n\nconst scrollspy_class_NAME = 'v-b-scrollspy';\nconst ACTIVATE_EVENT = 'bv::scrollspy::activate';\nconst Default = {\n  element: 'body',\n  offset: 10,\n  method: 'auto',\n  throttle: 75\n};\nconst DefaultType = {\n  element: '(string|element|component)',\n  offset: 'number',\n  method: 'string',\n  throttle: 'number'\n};\nconst scrollspy_class_ClassName = {\n  DROPDOWN_ITEM: 'dropdown-item',\n  ACTIVE: 'active'\n};\nconst scrollspy_class_Selector = {\n  ACTIVE: '.active',\n  NAV_LIST_GROUP: '.nav, .list-group',\n  NAV_LINKS: '.nav-link',\n  NAV_ITEMS: '.nav-item',\n  LIST_ITEMS: '.list-group-item',\n  DROPDOWN: '.dropdown, .dropup',\n  DROPDOWN_ITEMS: '.dropdown-item',\n  DROPDOWN_TOGGLE: '.dropdown-toggle'\n};\nconst OffsetMethod = {\n  OFFSET: 'offset',\n  POSITION: 'position' // HREFs must end with a hash followed by at least one non-hash character.\n  // HREFs in the links are assumed to point to non-external links.\n  // Comparison to the current page base URL is not performed!\n\n};\nconst HREF_REGEX = /^.*(#[^#]+)$/; // Transition Events\n\nconst scrollspy_class_TransitionEndEvents = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd']; // Options for events\n\nconst scrollspy_class_EventOptions = {\n  passive: true,\n  capture: false\n  /*\n   * Utility Methods\n   */\n  // Better var type detection\n\n};\n\nfunction scrollspy_class_toType(obj)\n/* istanbul ignore next: not easy to test */\n{\n  return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n} // Check config properties for expected types\n\n\nfunction typeCheckConfig(componentName, config, configTypes)\n/* istanbul ignore next: not easy to test */\n{\n  for (const property in configTypes) {\n    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {\n      const expectedTypes = configTypes[property];\n      const value = config[property];\n      let valueType = value && isElement(value) ? 'element' : scrollspy_class_toType(value); // handle Vue instances\n\n      valueType = value && value._isVue ? 'component' : valueType;\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        /* istanbul ignore next */\n        utils_warn(\"\".concat(componentName, \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\"\"));\n      }\n    }\n  }\n}\n/*\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\n/* istanbul ignore next: not easy to test */\n\n\nclass scrollspy_class_ScrollSpy\n/* istanbul ignore next: not easy to test */\n{\n  constructor(element, config, $root) {\n    // The element we activate links in\n    this.$el = element;\n    this.$scroller = null;\n    this.$selector = [scrollspy_class_Selector.NAV_LINKS, scrollspy_class_Selector.LIST_ITEMS, scrollspy_class_Selector.DROPDOWN_ITEMS].join(',');\n    this.$offsets = [];\n    this.$targets = [];\n    this.$activeTarget = null;\n    this.$scrollHeight = 0;\n    this.$resizeTimeout = null;\n    this.$obs_scroller = null;\n    this.$obs_targets = null;\n    this.$root = $root || null;\n    this.$config = null;\n    this.updateConfig(config);\n  }\n\n  static get Name() {\n    return scrollspy_class_NAME;\n  }\n\n  static get Default() {\n    return Default;\n  }\n\n  static get DefaultType() {\n    return DefaultType;\n  }\n\n  updateConfig(config, $root) {\n    if (this.$scroller) {\n      // Just in case out scroll element has changed\n      this.unlisten();\n      this.$scroller = null;\n    }\n\n    const cfg = Object(objectSpread[\"a\" /* default */])({}, this.constructor.Default, config);\n\n    if ($root) {\n      this.$root = $root;\n    }\n\n    typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);\n    this.$config = cfg;\n\n    if (this.$root) {\n      const self = this;\n      this.$root.$nextTick(() => {\n        self.listen();\n      });\n    } else {\n      this.listen();\n    }\n  }\n\n  dispose() {\n    this.unlisten();\n    clearTimeout(this.$resizeTimeout);\n    this.$resizeTimeout = null;\n    this.$el = null;\n    this.$config = null;\n    this.$scroller = null;\n    this.$selector = null;\n    this.$offsets = null;\n    this.$targets = null;\n    this.$activeTarget = null;\n    this.$scrollHeight = null;\n  }\n\n  listen() {\n    const scroller = this.getScroller();\n\n    if (scroller && scroller.tagName !== 'BODY') {\n      eventOn(scroller, 'scroll', this, scrollspy_class_EventOptions);\n    }\n\n    eventOn(window, 'scroll', this, scrollspy_class_EventOptions);\n    eventOn(window, 'resize', this, scrollspy_class_EventOptions);\n    eventOn(window, 'orientationchange', this, scrollspy_class_EventOptions);\n    scrollspy_class_TransitionEndEvents.forEach(evtName => {\n      eventOn(window, evtName, this, scrollspy_class_EventOptions);\n    });\n    this.setObservers(true); // Schedule a refresh\n\n    this.handleEvent('refresh');\n  }\n\n  unlisten() {\n    const scroller = this.getScroller();\n    this.setObservers(false);\n\n    if (scroller && scroller.tagName !== 'BODY') {\n      eventOff(scroller, 'scroll', this, scrollspy_class_EventOptions);\n    }\n\n    eventOff(window, 'scroll', this, scrollspy_class_EventOptions);\n    eventOff(window, 'resize', this, scrollspy_class_EventOptions);\n    eventOff(window, 'orientationchange', this, scrollspy_class_EventOptions);\n    scrollspy_class_TransitionEndEvents.forEach(evtName => {\n      eventOff(window, evtName, this, scrollspy_class_EventOptions);\n    });\n  }\n\n  setObservers(on) {\n    // We observe both the scroller for content changes, and the target links\n    if (this.$obs_scroller) {\n      this.$obs_scroller.disconnect();\n      this.$obs_scroller = null;\n    }\n\n    if (this.$obs_targets) {\n      this.$obs_targets.disconnect();\n      this.$obs_targets = null;\n    }\n\n    if (on) {\n      this.$obs_targets = observe_dom(this.$el, () => {\n        this.handleEvent('mutation');\n      }, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: ['href']\n      });\n      this.$obs_scroller = observe_dom(this.getScroller(), () => {\n        this.handleEvent('mutation');\n      }, {\n        subtree: true,\n        childList: true,\n        characterData: true,\n        attributes: true,\n        attributeFilter: ['id', 'style', 'class']\n      });\n    }\n  } // general event handler\n\n\n  handleEvent(evt) {\n    const type = isString(evt) ? evt : evt.type;\n    const self = this;\n\n    function resizeThrottle() {\n      if (!self.$resizeTimeout) {\n        self.$resizeTimeout = setTimeout(() => {\n          self.refresh();\n          self.process();\n          self.$resizeTimeout = null;\n        }, self.$config.throttle);\n      }\n    }\n\n    if (type === 'scroll') {\n      if (!this.$obs_scroller) {\n        // Just in case we are added to the DOM before the scroll target is\n        // We re-instantiate our listeners, just in case\n        this.listen();\n      }\n\n      this.process();\n    } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {\n      // Postpone these events by throttle time\n      resizeThrottle();\n    }\n  } // Refresh the list of target links on the element we are applied to\n\n\n  refresh() {\n    const scroller = this.getScroller();\n\n    if (!scroller) {\n      return;\n    }\n\n    const autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\n    const method = this.$config.method === 'auto' ? autoMethod : this.$config.method;\n    const methodFn = method === OffsetMethod.POSITION ? position : dom_offset;\n    const offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;\n    this.$offsets = [];\n    this.$targets = [];\n    this.$scrollHeight = this.getScrollHeight(); // Find all the unique link HREFs that we will control\n\n    selectAll(this.$selector, this.$el) // Get HREF value\n    .map(link => getAttr(link, 'href')) // Filter out HREFs that do not match our RegExp\n    .filter(href => href && HREF_REGEX.test(href || '')) // Find all elements with ID that match HREF hash\n    .map(href => {\n      // Convert HREF into an ID (including # at beginning)\n      const id = href.replace(HREF_REGEX, '$1').trim();\n\n      if (!id) {\n        return null;\n      } // Find the element with the ID specified by id\n\n\n      const el = dom_select(id, scroller);\n\n      if (el && isVisible(el)) {\n        return {\n          offset: parseInt(methodFn(el).top, 10) + offsetBase,\n          target: id\n        };\n      }\n\n      return null;\n    }).filter(Boolean) // Sort them by their offsets (smallest first)\n    .sort((a, b) => a.offset - b.offset) // record only unique targets/offsets\n    .reduce((memo, item) => {\n      if (!memo[item.target]) {\n        this.$offsets.push(item.offset);\n        this.$targets.push(item.target);\n        memo[item.target] = true;\n      }\n\n      return memo;\n    }, {}); // Return this for easy chaining\n\n    return this;\n  } // Handle activating/clearing\n\n\n  process() {\n    const scrollTop = this.getScrollTop() + this.$config.offset;\n    const scrollHeight = this.getScrollHeight();\n    const maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();\n\n    if (this.$scrollHeight !== scrollHeight) {\n      this.refresh();\n    }\n\n    if (scrollTop >= maxScroll) {\n      const target = this.$targets[this.$targets.length - 1];\n\n      if (this.$activeTarget !== target) {\n        this.activate(target);\n      }\n\n      return;\n    }\n\n    if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {\n      this.$activeTarget = null;\n      this.clear();\n      return;\n    }\n\n    for (let i = this.$offsets.length; i--;) {\n      const isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (isUndefined(this.$offsets[i + 1]) || scrollTop < this.$offsets[i + 1]);\n\n      if (isActiveTarget) {\n        this.activate(this.$targets[i]);\n      }\n    }\n  }\n\n  getScroller() {\n    if (this.$scroller) {\n      return this.$scroller;\n    }\n\n    let scroller = this.$config.element;\n\n    if (!scroller) {\n      return null;\n    } else if (isElement(scroller.$el)) {\n      scroller = scroller.$el;\n    } else if (isString(scroller)) {\n      scroller = dom_select(scroller);\n    }\n\n    if (!scroller) {\n      return null;\n    }\n\n    this.$scroller = scroller.tagName === 'BODY' ? window : scroller;\n    return this.$scroller;\n  }\n\n  getScrollTop() {\n    const scroller = this.getScroller();\n    return scroller === window ? scroller.pageYOffset : scroller.scrollTop;\n  }\n\n  getScrollHeight() {\n    return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n  }\n\n  getOffsetHeight() {\n    const scroller = this.getScroller();\n    return scroller === window ? window.innerHeight : getBCR(scroller).height;\n  }\n\n  activate(target) {\n    this.$activeTarget = target;\n    this.clear(); // Grab the list of target links (<a href=\"{$target}\">)\n\n    const links = selectAll(this.$selector // Split out the base selectors\n    .split(',') // Map to a selector that matches links with HREF ending in the ID (including '#')\n    .map(selector => \"\".concat(selector, \"[href$=\\\"\").concat(target, \"\\\"]\")) // Join back into a single selector string\n    .join(','), this.$el);\n    links.forEach(link => {\n      if (hasClass(link, scrollspy_class_ClassName.DROPDOWN_ITEM)) {\n        // This is a dropdown item, so find the .dropdown-toggle and set it's state\n        const dropdown = closest(scrollspy_class_Selector.DROPDOWN, link);\n\n        if (dropdown) {\n          this.setActiveState(dom_select(scrollspy_class_Selector.DROPDOWN_TOGGLE, dropdown), true);\n        } // Also set this link's state\n\n\n        this.setActiveState(link, true);\n      } else {\n        // Set triggered link as active\n        this.setActiveState(link, true);\n\n        if (matches(link.parentElement, scrollspy_class_Selector.NAV_ITEMS)) {\n          // Handle nav-link inside nav-item, and set nav-item active\n          this.setActiveState(link.parentElement, true);\n        } // Set triggered links parents as active\n        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n\n\n        let el = link;\n\n        while (el) {\n          el = closest(scrollspy_class_Selector.NAV_LIST_GROUP, el);\n          const sibling = el ? el.previousElementSibling : null;\n\n          if (sibling && matches(sibling, \"\".concat(scrollspy_class_Selector.NAV_LINKS, \", \").concat(scrollspy_class_Selector.LIST_ITEMS))) {\n            this.setActiveState(sibling, true);\n          } // Handle special case where nav-link is inside a nav-item\n\n\n          if (sibling && matches(sibling, scrollspy_class_Selector.NAV_ITEMS)) {\n            this.setActiveState(dom_select(scrollspy_class_Selector.NAV_LINKS, sibling), true); // Add active state to nav-item as well\n\n            this.setActiveState(sibling, true);\n          }\n        }\n      }\n    }); // Signal event to via $root, passing ID of activated target and reference to array of links\n\n    if (links && links.length > 0 && this.$root) {\n      this.$root.$emit(ACTIVATE_EVENT, target, links);\n    }\n  }\n\n  clear() {\n    selectAll(\"\".concat(this.$selector, \", \").concat(scrollspy_class_Selector.NAV_ITEMS), this.$el).filter(el => hasClass(el, scrollspy_class_ClassName.ACTIVE)).forEach(el => this.setActiveState(el, false));\n  }\n\n  setActiveState(el, active) {\n    if (!el) {\n      return;\n    }\n\n    if (active) {\n      addClass(el, scrollspy_class_ClassName.ACTIVE);\n    } else {\n      removeClass(el, scrollspy_class_ClassName.ACTIVE);\n    }\n  }\n\n}\n\n/* harmony default export */ var scrollspy_class = (scrollspy_class_ScrollSpy);\n// CONCATENATED MODULE: ./src/directives/scrollspy/scrollspy.js\n\n\n\n // Key we use to store our instance\n\nconst BV_SCROLLSPY = '__BV_ScrollSpy__'; // Build a ScrollSpy config based on bindings (if any)\n// Arguments and modifiers take precedence over passed value config object\n\n/* istanbul ignore next: not easy to test */\n\nconst scrollspy_parseBindings = bindings =>\n/* istanbul ignore next: not easy to test */\n{\n  const config = {}; // If argument, assume element ID\n\n  if (bindings.arg) {\n    // Element ID specified as arg\n    // We must prepend '#' to become a CSS selector\n    config.element = \"#\".concat(bindings.arg);\n  } // Process modifiers\n\n\n  Object(object[\"j\" /* keys */])(bindings.modifiers).forEach(mod => {\n    if (/^\\d+$/.test(mod)) {\n      // Offset value\n      config.offset = parseInt(mod, 10);\n    } else if (/^(auto|position|offset)$/.test(mod)) {\n      // Offset method\n      config.method = mod;\n    }\n  }); // Process value\n\n  if (isString(bindings.value)) {\n    // Value is a CSS ID or selector\n    config.element = bindings.value;\n  } else if (isNumber(bindings.value)) {\n    // Value is offset\n    config.offset = Math.round(bindings.value);\n  } else if (Object(object[\"h\" /* isObject */])(bindings.value)) {\n    // Value is config object\n    // Filter the object based on our supported config options\n    Object(object[\"j\" /* keys */])(bindings.value).filter(k => Boolean(scrollspy_class.DefaultType[k])).forEach(k => {\n      config[k] = bindings.value[k];\n    });\n  }\n\n  return config;\n}; // Add or update ScrollSpy on our element\n\n\nconst applyScrollspy = (el, bindings, vnode) =>\n/* istanbul ignore next: not easy to test */\n{\n  if (!env[\"j\" /* isBrowser */]) {\n    /* istanbul ignore next */\n    return;\n  }\n\n  const config = scrollspy_parseBindings(bindings);\n\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].updateConfig(config, vnode.context.$root);\n  } else {\n    el[BV_SCROLLSPY] = new scrollspy_class(el, config, vnode.context.$root);\n  }\n}; // Remove ScrollSpy on our element\n\n/* istanbul ignore next: not easy to test */\n\n\nconst removeScrollspy = el =>\n/* istanbul ignore next: not easy to test */\n{\n  if (el[BV_SCROLLSPY]) {\n    el[BV_SCROLLSPY].dispose();\n    el[BV_SCROLLSPY] = null;\n    delete el[BV_SCROLLSPY];\n  }\n};\n/*\n * Export our directive\n */\n\n\nconst VBScrollspy = {\n  bind(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  inserted(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    applyScrollspy(el, bindings, vnode);\n  },\n\n  update(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  componentUpdated(el, bindings, vnode)\n  /* istanbul ignore next: not easy to test */\n  {\n    if (bindings.value !== bindings.oldValue) {\n      applyScrollspy(el, bindings, vnode);\n    }\n  },\n\n  unbind(el)\n  /* istanbul ignore next: not easy to test */\n  {\n    removeScrollspy(el);\n  }\n\n};\n/* harmony default export */ var scrollspy = (VBScrollspy);\n// CONCATENATED MODULE: ./src/directives/scrollspy/index.js\n\n\nconst VBScrollspyPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  directives: {\n    VBScrollspy: VBScrollspy\n  }\n});\n\n/* harmony default export */ var directives_scrollspy = (VBScrollspyPlugin);\n// CONCATENATED MODULE: ./src/directives/toggle/index.js\n\n\nconst VBTogglePlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  directives: {\n    VBToggle: VBToggle\n  }\n});\n\n/* harmony default export */ var directives_toggle = (VBTogglePlugin);\n// CONCATENATED MODULE: ./src/directives/tooltip/index.js\n\n\nconst VBTooltipPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  directives: {\n    VBTooltip: VBTooltip\n  }\n});\n\n/* harmony default export */ var directives_tooltip = (VBTooltipPlugin);\n// CONCATENATED MODULE: ./src/directives/index.esm.js\n// Index file used for the main builds, which does not include legacy plugin names\n// Once es/ buld is removed, then this file will be renamed to index.js\n\n\n\n\n\n // Main plugin for installing all directive plugins\n\nconst directivesPlugin =\n/*#__PURE__*/\nplugins_pluginFactory({\n  plugins: {\n    VBModalPlugin: VBModalPlugin,\n    VBPopoverPlugin: VBPopoverPlugin,\n    VBScrollspyPlugin: VBScrollspyPlugin,\n    VBTogglePlugin: VBTogglePlugin,\n    VBTooltipPlugin: VBTooltipPlugin\n  }\n}); // Named exports of all directives (VB<Name>) and Plugins (VB<name>Plugin)\n// See src/compinents/index.esm.js for notes/comment\n// export * from './modal'\n\n\n // export * from './popover'\n\n\n // export * from './scrollspy'\n\n\n // export * from './toggle'\n\n\n // export * from './tooltip'\n\n\n\n// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n // Named exports of all components and component group plugins\n\n // Named exports of all directives and directive group plugins\n\n // BootstrapVue installer\n\nconst src_install =\n/*#__PURE__*/\nplugins_installFactory({\n  plugins: {\n    componentsPlugin: componentsPlugin,\n    directivesPlugin: directivesPlugin\n  }\n}); // BootstrapVue plugin\n\nconst BootstrapVue =\n/*#__PURE__*/\n{\n  install: src_install,\n  // To be deprecated. not documented\n  setConfig: config_set_setConfig // Named exports for BvConfigPlugin and BootstrapVue\n\n};\n // Default export is the BootstrapVue plugin\n\n/* harmony default export */ var src_0 = (BootstrapVue);\n// CONCATENATED MODULE: ./docs/plugins/bootstrap-vue.js\n\n\nvue_common_default.a.use(src_0, {});\n// CONCATENATED MODULE: ./docs/components/codemirror.js\nlet CodeMirror;\n\nif (typeof window !== 'undefined') {\n  CodeMirror = __webpack_require__(9);\n\n  __webpack_require__(61);\n\n  __webpack_require__(278);\n\n  __webpack_require__(279);\n\n  __webpack_require__(120);\n\n  __webpack_require__(288);\n\n  __webpack_require__(289);\n\n  __webpack_require__(121);\n}\n\n/* harmony default export */ var components_codemirror = ({\n  name: 'BDVCodemirror',\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    mode: {\n      type: [String, Object],\n      default: ''\n    },\n    theme: {\n      type: String,\n      default: 'default'\n    },\n    tabMode: {\n      type: String,\n      default: 'indent'\n    },\n    tabSize: {\n      type: [Number, String],\n      default: 2\n    },\n    lineWrapping: {\n      type: Boolean,\n      default: true\n    },\n    lineNumbers: {\n      type: Boolean,\n      default: true\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      CM: null\n    };\n  },\n\n  watch: {\n    value(newVal, oldVal) {\n      if (!oldVal || oldVal === '') {\n        this.CM.setValue(newVal);\n      }\n    }\n\n  },\n\n  mounted() {\n    this.CM = CodeMirror.fromTextArea(this.$refs.textarea, {\n      mode: this.mode,\n      theme: this.theme,\n      tabMode: this.tabMode,\n      tabSize: parseInt(this.tabSize, 10) || 2,\n      lineWrapping: this.lineWrapping,\n      lineNumbers: this.lineNumbers,\n      autoCloseTags: true,\n      autoCloseBrackets: true,\n      readOnly: this.readOnly\n    });\n    this.CM.on('change', () => {\n      this.$emit('input', this.CM.getValue());\n    });\n  },\n\n  beforeDestroy() {\n    if (this.CM) {\n      this.CM.toTextArea();\n    }\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'notranslate m-0 p-0',\n      attrs: {\n        translate: 'no'\n      }\n    }, [h('textarea', {\n      props: {\n        value: this.value\n      },\n      ref: 'textarea'\n    })]);\n  }\n\n});\n// CONCATENATED MODULE: ./docs/plugins/codemirror.js\n\n\nvue_common_default.a.component('codemirror', components_codemirror);\n// EXTERNAL MODULE: ./docs/plugins/play.js\nvar play = __webpack_require__(87);\n\n// CONCATENATED MODULE: ./docs/plugins/docs.js\n// Extract docs into main chunk\n// import '../../components'\n// import '../../directives'\n// import '../../reference'\n// import '../../layout'\n// import '../../misc'\n// Disable vue global error handler\n\n/* harmony default export */ var plugins_docs = (function () {\n  vue_common_default.a.config.errorHandler = console.error;\n});\n// CONCATENATED MODULE: ./.nuxt/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return createApp; });\n/* unused concated harmony import NuxtError */\n\n\n\n\n\n\n\n\n\n\n\n/* Plugins */\n\n // Source: ./workbox.js (mode: 'client')\n\n // Source: ./nuxt-icons.js (mode: 'all')\n\n // Source: ./google-analytics.js (mode: 'client')\n\n // Source: ../docs/plugins/bootstrap-vue.js (mode: 'all')\n\n // Source: ../docs/plugins/codemirror.js (mode: 'all')\n\n // Source: ../docs/plugins/play.js (mode: 'all')\n\n // Source: ../docs/plugins/docs.js (mode: 'all')\n// Component: <NoSsr>\n\nvue_common_default.a.component(no_ssr.name, no_ssr); // Component: <NuxtChild>\n\nvue_common_default.a.component(nuxt_child.name, nuxt_child);\nvue_common_default.a.component('NChild', nuxt_child); // Component NuxtLink is imported in server.js or client.js\n// Component: <Nuxt>`\n\nvue_common_default.a.component(components_nuxt.name, components_nuxt); // vue-meta configuration\n\nvue_common_default.a.use(vue_meta_default.a, {\n  keyName: 'head',\n  // the component option name that vue-meta looks for meta info on.\n  attribute: 'data-n-head',\n  // the attribute name vue-meta adds to the tags it observes\n  ssrAttribute: 'data-n-head-ssr',\n  // the attribute name that lets vue-meta know that meta info has already been server-rendered\n  tagIDKeyName: 'hid' // the property name that vue-meta uses to determine whether to overwrite or append a tag\n\n});\nconst defaultTransition = {\n  \"name\": \"page\",\n  \"mode\": \"out-in\",\n  \"appear\": false,\n  \"appearClass\": \"appear\",\n  \"appearActiveClass\": \"appear-active\",\n  \"appearToClass\": \"appear-to\"\n};\n\nfunction createApp(_x) {\n  return _createApp.apply(this, arguments);\n}\n\nfunction _createApp() {\n  _createApp = Object(asyncToGenerator[\"a\" /* default */])(function* (ssrContext) {\n    const router = yield createRouter(ssrContext); // Create Root instance\n    // here we inject the router and store to all child components,\n    // making them available everywhere as `this.$router` and `this.$store`.\n\n    const app = Object(objectSpread[\"a\" /* default */])({\n      router,\n      nuxt: {\n        defaultTransition,\n        transitions: [defaultTransition],\n\n        setTransitions(transitions) {\n          if (!Array.isArray(transitions)) {\n            transitions = [transitions];\n          }\n\n          transitions = transitions.map(transition => {\n            if (!transition) {\n              transition = defaultTransition;\n            } else if (typeof transition === 'string') {\n              transition = Object.assign({}, defaultTransition, {\n                name: transition\n              });\n            } else {\n              transition = Object.assign({}, defaultTransition, transition);\n            }\n\n            return transition;\n          });\n          this.$options.nuxt.transitions = transitions;\n          return transitions;\n        },\n\n        err: null,\n        dateErr: null,\n\n        error(err) {\n          err = err || null;\n          app.context._errored = Boolean(err);\n          err = err ? Object(utils[\"k\" /* normalizeError */])(err) : null;\n          const nuxt = this.nuxt || this.$options.nuxt;\n          nuxt.dateErr = Date.now();\n          nuxt.err = err; // Used in src/server.js\n\n          if (ssrContext) ssrContext.nuxt.error = err;\n          return err;\n        }\n\n      }\n    }, App);\n\n    const next = ssrContext ? ssrContext.next : location => app.router.push(location); // Resolve route\n\n    let route;\n\n    if (ssrContext) {\n      route = router.resolve(ssrContext.url).route;\n    } else {\n      const path = Object(utils[\"d\" /* getLocation */])(router.options.base);\n      route = router.resolve(path).route;\n    } // Set context to app.context\n\n\n    yield Object(utils[\"o\" /* setContext */])(app, {\n      route,\n      next,\n      error: app.nuxt.error.bind(app),\n      payload: ssrContext ? ssrContext.payload : undefined,\n      req: ssrContext ? ssrContext.req : undefined,\n      res: ssrContext ? ssrContext.res : undefined,\n      beforeRenderFns: ssrContext ? ssrContext.beforeRenderFns : undefined,\n      ssrContext\n    });\n\n    const inject = function inject(key, value) {\n      if (!key) throw new Error('inject(key, value) has no key provided');\n      if (typeof value === 'undefined') throw new Error('inject(key, value) has no value provided');\n      key = '$' + key; // Add into app\n\n      app[key] = value; // Check if plugin not already installed\n\n      const installKey = '__nuxt_' + key + '_installed__';\n      if (vue_common_default.a[installKey]) return;\n      vue_common_default.a[installKey] = true; // Call Vue.use() to install the plugin into vm\n\n      vue_common_default.a.use(() => {\n        if (!vue_common_default.a.prototype.hasOwnProperty(key)) {\n          Object.defineProperty(vue_common_default.a.prototype, key, {\n            get() {\n              return this.$root.$options[key];\n            }\n\n          });\n        }\n      });\n    }; // Plugin execution\n\n\n    if ( true && typeof /* Cannot get final name for export \"default\" in \"./.nuxt/workbox.js\" (known exports: , known reexports: ) */ undefined === 'function') {\n      yield /* Cannot get final name for export \"default\" in \"./.nuxt/workbox.js\" (known exports: , known reexports: ) */ undefined(app.context, inject);\n    }\n\n    if (typeof nuxt_icons === 'function') {\n      yield nuxt_icons(app.context, inject);\n    }\n\n    if ( true && typeof google_analytics === 'function') {\n      yield google_analytics(app.context, inject);\n    }\n\n    if (typeof /* Cannot get final name for export \"default\" in \"./docs/plugins/bootstrap-vue.js\" (known exports: , known reexports: ) */ undefined === 'function') {\n      yield /* Cannot get final name for export \"default\" in \"./docs/plugins/bootstrap-vue.js\" (known exports: , known reexports: ) */ undefined(app.context, inject);\n    }\n\n    if (typeof /* Cannot get final name for export \"default\" in \"./docs/plugins/codemirror.js\" (known exports: , known reexports: ) */ undefined === 'function') {\n      yield /* Cannot get final name for export \"default\" in \"./docs/plugins/codemirror.js\" (known exports: , known reexports: ) */ undefined(app.context, inject);\n    }\n\n    if (typeof play[\"default\"] === 'function') {\n      yield Object(play[\"default\"])(app.context, inject);\n    }\n\n    if (typeof plugins_docs === 'function') {\n      yield plugins_docs(app.context, inject);\n    } // If server-side, wait for async component to be resolved first\n\n\n    if (false) {}\n\n    return {\n      app,\n      router\n    };\n  });\n  return _createApp.apply(this, arguments);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///133\n")},,function(Q,B,F){Q.exports=F(136)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);\n/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31);\n/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var unfetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(125);\n/* harmony import */ var _middleware_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(88);\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6);\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(133);\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(22);\n/* harmony import */ var _components_nuxt_link_client_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(63);\n\n\n\n\n\n\n\n\n // should be included after ./index.js\n// Component: <NuxtLink>\n\nvue__WEBPACK_IMPORTED_MODULE_3___default.a.component(_components_nuxt_link_client_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].name, _components_nuxt_link_client_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);\nvue__WEBPACK_IMPORTED_MODULE_3___default.a.component(\'NLink\', _components_nuxt_link_client_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);\n\nif (!global.fetch) {\n  global.fetch = unfetch__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"];\n} // Global shared references\n\n\nlet _lastPaths = [];\nlet app;\nlet router; // Try to rehydrate SSR data from window\n\nconst NUXT = window.__NUXT__ || {};\nObject.assign(vue__WEBPACK_IMPORTED_MODULE_3___default.a.config, {\n  "silent": true,\n  "performance": false\n});\nconst errorHandler = vue__WEBPACK_IMPORTED_MODULE_3___default.a.config.errorHandler || console.error; // Create and mount App\n\nObject(_index_js__WEBPACK_IMPORTED_MODULE_7__[/* createApp */ "a"])().then(mountApp).catch(errorHandler);\n\nfunction componentOption(component, key) {\n  if (!component || !component.options || !component.options[key]) {\n    return {};\n  }\n\n  const option = component.options[key];\n\n  if (typeof option === \'function\') {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return option(...args);\n  }\n\n  return option;\n}\n\nfunction mapTransitions(Components, to, from) {\n  const componentTransitions = component => {\n    const transition = componentOption(component, \'transition\', to, from) || {};\n    return typeof transition === \'string\' ? {\n      name: transition\n    } : transition;\n  };\n\n  return Components.map(Component => {\n    // Clone original object to prevent overrides\n    const transitions = Object.assign({}, componentTransitions(Component)); // Combine transitions & prefer `leave` transitions of \'from\' route\n\n    if (from && from.matched.length && from.matched[0].components.default) {\n      const fromTransitions = componentTransitions(from.matched[0].components.default);\n      Object.keys(fromTransitions).filter(key => fromTransitions[key] && key.toLowerCase().includes(\'leave\')).forEach(key => {\n        transitions[key] = fromTransitions[key];\n      });\n    }\n\n    return transitions;\n  });\n}\n\nfunction loadAsyncComponents(_x, _x2, _x3) {\n  return _loadAsyncComponents.apply(this, arguments);\n}\n\nfunction _loadAsyncComponents() {\n  _loadAsyncComponents = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(function* (to, from, next) {\n    // Check if route path changed (this._pathChanged), only if the page is not an error (for validate())\n    this._pathChanged = Boolean(app.nuxt.err) || from.path !== to.path;\n    this._queryChanged = JSON.stringify(to.query) !== JSON.stringify(from.query);\n    this._diffQuery = this._queryChanged ? Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* getQueryDiff */ "g"])(to.query, from.query) : [];\n\n    if (this._pathChanged && this.$loading.start && !this.$loading.manual) {\n      this.$loading.start();\n    }\n\n    try {\n      const Components = yield Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* resolveRouteComponents */ "m"])(to);\n\n      if (!this._pathChanged && this._queryChanged) {\n        // Add a marker on each component that it needs to refresh or not\n        const startLoader = Components.some(Component => {\n          const watchQuery = Component.options.watchQuery;\n          if (watchQuery === true) return true;\n\n          if (Array.isArray(watchQuery)) {\n            return watchQuery.some(key => this._diffQuery[key]);\n          }\n\n          return false;\n        });\n\n        if (startLoader && this.$loading.start && !this.$loading.manual) {\n          this.$loading.start();\n        }\n      } // Call next()\n\n\n      next();\n    } catch (error) {\n      const err = error || {};\n      const statusCode = err.statusCode || err.status || err.response && err.response.status || 500;\n      const message = err.message || \'\'; // Handle chunk loading errors\n      // This may be due to a new deployment or a network problem\n\n      if (/^Loading( CSS)? chunk (\\d)+ failed\\./.test(message)) {\n        window.location.reload(true\n        /* skip cache */\n        );\n        return; // prevent error page blinking for user\n      }\n\n      this.error({\n        statusCode,\n        message\n      });\n      this.$nuxt.$emit(\'routeChanged\', to, from, err);\n      next();\n    }\n  });\n  return _loadAsyncComponents.apply(this, arguments);\n}\n\nfunction applySSRData(Component, ssrData) {\n  if (NUXT.serverRendered && ssrData) {\n    Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* applyAsyncData */ "a"])(Component, ssrData);\n  }\n\n  Component._Ctor = Component;\n  return Component;\n} // Get matched components\n\n\nfunction resolveComponents(router) {\n  const path = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* getLocation */ "d"])(router.options.base, router.options.mode);\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* flatMapComponents */ "c"])(router.match(path),\n  /*#__PURE__*/\n  function () {\n    var _ref = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(function* (Component, _, match, key, index) {\n      // If component is not resolved yet, resolve it\n      if (typeof Component === \'function\' && !Component.options) {\n        Component = yield Component();\n      } // Sanitize it and save it\n\n\n      const _Component = applySSRData(Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* sanitizeComponent */ "n"])(Component), NUXT.data ? NUXT.data[index] : null);\n\n      match.components[key] = _Component;\n      return _Component;\n    });\n\n    return function (_x4, _x5, _x6, _x7, _x8) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\n\nfunction callMiddleware(Components, context, layout) {\n  let midd = [];\n  let unknownMiddleware = false; // If layout is undefined, only call global middleware\n\n  if (typeof layout !== \'undefined\') {\n    midd = []; // Exclude global middleware if layout defined (already called before)\n\n    layout = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* sanitizeComponent */ "n"])(layout);\n\n    if (layout.options.middleware) {\n      midd = midd.concat(layout.options.middleware);\n    }\n\n    Components.forEach(Component => {\n      if (Component.options.middleware) {\n        midd = midd.concat(Component.options.middleware);\n      }\n    });\n  }\n\n  midd = midd.map(name => {\n    if (typeof name === \'function\') return name;\n\n    if (typeof _middleware_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"][name] !== \'function\') {\n      unknownMiddleware = true;\n      this.error({\n        statusCode: 500,\n        message: \'Unknown middleware \' + name\n      });\n    }\n\n    return _middleware_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"][name];\n  });\n  if (unknownMiddleware) return;\n  return Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* middlewareSeries */ "j"])(midd, context);\n}\n\nfunction render(_x9, _x10, _x11) {\n  return _render.apply(this, arguments);\n} // Fix components format in matched, it\'s due to code-splitting of vue-router\n\n\nfunction _render() {\n  _render = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(function* (to, from, next) {\n    if (this._pathChanged === false && this._queryChanged === false) return next(); // Handle first render on SPA mode\n\n    if (to === from) _lastPaths = [];else {\n      const fromMatches = [];\n      _lastPaths = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* getMatchedComponents */ "e"])(from, fromMatches).map((Component, i) => {\n        return Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* compile */ "b"])(from.matched[fromMatches[i]].path)(from.params);\n      });\n    } // nextCalled is true when redirected\n\n    let nextCalled = false;\n\n    const _next = path => {\n      if (from.path === path.path && this.$loading.finish) {\n        this.$loading.finish();\n      }\n\n      if (from.path !== path.path && this.$loading.pause) {\n        this.$loading.pause();\n      }\n\n      if (nextCalled) return;\n      nextCalled = true;\n      next(path);\n    }; // Update context\n\n\n    yield Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* setContext */ "o"])(app, {\n      route: to,\n      from,\n      next: _next.bind(this)\n    });\n    this._dateLastError = app.nuxt.dateErr;\n    this._hadError = Boolean(app.nuxt.err); // Get route\'s matched components\n\n    const matches = [];\n    const Components = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* getMatchedComponents */ "e"])(to, matches); // If no Components matched, generate 404\n\n    if (!Components.length) {\n      // Default layout\n      yield callMiddleware.call(this, Components, app.context);\n      if (nextCalled) return; // Load layout for error page\n\n      const layout = yield this.loadLayout(typeof _index_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].layout === \'function\' ? _index_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].layout(app.context) : _index_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].layout);\n      yield callMiddleware.call(this, Components, app.context, layout);\n      if (nextCalled) return; // Show error page\n\n      app.context.error({\n        statusCode: 404,\n        message: "This page could not be found"\n      });\n      return next();\n    } // Update ._data and other properties if hot reloaded\n\n\n    Components.forEach(Component => {\n      if (Component._Ctor && Component._Ctor.options) {\n        Component.options.asyncData = Component._Ctor.options.asyncData;\n        Component.options.fetch = Component._Ctor.options.fetch;\n      }\n    }); // Apply transitions\n\n    this.setTransitions(mapTransitions(Components, to, from));\n\n    try {\n      // Call middleware\n      yield callMiddleware.call(this, Components, app.context);\n      if (nextCalled) return;\n      if (app.context._errored) return next(); // Set layout\n\n      let layout = Components[0].options.layout;\n\n      if (typeof layout === \'function\') {\n        layout = layout(app.context);\n      }\n\n      layout = yield this.loadLayout(layout); // Call middleware for layout\n\n      yield callMiddleware.call(this, Components, app.context, layout);\n      if (nextCalled) return;\n      if (app.context._errored) return next(); // Call .validate()\n\n      let isValid = true;\n\n      try {\n        for (const Component of Components) {\n          if (typeof Component.options.validate !== \'function\') {\n            continue;\n          }\n\n          isValid = yield Component.options.validate(app.context);\n\n          if (!isValid) {\n            break;\n          }\n        }\n      } catch (validationError) {\n        // ...If .validate() threw an error\n        this.error({\n          statusCode: validationError.statusCode || \'500\',\n          message: validationError.message\n        });\n        return next();\n      } // ...If .validate() returned false\n\n\n      if (!isValid) {\n        this.error({\n          statusCode: 404,\n          message: "This page could not be found"\n        });\n        return next();\n      } // Call asyncData & fetch hooks on components matched by the route.\n\n\n      yield Promise.all(Components.map((Component, i) => {\n        // Check if only children route changed\n        Component._path = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* compile */ "b"])(to.matched[matches[i]].path)(to.params);\n        Component._dataRefresh = false; // Check if Component need to be refreshed (call asyncData & fetch)\n        // Only if its slug has changed or is watch query changes\n\n        if (this._pathChanged && this._queryChanged || Component._path !== _lastPaths[i]) {\n          Component._dataRefresh = true;\n        } else if (!this._pathChanged && this._queryChanged) {\n          const watchQuery = Component.options.watchQuery;\n\n          if (watchQuery === true) {\n            Component._dataRefresh = true;\n          } else if (Array.isArray(watchQuery)) {\n            Component._dataRefresh = watchQuery.some(key => this._diffQuery[key]);\n          }\n        }\n\n        if (!this._hadError && this._isMounted && !Component._dataRefresh) {\n          return Promise.resolve();\n        }\n\n        const promises = [];\n        const hasAsyncData = Component.options.asyncData && typeof Component.options.asyncData === \'function\';\n        const hasFetch = Boolean(Component.options.fetch);\n        const loadingIncrease = hasAsyncData && hasFetch ? 30 : 45; // Call asyncData(context)\n\n        if (hasAsyncData) {\n          const promise = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* promisify */ "l"])(Component.options.asyncData, app.context).then(asyncDataResult => {\n            Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* applyAsyncData */ "a"])(Component, asyncDataResult);\n\n            if (this.$loading.increase) {\n              this.$loading.increase(loadingIncrease);\n            }\n          });\n          promises.push(promise);\n        } // Check disabled page loading\n\n\n        this.$loading.manual = Component.options.loading === false; // Call fetch(context)\n\n        if (hasFetch) {\n          let p = Component.options.fetch(app.context);\n\n          if (!p || !(p instanceof Promise) && typeof p.then !== \'function\') {\n            p = Promise.resolve(p);\n          }\n\n          p.then(fetchResult => {\n            if (this.$loading.increase) {\n              this.$loading.increase(loadingIncrease);\n            }\n          });\n          promises.push(p);\n        }\n\n        return Promise.all(promises);\n      })); // If not redirected\n\n      if (!nextCalled) {\n        if (this.$loading.finish && !this.$loading.manual) {\n          this.$loading.finish();\n        }\n\n        next();\n      }\n    } catch (err) {\n      const error = err || {};\n\n      if (error.message === \'ERR_REDIRECT\') {\n        return this.$nuxt.$emit(\'routeChanged\', to, from, error);\n      }\n\n      _lastPaths = [];\n      Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* globalHandleError */ "h"])(error); // Load error layout\n\n      let layout = _index_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].layout;\n\n      if (typeof layout === \'function\') {\n        layout = layout(app.context);\n      }\n\n      yield this.loadLayout(layout);\n      this.error(error);\n      this.$nuxt.$emit(\'routeChanged\', to, from, error);\n      next();\n    }\n  });\n  return _render.apply(this, arguments);\n}\n\nfunction normalizeComponents(to, ___) {\n  Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* flatMapComponents */ "c"])(to, (Component, _, match, key) => {\n    if (typeof Component === \'object\' && !Component.options) {\n      // Updated via vue-router resolveAsyncComponents()\n      Component = vue__WEBPACK_IMPORTED_MODULE_3___default.a.extend(Component);\n      Component._Ctor = Component;\n      match.components[key] = Component;\n    }\n\n    return Component;\n  });\n}\n\nfunction showNextPage(to) {\n  // Hide error component if no error\n  if (this._hadError && this._dateLastError === this.$options.nuxt.dateErr) {\n    this.error();\n  } // Set layout\n\n\n  let layout = this.$options.nuxt.err ? _index_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].layout : to.matched[0].components.default.options.layout;\n\n  if (typeof layout === \'function\') {\n    layout = layout(app.context);\n  }\n\n  this.setLayout(layout);\n} // When navigating on a different route but the same component is used, Vue.js\n// Will not update the instance data, so we have to update $data ourselves\n\n\nfunction fixPrepatch(to, ___) {\n  if (this._pathChanged === false && this._queryChanged === false) return;\n  const matches = [];\n  const instances = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* getMatchedComponentsInstances */ "f"])(to, matches);\n  const Components = Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* getMatchedComponents */ "e"])(to, matches);\n  vue__WEBPACK_IMPORTED_MODULE_3___default.a.nextTick(() => {\n    instances.forEach((instance, i) => {\n      if (!instance || instance._isDestroyed) return; // if (\n      //   !this._queryChanged &&\n      //   to.matched[matches[i]].path.indexOf(\':\') === -1 &&\n      //   to.matched[matches[i]].path.indexOf(\'*\') === -1\n      // ) return // If not a dynamic route, skip\n\n      if (instance.constructor._dataRefresh && Components[i] === instance.constructor && instance.$vnode.data.keepAlive !== true && typeof instance.constructor.options.data === \'function\') {\n        const newData = instance.constructor.options.data.call(instance);\n\n        for (const key in newData) {\n          vue__WEBPACK_IMPORTED_MODULE_3___default.a.set(instance.$data, key, newData[key]);\n        } // Ensure to trigger scroll event after calling scrollBehavior\n\n\n        window.$nuxt.$nextTick(() => {\n          window.$nuxt.$emit(\'triggerScroll\');\n        });\n      }\n    });\n    showNextPage.call(this, to);\n  });\n}\n\nfunction nuxtReady(_app) {\n  window.onNuxtReadyCbs.forEach(cb => {\n    if (typeof cb === \'function\') {\n      cb(_app);\n    }\n  }); // Special JSDOM\n\n  if (typeof window._onNuxtLoaded === \'function\') {\n    window._onNuxtLoaded(_app);\n  } // Add router hooks\n\n\n  router.afterEach((to, from) => {\n    // Wait for fixPrepatch + $data updates\n    vue__WEBPACK_IMPORTED_MODULE_3___default.a.nextTick(() => _app.$nuxt.$emit(\'routeChanged\', to, from));\n  });\n}\n\nfunction mountApp(_x12) {\n  return _mountApp.apply(this, arguments);\n}\n\nfunction _mountApp() {\n  _mountApp = Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])(function* (__app) {\n    // Set global variables\n    app = __app.app;\n    router = __app.router; // Resolve route components\n\n    const Components = yield Promise.all(resolveComponents(router)); // Create Vue instance\n\n    const _app = new vue__WEBPACK_IMPORTED_MODULE_3___default.a(app); // Load layout\n\n\n    const layout = NUXT.layout || \'default\';\n    yield _app.loadLayout(layout);\n\n    _app.setLayout(layout); // Mounts Vue app to DOM element\n\n\n    const mount = () => {\n      _app.$mount(\'#__nuxt\'); // Add afterEach router hooks\n\n\n      router.afterEach(normalizeComponents);\n      router.afterEach(fixPrepatch.bind(_app)); // Listen for first Vue update\n\n      vue__WEBPACK_IMPORTED_MODULE_3___default.a.nextTick(() => {\n        // Call window.{{globals.readyCallback}} callbacks\n        nuxtReady(_app);\n      });\n    }; // Enable transitions\n\n\n    _app.setTransitions = _app.$options.nuxt.setTransitions.bind(_app);\n\n    if (Components.length) {\n      _app.setTransitions(mapTransitions(Components, router.currentRoute));\n\n      _lastPaths = router.currentRoute.matched.map(route => Object(_utils_js__WEBPACK_IMPORTED_MODULE_6__[/* compile */ "b"])(route.path)(router.currentRoute.params));\n    } // Initialize error handler\n\n\n    _app.$loading = {}; // To avoid error while _app.$nuxt does not exist\n\n    if (NUXT.error) _app.error(NUXT.error); // Add beforeEach router hooks\n\n    router.beforeEach(loadAsyncComponents.bind(_app));\n    router.beforeEach(render.bind(_app)); // If page already is server rendered\n\n    if (NUXT.serverRendered) {\n      mount();\n      return;\n    } // First render on client-side\n\n\n    const clientFirstMount = () => {\n      normalizeComponents(router.currentRoute, router.currentRoute);\n      showNextPage.call(_app, router.currentRoute); // Don\'t call fixPrepatch.call(_app, router.currentRoute, router.currentRoute) since it\'s first render\n\n      mount();\n    };\n\n    render.call(_app, router.currentRoute, router.currentRoute, path => {\n      // If not redirected\n      if (!path) {\n        clientFirstMount();\n        return;\n      } // Add a one-time afterEach hook to\n      // mount the app wait for redirect and route gets resolved\n\n\n      const unregisterHook = router.afterEach((to, from) => {\n        unregisterHook();\n        clientFirstMount();\n      }); // Push the path and let route to be resolved\n\n      router.push(path, undefined, err => {\n        if (err) errorHandler(err);\n      });\n    });\n  });\n  return _mountApp.apply(this, arguments);\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(25)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///136\n')},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval("// extracted by extract-css-chunks-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2J1aWxkLnNjc3M/NDliNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgZXh0cmFjdC1jc3MtY2h1bmtzLXdlYnBhY2stcGx1Z2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///164\n")},function(module,exports,__webpack_require__){eval("// extracted by extract-css-chunks-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2Fzc2V0cy9jc3MvZG9jcy5taW4uY3NzPzI1MzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTY1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IGV4dHJhY3QtY3NzLWNodW5rcy13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///165\n")},function(module,exports,__webpack_require__){eval("// extracted by extract-css-chunks-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2Fzc2V0cy9zY3NzL3N0eWxlcy5zY3NzP2ExNzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IGV4dHJhY3QtY3NzLWNodW5rcy13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///166\n")},,,,,,,,,,,,,,,,,function(module,exports,__webpack_require__){eval('var map = {\n\t"./alert/package.json": 184,\n\t"./badge/package.json": 185,\n\t"./breadcrumb/package.json": 186,\n\t"./button-group/package.json": 187,\n\t"./button-toolbar/package.json": 188,\n\t"./button/package.json": 189,\n\t"./card/package.json": 190,\n\t"./carousel/package.json": 191,\n\t"./collapse/package.json": 192,\n\t"./dropdown/package.json": 193,\n\t"./embed/package.json": 194,\n\t"./form-checkbox/package.json": 195,\n\t"./form-file/package.json": 196,\n\t"./form-group/package.json": 197,\n\t"./form-input/package.json": 198,\n\t"./form-radio/package.json": 199,\n\t"./form-select/package.json": 200,\n\t"./form-textarea/package.json": 201,\n\t"./form/package.json": 202,\n\t"./image/package.json": 203,\n\t"./input-group/package.json": 204,\n\t"./jumbotron/package.json": 205,\n\t"./layout/package.json": 206,\n\t"./link/package.json": 207,\n\t"./list-group/package.json": 208,\n\t"./media/package.json": 209,\n\t"./modal/package.json": 210,\n\t"./nav/package.json": 211,\n\t"./navbar/package.json": 212,\n\t"./pagination-nav/package.json": 213,\n\t"./pagination/package.json": 214,\n\t"./popover/package.json": 215,\n\t"./progress/package.json": 216,\n\t"./spinner/package.json": 217,\n\t"./table/package.json": 218,\n\t"./tabs/package.json": 219,\n\t"./toast/package.json": 220,\n\t"./tooltip/package.json": 221\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 183;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cyBzeW5jIHBhY2thZ2UuanNvbj8xZWEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTgzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2FsZXJ0L3BhY2thZ2UuanNvblwiOiAxODQsXG5cdFwiLi9iYWRnZS9wYWNrYWdlLmpzb25cIjogMTg1LFxuXHRcIi4vYnJlYWRjcnVtYi9wYWNrYWdlLmpzb25cIjogMTg2LFxuXHRcIi4vYnV0dG9uLWdyb3VwL3BhY2thZ2UuanNvblwiOiAxODcsXG5cdFwiLi9idXR0b24tdG9vbGJhci9wYWNrYWdlLmpzb25cIjogMTg4LFxuXHRcIi4vYnV0dG9uL3BhY2thZ2UuanNvblwiOiAxODksXG5cdFwiLi9jYXJkL3BhY2thZ2UuanNvblwiOiAxOTAsXG5cdFwiLi9jYXJvdXNlbC9wYWNrYWdlLmpzb25cIjogMTkxLFxuXHRcIi4vY29sbGFwc2UvcGFja2FnZS5qc29uXCI6IDE5Mixcblx0XCIuL2Ryb3Bkb3duL3BhY2thZ2UuanNvblwiOiAxOTMsXG5cdFwiLi9lbWJlZC9wYWNrYWdlLmpzb25cIjogMTk0LFxuXHRcIi4vZm9ybS1jaGVja2JveC9wYWNrYWdlLmpzb25cIjogMTk1LFxuXHRcIi4vZm9ybS1maWxlL3BhY2thZ2UuanNvblwiOiAxOTYsXG5cdFwiLi9mb3JtLWdyb3VwL3BhY2thZ2UuanNvblwiOiAxOTcsXG5cdFwiLi9mb3JtLWlucHV0L3BhY2thZ2UuanNvblwiOiAxOTgsXG5cdFwiLi9mb3JtLXJhZGlvL3BhY2thZ2UuanNvblwiOiAxOTksXG5cdFwiLi9mb3JtLXNlbGVjdC9wYWNrYWdlLmpzb25cIjogMjAwLFxuXHRcIi4vZm9ybS10ZXh0YXJlYS9wYWNrYWdlLmpzb25cIjogMjAxLFxuXHRcIi4vZm9ybS9wYWNrYWdlLmpzb25cIjogMjAyLFxuXHRcIi4vaW1hZ2UvcGFja2FnZS5qc29uXCI6IDIwMyxcblx0XCIuL2lucHV0LWdyb3VwL3BhY2thZ2UuanNvblwiOiAyMDQsXG5cdFwiLi9qdW1ib3Ryb24vcGFja2FnZS5qc29uXCI6IDIwNSxcblx0XCIuL2xheW91dC9wYWNrYWdlLmpzb25cIjogMjA2LFxuXHRcIi4vbGluay9wYWNrYWdlLmpzb25cIjogMjA3LFxuXHRcIi4vbGlzdC1ncm91cC9wYWNrYWdlLmpzb25cIjogMjA4LFxuXHRcIi4vbWVkaWEvcGFja2FnZS5qc29uXCI6IDIwOSxcblx0XCIuL21vZGFsL3BhY2thZ2UuanNvblwiOiAyMTAsXG5cdFwiLi9uYXYvcGFja2FnZS5qc29uXCI6IDIxMSxcblx0XCIuL25hdmJhci9wYWNrYWdlLmpzb25cIjogMjEyLFxuXHRcIi4vcGFnaW5hdGlvbi1uYXYvcGFja2FnZS5qc29uXCI6IDIxMyxcblx0XCIuL3BhZ2luYXRpb24vcGFja2FnZS5qc29uXCI6IDIxNCxcblx0XCIuL3BvcG92ZXIvcGFja2FnZS5qc29uXCI6IDIxNSxcblx0XCIuL3Byb2dyZXNzL3BhY2thZ2UuanNvblwiOiAyMTYsXG5cdFwiLi9zcGlubmVyL3BhY2thZ2UuanNvblwiOiAyMTcsXG5cdFwiLi90YWJsZS9wYWNrYWdlLmpzb25cIjogMjE4LFxuXHRcIi4vdGFicy9wYWNrYWdlLmpzb25cIjogMjE5LFxuXHRcIi4vdG9hc3QvcGFja2FnZS5qc29uXCI6IDIyMCxcblx0XCIuL3Rvb2x0aXAvcGFja2FnZS5qc29uXCI6IDIyMVxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE4MzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///183\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/alert","version":"1.0.0","meta":{"title":"Alert","description":"Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.","components":[{"component":"BAlert","events":[{"event":"dismissed","description":"Alert dismissed either via the dismiss close button or when the dismiss countdown has expired"},{"event":"dismiss-count-down","description":"When prop show is a number, this event emits every second on countdown.","args":[{"arg":"dismissCountDown","description":"Time remaining to dismissed"}]}],"slots":[{"name":"dismiss","description":"Content for the dismiss button."}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxODQuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///184\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/badge","version":"1.0.0","meta":{"title":"Badge","description":"Small and adaptive tag for adding context to just about any content.","components":["BBadge"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxODUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///185\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/breadcrumb","version":"1.0.0","meta":{"title":"Breadcrumb","description":"Indicate the current page\'s location within a navigational hierarchy. Separators are automatically added in CSS through ::before and content.","components":["BBreadcrumb",{"component":"BBreadcrumbItem","events":[{"event":"click","description":"Emitted when clicked","args":[{"name":"event","description":"Native click event object"}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxODYuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///186\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/button-group","version":"1.0.0","meta":{"title":"Button Group","description":"Group a series of buttons together on a single line with <b-button-group>.","components":[{"component":"BButtonGroup","aliases":["BBtnGroup"]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxODcuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///187\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/button-toolbar","version":"1.0.0","meta":{"title":"Button Toolbar","description":"Group a series of <b-button-group> and/or <b-input-group> together on a single line, with optional keyboard navigation.","components":[{"component":"BButtonToolbar","aliases":["BBtnToolbar"]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxODguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///188\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/button","version":"1.0.0","meta":{"title":"Button","description":"Use BootstrapVue\'s <b-button> component for actions in forms, dialogs, and more. Includes support for a handful of contextual variations, sizes, states, and more.","components":[{"component":"BButton","aliases":["BBtn"],"events":[{"event":"click","description":"Emitted when non-disabled button clicked","args":[{"name":"event","description":"Native click event object"}]}]},{"component":"BButtonClose","aliases":["BBtnClose"],"events":[{"event":"click","description":"Emitted when non-disabled button clicked","args":[{"name":"event","description":"Native click event object"}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxODkuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///189\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/card","version":"1.0.0","meta":{"title":"Card","description":"A card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options.","components":[{"component":"BCard","slots":[{"name":"header","description":"For custom rendering of header content"},{"name":"footer","description":"For custom rendering of footer content"}]},"BCardHeader","BCardFooter","BCardBody","BCardTitle","BCardSubTitle","BCardImg","BCardImgLazy","BCardText","BCardGroup"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///190\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/carousel","version":"1.0.0","meta":{"title":"Carousel","description":"The <b-carousel> component is a slideshow for cycling through a series of content, built with CSS 3D transforms. It works with a series of images, text, or custom markup.","components":[{"component":"BCarousel","events":[{"event":"sliding-start","description":"Emitted when transitioning to a new slide has started.","args":[{"arg":"slide","description":"Slide number that is being slid to."}]},{"event":"sliding-end","description":"Emitted when transitioning to a new slide has ended.","args":[{"arg":"slide","description":"Slide number that was slid to."}]}]},{"component":"BCarouselSlide","slots":[{"name":"img","description":"Slot for img element or image component"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTEuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///191\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/collapse","version":"1.0.0","meta":{"title":"Collapse","description":"Easily toggle content visibility on your pages. Includes support for making accordions.","directives":["VBToggle"],"components":[{"component":"BCollapse","events":[{"event":"show","description":"Emitted when collapse has started to open"},{"event":"shown","description":"Emitted when collapse has finished opening"},{"event":"hide","description":"Emitted when collapse has started to close"},{"event":"hidden","description":"Emitted when collapse has finished closing"},{"event":"bv::collapse::state","description":"Emitted on $root when collapse has changed its state","args":[{"arg":"id","description":"changed state collapse id"},{"arg":"state","description":"true/false, i.e. opened/closed"}]}],"rootEventListeners":[{"event":"bv::toggle::collapse","description":"Toggles visible state of collapse with specified id when this event is emitted on $root","args":[{"arg":"id","description":"collapse id to toggle"}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTIuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///192\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/dropdown","version":"1.0.0","meta":{"title":"Dropdown","description":"Dropdowns are toggleable, contextual overlays for displaying lists of links and actions in a dropdown menu format.","components":[{"component":"BDropdown","aliases":["BDd"],"events":[{"event":"show","description":"Emitted just before dropdown is shown. Cancelable.","args":[{"arg":"bvEvt","description":"BvEvent object. Call bvEvt.preventDefault() to cancel show."}]},{"event":"shown","description":"Emitted when dropdown is shown."},{"event":"hide","description":"Emitted just before dropdown is hidden. Cancelable.","args":[{"arg":"bvEvt","description":"BvEvent object. Call bvEvt.preventDefault() to cancel hide."}]},{"event":"hidden","description":"Emitted when dropdown is hidden."},{"event":"toggle","description":"Emitted when toggle button is clicked."},{"event":"click","description":"Emitted when split button is clicked in split mode."}],"slots":[{"name":"button-content","description":"Can be used to implement custom text with icons and more styling."},{"name":"text","description":"Deprecated. please use \'button-content\' slot instead."}]},{"component":"BDropdownItem","aliases":["BDdItem"],"events":[{"event":"click","description":"Emitted when item is clicked.","args":[{"name":"event","description":"Native click event object"}]}]},{"component":"BDropdownItemButton","aliases":["BDropdownItemBtn","BDdItemButton","BDdItemBtn"],"events":[{"event":"click","description":"Emitted when button item is clicked.","args":[{"name":"event","description":"Native click event object"}]}]},{"component":"BDropdownDivider","aliases":["BDdDivider"]},{"component":"BDropdownForm","aliases":["BDdForm"]},{"component":"BDropdownText","aliases":["BDdText"]},{"component":"BDropdownGroup","aliases":["BDdGroup"],"slots":[{"name":"header","description":"Optional header content for the dropdown group."}]},{"component":"BDropdownHeader","aliases":["BDdHeader"]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///193\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/embed","version":"1.0.0","meta":{"title":"Embed","description":"Create responsive video or slideshow embeds based on the width of the parent by creating an intrinsic ratio that scales on any device.","components":["BEmbed"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTQuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///194\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form-checkbox","version":"1.0.0","meta":{"title":"Form Checkbox","description":"Custom checkbox input and checkbox group to replace the browser default checkbox input, built on top of semantic and accessible markup. Optionally supports switch styling.","components":[{"component":"BFormCheckboxGroup","aliases":["BCheckboxGroup","BCheckGroup"],"slots":[{"name":"first","description":"Slot to place b-form-checks so that they appear before checks generated from options prop"}],"events":[{"event":"input","description":"Emitted when the checked value is changed","args":[{"arg":"checked","description":"Value of checkboxes. Value will be an array."}]},{"event":"change","description":"Emitted when selected value(s) is changed due to user interaction","args":[{"arg":"checked","description":"Value of checkboxes. Value will be an array."}]}]},{"component":"BFormCheckbox","aliases":["BCheckbox","BCheck"],"events":[{"event":"input","description":"Emitted when the selected value(s) is changed","args":[{"arg":"checked","description":"Value of checkbox(es). When bound to multiple checkboxes, value will be an array."}]},{"event":"change","description":"Emitted when selected value(s) is changed due to user interaction","args":[{"arg":"checked","description":"Value of checkbox(es). When bound to multiple checkboxes, value will be an array."}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///195\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form-file","version":"1.0.0","meta":{"title":"Form File","description":"Customized, cross-browser consistent, file input control that supports single file, multiple files, and directory upload.","components":[{"component":"BFormFile","aliases":["BFile"],"slots":[{"name":"file-name","description":"Scoped slot for formatting the file names. Scoped props: files - array of File objects, names: array of file names"}],"events":[{"event":"change","description":"original native change event on input","args":[{"arg":"event"}]},{"event":"input","description":"[see above docs]"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTYuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///196\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form-group","version":"1.0.0","meta":{"title":"Form Group","description":"Easily add some structure to forms. Its purpose is to pair form controls with a legend or label, and to provide help text and invalid/valid feedback text, as well as visual (color) contextual state feedback.","components":[{"component":"BFormGroup","alias":["BFormFieldset"],"slots":[{"name":"label","description":"Content to place inside the <label> element."},{"name":"description","description":"Content to place in the description area."},{"name":"invalid-feedback","description":"Content to place in the invalid feedback area"},{"name":"valid-feedback","description":"Content to place in the valid feedback area"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTcuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///197\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form-input","version":"1.1.0","meta":{"title":"Form Input","description":"Create various type inputs such as: text, password, number, url, email, search, range, date and more.","components":[{"component":"BFormInput","aliases":["BInput"],"events":[{"event":"input","description":"Input event triggered by user interaction. Emitted after any formatting and after the v-model is updated","args":[{"arg":"value","description":"Current value of input"}]},{"event":"change","description":"Change event triggered by user interaction. Emitted after any formatting and after the v-model is updated.","args":[{"arg":"value","description":"Current value of input"}]},{"event":"update","description":"Emitted to update the v-model","args":[{"arg":"value","description":"Value of input, after any formatting. Not emitted if the value does not change"}]},{"event":"blur","description":"Emitted after the input looses focus","args":[{"arg":"event","description":"Native blur event (before any formatting)"}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///198\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form-radio","version":"1.0.0","meta":{"title":"Form Radio","description":"Cross browser consistent radio inputs and radio groups, using Bootstrap\'s custom radio input to replace the browser default radio input.","components":[{"component":"BFormRadioGroup","aliases":["BRadioGroup"],"slots":[{"name":"first","description":"Slot to place b-form-radio\'s so that they appear before radios generated from options prop"}],"events":[{"event":"input","description":"Emitted when the selected value is changed","args":[{"arg":"checked","description":"current selected Value of radio group."}]},{"event":"change","description":"Emitted when selected value is changed due to user interaction","args":[{"arg":"checked","description":"current selected Value of radio group."}]}]},{"component":"BFormRadio","aliases":["BRadio"],"events":[{"event":"input","description":"Emitted when the selected value is changed","args":[{"arg":"checked","description":"current selected Value of radio group."}]},{"event":"change","description":"Emitted when selected value is changed due to user interaction","args":[{"arg":"checked","description":"current selected Value of radio group."}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOTkuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///199\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form-select","version":"1.0.0","meta":{"title":"Form Select","description":"Custom <select> component using cross-browser custom styles. Optionally generate <option> entries based on an array, array of objects.","components":[{"component":"BFormSelect","aliases":["BSelect"],"slots":[{"name":"first","description":"Slot to place option tags above options provided via options prop"}],"events":[{"event":"input","description":"Emitted with the select value changes","args":[{"arg":"value","description":"current selected value of the select."}]},{"event":"change","description":"Emitted with the select value changes via user interaction","args":[{"arg":"value","description":"current selected value of the select."}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///200\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form-textarea","version":"1.0.0","meta":{"title":"Form Textarea","description":"Create multi-line text inputs with support for auto height sizing, minimum and maximum number of rows, and contextual validation states.","components":[{"component":"BFormTextarea","aliases":["BTextarea"],"events":[{"event":"input","description":"Input event triggered by user interaction. Emitted after any formatting and after the v-model is updated","args":[{"arg":"value","description":"Current value of textarea"}]},{"event":"change","description":"Change event triggered by user interaction. Emitted after any formatting and after the v-model is updated.","args":[{"arg":"value","description":"Current value of the textarea"}]},{"event":"update","description":"Emitted to update the v-model","args":[{"arg":"value","description":"Value of textarea, after any formatting. Not emitted if the value does nto change"}]},{"event":"blur","description":"Emitted after the textarea looses focus","args":[{"arg":"event","description":"Native blur event (before any formatting)"}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDEuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///201\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/form","version":"1.0.0","meta":{"title":"Form","description":"Form component and form helper components that optionally supports inline form styles and validation states","slug":"form","components":[{"component":"BForm","events":[{"event":"submit","description":"Emitted when the form is being submitted","args":[{"arg":"event","description":"Native submit event."}]}]},"BFormText","BFormInvalidFeedback","BFormValidFeedback",{"component":"BFormDatalist","aliases":["BDatalist"]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDIuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///202\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/image","version":"1.0.0","meta":{"title":"Image","description":"Create responsive images, optionally adding lightweight styles to them — all via props. Support for rounded images, thumbnail styling, alignment, and even the ability to create blank images with an optional solid background color, and lazy loaded images.","components":["BImg","BImgLazy"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///203\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/input-group","version":"1.0.0","meta":{"title":"Input Group","description":"Easily extend form controls by adding text, buttons, or button groups on either side of textual inputs.","components":[{"component":"BInputGroup","slots":[{"name":"prepend","description":"Prepend attachment"},{"name":"append","description":"Append attachment"}]},"BInputGroupPrepend","BInputGroupAppend","BInputGroupText","BInputGroupAddon"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDQuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///204\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/jumbotron","version":"1.0.0","meta":{"title":"Jumbotron","description":"A lightweight, flexible component that can optionally extend the entire viewport to showcase key marketing messages on your site.","components":[{"component":"BJumbotron","slots":[{"name":"header","description":"Slot for custom header content. Placed inside \'header-tag\'"},{"name":"lead","description":"For custom rendering of lead text content. Placed inside \'lead-tag\'"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///205\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/layout","version":"1.0.0","meta":{"title":"Layout and Grid System","description":"Use the powerful mobile-first flexbox grid (via the <b-container>, <b-row>, <b-form-row> and <b-col> components) to build layouts of all shapes and sizes thanks to a twelve column system, five default responsive tiers, CSS Sass variables and mixins, and dozens of predefined classes.","slug":"layout","components":["BContainer","BRow","BCol","BFormRow"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDYuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///206\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/link","version":"1.0.0","meta":{"title":"Link","desscription":"Use BootstrapVue\'s custom <b-link> component for generating a standard <a> link or <router-link>. <b-link> supports the disabled state and click event propagation.","components":[{"component":"BLink","events":[{"event":"click","description":"when link clicked"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDcuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///207\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/list-group","version":"1.0.0","meta":{"title":"List group","description":"List groups are a flexible and powerful component for displaying a series of content. List group items can be modified to support just about any content within. They can also be used as navigation via various props.","components":["BListGroup","BListGroupItem"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///208\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/media","version":"1.0.0","meta":{"title":"Media","description":"The media object helps build complex and repetitive components where some media is positioned alongside content that doesn\'t wrap around said media.","components":[{"component":"BMedia","slots":[{"name":"aside","description":"Media Aside"}]},"BMediaAside","BMediaBody"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMDkuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///209\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/modal","version":"1.0.0","meta":{"title":"Modal","enhanced":true,"description":"Modals are streamlined, but flexible dialog prompts powered by JavaScript and CSS. They support a number of use cases from user notification to completely custom content and feature a handful of helpful sub-components, sizes, variants, accessibility, and more.","directives":["VBModal"],"components":[{"component":"BModal","events":[{"event":"change","description":"New modal visibility state. Used to update the v-model","args":[{"arg":"isVisible","description":"true if modal is visible, false otherwise"}]},{"event":"show","description":"Always emits just before modal is shown. Cancelable","args":[{"arg":"bvModalEvt","description":"BvModalEvent object. Call bvModalEvt.preventDefault() to cancel show"}]},{"event":"shown","description":"Always emits when modal is shown","args":[{"arg":"bvModalEvt","description":"BvModalEvent object"}]},{"event":"hide","description":"Always emits just before modal has hidden. Cancelable (as long as modal wasn\'t forcibly hidden)","args":[{"arg":"bvModalEvt","description":"BvModalEvent object. Call bvModalEvt.preventDefault() to cancel hide"}]},{"event":"hidden","description":"Always emits after modal is hidden","args":[{"arg":"bvModalEvt","description":"BvModalEvent object"}]},{"event":"ok","description":"When default OK button pressed, just before modal has hidden. Cancelable","args":[{"arg":"bvModalEvt","description":"BvModalEvent object. Call bvModalEvt.preventDefault() to cancel hide"}]},{"event":"cancel","description":"When default CANCEL button pressed, just before modal has hidden. Cancelable","args":[{"arg":"bvModalEvt","description":"BvModalEvent object. Call bvModalEvt.preventDefault() to cancel hide"}]},{"event":"close","description":"When default header close button pressed, just before modal has hidden. Cancelable","args":[{"arg":"bvModalEvt","description":"BvModalEvent object. Call bvModalEvt.preventDefault() to cancel hide"}]},{"event":"bv::modal::show","description":"Emitted on $root when modal is about to be shown. Cancelable","args":[{"arg":"bvModalEvt","description":"BvModalEvent object. Call bvEvt.preventDefault() to cancel show"},{"arg":"modalId","description":"modal ID"}]},{"event":"bv::modal::shown","description":"Emitted on $root when modal is shown","args":[{"arg":"bvModalEvt","description":"BvModalEvent object"},{"arg":"modalId","description":"modal ID"}]},{"event":"bv::modal::hide","description":"Emitted on $root when modal is about to be hidden. Cancelable (as long as modal wasn\'t forcibly hidden)","args":[{"arg":"bvModalEvt","description":"BvModalEvent object. Call bvEvt.preventDefault() to cancel hide"},{"arg":"modalId","description":"modal ID"}]},{"event":"bv::modal::hidden","description":"Emitted on $root when modal is hidden","args":[{"arg":"bvModalEvt","description":"BvModalEvent object"},{"arg":"modalId","description":"modal ID"}]}],"rootEventListeners":[{"event":"bv::show::modal","description":"Show modal with specified ID when this event is emitted on $root","args":[{"arg":"modalId","description":"modal ID to show"},{"arg":"elIDtoFocusOnClose","description":"(optional), specify the element reference, or CSS selector, to return focus to once the modal is closed"}]},{"event":"bv::hide::modal","description":"Hide modal with specified ID when this event is emitted on $root","args":[{"arg":"modalId","description":"ID of modal to hide"}]},{"event":"bv::toggle::modal","description":"Toggle a modal\'s visibility given it\'s ID","args":[{"arg":"modalId","description":"ID of modal to toggle visibility"},{"arg":"elIDtoFocusOnClose","description":"(optional), specify the element reference, or CSS selector, to return focus to once the modal is closed"}]}],"slots":[{"name":"modal-header","description":"Entire modal header container contents. Also removes the top right X close button. Optionally scoped."},{"name":"modal-title","description":"Modal title. If modal-header slot is used, this slot will not be shown. Optionally scoped."},{"name":"modal-footer","description":"Modal footer content. Also removes default OK and CANCEL buttons. Optionally scoped."},{"name":"modal-header-close","description":"Content of Modal header close button. If modal-header slot is used, this slot will not be shown."},{"name":"modal-ok","description":"Modal OK button content."},{"name":"modal-cancel","description":"Modal CANCEL button content."},{"name":"modal-backdrop","description":"Modal Backdrop content."},{"name":"default","description":"Content of modal body. Optionally scoped."}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///210\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/nav","version":"1.0.0","meta":{"title":"Nav","enhanced":true,"description":"Navigation components that share general markup and styles, from the base <b-nav> class to the active and disabled states. Swap modifier props to switch between each style.","plugins":["DropdownPlugin"],"components":["BNav","BNavItem","BNavText","BNavForm",{"component":"BNavItemDropdown","aliases":["BNavItemDd","BNavDropdown","BNavDd"],"slots":[{"name":"button-content","description":"Can be used to implement custom text with icons and more styling."}],"events":[{"event":"show","description":"Emitted just before dropdown is shown. Cancelable.","args":[{"arg":"bvEvt","description":"BvEvent object. Call bvEvt.preventDefault() to cancel show."}]},{"event":"shown","description":"Emitted when dropdown is shown."},{"event":"hide","description":"Emitted just before dropdown is hidden. Cancelable.","args":[{"arg":"bvEvt","description":"BvEvent object. Call bvEvt.preventDefault() to cancel hide."}]},{"event":"hidden","description":"Emitted when dropdown is hidden."},{"event":"toggle","description":"Emitted when toggle button is clicked."}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTEuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///211\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/navbar","version":"1.0.0","meta":{"title":"Navbar","description":"The component <b-navbar> is a responsive wrapper that positions branding, navigation, and other elements into a concise header. It\'s easily extensible and thanks to the <b-collapse> component.","plugins":["NavPlugin","DropdownPlugin","CollapsePlugin"],"components":["BNavbar","BNavbarNav","BNavbarBrand",{"component":"BNavbarToggle","aliases":["BNavToggle"],"events":[{"event":"click","description":"Emitted when the toggle is clicked.","args":[{"name":"event","description":"Native click event object"}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTIuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///212\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/pagination-nav","version":"1.0.0","meta":{"title":"Pagination Nav","description":"Quick first, previous, next, last, and page buttons for navigation based pagination, supporting regular links or router links.","components":[{"component":"BPaginationNav","events":[{"event":"input","description":"when page changes via user interaction or programmatically","args":[{"arg":"page","description":"Selected page number (starting with 1), or null if no page found"}]},{"event":"change","description":"when page changes via user interaction","args":[{"arg":"page","description":"Selected page number (starting with 1)"}]}],"slots":[{"name":"first-text","description":"The \\"go to first page\\" button text. Optionally scoped"},{"name":"prev-text","description":"The \\"go to previous page\\" button text. Optionally scoped"},{"name":"next-text","description":"The \\"go to next page\\" button text. Optionally scoped"},{"name":"last-text","description":"The \\"go to last page\\" button text. Optionally scoped"},{"name":"ellipsis-text","description":"The \'...\' indicator text. Not scoped"},{"name":"page","description":"The page number button button content. Always scoped"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///213\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/pagination","version":"1.0.0","meta":{"title":"Pagination","components":[{"component":"BPagination","description":"Quick first, previous, next, last, and page buttons for pagination control of another component (such as <b-table> or lists).","events":[{"event":"input","description":"when page changes via user interaction or programmatically","args":[{"arg":"page","description":"Selected page number (starting with 1)"}]},{"event":"change","description":"when page changes via user interaction","args":[{"arg":"page","description":"Selected page number (starting with 1)"}]}],"slots":[{"name":"first-text","description":"The \\"go to first page\\" button content. Optionally scoped"},{"name":"prev-text","description":"The \\"go to previous page\\" button content. Optionally scoped"},{"name":"next-text","description":"The \\"go to next page\\" button content. Optionally scoped"},{"name":"last-text","description":"The \\"go to last page\\" button content. Optionally scoped"},{"name":"ellipsis-text","description":"The \'...\' indicator content. Not scoped"},{"name":"page","description":"Page number button content. Always scoped"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTQuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///214\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/popover","version":"1.0.0","meta":{"title":"Popover","description":"The Popover feature provides a tooltip-like behavior, can be easily applied to any interactive element via the <b-popover> component or v-b-popover directive","directives":["VBPopover"],"components":[{"component":"BPopover","events":[{"event":"show","description":"Emitted when popover is about to be shown. Cancelable. Call bvEvent.preventDefault() to cancel show.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"shown","description":"Emitted when popover is shown","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"hide","description":"Emitted when popover is about to be hidden. Cancelable. Call bvEvent.preventDefault() to cancel hide.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"hidden","description":"Emitted when popover is hidden","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"enabled","description":"Emitted when popover becomes enabled"},{"event":"disabled","description":"Emitted when popover becomes disabled"},{"event":"bv::popover::show","description":"Emitted on $root when popover is about to be shown. Cancelable. Call bvEvent.preventDefault() to cancel show.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"bv::popover::shown","description":"Emitted on $root when popover is shown","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"bv::popover::hide","description":"Emitted on $root when popover is about to be hidden. Cancelable. Call bvEvent.preventDefault() to cancel hide.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"bv::popover::hidden","description":"Emitted on $root when popover is hidden","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"bv::popover::enabled","description":"Emitted on $root when popover becomes enabled","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"bv::popover::disabled","description":"Emitted on $root when popover becomes disabled","args":[{"arg":"bvEvent","description":"bvEvent object."}]}],"rootEventListeners":[{"event":"bv::hide::popover","description":"Close (hide) all or a specific open popover when this event is emitted on $root","args":[{"arg":"id","description":"(optional), popover id to hide"}]},{"event":"bv::show::popover","description":"Open (show) all or a specific popover when this event is emitted on $root","args":[{"arg":"id","description":"(optional), popover id to show"}]},{"event":"bv::disable::popover","description":"Disable all or a specific popover when this event is emitted on $root","args":[{"arg":"id","description":"(optional), popover id to disable"}]},{"event":"bv::enable::popover","description":"Enable all or a specific popover when this event is emitted on $root","args":[{"arg":"id","description":"(optional), popover id to enable"}]}],"slots":[{"name":"title","description":"Optional slot for title (html supported)"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///215\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/progress","version":"1.0.0","meta":{"title":"Progress","description":"A custom progress component for displaying simple or complex progress bars, featuring support for horizontally stacked bars, animated backgrounds, and text labels.","components":["BProgress","BProgressBar"]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTYuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///216\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/spinner","version":"1.0.0","meta":{"title":"Spinner","description":"The <b-spinner> component can be used to show the loading state in your projects. They\'re rendered only with basic HTML and CSS as a lightweight Vue functional component.","slug":"spinner","components":[{"component":"BSpinner","slots":[{"name":"label","description":"Content to place in the sr-only label"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTcuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///217\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/table","version":"1.0.0","meta":{"title":"Table","description":"For displaying tabular data. <b-table> supports pagination, filtering, sorting, custom rendering, events, and asynchronous data. For simple display of tabular data without all the fancy features, BootstrapVue provides a lightweight alternative component <b-table-lite>","components":[{"component":"BTable","events":[{"event":"row-clicked","description":"Emitted when a row is clicked.","args":[{"arg":"item","description":"Item data of the row being clicked."},{"arg":"index","description":"Index of the row being clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-dblclicked","description":"Emitted when a row is double clicked.","args":[{"arg":"item","description":"Item data of the row being double clicked."},{"arg":"index","description":"Index of the row being double clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-middle-clicked","description":"Emitted when a row is middle clicked.","args":[{"arg":"item","description":"Item data of the row being middle clicked."},{"arg":"index","description":"Index of the row being middle clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-contextmenu","description":"Emitted when a row is right clicked.","args":[{"arg":"item","description":"Item data of the row being right clicked."},{"arg":"index","description":"Index of the row being right clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-hovered","description":"Emitted when a row is hovered.","args":[{"arg":"item","description":"Item data of the row being hovered."},{"arg":"index","description":"Index of the row being hovered."},{"arg":"event","description":"Native event object."}]},{"event":"row-unhovered","description":"Emitted when a row is unhovered.","args":[{"arg":"item","description":"Item data of the row being unhovered."},{"arg":"index","description":"Index of the row being unhovered."},{"arg":"event","description":"Native event object."}]},{"event":"row-selected","description":"Emitted when a row or rows have been selected.","args":[{"arg":"rows","description":"Array of the row items that are selected."}]},{"event":"head-clicked","description":"Emitted when a header or footer cell is clicked.","args":[{"arg":"key","description":"Column key clicked (field name)."},{"arg":"field","description":"Field definition object."},{"arg":"event","description":"Native event object."},{"arg":"isFooter","description":"\'True\' if this event originated from clicking on the footer cell"}]},{"event":"sort-changed","description":"Emitted when the sorting on the table has changed","args":[{"arg":"ctx","description":"Table state context object. See docs."}]},{"event":"context-changed","description":"Emitted whenever the table state context has changed","args":[{"arg":"ctx","description":"Table state context object. See docs."}]},{"event":"filtered","description":"Emitted when local filtering causes a change in the number of items.","args":[{"arg":"filteredItems","description":"Array of items after filtering (before local pagination occurs)."}]},{"event":"refreshed","description":"Emitted when the items provider function has returned data."}],"rootEventListeners":[{"event":"bv::refresh::table","description":"Refresh data of a specific table when this event is emitted on $root","args":[{"arg":"id","description":"table id to refresh data"}]}],"slots":[{"name":"table-caption","description":"Content to display in the table\'s caption element"},{"name":"table-colgroup","description":"Slot to place custom colgroup and col elements (optionally scoped: columns - number of columns, fields - array of field definition objects)"},{"name":"table-busy","description":"Optional slot to place loading message when table is in the busy state"},{"name":"[field]","description":"Scoped slot for custom data rendering of field data. See docs for scoped data"},{"name":"HEAD_[field]","description":"Scoped slot for custom rendering of field header. See docs for scoped header"},{"name":"FOOT_[field]","description":"Scoped slot for custom rendering of field footer. See docs for scoped footer"},{"name":"row-details","description":"Scoped slot for optional rendering additional record details. See docs for Row details support"},{"name":"empty","description":"Content to display when no items are present in the `items` array (optionally scoped: see docs for details)"},{"name":"emptyfiltered","description":"Content to display when no items are present in the filtered `items` array (optionally scoped: see docs for details)"},{"name":"thead-top","description":"Slot above the column headers in the `thead` element for user-supplied rows (optionally scoped: columns - number of TDs to provide, fields - array of field definition objects)"},{"name":"top-row","description":"Fixed top row slot for user supplied TD cells (Optionally scoped: columns - number of TDs to provide, fields - array of field definition objects)"},{"name":"bottom-row","description":"Fixed bottom row slot for user supplied TD cells (Optionally Scoped: columns - number of TDs to provide, fields - array of field definition objects)"}]},{"component":"BTableLite","events":[{"event":"row-clicked","description":"Emitted when a row is clicked.","args":[{"arg":"item","description":"Item data of the row being clicked."},{"arg":"index","description":"Index of the row being clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-dblclicked","description":"Emitted when a row is double clicked.","args":[{"arg":"item","description":"Item data of the row being double clicked."},{"arg":"index","description":"Index of the row being double clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-middle-clicked","description":"Emitted when a row is middle clicked.","args":[{"arg":"item","description":"Item data of the row being middle clicked."},{"arg":"index","description":"Index of the row being middle clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-contextmenu","description":"Emitted when a row is right clicked.","args":[{"arg":"item","description":"Item data of the row being right clicked."},{"arg":"index","description":"Index of the row being right clicked."},{"arg":"event","description":"Native event object."}]},{"event":"row-hovered","description":"Emitted when a row is hovered.","args":[{"arg":"item","description":"Item data of the row being hovered."},{"arg":"index","description":"Index of the row being hovered."},{"arg":"event","description":"Native event object."}]},{"event":"row-unhovered","description":"Emitted when a row is unhovered.","args":[{"arg":"item","description":"Item data of the row being unhovered."},{"arg":"index","description":"Index of the row being unhovered."},{"arg":"event","description":"Native event object."}]},{"event":"head-clicked","description":"Emitted when a header or footer cell is clicked.","args":[{"arg":"key","description":"Column key clicked (field name)."},{"arg":"field","description":"Field definition object."},{"arg":"event","description":"Native event object."},{"arg":"isFooter","description":"\'True\' if this event originated from clicking on the footer cell"}]}],"slots":[{"name":"table-caption","description":"Content to display in the table\'s caption element"},{"name":"table-colgroup","description":"Slot to place custom colgroup and col elements (optionally scoped: columns - number of columns, fields - array of field definition objects)"},{"name":"[field]","description":"Scoped slot for custom data rendering of field data. See docs for scoped data"},{"name":"HEAD_[field]","description":"Scoped slot for custom rendering of field header. See docs for scoped header"},{"name":"FOOT_[field]","description":"Scoped slot for custom rendering of field footer. See docs for scoped footer"},{"name":"row-details","description":"Scoped slot for optional rendering additional record details. See docs for Row details support"},{"name":"thead-top","description":"Slot above the column headers in the `thead` element for user-supplied rows (optionally scoped: columns - number of TDs to provide, fields - array of field definition objects)"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///218\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/tabs","version":"1.0.0","meta":{"title":"Tabs","enhanced":true,"description":"Create a widget of tabbable panes of local content. The tabs component is built upon navs and cards internally, and provides full keyboard navigation control of the tabs.","components":[{"component":"BTabs","events":[{"event":"input","description":"Emitted when a tab is shown. Used to update the v-model","args":[{"arg":"tabIndex","description":"Current selected tab index (0-based index)"}]},{"event":"changed","description":"Emitted when a tab is added, removed, or tabs are re-ordered","args":[{"arg":"currentTabs","description":"Array of the current b-tab instances, in document order."},{"arg":"previousTabs","description":"Array of the previous b-tab instances, in document order."}]}],"slots":[{"name":"tabs","description":"Additional tab buttons without tab content"},{"name":"empty","description":"Renders this slot if no tabs are present"}]},{"component":"BTab","events":[{"event":"click","description":"Emitted when a tab is clicked, or is activated by keyboard navigation","args":[{"arg":"evt","description":"Original event object"}]}],"slots":[{"name":"title","description":"Slot for custom tab title"}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMTkuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///219\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/toast","version":"1.0.0","meta":{"title":"Toasts","slug":"toast","beta":true,"new":true,"description":"Push notifications to your visitors with a toast, a lightweight and easily customizable alert message.","components":[{"component":"BToast","events":[{"event":"change","description":"Toast visibility state. Used to update the v-model.","args":[{"arg":"visible","description":"true if toast is visible, false otherwise."}]},{"event":"show","description":"always emits just before toast is shown.","args":[{"arg":"bvEvt","description":"BvEvent object."}]},{"event":"shown","description":"always emits when toast is shown.","args":[{"arg":"bvEvt","description":"BvEvent object."}]},{"event":"hide","description":"always emits just before toast has hidden.","args":[{"arg":"bvEvt","description":"BvEvent object."}]},{"event":"hidden","description":"always emits after toast is hidden","args":[{"arg":"bvEvt","description":"BvEvent object."}]}],"slots":[{"name":"toast-title","description":"Toast title. Optionally scoped."},{"name":"default","description":"Toast body content. Optionally scoped."}]},{"component":"BToaster"}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///220\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/tooltip","version":"1.0.0","meta":{"title":"Tooltip","description":"Easily add tooltips to elements or components via the <b-tooltip> component or v-b-tooltip directive.","directives":["VBTooltip"],"components":[{"component":"BTooltip","events":[{"event":"show","description":"Emitted when tooltip is about to be shown. Cancelable. Call bvEvent.preventDefault() to cancel show.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"shown","description":"Emitted when tooltip is shown","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"hide","description":"Emitted when tooltip is about to be hidden. Cancelable. Call bvEvent.preventDefault() to cancel hide.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"hidden","description":"Emitted when tooltip is hidden","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"enabled","description":"Emitted when tooltip becomes enabled"},{"event":"disabled","description":"Emitted when tooltip becomes disabled"},{"event":"bv::tooltip::show","description":"Emitted on $root when tooltip is about to be shown. Cancelable. Call bvEvent.preventDefault() to cancel show.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"bv::tooltip::shown","description":"Emitted on $root when tooltip is shown","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"bv::tooltip::hide","description":"Emitted on $root when tooltip is about to be hidden. Cancelable. Call bvEvent.preventDefault() to cancel hide.","args":[{"arg":"bvEvent","description":"bvEvent object"}]},{"event":"bv::tooltip::hidden","description":"Emitted on $root when tooltip is hidden","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"bv::tooltip::enabled","description":"Emitted on $root when tooltip becomes enabled","args":[{"arg":"bvEvent","description":"bvEvent object."}]},{"event":"bv::tooltip::disabled","description":"Emitted on $root when tooltip becomes disabled","args":[{"arg":"bvEvent","description":"bvEvent object."}]}],"rootEventListeners":[{"event":"bv::hide::tooltip","description":"Close (hide) all or a specific open tooltip when this event is emitted on $root","args":[{"arg":"id","description":"(optional), tooltip id to hide"}]},{"event":"bv::show::tooltip","description":"Open (show) all or a specific tooltip when this event is emitted on $root","args":[{"arg":"id","description":"(optional), tooltip id to show"}]},{"event":"bv::disable::tooltip","description":"Disable all or a specific tooltip when this event is emitted on $root","args":[{"arg":"id","description":"(optional), tooltip id to disable"}]},{"event":"bv::enable::tooltip","description":"Enable all or a specific tooltip when this event is emitted on $root","args":[{"arg":"id","description":"(optional), tooltip id to enable"}]}]}]}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjEuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///221\n')},function(module,exports,__webpack_require__){eval('var map = {\n\t"./popover/package.json": 223,\n\t"./scrollspy/package.json": 224,\n\t"./tooltip/package.json": 225\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 222;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlcyBzeW5jIHBhY2thZ2UuanNvbj85MmEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWFwID0ge1xuXHRcIi4vcG9wb3Zlci9wYWNrYWdlLmpzb25cIjogMjIzLFxuXHRcIi4vc2Nyb2xsc3B5L3BhY2thZ2UuanNvblwiOiAyMjQsXG5cdFwiLi90b29sdGlwL3BhY2thZ2UuanNvblwiOiAyMjVcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyMjI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///222\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/popover","version":"0.0.0","meta":{"title":"Popover","description":"Add BootstrapVue popovers to any element on your site, using Bootstrap v4 CSS for styling and animations. Popovers are tooltips on steroids.","directive":"VBPopover"}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///223\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/scrollspy","version":"0.0.0","meta":{"title":"Scrollspy","description":"Automatically activate BootstrapVue navigation or list group components based on scroll position to indicate which link is currently active in the viewport.","directive":"VBScrollspy"}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjQuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///224\n')},function(module){eval('module.exports = {"name":"@bootstrap-vue/tooltip","version":"0.0.0","meta":{"title":"Tooltip","description":"Add custom BootstrapVue tooltips to any element. Tooltips can be triggered by hovering, focusing, or clicking an element.","directive":"VBTooltip"}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///225\n')},function(module,exports,__webpack_require__){eval('var map = {\n\t"./accessibility/meta.json": 227,\n\t"./color-variants/meta.json": 228,\n\t"./images/meta.json": 229,\n\t"./router-links/meta.json": 230,\n\t"./size-props/meta.json": 231,\n\t"./spacing-classes/meta.json": 232,\n\t"./starter-templates/meta.json": 233,\n\t"./theming/meta.json": 234,\n\t"./utility-classes/meta.json": 235,\n\t"./validation/meta.json": 236\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 226;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL21hcmtkb3duL3JlZmVyZW5jZSBzeW5jIG1ldGEuanNvbj9iMzEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9hY2Nlc3NpYmlsaXR5L21ldGEuanNvblwiOiAyMjcsXG5cdFwiLi9jb2xvci12YXJpYW50cy9tZXRhLmpzb25cIjogMjI4LFxuXHRcIi4vaW1hZ2VzL21ldGEuanNvblwiOiAyMjksXG5cdFwiLi9yb3V0ZXItbGlua3MvbWV0YS5qc29uXCI6IDIzMCxcblx0XCIuL3NpemUtcHJvcHMvbWV0YS5qc29uXCI6IDIzMSxcblx0XCIuL3NwYWNpbmctY2xhc3Nlcy9tZXRhLmpzb25cIjogMjMyLFxuXHRcIi4vc3RhcnRlci10ZW1wbGF0ZXMvbWV0YS5qc29uXCI6IDIzMyxcblx0XCIuL3RoZW1pbmcvbWV0YS5qc29uXCI6IDIzNCxcblx0XCIuL3V0aWxpdHktY2xhc3Nlcy9tZXRhLmpzb25cIjogMjM1LFxuXHRcIi4vdmFsaWRhdGlvbi9tZXRhLmpzb25cIjogMjM2XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjI2OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///226\n')},function(module){eval('module.exports = {"title":"Accessibility","description":"A brief overview of BootstrapVue\'s features and limitations for the creation of accessible content.","new":true};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjcuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///227\n')},function(module){eval('module.exports = {"title":"Color Variants","description":"Color variants available when using the default Bootstrap v4 CSS and their mappings to CSS classes."};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///228\n')},function(module){eval('module.exports = {"title":"Component img src resolving","description":"Using project relative image URLs for BootstrapVue custom components with vue-loader","slug":"images"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMjkuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///229\n')},function(module){eval('module.exports = {"title":"Router support","description":"Several BootstrapVue components support rendering <router-link> components compatible with Vue Router and Nuxt.js.","slug":"router-links"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///230\n')},function(module){eval('module.exports = {"title":"Size props and classes","description":"Bootstrap v4 CSS provides several classes that control the sizing of elements, of which some of these have been translated into props on components.","slug":"size-props"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzEuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///231\n')},function(module){eval('module.exports = {"title":"Spacing classes","descripton":"Bootstrap v4 CSS includes a wide range of shorthand responsive margin and padding utility classes to modify an element\'s appearance."};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzIuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///232\n')},function(module){eval('module.exports = {"title":"Starter Templates","description":"There are several ways you can create your app, from basic client side HTML all the way up to using a build system and compilers."};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///233\n')},function(module){eval('module.exports = {"title":"Theming Bootstrap","description":"Theming is accomplished by SASS variables, SASS maps, and custom CSS. There\'s no dedicated theme stylesheet; instead, you can enable the built-in theme to add gradients, shadows, and more.","slug":"theming"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzQuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///234\n')},function(module){eval('module.exports = {"title":"Utility Classes","description":"Bootstrap v4 CSS provides various utility classes to control color, spacing, flex-box, text alignment, floating, position, responsive display/hiding and much more.","slug":"utility-classes"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///235\n')},function(module){eval('module.exports = {"title":"Form Validation","description":"BootstrapVue does not include form validation by default; we leave that up to the many existing form validation plugins. Included here are some examples of validation plugins and how they may be integrated.","slug":"validation"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzYuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///236\n')},function(module,exports,__webpack_require__){eval('var map = {\n\t"./changelog/meta.json": 238,\n\t"./contributing/meta.json": 239,\n\t"./settings/meta.json": 240\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 237;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL21hcmtkb3duL21pc2Mgc3luYyBtZXRhLmpzb24/ZGI1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2NoYW5nZWxvZy9tZXRhLmpzb25cIjogMjM4LFxuXHRcIi4vY29udHJpYnV0aW5nL21ldGEuanNvblwiOiAyMzksXG5cdFwiLi9zZXR0aW5ncy9tZXRhLmpzb25cIjogMjQwXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjM3OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///237\n')},function(module){eval('module.exports = {"title":"Changelog","description":"All notable changes to BootstrapVue are documented in this page."};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzguanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///238\n')},function(module){eval('module.exports = {"title":"Contributing","description":"Information on contributing to the BootstrapVue project."};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMzkuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///239\n')},function(module){eval('module.exports = {"title":"Settings","description":"Configuring BootstrapVue","new":true};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyNDAuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///240\n')}],[[135,70,3,71]]]);