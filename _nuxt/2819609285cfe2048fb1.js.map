{"version":3,"sources":["webpack:///./docs/markdown/reference/router-links/README.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"2819609285cfe2048fb1.js","sourcesContent":["module.exports = \"<h1 id=\\\"router-link-support\\\"><span class=\\\"bd-content-title\\\">Router link support</span></h1>\\n<p class=\\\"bd-lead\\\">Several BootstrapVue components support rendering <code>&lt;router-link&gt;</code> components compatible with\\n<em>Vue-Router</em> and <em>Nuxt</em>. For more information, see the\\n<a href=\\\"https://router.vuejs.org/\\\">official Vue-Router docs</a> and\\n<a href=\\\"https://nuxtjs.org/\\\">official Nuxt docs</a>.</p>\\n<h2 id=\\\"common-router-link-props\\\"><span class=\\\"bd-content-title\\\">Common router link props<a class=\\\"anchorjs-link\\\" href=\\\"#common-router-link-props\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>In the following sections, we are using the <code>&lt;b-link&gt;</code> component to render router links. <code>&lt;b-link&gt;</code>\\nis the building block of most of BootstrapVue&#39;s <em>actionable</em> components. You could use any other\\ncomponent that supports link generation such as <a href=\\\"/docs/components/link\\\"><code>&lt;b-link&gt;</code></a>,\\n<a href=\\\"/docs/components/button\\\"><code>&lt;b-button&gt;</code></a>, <a href=\\\"/docs/components/breadcrumb\\\"><code>&lt;b-breadcrumb-item&gt;</code></a>,\\n<a href=\\\"/docs/components/list-group\\\"><code>&lt;b-list-group-item&gt;</code></a>, <a href=\\\"/docs/components/nav\\\"><code>&lt;b-nav-item&gt;</code></a>,\\n<a href=\\\"/docs/components/dropdown\\\"><code>&lt;b-dropdown-item&gt;</code></a>, and\\n<a href=\\\"/docs/components/pagination-nav\\\"><code>&lt;b-pagination-nav&gt;</code></a>. Note that not all props are available on\\nall components. Refer to the respective component documentation for details.</p>\\n<h3 id=\\\"to\\\"><span class=\\\"bd-content-title\\\"><code>to</code><a class=\\\"anchorjs-link\\\" href=\\\"#to\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>string | Location</code></li>\\n<li>required to generate a <code>&lt;router-link&gt;</code></li>\\n</ul>\\n<p>Denotes the target route of the link. When clicked, the value of the <code>to</code> prop will be passed to\\n<code>router.push()</code> internally, so the value can be either a string or a location descriptor object.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Literal string --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">to</span>=<span class=\\\"hljs-string\\\">\\\"home\\\"</span>&gt;</span>Home<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Renders to --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"home\\\"</span>&gt;</span>Home<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- JavaScript expression using `v-bind` --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">v-bind:to</span>=<span class=\\\"hljs-string\\\">\\\"'home'\\\"</span>&gt;</span>Home<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Omitting `v-bind` is fine, just as binding any other prop --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">:to</span>=<span class=\\\"hljs-string\\\">\\\"'home'\\\"</span>&gt;</span>Home<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Same as above --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">:to</span>=<span class=\\\"hljs-string\\\">\\\"{ path: 'home' }\\\"</span>&gt;</span>Home<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Named route --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">:to</span>=<span class=\\\"hljs-string\\\">\\\"{ name: 'user', params: { userId: 123 } }\\\"</span>&gt;</span>User<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- With query, resulting in `/register?plan=private` --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">:to</span>=<span class=\\\"hljs-string\\\">\\\"{ path: 'register', query: { plan: 'private' } }\\\"</span>&gt;</span>Register<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Render a non-router link by omitting `to` and specifying an `href` --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"/home\\\"</span>&gt;</span>Home<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span></pre><h3 id=\\\"replace\\\"><span class=\\\"bd-content-title\\\"><code>replace</code><a class=\\\"anchorjs-link\\\" href=\\\"#replace\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>boolean</code></li>\\n<li>default: <code>false</code></li>\\n</ul>\\n<p>Setting <code>replace</code> prop will call <code>router.replace()</code> instead of <code>router.push()</code> when clicked, so the\\nnavigation will not leave a history record.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">:to</span>=<span class=\\\"hljs-string\\\">\\\"{ path: '/abc'}\\\"</span> <span class=\\\"hljs-attr\\\">replace</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span></pre><h3 id=\\\"append\\\"><span class=\\\"bd-content-title\\\"><code>append</code><a class=\\\"anchorjs-link\\\" href=\\\"#append\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>boolean</code></li>\\n<li>default: <code>false</code></li>\\n</ul>\\n<p>Setting <code>append</code> prop always appends the relative path to the current path. For example, assuming we\\nare navigating from <code>/a</code> to a relative link <code>b</code>, without <code>append</code> we will end up at <code>/b</code>, but with\\n<code>append</code> we will end up at <code>/a/b</code>.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">:to</span>=<span class=\\\"hljs-string\\\">\\\"{ path: 'relative/path'}\\\"</span> <span class=\\\"hljs-attr\\\">append</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span></pre><h3 id=\\\"router-tag\\\"><span class=\\\"bd-content-title\\\"><code>router-tag</code><a class=\\\"anchorjs-link\\\" href=\\\"#router-tag\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>string</code></li>\\n<li>default: <code>&#39;a&#39;</code></li>\\n</ul>\\n<p>Sometimes we want <code>&lt;router-link&gt;</code> to render as another tag, e.g <code>&lt;li&gt;</code>. Then we can use <code>router-tag</code>\\nprop to specify which tag to render to, and it will still listen to click events for navigation.\\n<code>router-tag</code> translates to the <code>tag</code> prop on the final rendered <code>&lt;router-link&gt;</code>.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">to</span>=<span class=\\\"hljs-string\\\">\\\"/foo\\\"</span> <span class=\\\"hljs-attr\\\">router-tag</span>=<span class=\\\"hljs-string\\\">\\\"li\\\"</span>&gt;</span>foo<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n\\n  <span class=\\\"hljs-comment\\\">&lt;!-- Renders as --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">li</span>&gt;</span>foo<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">li</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span></pre><p><strong>Note:</strong> Changing the tag from anything other than <code>&lt;a&gt;</code> is discouraged, as it hinders\\naccessibility of keyboard and/or screen-reader users, and is also not very SEO friendly.</p>\\n<h3 id=\\\"active-class\\\"><span class=\\\"bd-content-title\\\"><code>active-class</code><a class=\\\"anchorjs-link\\\" href=\\\"#active-class\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>string</code></li>\\n<li>default: <code>&#39;router-link-active&#39;</code> (<code>&#39;nuxt-link-active&#39;</code> when using Nuxt.js)</li>\\n</ul>\\n<p>Configure the active CSS class applied when the link is active. Note the default value can also be\\nconfigured globally via the <code>linkActiveClass</code> router constructor option.</p>\\n<h3 id=\\\"exact\\\"><span class=\\\"bd-content-title\\\"><code>exact</code><a class=\\\"anchorjs-link\\\" href=\\\"#exact\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>boolean</code></li>\\n<li>default: <code>false</code></li>\\n</ul>\\n<p>The default active class matching behavior is <strong>inclusive match</strong>. For example, <code>&lt;b-link to=&quot;/a&quot;&gt;</code>\\nwill get this class applied as long as the current path starts with <code>/a/</code> or is <code>/a</code>.</p>\\n<p>One consequence of this is that <code>&lt;b-link to=&quot;/&quot;&gt;</code> will be active for every route! To force the link\\ninto &quot;exact match mode&quot;, use the <code>exact</code> prop:</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n  <span class=\\\"hljs-comment\\\">&lt;!-- This link will only be active at `/` --&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-link</span> <span class=\\\"hljs-attr\\\">to</span>=<span class=\\\"hljs-string\\\">\\\"/\\\"</span> <span class=\\\"hljs-attr\\\">exact</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-link</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span></pre><p>Check out more examples explaining active link class <a href=\\\"https://jsfiddle.net/8xrk1n9f/\\\">live</a>.</p>\\n<h3 id=\\\"exact-active-class\\\"><span class=\\\"bd-content-title\\\"><code>exact-active-class</code><a class=\\\"anchorjs-link\\\" href=\\\"#exact-active-class\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>string</code></li>\\n<li>default: <code>&#39;router-link-exact-active&#39;</code> (<code>&#39;nuxt-link-exact-active&#39;</code> when using Nuxt.js)</li>\\n<li>availability: Vue-Router 2.5.0+</li>\\n</ul>\\n<p>Configure the active CSS class applied when the link is active with exact match. Note the default\\nvalue can also be configured globally via the <code>linkExactActiveClass</code> router constructor option.</p>\\n<h2 id=\\\"nuxt-specific-router-link-props\\\"><span class=\\\"bd-content-title\\\">Nuxt specific router link props<a class=\\\"anchorjs-link\\\" href=\\\"#nuxt-specific-router-link-props\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>When BootstrapVue detects that your app is running under <a href=\\\"https://nuxtjs.org\\\">Nuxt.js</a>, it will\\nrender a <a href=\\\"https://nuxtjs.org/api/components-nuxt-link\\\"><code>&lt;nuxt-link&gt;</code></a> sub component instead of a\\n<code>&lt;router-link&gt;</code>. <code>&lt;nuxt-link&gt;</code> supports all of the above router link props, plus the following\\nadditional Nuxt specific props.</p>\\n<h3 id=\\\"no-prefetch\\\"><span class=\\\"bd-content-title\\\"><code>no-prefetch</code><a class=\\\"anchorjs-link\\\" href=\\\"#no-prefetch\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>type: <code>boolean</code></li>\\n<li>default: <code>false</code></li>\\n<li>availability: Nuxt 2.4.0+</li>\\n</ul>\\n<p>To improve the responsiveness of your Nuxt.js applications, when the link will be displayed within\\nthe viewport, Nuxt.js will automatically prefetch the code splitted page. Setting <code>no-prefetch</code> will\\ndisabled this feature for the specific link.</p>\\n<p><strong>Note:</strong> If you have prefetching disabled in your <code>nuxt.config.js</code> configuration\\n(<code>router: { prefetchLinks: false}</code>), or are using a version of Nuxt.js <code>&lt; 2.4.0</code>, then this prop\\nwill have no effect.</p>\\n<p>Prefetching support requires\\n<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\\\">IntersectionObserver</a>\\nto be supported (see <a href=\\\"https://caniuse.com/#feat=intersectionobserver\\\">CanIUse</a>). For browsers that\\ndo not support IntersectionObserver, you can use the following conditional polyfill in\\n<code>nuxt.config.js</code>:</p>\\n<pre class=\\\"hljs js text-monospace p-2\\\"><span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n  <span class=\\\"hljs-attr\\\">head</span>: {\\n    <span class=\\\"hljs-attr\\\">script</span>: [\\n      { <span class=\\\"hljs-attr\\\">src</span>: <span class=\\\"hljs-string\\\">'https://polyfill.io/v2/polyfill.min.js?features=IntersectionObserver'</span>, <span class=\\\"hljs-attr\\\">body</span>: <span class=\\\"hljs-literal\\\">true</span> }\\n    ]\\n  }\\n}</pre>\";"],"sourceRoot":""}