(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{334:function(n,e){n.exports='<h1 id="visible"><span class="bd-content-title">Visible</span></h1>\n<p class="bd-lead"><code translate="no" class="notranslate text-nowrap">v-b-visible</code> is a lightweight directive that allows you to react when an element becomes visible\nin the viewport and/or when it moves out of the viewport (or is no longer visible).</p>\n<p>The <code translate="no" class="notranslate text-nowrap">v-b-visible</code> directive was added in version <code translate="no" class="notranslate text-nowrap">2.1.0</code>.</p>\n<h2 id="overview"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-label="Anchor"></a></span></h2>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">v-b-visible</code> will call your callback method with a boolean value indicating if the element is\nvisible (intersecting with the viewport) or not.</li>\n<li>The directive can be placed on almost any element or component.</li>\n<li>Changes in visibility can also be detected (such as <code translate="no" class="notranslate text-nowrap">display: none</code>), as long as the element is\nwithin (or partially within) the viewport, or within the optional offset. Note: transitioning to a\nnon-visible state due to <code translate="no" class="notranslate text-nowrap">v-if=&quot;false&quot;</code> <em>cannot</em> be detected.</li>\n<li>Internally, BootstrapVue uses this directive in several components, such as <code translate="no" class="notranslate text-nowrap">&lt;b-img-lazy&gt;</code>.</li>\n<li>The <code translate="no" class="notranslate text-nowrap">v-b-visible</code> directive requires browser support of\n<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener"><code translate="no" class="notranslate text-nowrap">IntersectionObserver</code></a>.\nFor older browsers that do not support <code translate="no" class="notranslate text-nowrap">IntersectionObserver</code>, you will need to use a\n<a href="/docs/#js" class="font-weight-bold">polyfill</a>.</li>\n<li>If <code translate="no" class="notranslate text-nowrap">IntersectionObserver</code> support is not detected, then <code translate="no" class="notranslate text-nowrap">v-b-visible</code> will assume the element is\n<em>always visible</em>, and will call the callback once with the argument set to <code translate="no" class="notranslate text-nowrap">true</code>.</li>\n</ul>\n<h2 id="directive-syntax-and-usage"><span class="bd-content-title">Directive syntax and usage<a class="anchorjs-link" href="#directive-syntax-and-usage" aria-label="Anchor"></a></span></h2>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.</span>[<span class="hljs-attr">mod1</span>]<span class="hljs-attr">.</span>[<span class="hljs-attr">mod2</span>]=<span class="hljs-string">"callback"</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><p>Where <code translate="no" class="notranslate text-nowrap">callback</code> is required:</p>\n<ul>\n<li>A function reference that will be called whenever visibility changes. The callback is passed a\nsingle boolean argument. <code translate="no" class="notranslate text-nowrap">true</code> indicates that the element is intersecting (partially or entirely\nvisible) in the viewport, or <code translate="no" class="notranslate text-nowrap">false</code> if the element is not visible/intersecting with the viewport.\nThe callback will be called each time the element&#39;s visibility changes (except when the <code translate="no" class="notranslate text-nowrap">once</code>\nmodifier is used. See below for details)</li>\n</ul>\n<p>Where <code translate="no" class="notranslate text-nowrap">[mod1]</code> or <code translate="no" class="notranslate text-nowrap">[mod2]</code> can be (all optional):</p>\n<ul>\n<li>A positive integer number representing the offset (margin) in pixels <em>away</em> from the edge of the\n<em>viewport</em> to determine when the element is considered in (or just about to be in) the viewport.\nThe value adds a margin around the viewport. The default value is <code translate="no" class="notranslate text-nowrap">0</code>.</li>\n<li>The keyword <code translate="no" class="notranslate text-nowrap">once</code>. When this modifier is present, the callback will be called only once the first\ntime the element is visible (with the argument of <code translate="no" class="notranslate text-nowrap">true</code> indicating the element is\nintersecting/visible). Note the callback <em>may be</em> called prior to this with an argument of <code translate="no" class="notranslate text-nowrap">false</code>\nsignifying the element is not intersecting/visible.</li>\n</ul>\n<p>The order of the modifiers is not important.</p>\n<h3 id="usage-syntax-examples"><span class="bd-content-title">Usage syntax examples<a class="anchorjs-link" href="#usage-syntax-examples" aria-label="Anchor"></a></span></h3>\n<p>In all use cases, the callback function is required.</p>\n<h4 id="basic-no-modifiers"><span class="bd-content-title">Basic (no modifiers)<a class="anchorjs-link" href="#basic-no-modifiers" aria-label="Anchor"></a></span></h4>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">"visibleHandler"</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    visibleHandler(isVisible) {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// Do something</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// Do something else</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre><h4 id="with-viewport-offset-modifier"><span class="bd-content-title">With viewport offset modifier<a class="anchorjs-link" href="#with-viewport-offset-modifier" aria-label="Anchor"></a></span></h4>\n<p>In this example, the modifier value represents 350px (if the element is outside of the physical\nviewport by at least 350px, then it will be considered &quot;visible&quot;):</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.350</span>=<span class="hljs-string">"visibleHandler"</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    visibleHandler(isVisible) {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// Do something</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// Do something else</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre><h4 id="with-the-once-modifier"><span class="bd-content-title">With the <code translate="no" class="notranslate text-nowrap">once</code> modifier<a class="anchorjs-link" href="#with-the-once-modifier" aria-label="Anchor"></a></span></h4>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.once</span>=<span class="hljs-string">"visibleHandler"</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    visibleHandler(isVisible) {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// This will only ever happen once, when the</span>\n        <span class="hljs-comment">// element has become visible for the first time</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// This may happen zero or more times before</span>\n        <span class="hljs-comment">// the element becomes visible, but will never</span>\n        <span class="hljs-comment">// happen after the element has become visible</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre><h4 id="with-both-once-and-offset-modifiers"><span class="bd-content-title">With both <code translate="no" class="notranslate text-nowrap">once</code> and offset modifiers<a class="anchorjs-link" href="#with-both-once-and-offset-modifiers" aria-label="Anchor"></a></span></h4>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-b-visible.once.350</span>=<span class="hljs-string">"visibleHandler"</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    visibleHandler(isVisible) {\n      <span class="hljs-keyword">if</span> (isVisible) {\n        <span class="hljs-comment">// This will only ever happen once, when the</span>\n        <span class="hljs-comment">// element is outside of the physical viewport</span>\n        <span class="hljs-comment">// by at least 350px for the first time</span>\n      } <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// This may happen zero or more times before</span>\n        <span class="hljs-comment">// the element becomes visible, but will never</span>\n        <span class="hljs-comment">// happen after the element has become visible</span>\n      }\n    }\n  }\n}\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre><h2 id="live-examples"><span class="bd-content-title">Live examples<a class="anchorjs-link" href="#live-examples" aria-label="Anchor"></a></span></h2>\n<p>Here are two live examples showing two common use cases.</p>\n<h3 id="visibility-of-scrolled-content"><span class="bd-content-title">Visibility of scrolled content<a class="anchorjs-link" href="#visibility-of-scrolled-content" aria-label="Anchor"></a></span></h3>\n<p>Scroll the container to see the reaction when the <code translate="no" class="notranslate text-nowrap">&lt;b-badge&gt;</code> scrolls into view. Note that\nvisibility state will also change if the element is scrolled out of the viewport.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>\n      <span class="hljs-attr">:class</span>=<span class="hljs-string">"[isVisible ? \'bg-info\' : \'bg-light\', \'border\', \'p-2\', \'text-center\']"</span>\n      <span class="hljs-attr">style</span>=<span class="hljs-string">"height: 85px; overflow-y: scroll;"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">"handleVisibility"</span>&gt;</span>Element with v-b-visible directive<span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>\n      Visible: {{ isVisible }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">isVisible</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">text</span>: <span class="hljs-string">`\n          Quis magna Lorem anim amet ipsum do mollit sit cillum voluptate ex nulla\n          tempor. Laborum consequat non elit enim exercitation cillum aliqua\n          consequat id aliqua. Esse ex consectetur mollit voluptate est in duis\n          laboris ad sit ipsum anim Lorem. Incididunt veniam velit elit elit veniam\n          Lorem aliqua quis ullamco deserunt sit enim elit aliqua esse irure. Laborum\n          nisi sit est tempor laborum mollit labore officia laborum excepteur commodo\n          non commodo dolor excepteur commodo. Ipsum fugiat ex est consectetur ipsum\n          commodo tempor sunt in proident. Non elixir food exorcism nacho tequila tasty.\n        `</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      handleVisibility(isVisible) {\n        <span class="hljs-keyword">this</span>.isVisible = isVisible\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- v-b-visible-scroll.vue --&gt;</span></pre><p>One use case for this, when combined with the <code translate="no" class="notranslate text-nowrap">once</code> modifier, is to see if a user has scrolled to\nthe bottom of a page or scrollable div (i.e. has &quot;read&quot; the entire terms of service).</p>\n<h3 id="css-display-visibility-detection"><span class="bd-content-title">CSS display visibility detection<a class="anchorjs-link" href="#css-display-visibility-detection" aria-label="Anchor"></a></span></h3>\n<p>Click the button to change the <code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code> visibility state. Note that visibility state will also change\nif the element is scrolled out of the viewport.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"show = !show"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>Toggle display<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Visible: {{ isVisible }}<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"border p-3"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"height: 6em;"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- We use Vue\'s `v-show` directive to control the CSS `display` of the div --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"show"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg-info p-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-badge</span> <span class="hljs-attr">v-b-visible</span>=<span class="hljs-string">"handleVisibility"</span>&gt;</span>Element with v-b-visible directive<span class="hljs-tag">&lt;/<span class="hljs-name">b-badge</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">isVisible</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      handleVisibility(isVisible) {\n        <span class="hljs-keyword">this</span>.isVisible = isVisible\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- v-b-visible-display.vue --&gt;</span></pre><h2 id="see-also"><span class="bd-content-title">See also<a class="anchorjs-link" href="#see-also" aria-label="Anchor"></a></span></h2>\n<p>For more details on <code translate="no" class="notranslate text-nowrap">IntersectionObserver</code>, refer to the\n<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noopener">MDN documentation</a></p>\n'}}]);