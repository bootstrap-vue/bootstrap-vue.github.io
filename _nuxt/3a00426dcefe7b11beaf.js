(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{372:function(n,l){n.exports='<h1 id="layout-and-grid-system"><span class="bd-content-title">Layout and Grid System</span></h1>\n<p class="bd-lead">Use the powerful mobile-first flexbox grid (via the <code translate="no" class="notranslate text-nowrap">&lt;b-container&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-form-row&gt;</code> and\n<code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> components) to build layouts of all shapes and sizes thanks to a twelve column system,\nfive default responsive tiers, CSS Sass variables and mixins, and dozens of predefined classes.</p>\n<p>BootstrapVue provides several convenient <em>functional</em> components tailored for layout, which can\nsimplify your complex page markup compared to traditional Bootstrap v4 markup. Feel free to switch\nback and forth between traditional Bootstrap v4 markup (i.e. <code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code>s and classes) and BootstrapVue\nfunctional layout components.</p>\n<h2 id="how-it-works"><span class="bd-content-title">How it works<a class="anchorjs-link" href="#how-it-works" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap&#39;s grid system uses a series of containers, rows, and columns to lay out and align content.\nIt&#39;s built with flexbox and is fully responsive. Below is an example and an in-depth look at how the\ngrid comes together.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>1 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>2 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>3 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-how-it-works.vue --&gt;</span></pre><p>The above example creates three equal-width columns on small, medium, large, and extra large devices\nusing Bootstrap v4&#39;s predefined grid classes. Those columns are centered in the page with the parent\n.container.</p>\n<p>Here&#39;s how it works:</p>\n<ul>\n<li>Containers provide a means to center your site&#39;s contents. Use <code translate="no" class="notranslate text-nowrap">&lt;b-container&gt;</code> for fixed width or\n<code translate="no" class="notranslate text-nowrap">&lt;b-container fluid&gt;</code> for full width.</li>\n<li>Rows are horizontal groups of columns that ensure your columns are lined up properly. We use the\nnegative margin method on <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> to ensure all your content is aligned properly down the left\nside.</li>\n<li>Content should be placed within <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> columns, and only columns may be immediate children of\n<code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code>.</li>\n<li>Thanks to flexbox, grid columns without a set width will automatically layout with equal widths.\nFor example, four instances of <code translate="no" class="notranslate text-nowrap">&lt;b-col sm=&quot;auto&quot;&gt;</code> will each automatically be 25% wide for small\nbreakpoints.</li>\n<li>Column prop <code translate="no" class="notranslate text-nowrap">cols</code> indicates the number of columns you&#39;d like to use out of the possible 12 per\nrow regardless of breakpoint (starting at breakpoint <code translate="no" class="notranslate text-nowrap">xs</code>). So, if you want three equal-width\ncolumns at any breakpoint, you can use <code translate="no" class="notranslate text-nowrap">&lt;b-col cols=&quot;4&quot;&gt;</code>.</li>\n<li>Column props <code translate="no" class="notranslate text-nowrap">sm</code>, <code translate="no" class="notranslate text-nowrap">md</code>, <code translate="no" class="notranslate text-nowrap">lg</code>, <code translate="no" class="notranslate text-nowrap">xl</code> indicate the number of columns you&#39;d like to use out of the\npossible 12 per row, at the various breakpoints. So, if you want three equal-width columns at\nbreakpoint <code translate="no" class="notranslate text-nowrap">sm</code>, you can use <code translate="no" class="notranslate text-nowrap">&lt;b-col sm=&quot;4&quot;&gt;</code>. the special value <code translate="no" class="notranslate text-nowrap">auto</code> can be used to take up the\nremaining available column space in a row.</li>\n<li>Column widths, internally, are set in percentages, so they&#39;re always fluid and sized relative to\ntheir parent element.</li>\n<li>Columns have horizontal padding to create the gutters between individual columns, however, you can\nremove the margin from <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> and padding from <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> by setting the <code translate="no" class="notranslate text-nowrap">no-gutters</code> prop on\n<code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code>.</li>\n<li>There are five grid tiers, one for each responsive breakpoint: all breakpoints (extra small),\nsmall, medium, large, and extra large.</li>\n<li>Grid tiers are based on minimum widths, meaning they apply to that one tier and all those above it\n(e.g., <code translate="no" class="notranslate text-nowrap">&lt;b-col sm=&quot;4&quot;&gt;</code> applies to small, medium, large, and extra large devices).</li>\n<li>You can use predefined grid classes or Sass mixins for more semantic markup.</li>\n</ul>\n<p>Be aware of the limitations and <a href="https://github.com/philipwalton/flexbugs" target="_blank" rel="noopener">bugs around flexbox</a>,\nlike the\n<a href="https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers" target="_blank" rel="noopener">inability to use some HTML elements as flex containers</a>.</p>\n<h2 id="containers-b-container"><span class="bd-content-title">Containers <code translate="no" class="notranslate text-nowrap">&lt;b-container&gt;</code><a class="anchorjs-link" href="#containers-b-container" aria-label="Anchor"></a></span></h2>\n<p>Containers (<code translate="no" class="notranslate text-nowrap">&lt;b-container&gt;</code>) are the most basic layout element in Bootstrap and is <strong>required when\nusing the grid system</strong>. Choose from a responsive, fixed-width container (meaning its max-width\nchanges at each breakpoint) by default, or fluid-width (meaning it&#39;s 100% wide all the time) by\nsetting &#39;fluid&#39; prop.</p>\n<p>While containers can be nested, most layouts do not require a nested container.</p>\n<p><strong>Fixed width container, based on viewport breakpoints:</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Content here --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span></pre><p><strong>Fluid container which is always 100% width, regardless of viewport breakpoint:</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Content here --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span></pre><h2 id="rows-b-row-and-b-form-row"><span class="bd-content-title">Rows <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-form-row&gt;</code><a class="anchorjs-link" href="#rows-b-row-and-b-form-row" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> components must be placed inside a <code translate="no" class="notranslate text-nowrap">&lt;b-container&gt;</code> component, or an element (such as a\n<code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code>) that has the class <code translate="no" class="notranslate text-nowrap">container</code> or <code translate="no" class="notranslate text-nowrap">container-fluid</code> applied to it.</p>\n<p>You can remove the margin from <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> and padding from <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> by setting the <code translate="no" class="notranslate text-nowrap">no-gutters</code> prop\non <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code>.</p>\n<p>Or, for compact margins (smaller gutters between columns), use the <code translate="no" class="notranslate text-nowrap">&lt;b-form-row&gt;</code> component, which\nis typically used in <a href="/docs/components/form" class="font-weight-bold">forms</a>.</p>\n<h2 id="columns-b-col"><span class="bd-content-title">Columns <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code><a class="anchorjs-link" href="#columns-b-col" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> Must be placed inside a <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> component, or an element (such as a <code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code>) that has\nthe class <code translate="no" class="notranslate text-nowrap">row</code> applied to it, or - in the case of <a href="/docs/components/form" class="font-weight-bold">forms</a> - inside a\n<code translate="no" class="notranslate text-nowrap">&lt;b-form-row&gt;</code> component to obtain columns with more compact margins.</p>\n<h2 id="grid-options"><span class="bd-content-title">Grid options<a class="anchorjs-link" href="#grid-options" aria-label="Anchor"></a></span></h2>\n<p>While Bootstrap uses <code translate="no" class="notranslate text-nowrap">ems</code> or <code translate="no" class="notranslate text-nowrap">rems</code> for defining most sizes, <code translate="no" class="notranslate text-nowrap">px</code>s are used for grid breakpoints\nand container widths. This is because the viewport width is in pixels and does not change with the\n<a href="https://drafts.csswg.org/mediaqueries-3/#units" target="_blank" rel="noopener">font size</a>.</p>\n<p>See how aspects of the Bootstrap grid system work across multiple devices with a handy table.</p>\n<table class="table table-bordered table-striped">\n  <thead>\n    <tr>\n      <th></th>\n      <th>\n        <strong>Extra small</strong><br>\n        <code class="notranslate" translate="no">&lt;576px</code>\n      </th>\n      <th>\n        <strong>Small</strong><br>\n        <code class="notranslate" translate="no">≥576px</code>\n      </th>\n      <th>\n        <strong>Medium</strong><br>\n        <code class="notranslate" translate="no">≥768px</code>\n      </th>\n      <th>\n        <strong>Large</strong><br>\n        <code class="notranslate" translate="no">≥992px</code>\n      </th>\n      <th>\n        <strong>Extra large</strong><br>\n        <code class="notranslate" translate="no">≥1200px</code>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>Max container width</strong></td>\n      <td>None (auto)</td>\n      <td>540px</td>\n      <td>720px</td>\n      <td>960px</td>\n      <td>1140px</td>\n    </tr>\n    <tr>\n      <td><strong>Prop</strong></td>\n      <td><code class="notranslate" translate="no">cols="*"</code></td>\n      <td><code class="notranslate" translate="no">sm="*"</code></td>\n      <td><code class="notranslate" translate="no">md="*"</code></td>\n      <td><code class="notranslate" translate="no">lg="*"</code></td>\n      <td><code class="notranslate" translate="no">xl="*"</code></td>\n    </tr>\n    <tr>\n      <td><strong># of columns</strong>\n      <td colspan="5">12</td>\n    </tr>\n    <tr>\n      <td><strong>Gutter width</strong>\n      <td colspan="5">30px (15px on each side of a column)</td>\n    </tr>\n    <tr>\n      <td><strong>Nestable</strong>\n      <td colspan="5">Yes</td>\n    </tr>\n    <tr>\n      <td><strong>Offset</strong></td>\n      <td><code class="notranslate" translate="no">offset="*"</code></td>\n      <td><code class="notranslate" translate="no">offset-sm="*"</code></td>\n      <td><code class="notranslate" translate="no">offset-md="*"</code></td>\n      <td><code class="notranslate" translate="no">offset-lg="*"</code></td>\n      <td><code class="notranslate" translate="no">offset-xl="*"</code></td>\n    </tr>\n    <tr>\n      <td><strong>Order</strong></td>\n      <td><code class="notranslate" translate="no">order="*"</code></td>\n      <td><code class="notranslate" translate="no">order-sm="*"</code></td>\n      <td><code class="notranslate" translate="no">order-md="*"</code></td>\n      <td><code class="notranslate" translate="no">order-lg="*"</code></td>\n      <td><code class="notranslate" translate="no">order-xl="*"</code></td>\n    </tr>\n  </tbody>\n</table>\n\n<p>Note: there is no <code translate="no" class="notranslate text-nowrap">xs</code> prop. The <code translate="no" class="notranslate text-nowrap">cols</code> prop refers to the <code translate="no" class="notranslate text-nowrap">xs</code> (smallest) breakpoint.</p>\n<h2 id="auto-layout-columns"><span class="bd-content-title">Auto-layout columns<a class="anchorjs-link" href="#auto-layout-columns" aria-label="Anchor"></a></span></h2>\n<p>Utilize breakpoint-specific column classes for easy column sizing without an explicit numbered prop\nlike <code translate="no" class="notranslate text-nowrap">&lt;b-col sm=&quot;6&quot;&gt;</code>.</p>\n<h3 id="equal-width-columns"><span class="bd-content-title">Equal-width columns<a class="anchorjs-link" href="#equal-width-columns" aria-label="Anchor"></a></span></h3>\n<p>For example, here are two grid layouts that apply to every device and viewport, from xs to xl. Add\nany number of unit-less classes for each breakpoint you need and every column will be the same\nwidth.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>1 of 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>2 of 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>1 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>2 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>3 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-equal-width.vue --&gt;</span></pre><p>Equal-width columns can be broken into multiple lines, but there is a\n<a href="https://github.com/philipwalton/flexbugs#11-min-and-max-size-declarations-are-ignored-when-wrapping-flex-items" target="_blank" rel="noopener">Safari flexbox bug</a>\nthat prevents this from working without an explicit flex-basis or border. Our example works thanks\nto the border being set; you can do the same with <code translate="no" class="notranslate text-nowrap">.col { border: 1px solid transparent; }</code>.\nAlternatively, you can set the flex-basis to the width of the column (e.g.,\n<code translate="no" class="notranslate text-nowrap">.col { flex: 1 0 50%; }</code>).</p>\n<p>Both these fixes have been documented in a\n<a href="https://output.jsbin.com/micohor" target="_blank" rel="noopener">reduced test case outside Bootstrap</a>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Column<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Column<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"w-100"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Column<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Column<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-equal-width-multiple-lines.vue --&gt;</span></pre><h3 id="setting-one-column-width"><span class="bd-content-title">Setting one column width<a class="anchorjs-link" href="#setting-one-column-width" aria-label="Anchor"></a></span></h3>\n<p>Auto-layout for flexbox grid columns also means you can set the width of one column and have the\nsibling columns automatically resize around it. You may use predefined grid classes (as shown\nbelow), grid mixins, or inline widths. Note that the other columns will resize no matter the width\nof the center column.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>1 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"8"</span>&gt;</span>2 of 3 (wider)<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>3 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>1 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"5"</span>&gt;</span>2 of 3 (wider)<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>3 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-one-width.vue --&gt;</span></pre><h3 id="variable-width-content"><span class="bd-content-title">Variable width content<a class="anchorjs-link" href="#variable-width-content" aria-label="Anchor"></a></span></h3>\n<p>Use <code translate="no" class="notranslate text-nowrap">{breakpoint}=&quot;auto&quot;</code> props to size columns based on the natural width of their content.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"justify-content-md-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"2"</span>&gt;</span>1 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"12"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"auto"</span>&gt;</span>Variable width content<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"2"</span>&gt;</span>3 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>1 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"12"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"auto"</span>&gt;</span>Variable width content<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"2"</span>&gt;</span>3 of 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-variable-width.vue --&gt;</span></pre><h2 id="responsive-classes"><span class="bd-content-title">Responsive classes<a class="anchorjs-link" href="#responsive-classes" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap&#39;s grid includes five tiers of predefined classes for building complex responsive layouts.\nCustomize the size of your columns on extra small, small, medium, large, or extra large devices\nhowever you see fit.</p>\n<h3 id="all-breakpoints"><span class="bd-content-title">All breakpoints<a class="anchorjs-link" href="#all-breakpoints" aria-label="Anchor"></a></span></h3>\n<p>For grids that are the same from the smallest of devices to the largest, use the <code translate="no" class="notranslate text-nowrap">col</code> and\n<code translate="no" class="notranslate text-nowrap">cols=&quot;*&quot;</code> props. Specify a number of <code translate="no" class="notranslate text-nowrap">cols</code> when you need a particularly sized column; otherwise,\nfeel free to stick to <code translate="no" class="notranslate text-nowrap">col</code> (which is applied automatically if no <code translate="no" class="notranslate text-nowrap">cols</code> are specified).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>col<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>col<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>col<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>col<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"8"</span>&gt;</span>col-8<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>col-4<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-size-all-breakpoints.vue --&gt;</span></pre><h3 id="stacked-to-horizontal"><span class="bd-content-title">Stacked to horizontal<a class="anchorjs-link" href="#stacked-to-horizontal" aria-label="Anchor"></a></span></h3>\n<p>Using a single set of <code translate="no" class="notranslate text-nowrap">sm=&quot;*&quot;</code> or <code translate="no" class="notranslate text-nowrap">sm</code> (boolean for equal width @sm) props, you can create a basic\ngrid system that starts out stacked on extra small devices before becoming horizontal on desktop\n(medium) devices.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"8"</span>&gt;</span>col-sm-8<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"4"</span>&gt;</span>col-sm-4<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>&gt;</span>col-sm<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>&gt;</span>col-sm<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>&gt;</span>col-sm<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-horizontal-stacked.vue --&gt;</span></pre><h3 id="mix-and-match"><span class="bd-content-title">Mix and match<a class="anchorjs-link" href="#mix-and-match" aria-label="Anchor"></a></span></h3>\n<p>Don&#39;t want your columns to simply stack in some grid tiers? Use a combination of different props for\neach tier as needed. See the example below for a better idea of how it all works.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"12"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"8"</span>&gt;</span>cols="12" md="8"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span>&gt;</span>cols="6" md="4"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span>&gt;</span>cols="6" md="4"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span>&gt;</span>cols="6" md="4"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span>&gt;</span>cols="6" md="4"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Columns are always 50% wide, on mobile and desktop --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"6"</span>&gt;</span>cols="6"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"6"</span>&gt;</span>cols="6"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-mix-and-match.vue --&gt;</span></pre><h2 id="alignment"><span class="bd-content-title">Alignment<a class="anchorjs-link" href="#alignment" aria-label="Anchor"></a></span></h2>\n<p>Use flexbox alignment utilities to vertically and horizontally align columns.</p>\n<h3 id="vertical-alignment"><span class="bd-content-title">Vertical alignment<a class="anchorjs-link" href="#vertical-alignment" aria-label="Anchor"></a></span></h3>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row bv-example-row-flex-cols"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-v</span>=<span class="hljs-string">"start"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-v</span>=<span class="hljs-string">"center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-v</span>=<span class="hljs-string">"end"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-vertical-alignment.vue --&gt;</span></pre><pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row bv-example-row-flex-cols"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">align-self</span>=<span class="hljs-string">"start"</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">align-self</span>=<span class="hljs-string">"center"</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">align-self</span>=<span class="hljs-string">"end"</span>&gt;</span>One of three columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-align-self.vue --&gt;</span></pre><h3 id="horizontal-alignment"><span class="bd-content-title">Horizontal alignment<a class="anchorjs-link" href="#horizontal-alignment" aria-label="Anchor"></a></span></h3>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-h</span>=<span class="hljs-string">"start"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-h</span>=<span class="hljs-string">"center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-h</span>=<span class="hljs-string">"end"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-h</span>=<span class="hljs-string">"around"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">align-h</span>=<span class="hljs-string">"between"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span>&gt;</span>One of two columns<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-horizontal-alignment.vue --&gt;</span></pre><h2 id="reordering"><span class="bd-content-title">Reordering<a class="anchorjs-link" href="#reordering" aria-label="Anchor"></a></span></h2>\n<h3 id="ordering-columns"><span class="bd-content-title">Ordering columns<a class="anchorjs-link" href="#ordering-columns" aria-label="Anchor"></a></span></h3>\n<p>Use <code translate="no" class="notranslate text-nowrap">order-*</code> props for controlling the visual order of your content. These props are responsive, so\nyou can set the order by breakpoint (e.g., <code translate="no" class="notranslate text-nowrap">order=&quot;1&quot; order-md=&quot;2&quot;</code>). Includes support for 1 through\n12 across all five grid tiers. <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> defaults to an order value of <code translate="no" class="notranslate text-nowrap">0</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>First in DOM, no order applied<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">order</span>=<span class="hljs-string">"5"</span>&gt;</span>Second in DOM, with a larger order<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">order</span>=<span class="hljs-string">"1"</span>&gt;</span>Third in DOM, with an order of 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">order</span>=<span class="hljs-string">"6"</span>&gt;</span>First in DOM, with order of 6<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">order</span>=<span class="hljs-string">"1"</span>&gt;</span>Second in DOM, with an order of 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Third in DOM, no order applied<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-order.vue --&gt;</span></pre><p>Ordering is controlled by flexbox&#39;s CSS style <code translate="no" class="notranslate text-nowrap">order</code>.</p>\n<h3 id="offsetting-columns"><span class="bd-content-title">Offsetting columns<a class="anchorjs-link" href="#offsetting-columns" aria-label="Anchor"></a></span></h3>\n<p>You can offset grid columns in two ways: our responsive <code translate="no" class="notranslate text-nowrap">offset-*</code> props or the\n<a href="/docs/reference/spacing-classes" class="font-weight-bold">margin</a> utility classes. Grid <code translate="no" class="notranslate text-nowrap">offset-*</code> props are sized to match\ncolumns while margins utility classes are more useful for quick layouts where the width of the\noffset is variable.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span>&gt;</span>md="4"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">offset-md</span>=<span class="hljs-string">"4"</span>&gt;</span>md="4" offset-md="4"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">offset-md</span>=<span class="hljs-string">"3"</span>&gt;</span>md="3" offset-md="3"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">offset-md</span>=<span class="hljs-string">"3"</span>&gt;</span>md="3" offset-md="3"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">offset-md</span>=<span class="hljs-string">"3"</span>&gt;</span>md="6" offset-md="3"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-offset.vue --&gt;</span></pre><p>In addition to column clearing at responsive breakpoints, you may need to reset offsets by setting\nthe offset to <code translate="no" class="notranslate text-nowrap">0</code> at a larger breakpoint:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span>&gt;</span>sm="5" md="6"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">offset-sm</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">offset-md</span>=<span class="hljs-string">"0"</span>&gt;</span>sm="5" offset-sm="2" md="6" offset-md="0"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"6"</span>&gt;</span>sm="6" md="5" lg="6"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">offset-md</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">offset-lg</span>=<span class="hljs-string">"0"</span>&gt;</span>sm="6" md="5" offset-md="2" col-lg="6" offset-lg="0"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-offset-reset.vue --&gt;</span></pre><h3 id="margin-utilities-on-columns"><span class="bd-content-title">Margin utilities on columns<a class="anchorjs-link" href="#margin-utilities-on-columns" aria-label="Anchor"></a></span></h3>\n<p>With the move to flexbox in Bootstrap v4, you can use\n<a href="/docs/reference/spacing-classes" class="font-weight-bold">margin and spacing</a> utility classes like <code translate="no" class="notranslate text-nowrap">.mr-auto</code> to force\nsibling columns away from one another.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-light text-center"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-3 bg-info"</span>&gt;</span>md="4"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ml-auto p-3 bg-info"</span>&gt;</span>md="4" .ml-auto<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ml-md-auto p-3 bg-info"</span>&gt;</span>md="3" .ml-md-auto<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ml-md-auto p-3 bg-info"</span>&gt;</span>md="3" .ml-md-auto<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"auto"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mr-auto p-3 bg-info"</span>&gt;</span>cols="auto" .mr-auto<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"auto"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-3 bg-info"</span>&gt;</span>cols="auto"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-margins.vue --&gt;</span></pre><h2 id="nesting-grids"><span class="bd-content-title">Nesting grids<a class="anchorjs-link" href="#nesting-grids" aria-label="Anchor"></a></span></h2>\n<p>To nest your content with the default grid, add a new <code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code> and set of <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> components\nwithin an existing <code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code> component. Nested rows should include a set of columns that add up to\n12 or fewer (it is not required that you use all 12 available columns).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bv-example-row"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"9"</span>&gt;</span>\n      Level 1: sm="9"\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"8"</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"6"</span>&gt;</span>Level 2: cols="8" sm="6"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"6"</span>&gt;</span>Level 2: cols="4" sm="6"<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-grid-nesting.vue --&gt;</span></pre>\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);