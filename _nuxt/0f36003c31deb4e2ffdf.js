(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{365:function(n,t){n.exports='<h1 id="textual-and-value-inputs"><span class="bd-content-title">Textual and Value inputs</span></h1>\n<p class="bd-lead">Create various type inputs such as: <code translate="no" class="notranslate text-nowrap">text</code>, <code translate="no" class="notranslate text-nowrap">password</code>, <code translate="no" class="notranslate text-nowrap">number</code>, <code translate="no" class="notranslate text-nowrap">url</code>, <code translate="no" class="notranslate text-nowrap">email</code>, <code translate="no" class="notranslate text-nowrap">search</code>,\n<code translate="no" class="notranslate text-nowrap">range</code>, <code translate="no" class="notranslate text-nowrap">date</code> and more.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter your name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>Value: {{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input.vue --&gt;</span></pre><h2 id="input-type"><span class="bd-content-title">Input type<a class="anchorjs-link" href="#input-type" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> defaults to a <code translate="no" class="notranslate text-nowrap">text</code> input, but you can set the <code translate="no" class="notranslate text-nowrap">type</code> prop to one of the supported\nnative browser HTML5 types: <code translate="no" class="notranslate text-nowrap">text</code>, <code translate="no" class="notranslate text-nowrap">password</code>, <code translate="no" class="notranslate text-nowrap">email</code>, <code translate="no" class="notranslate text-nowrap">number</code>, <code translate="no" class="notranslate text-nowrap">url</code>, <code translate="no" class="notranslate text-nowrap">tel</code>, <code translate="no" class="notranslate text-nowrap">search</code>, <code translate="no" class="notranslate text-nowrap">date</code>,\n<code translate="no" class="notranslate text-nowrap">datetime</code>, <code translate="no" class="notranslate text-nowrap">datetime-local</code>, <code translate="no" class="notranslate text-nowrap">month</code>, <code translate="no" class="notranslate text-nowrap">week</code>, <code translate="no" class="notranslate text-nowrap">time</code>, <code translate="no" class="notranslate text-nowrap">range</code>, or <code translate="no" class="notranslate text-nowrap">color</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"type in types"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"type"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">:for</span>=<span class="hljs-string">"`type-${type}`"</span>&gt;</span>Type {{ type }}:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"9"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">"`type-${type}`"</span> <span class="hljs-attr">:type</span>=<span class="hljs-string">"type"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">types</span>: [\n          <span class="hljs-string">\'text\'</span>,\n          <span class="hljs-string">\'password\'</span>,\n          <span class="hljs-string">\'email\'</span>,\n          <span class="hljs-string">\'number\'</span>,\n          <span class="hljs-string">\'url\'</span>,\n          <span class="hljs-string">\'tel\'</span>,\n          <span class="hljs-string">\'date\'</span>,\n          <span class="hljs-string">`time`</span>,\n          <span class="hljs-string">\'range\'</span>,\n          <span class="hljs-string">\'color\'</span>\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-types.vue --&gt;</span></pre><p>If the <code translate="no" class="notranslate text-nowrap">type</code> prop is set to an input type that is not supported (see above), a <code translate="no" class="notranslate text-nowrap">text</code> input will be\nrendered and a console warning will be issued.</p>\n<p><strong>Caveats with input types:</strong></p>\n<ul>\n<li>Not all browsers support all input types, nor do some types render in the same format across\nbrowser types/versions.</li>\n<li>Browsers that do not support a particular type will fall back to a <code translate="no" class="notranslate text-nowrap">text</code> input type (event\nthrough the rendered <code translate="no" class="notranslate text-nowrap">type</code> attribute markup shows the requested type).</li>\n<li>No testing is performed to see if the requested input type is supported by the browser.</li>\n<li>Chrome lost support for <code translate="no" class="notranslate text-nowrap">datetime</code> in version 26, Opera in version 15, and Safari in iOS 7.\nInstead of using <code translate="no" class="notranslate text-nowrap">datetime</code>, since support should be deprecated, use <code translate="no" class="notranslate text-nowrap">date</code> and <code translate="no" class="notranslate text-nowrap">time</code> as two\nseparate inputs.</li>\n<li><code translate="no" class="notranslate text-nowrap">date</code> and <code translate="no" class="notranslate text-nowrap">time</code> inputs are native browser types, and are not a custom date/time picker.</li>\n<li>For date and time style inputs, where supported, the displayed value in the GUI may be different\nthan what is returned by it&#39;s value (i.e. ordering of year-month-date).</li>\n<li>Regardless of input type, the value is <strong>always</strong> returned as a string representation.</li>\n<li><code translate="no" class="notranslate text-nowrap">v-model.lazy</code> is not supported by <code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> (nor any custom Vue component).</li>\n<li><code translate="no" class="notranslate text-nowrap">v-model</code> modifiers <code translate="no" class="notranslate text-nowrap">.number</code> and <code translate="no" class="notranslate text-nowrap">.trim</code> can cause unexpected cursor jumps when the user is\ntyping (this is a Vue issue with <code translate="no" class="notranslate text-nowrap">v-model</code> on custom components). <em>Avoid using these modifiers</em>.</li>\n<li>Older version of Firefox may not support <code translate="no" class="notranslate text-nowrap">readonly</code> for <code translate="no" class="notranslate text-nowrap">range</code> type inputs.</li>\n<li>Input types that do not support <code translate="no" class="notranslate text-nowrap">min</code>, <code translate="no" class="notranslate text-nowrap">max</code> and <code translate="no" class="notranslate text-nowrap">step</code> (i.e. <code translate="no" class="notranslate text-nowrap">text</code>, <code translate="no" class="notranslate text-nowrap">password</code>, <code translate="no" class="notranslate text-nowrap">tel</code>, <code translate="no" class="notranslate text-nowrap">email</code>,\n<code translate="no" class="notranslate text-nowrap">url</code>, etc) will silently ignore these values (although they will still be rendered on the input\nmarkup).</li>\n</ul>\n<h3 id="range-type-input"><span class="bd-content-title">Range type input<a class="anchorjs-link" href="#range-type-input" aria-label="Anchor"></a></span></h3>\n<p>Inputs with type <code translate="no" class="notranslate text-nowrap">range</code> render using Bootstrap v4&#39;s <code translate="no" class="notranslate text-nowrap">.custom-range</code> class. The track (the\nbackground) and thumb (the value) are both styled to appear the same across browsers.</p>\n<p>Range inputs have implicit values for <code translate="no" class="notranslate text-nowrap">min</code> and <code translate="no" class="notranslate text-nowrap">max</code> of <code translate="no" class="notranslate text-nowrap">0</code> and <code translate="no" class="notranslate text-nowrap">100</code> respectively. You may specify\nnew values for those using the <code translate="no" class="notranslate text-nowrap">min</code> and <code translate="no" class="notranslate text-nowrap">max</code> props.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"range-1"</span>&gt;</span>Example range with min and max<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"range-1"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"5"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">\'2\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-range.vue --&gt;</span></pre><p>By default, range inputs &quot;snap&quot; to integer values. To change this, you can specify a <code translate="no" class="notranslate text-nowrap">step</code> value.\nIn the example below, we double the number of steps by using step=&quot;0.5&quot;.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"range-2"</span>&gt;</span>Example range with step value<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"range-2"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"range"</span> <span class="hljs-attr">min</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">step</span>=<span class="hljs-string">"0.5"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>Value: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">\'2\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-range-step.vue --&gt;</span></pre><p><strong>Note:</strong> Range inputs (as do all input types) return their value as a string. You may need to\nconvert the value to a native number by using <code translate="no" class="notranslate text-nowrap">Number(value)</code>, <code translate="no" class="notranslate text-nowrap">parseInt(value, 10)</code>,\n<code translate="no" class="notranslate text-nowrap">parseFloat(value)</code>, or use the <code translate="no" class="notranslate text-nowrap">number</code> prop.</p>\n<p><strong>Note:</strong> Bootstrap v4.1 CSS does not include styling for range inputs inside input groups, nor\nvalidation styling on range inputs. However, BootstrapVue includes custom styling to handle these\nsituations until styling is included in Bootstrap v4.</p>\n<h2 id="control-sizing"><span class="bd-content-title">Control sizing<a class="anchorjs-link" href="#control-sizing" aria-label="Anchor"></a></span></h2>\n<p>Set heights using the <code translate="no" class="notranslate text-nowrap">size</code> prop to <code translate="no" class="notranslate text-nowrap">sm</code> or <code translate="no" class="notranslate text-nowrap">lg</code> for small or large respectively.</p>\n<p>To control width, place the input inside standard Bootstrap grid column.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-small"</span>&gt;</span>Small:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-small"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter your name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-default"</span>&gt;</span>Default:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-default"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter your name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-large"</span>&gt;</span>Large:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-large"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter your name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-size.vue --&gt;</span></pre><p><strong>Note:</strong> Input type <code translate="no" class="notranslate text-nowrap">range</code> currently does not support control sizing unless it is placed inside a\n<code translate="no" class="notranslate text-nowrap">&lt;b-input-group&gt;</code> which has its <code translate="no" class="notranslate text-nowrap">size</code> prop set.</p>\n<p><strong>Note:</strong> The native HTML <code translate="no" class="notranslate text-nowrap">&lt;input&gt;</code> attribute <code translate="no" class="notranslate text-nowrap">size</code> (which sets a horizontal width on the <code translate="no" class="notranslate text-nowrap">&lt;input&gt;</code>\nin characters) is not supported. Use styling, utility classes, or the layout rows (<code translate="no" class="notranslate text-nowrap">&lt;b-row&gt;</code>) and\ncolumns (<code translate="no" class="notranslate text-nowrap">&lt;b-col&gt;</code>) to set the desired width.</p>\n<h2 id="contextual-states"><span class="bd-content-title">Contextual states<a class="anchorjs-link" href="#contextual-states" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap includes validation styles for <code translate="no" class="notranslate text-nowrap">valid</code> and <code translate="no" class="notranslate text-nowrap">invalid</code> states on most form controls.</p>\n<p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">false</code> (denotes invalid state) is great for when there&#39;s a blocking or required field. A user\nmust fill in this field properly to submit the form.</li>\n<li><code translate="no" class="notranslate text-nowrap">true</code> (denotes valid state) is ideal for situations when you have per-field validation throughout\na form and want to encourage a user through the rest of the fields.</li>\n<li><code translate="no" class="notranslate text-nowrap">null</code> Displays no validation state (neither valid nor invalid)</li>\n</ul>\n<p>To apply one of the contextual state icons on <code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code>, set the <code translate="no" class="notranslate text-nowrap">state</code> prop to <code translate="no" class="notranslate text-nowrap">false</code> (for\ninvalid), <code translate="no" class="notranslate text-nowrap">true</code> (for valid), or <code translate="no" class="notranslate text-nowrap">null</code> (no validation state).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"3"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-none"</span>&gt;</span>No State:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"9"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-none"</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"null"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"No validation"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"3"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-valid"</span>&gt;</span>Valid State:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"9"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-valid"</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Valid input"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"3"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-invalid"</span>&gt;</span>Invalid State:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"9"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-invalid"</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"false"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Invalid input"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-states.vue --&gt;</span></pre><p><strong>Live Example</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">role</span>=<span class="hljs-string">"group"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-live"</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"input-live"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"name"</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">"nameState"</span>\n      <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">"input-live-help input-live-feedback"</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter your name"</span>\n      <span class="hljs-attr">trim</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- This will only be shown if the preceding input has an invalid state --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-invalid-feedback</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-live-feedback"</span>&gt;</span>\n      Enter at least 3 letters\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-invalid-feedback</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- This is a form text block (formerly known as help block) --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-live-help"</span>&gt;</span>Your full name.<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">computed</span>: {\n      nameState() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.length &gt; <span class="hljs-number">2</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>\n      }\n    },\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-states-feedback.vue --&gt;</span></pre><p class="bd-lead"><strong>Tip:</strong> Use the <a href="/docs/components/form-group" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-form-group&gt;</code></a> component to automatically\ngenerate markup similar to above.</p>\n<h3 id="conveying-contextual-state-to-assistive-technologies-and-colorblind-users"><span class="bd-content-title">Conveying contextual state to assistive technologies and colorblind users<a class="anchorjs-link" href="#conveying-contextual-state-to-assistive-technologies-and-colorblind-users" aria-label="Anchor"></a></span></h3>\n<p>Using these contextual states to denote the state of a form control only provides a visual,\ncolor-based indication, which will not be conveyed to users of assistive technologies - such as\nscreen readers - or to colorblind users.</p>\n<p>Ensure that an alternative indication of state is also provided. For instance, you could include a\nhint about state in the form control&#39;s <code translate="no" class="notranslate text-nowrap">&lt;label&gt;</code> text itself, or by providing an additional help\ntext block.</p>\n<h3 id="aria-aria-invalid-attribute"><span class="bd-content-title">ARIA <code translate="no" class="notranslate text-nowrap">aria-invalid</code> attribute<a class="anchorjs-link" href="#aria-aria-invalid-attribute" aria-label="Anchor"></a></span></h3>\n<p>Specifically for assistive technologies, invalid form controls can also be assigned an\n<code translate="no" class="notranslate text-nowrap">aria-invalid=&quot;true&quot;</code> attribute.</p>\n<p>When <code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> has an invalid contextual state (i.e. state is <code translate="no" class="notranslate text-nowrap">false</code>) you may also want to\nset the <code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> prop <code translate="no" class="notranslate text-nowrap">aria-invalid</code> to <code translate="no" class="notranslate text-nowrap">true</code>, or to one of the supported values:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">false</code>: Convey no errors detected (default)</li>\n<li><code translate="no" class="notranslate text-nowrap">true</code> (or <code translate="no" class="notranslate text-nowrap">&#39;true&#39;</code>): Convey that the value has failed validation.</li>\n<li><code translate="no" class="notranslate text-nowrap">&#39;grammar&#39;</code> Convey that a grammatical error has been detected.</li>\n<li><code translate="no" class="notranslate text-nowrap">&#39;spelling&#39;</code> Convey that a spelling error has been detected.</li>\n</ul>\n<p>If <code translate="no" class="notranslate text-nowrap">aria-invalid</code> is not explicitly set and <code translate="no" class="notranslate text-nowrap">state</code> is set to <code translate="no" class="notranslate text-nowrap">false</code>, then the <code translate="no" class="notranslate text-nowrap">aria-invalid</code>\nattribute on the input will automatically be set to <code translate="no" class="notranslate text-nowrap">&#39;true&#39;</code>;</p>\n<h2 id="formatter-support"><span class="bd-content-title">Formatter support<a class="anchorjs-link" href="#formatter-support" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-form-textarea&gt;</code> optionally supports formatting by passing a function\nreference to the <code translate="no" class="notranslate text-nowrap">formatter</code> prop.</p>\n<p>Formatting (when a formatter function is supplied) occurs when the control&#39;s native <code translate="no" class="notranslate text-nowrap">input</code> and\n<code translate="no" class="notranslate text-nowrap">change</code> events fire. You can use the boolean prop <code translate="no" class="notranslate text-nowrap">lazy-formatter</code> to restrict the formatter\nfunction to being called on the control&#39;s native <code translate="no" class="notranslate text-nowrap">blur</code> event.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">formatter</code> function receives two arguments: the raw <code translate="no" class="notranslate text-nowrap">value</code> of the input element, and the\nnative <code translate="no" class="notranslate text-nowrap">event</code> object that triggered the format (if available).</p>\n<p>The <code translate="no" class="notranslate text-nowrap">formatter</code> function should return the formatted value as a <em>string</em>.</p>\n<p>Formatting does not occur if a <code translate="no" class="notranslate text-nowrap">formatter</code> is not provided.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-formatter"</span>&gt;</span>Text input with formatter (on input)<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"input-formatter"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"text1"</span>\n      <span class="hljs-attr">:formatter</span>=<span class="hljs-string">"format"</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter your name"</span>\n      <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">"input-formatter-help"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-formatter-help"</span>&gt;</span>\n      We will convert your name to lowercase instantly\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Value: {{ text1 }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"input-lazy"</span>&gt;</span>Text input with lazy formatter (on blur)<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"input-lazy"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"text2"</span>\n      <span class="hljs-attr">:formatter</span>=<span class="hljs-string">"format"</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter your name"</span>\n      <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">"input-lazy-help"</span>\n      <span class="hljs-attr">lazy-formatter</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-text</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-lazy-help"</span>&gt;</span>This one is a little lazy!<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-text</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Value: {{ text2 }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text1</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">text2</span>: <span class="hljs-string">\'\'</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      format(value, event) {\n        <span class="hljs-keyword">return</span> value.toLowerCase()\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-formatter.vue --&gt;</span></pre><p><strong>Note:</strong> When using a non-text-like input (i.e. <code translate="no" class="notranslate text-nowrap">color</code>, <code translate="no" class="notranslate text-nowrap">range</code>, <code translate="no" class="notranslate text-nowrap">date</code>, <code translate="no" class="notranslate text-nowrap">number</code>, <code translate="no" class="notranslate text-nowrap">email</code> etc),\nensure that your formatter function returns the value in the expected format for the input type. The\nformatter <strong>must</strong> return the value as a <em>string</em>.</p>\n<p><strong>Note:</strong> With non-lazy formatting, if the cursor is not at the end of the input value, the cursor\nmay jump to the end <em>after</em> a character is typed. You can use the provided event object and the\n<code translate="no" class="notranslate text-nowrap">event.target</code> to access the native input&#39;s selection methods and properties to control where the\ninsertion point is. This is left as an exercise for the reader.</p>\n<h2 id="readonly-plain-text"><span class="bd-content-title">Readonly plain text<a class="anchorjs-link" href="#readonly-plain-text" aria-label="Anchor"></a></span></h2>\n<p>If you want to have <code translate="no" class="notranslate text-nowrap">&lt;b-form-input readonly&gt;</code> elements in your form styled as plain text, set the\n<code translate="no" class="notranslate text-nowrap">plaintext</code> prop (no need to set <code translate="no" class="notranslate text-nowrap">readonly</code>) to remove the default form field styling and preserve\nthe correct margin and padding.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">plaintext</code> option is not supported by input types <code translate="no" class="notranslate text-nowrap">color</code> or <code translate="no" class="notranslate text-nowrap">range</code>.</p>\n<h2 id="disabling-mousewheel-events-on-numeric-like-inputs"><span class="bd-content-title">Disabling mousewheel events on numeric-like inputs<a class="anchorjs-link" href="#disabling-mousewheel-events-on-numeric-like-inputs" aria-label="Anchor"></a></span></h2>\n<p>On some browsers, scrolling the mousewheel while a numeric-like input is focused will increment or\ndecrement the input&#39;s value. To disable this browser feature, just set the <code translate="no" class="notranslate text-nowrap">no-wheel</code> prop to\n<code translate="no" class="notranslate text-nowrap">true</code>.</p>\n<h2 id="datalist-support"><span class="bd-content-title">Datalist support<a class="anchorjs-link" href="#datalist-support" aria-label="Anchor"></a></span></h2>\n<p>Datalists are a native HTML tag <code translate="no" class="notranslate text-nowrap">&lt;datalist&gt;</code> that contains a list of <code translate="no" class="notranslate text-nowrap">&lt;option&gt;</code> tags. By assigning\nan ID to the datalist tag, the list can be references from a text input by adding a <code translate="no" class="notranslate text-nowrap">list</code>\nattribute.</p>\n<p>This gives the input the behavior of a combo box or auto-complete, allowing existing values to be\nchosen, or new values to be entered.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">"my-list-id"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"my-list-id"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>Manual Option<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"size in sizes"</span>&gt;</span>{{ size }}<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">sizes</span>: [<span class="hljs-string">\'Small\'</span>, <span class="hljs-string">\'Medium\'</span>, <span class="hljs-string">\'Large\'</span>, <span class="hljs-string">\'Extra Large\'</span>]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-input-datalist.vue --&gt;</span></pre><p>BootstrapVue provides the form helper component\n<a href="/docs/components/form/#datalist-helper" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-form-datalist&gt;</code></a> for quickly creating a <code translate="no" class="notranslate text-nowrap">&lt;datalist&gt;</code>\nfrom an array of options.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>Datalists work in conjunction with the browser&#39;s built in auto-complete, displaying datalist\noptions first, followed by auto-complete options. To only display datalist options, set\n<code translate="no" class="notranslate text-nowrap">autocomplete=&quot;off&quot;</code> on <code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code>.</li>\n<li>Datalists <strong>cannot</strong> be applied to input fields with type <code translate="no" class="notranslate text-nowrap">password</code>, <code translate="no" class="notranslate text-nowrap">range</code> or <code translate="no" class="notranslate text-nowrap">color</code>.</li>\n<li>Not all browsers fully support <code translate="no" class="notranslate text-nowrap">&lt;datalist&gt;</code> and implementations can be buggy. It is recommended\nthat datalists be treated as an enhancement and not be relied upon at this time. Check\n<a href="https://caniuse.com/#feat=datalist" target="_blank" rel="noopener">Can I Use</a> for full support details on all browsers.</li>\n</ul>\n<h2 id="v-model-modifiers"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">v-model</code> modifiers<a class="anchorjs-link" href="#v-model-modifiers" aria-label="Anchor"></a></span></h2>\n<p>Vue does not officially support <code translate="no" class="notranslate text-nowrap">.lazy</code>, <code translate="no" class="notranslate text-nowrap">.trim</code>, and <code translate="no" class="notranslate text-nowrap">.number</code> modifiers on the <code translate="no" class="notranslate text-nowrap">v-model</code> of custom\ncomponent based inputs, and may generate a bad user experience. Avoid using Vue&#39;s native modifiers.</p>\n<p>To get around this, <code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-form-textarea&gt;</code> have two boolean props <code translate="no" class="notranslate text-nowrap">trim</code> and\n<code translate="no" class="notranslate text-nowrap">number</code> which emulate the native Vue <code translate="no" class="notranslate text-nowrap">v-model</code> modifiers <code translate="no" class="notranslate text-nowrap">.trim</code> and <code translate="no" class="notranslate text-nowrap">.number</code> respectively.\nEmulation of the <code translate="no" class="notranslate text-nowrap">.lazy</code> modifier is <em>not</em> supported (listen for <code translate="no" class="notranslate text-nowrap">change</code> or <code translate="no" class="notranslate text-nowrap">blur</code> events instead).</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>The <code translate="no" class="notranslate text-nowrap">number</code> prop takes precedence over the <code translate="no" class="notranslate text-nowrap">trim</code> prop (i.e. <code translate="no" class="notranslate text-nowrap">trim</code> will have no effect when\n<code translate="no" class="notranslate text-nowrap">number</code> is set).</li>\n<li>When using the <code translate="no" class="notranslate text-nowrap">number</code> prop, and if the value can be parsed as a number (via <code translate="no" class="notranslate text-nowrap">parseFloat</code>) it\nwill return a value of type <code translate="no" class="notranslate text-nowrap">Number</code> to the <code translate="no" class="notranslate text-nowrap">v-model</code>, otherwise the original input value is\nreturned as type <code translate="no" class="notranslate text-nowrap">String</code>. This is the same behaviour as the native <code translate="no" class="notranslate text-nowrap">.number</code> modifier.</li>\n<li>The <code translate="no" class="notranslate text-nowrap">trim</code> and <code translate="no" class="notranslate text-nowrap">number</code> modifier props do not affect the value returned by the <code translate="no" class="notranslate text-nowrap">input</code> or <code translate="no" class="notranslate text-nowrap">change</code>\nevents. These events will always return the string value of the content of <code translate="no" class="notranslate text-nowrap">&lt;textarea&gt;</code> after\noptional formatting (which may not match the value returned via the <code translate="no" class="notranslate text-nowrap">v-model</code> <code translate="no" class="notranslate text-nowrap">update</code> event,\nwhich handles the modifiers).</li>\n</ul>\n<h2 id="autofocus"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-label="Anchor"></a></span></h2>\n<p>When the <code translate="no" class="notranslate text-nowrap">autofocus</code> prop is set, the input will be auto-focused when it is inserted (i.e.\n<strong>mounted</strong>) into the document, or re-activated when inside a Vue <code translate="no" class="notranslate text-nowrap">&lt;keep-alive&gt;</code> component. Note\nthat this prop <strong>does not</strong> set the <code translate="no" class="notranslate text-nowrap">autofocus</code> attribute on the input, nor can it tell when the\ninput becomes visible.</p>\n<h2 id="native-and-custom-events"><span class="bd-content-title">Native and custom events<a class="anchorjs-link" href="#native-and-custom-events" aria-label="Anchor"></a></span></h2>\n<p>All native events (other than the custom <code translate="no" class="notranslate text-nowrap">input</code> and <code translate="no" class="notranslate text-nowrap">change</code> events) are supported, without the\nneed for the <code translate="no" class="notranslate text-nowrap">.native</code> modifier.</p>\n<p>The custom <code translate="no" class="notranslate text-nowrap">input</code> and <code translate="no" class="notranslate text-nowrap">change</code> events receive a single argument of the current <code translate="no" class="notranslate text-nowrap">value</code> (after any\nformatting has been applied), and are triggered by user interaction.</p>\n<p>The custom <code translate="no" class="notranslate text-nowrap">update</code> event is passed the input value, and is emitted whenever the <code translate="no" class="notranslate text-nowrap">v-model</code> needs\nupdating (it is emitted before <code translate="no" class="notranslate text-nowrap">input</code>, <code translate="no" class="notranslate text-nowrap">change</code>. and <code translate="no" class="notranslate text-nowrap">blur</code> as needed).</p>\n<p>You can always access the native <code translate="no" class="notranslate text-nowrap">input</code> and <code translate="no" class="notranslate text-nowrap">change</code> events by using the <code translate="no" class="notranslate text-nowrap">.native</code> modifier.</p>\n<h2 id="exposed-input-properties-and-methods"><span class="bd-content-title">Exposed input properties and methods<a class="anchorjs-link" href="#exposed-input-properties-and-methods" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> exposes several of the native input element&#39;s properties and methods on the\ncomponent reference (i.e. assign a <code translate="no" class="notranslate text-nowrap">ref</code> to your <code translate="no" class="notranslate text-nowrap">&lt;b-form-input ref=&quot;foo&quot; ...&gt;</code> and use\n<code translate="no" class="notranslate text-nowrap">this.$refs[&#39;foo&#39;].propertyName</code> or <code translate="no" class="notranslate text-nowrap">this.$refs[&#39;foo&#39;].methodName(...)</code>).</p>\n<h3 id="input-properties"><span class="bd-content-title">Input properties<a class="anchorjs-link" href="#input-properties" aria-label="Anchor"></a></span></h3>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">.selectionStart</code></td>\n<td>Read/Write</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.selectionEnd</code></td>\n<td>Read/Write</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.selectionDirection</code></td>\n<td>Read/Write</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.validity</code></td>\n<td>Read only</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.validationMessage</code></td>\n<td>Read only</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.willValidate</code></td>\n<td>Read only</td>\n</tr>\n</tbody></table>\n</div><h3 id="input-methods"><span class="bd-content-title">Input methods<a class="anchorjs-link" href="#input-methods" aria-label="Anchor"></a></span></h3>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">.focus()</code></td>\n<td>Focus the input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.blur()</code></td>\n<td>Remove focus from the input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.select()</code></td>\n<td>Selects all text within the input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.setSelectionRange()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.setRangeText()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.setCustomValidity()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.checkValidity()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">.reportValidity()</code></td>\n<td></td>\n</tr>\n</tbody></table>\n</div><p>Refer to <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement</a> for more information on\nthese methods and properties. Support will vary based on input type.</p>\n<h2 id="component-alias"><span class="bd-content-title">Component alias<a class="anchorjs-link" href="#component-alias" aria-label="Anchor"></a></span></h2>\n<p>You can use <code translate="no" class="notranslate text-nowrap">&lt;b-form-input&gt;</code> by it&#39;s shorter alias <code translate="no" class="notranslate text-nowrap">&lt;b-input&gt;</code>.</p>\n<h2 id="using-html5-input-as-an-alternative"><span class="bd-content-title">Using HTML5 <code translate="no" class="notranslate text-nowrap">&lt;input&gt;</code> as an alternative<a class="anchorjs-link" href="#using-html5-input-as-an-alternative" aria-label="Anchor"></a></span></h2>\n<p>If you just need a simple input with basic bootstrap styling, you can simply use the following:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"value"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: "{{ value }}"<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">value</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- native-input.vue --&gt;</span></pre>\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);