(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{345:function(n,t){n.exports='<h1 id="form-group"><span class="bd-content-title">Form group</span></h1>\n<p class="bd-lead">The <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> component is the easiest way to add some structure to forms. Its purpose is\nto pair form controls with a legend or label, and to provide help text and invalid/valid feedback\ntext, as well as visual (color) contextual state feedback.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"fieldset-1"</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">"Let us know your name."</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">"Enter your name"</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">"input-1"</span>\n      <span class="hljs-attr">:invalid-feedback</span>=<span class="hljs-string">"invalidFeedback"</span>\n      <span class="hljs-attr">:valid-feedback</span>=<span class="hljs-string">"validFeedback"</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-1"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">:state</span>=<span class="hljs-string">"state"</span> <span class="hljs-attr">trim</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">computed</span>: {\n      state() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.length &gt;= <span class="hljs-number">4</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>\n      },\n      invalidFeedback() {\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.name.length &gt; <span class="hljs-number">4</span>) {\n          <span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>\n        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.name.length &gt; <span class="hljs-number">0</span>) {\n          <span class="hljs-keyword">return</span> <span class="hljs-string">\'Enter at least 4 characters\'</span>\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-keyword">return</span> <span class="hljs-string">\'Please enter something\'</span>\n        }\n      },\n      validFeedback() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.state === <span class="hljs-literal">true</span> ? <span class="hljs-string">\'Thank you\'</span> : <span class="hljs-string">\'\'</span>\n      }\n    },\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group.vue --&gt;</span></pre><h2 id="label"><span class="bd-content-title">Label<a class="anchorjs-link" href="#label" aria-label="Anchor"></a></span></h2>\n<p>Use the prop <code translate="no" class="notranslate">label</code> to set the content of the generated <code translate="no" class="notranslate">&lt;legend&gt;</code> or <code translate="no" class="notranslate">&lt;label&gt;</code> element, or by\nusing the named slot <code translate="no" class="notranslate">label</code>, You may optionally visually hide the label text while still making it\navailable to screen readers by setting the prop <code translate="no" class="notranslate">label-sr-only</code>.</p>\n<p><code translate="no" class="notranslate">&lt;b-form-group&gt;</code> will render a <code translate="no" class="notranslate">&lt;fieldset&gt;</code> with <code translate="no" class="notranslate">&lt;legend&gt;</code> if the <code translate="no" class="notranslate">label-for</code> prop is not set. If\nan input ID is provided to the <code translate="no" class="notranslate">label-for</code> prop, then a <code translate="no" class="notranslate">&lt;div&gt;</code> with <code translate="no" class="notranslate">&lt;label&gt;</code> will be rendered.</p>\n<p>If you provide an input <code translate="no" class="notranslate">id</code> value to the <code translate="no" class="notranslate">label-for</code> prop (the <code translate="no" class="notranslate">id</code> must exist on the input\ncontained within the <code translate="no" class="notranslate">&lt;b-form-group&gt;</code>), a <code translate="no" class="notranslate">&lt;label&gt;</code> element will be rendered instead of a <code translate="no" class="notranslate">&lt;legend&gt;</code>\nelement, and will have the <code translate="no" class="notranslate">for</code> attribute set to the <code translate="no" class="notranslate">id</code> specified. When specifying the id, <strong>do\nnot</strong> prepend it with <code translate="no" class="notranslate">#</code>. The <code translate="no" class="notranslate">label-for</code> prop should only be used when you have a single form\ninput inside the <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> component. Do not set the <code translate="no" class="notranslate">label-for</code> prop when using\n<code translate="no" class="notranslate">&lt;b-form-radio-group&gt;</code>, <code translate="no" class="notranslate">&lt;b-form-checkbox-group&gt;</code>, <code translate="no" class="notranslate">&lt;b-form-radio&gt;</code>, <code translate="no" class="notranslate">&lt;b-form-checkbox&gt;</code> or\n<code translate="no" class="notranslate">&lt;b-form-file&gt;</code> components (or when placing multiple inputs in the same form group), as these inputs\ninclude integrated label element(s) and the <code translate="no" class="notranslate">&lt;legend&gt;</code> element is more suitable.</p>\n<p>You can also apply additional classes to the label via the <code translate="no" class="notranslate">label-class</code> prop, such as responsive\npadding and text alignment utility classes. The <code translate="no" class="notranslate">label-class</code> prop accepts either a string or array\nof strings.</p>\n<h3 id="horizontal-layout"><span class="bd-content-title">Horizontal layout<a class="anchorjs-link" href="#horizontal-layout" aria-label="Anchor"></a></span></h3>\n<p>By default, the label appears above the input element(s), but you may optionally render horizontal\n(label to the left of the input) at the various standard Bootstrap breakpoints.</p>\n<p>The props<code translate="no" class="notranslate">label-cols</code> and <code translate="no" class="notranslate">label-cols-{breakpoint}</code> allow you to specify how many columns the label\nshould occupy in the row. The input(s) will fill the rest of the row. The value must be a number\ngreater than <code translate="no" class="notranslate">0</code>. Or you can set the prop to <code translate="no" class="notranslate">true</code> to make the label and input(s) each occupy half\nof the width of the rendered row (handy if you have custom Bootstrap with an odd number of columns).</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>prop</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate">label-cols</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">xs</code> up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-cols-sm</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">sm</code> and up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-cols-md</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">md</code> and up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-cols-lg</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">lg</code> and up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-cols-xl</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">xl</code> and up</td>\n</tr>\n</tbody></table>\n</div><pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"fieldset-horizontal"</span>\n      <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"4"</span>\n      <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"3"</span>\n      <span class="hljs-attr">description</span>=<span class="hljs-string">"Let us know your name."</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">"Enter your name"</span>\n      <span class="hljs-attr">label-for</span>=<span class="hljs-string">"input-horizontal"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-horizontal"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group-horizontal.vue --&gt;</span></pre><p><strong>Deprecation warning:</strong> The props <code translate="no" class="notranslate">horizontal</code> and <code translate="no" class="notranslate">breakpoint</code> have been deprecated in favour of\nusing the <code translate="no" class="notranslate">label-cols</code> and <code translate="no" class="notranslate">label-cols-{breakpoint}</code> props.</p>\n<h3 id="label-size"><span class="bd-content-title">Label size<a class="anchorjs-link" href="#label-size" aria-label="Anchor"></a></span></h3>\n<p>You can control the label text size match the size of your form input(s) via the optional\n<code translate="no" class="notranslate">label-size</code> prop. Values can be <code translate="no" class="notranslate">&#39;sm&#39;</code> or <code translate="no" class="notranslate">&#39;lg&#39;</code> for small or large label, respectively. Sizes work\nfor both <code translate="no" class="notranslate">horizontal</code> and non-horizontal form groups.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label-cols</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">label-size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Small"</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">"input-sm"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-sm"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label-cols</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Default"</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">"input-default"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-default"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label-cols</span>=<span class="hljs-string">"4"</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">label-size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Large"</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">"input-lg"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"input-lg"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group-label-size.vue --&gt;</span></pre><h3 id="label-text-alignment"><span class="bd-content-title">Label text alignment<a class="anchorjs-link" href="#label-text-alignment" aria-label="Anchor"></a></span></h3>\n<p>The label text may also optionally be aligned <code translate="no" class="notranslate">left</code>, <code translate="no" class="notranslate">center</code> or <code translate="no" class="notranslate">right</code> by setting the respective\nvalue via the prop <code translate="no" class="notranslate">label-text-align</code> and/or <code translate="no" class="notranslate">label-align-{breakpoint}</code>.</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>prop</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate">label-align</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">xs</code> up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-align-sm</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">sm</code> and up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-align-md</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">md</code> and up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-align-lg</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">lg</code> and up</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">label-align-xl</code></td>\n<td>Applies to breakpoint <code translate="no" class="notranslate">xl</code> and up</td>\n</tr>\n</tbody></table>\n</div><p>Alignment has no effect if the <code translate="no" class="notranslate">label-sr-only</code> prop is set.</p>\n<h2 id="description"><span class="bd-content-title">Description<a class="anchorjs-link" href="#description" aria-label="Anchor"></a></span></h2>\n<p>Optional descriptive text which is always shown with the <code translate="no" class="notranslate">.text-muted</code> class by setting the\n<code translate="no" class="notranslate">description</code> prop or using the named slot <code translate="no" class="notranslate">description</code>. The description text is rendered using the\n<a href="/docs/components/form#helper-components"><code translate="no" class="notranslate">&lt;b-form-text&gt;</code></a> form sub-component.</p>\n<h2 id="nested-form-groups"><span class="bd-content-title">Nested form groups<a class="anchorjs-link" href="#nested-form-groups" aria-label="Anchor"></a></span></h2>\n<p>Feel free to nest <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> components to produce advanced form layouts and semantic grouping\nof related form controls:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">bg-variant</span>=<span class="hljs-string">"light"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n      <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"3"</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">"Shipping Address"</span>\n      <span class="hljs-attr">label-size</span>=<span class="hljs-string">"lg"</span>\n      <span class="hljs-attr">label-class</span>=<span class="hljs-string">"font-weight-bold pt-0"</span>\n      <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">"Street:"</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">"nested-street"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"nested-street"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">"City:"</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">"nested-city"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"nested-city"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">"State:"</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">"nested-state"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"nested-state"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">"Country:"</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n        <span class="hljs-attr">label-for</span>=<span class="hljs-string">"nested-country"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"nested-country"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n        <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">"Ship via:"</span>\n        <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"pt-2"</span>\n          <span class="hljs-attr">:options</span>=<span class="hljs-string">"[\'Air\', \'Courier\', \'Mail\']"</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-group-nested.vue --&gt;</span></pre><h2 id="disabled-form-group"><span class="bd-content-title">Disabled form-group<a class="anchorjs-link" href="#disabled-form-group" aria-label="Anchor"></a></span></h2>\n<p>Setting the <code translate="no" class="notranslate">disabled</code> prop will disable the rendered <code translate="no" class="notranslate">&lt;fieldset&gt;</code> and, on most browsers, will\ndisable all the input elements contained within the fieldset.</p>\n<p><code translate="no" class="notranslate">disabled</code> has no effect when <code translate="no" class="notranslate">label-for</code> is set (as a <code translate="no" class="notranslate">fieldset</code> element is not rendered).</p>\n<h2 id="validation-state-feedback"><span class="bd-content-title">Validation state feedback<a class="anchorjs-link" href="#validation-state-feedback" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap includes validation styles for <code translate="no" class="notranslate">valid</code> and <code translate="no" class="notranslate">invalid</code> states on most form controls.</p>\n<p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code translate="no" class="notranslate">&#39;invalid&#39;</code> is great for when there&#39;s a blocking or required field. A user must fill in this field\nproperly to submit the form.</li>\n<li><code translate="no" class="notranslate">&#39;valid&#39;</code> is ideal for situations when you have per-field validation throughout a form and want to\nencourage a user through the rest of the fields.</li>\n<li><code translate="no" class="notranslate">null</code> Displays no validation state</li>\n</ul>\n<p>To apply one of the contextual states on <code translate="no" class="notranslate">&lt;b-form-group&gt;</code>, set the <code translate="no" class="notranslate">state</code> prop to <code translate="no" class="notranslate">&#39;invalid&#39;</code> (or\n<code translate="no" class="notranslate">false</code>), <code translate="no" class="notranslate">&#39;valid&#39;</code> (or <code translate="no" class="notranslate">true</code>), or <code translate="no" class="notranslate">null</code>. This will programmatically show the appropriate feedback\ntext.</p>\n<p>Bootstrap v4 uses sibling CSS selectors of <code translate="no" class="notranslate">:invalid</code> or <code translate="no" class="notranslate">:valid</code> inputs to show the feedback text.\nSome form controls (such as checkboxes, radios, and file inputs, or inputs inside input-groups) are\nwrapped in additional markup that will no longer make the feedback text a sibling of the input, and\nhence the feedback will not show. In these situations you will need to set the validity <code translate="no" class="notranslate">state</code> on\nthe <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> <em>as well as</em> the input.</p>\n<p>Feedback will be shown if the parent <code translate="no" class="notranslate">&lt;b-form&gt;</code> component does <em>not</em> have the <code translate="no" class="notranslate">novalidate</code> prop set\n(or set to <code translate="no" class="notranslate">false</code>) along with the <code translate="no" class="notranslate">validated</code> prop set (and the input fails or passes native\nbrowser validation constraints such as <code translate="no" class="notranslate">required</code>). Refer to Bootstrap v4&#39;s\n<a href="http://getbootstrap.com/docs/4.0/components/forms/#validation">Form component</a> documentation for\ndetails on validation methods.</p>\n<p>You should always provide content via the <code translate="no" class="notranslate">invalid-feedback</code> prop (or slot) to aid users using\nassistive technologies when setting a contextual <code translate="no" class="notranslate">invalid</code> state.</p>\n<h3 id="invalid-feedback"><span class="bd-content-title">Invalid feedback<a class="anchorjs-link" href="#invalid-feedback" aria-label="Anchor"></a></span></h3>\n<p>Show optional invalid state feedback text to provide textual state feedback (html supported) by\nsetting the prop <code translate="no" class="notranslate">invalid-feedback</code> or using the named slot <code translate="no" class="notranslate">invalid-feedback</code>.</p>\n<p>Invalid feedback is rendered using the\n<a href="/docs/components/form#helper-components"><code translate="no" class="notranslate">&lt;b-form-invalid-feedback&gt;</code></a> form sub-component.</p>\n<p><strong>Note:</strong> The prop <code translate="no" class="notranslate">feedback</code> has been deprecated in favor of the <code translate="no" class="notranslate">invalid-feedback</code> prop.</p>\n<h3 id="valid-feedback"><span class="bd-content-title">Valid feedback<a class="anchorjs-link" href="#valid-feedback" aria-label="Anchor"></a></span></h3>\n<p>Show optional valid state feedback text to provide textual state feedback (html supported) by\nsetting the prop <code translate="no" class="notranslate">valid-feedback</code> or using the named slot <code translate="no" class="notranslate">valid-feedback</code>.</p>\n<p>Valid feedback is rendered using the\n<a href="/docs/components/form#helper-components"><code translate="no" class="notranslate">&lt;b-form-valid-feedback&gt;</code></a> form sub-component.</p>\n<h3 id="feedback-style"><span class="bd-content-title">Feedback style<a class="anchorjs-link" href="#feedback-style" aria-label="Anchor"></a></span></h3>\n<p>By default, when visible, feedback (valid or invalid) will show as a block of text. You can change\nthe feedback so that it shows as a static tooltip when visible, by setting the prop <code translate="no" class="notranslate">tooltip</code> to\n<code translate="no" class="notranslate">true</code>.</p>\n<h3 id="feedback-limitations"><span class="bd-content-title">Feedback limitations<a class="anchorjs-link" href="#feedback-limitations" aria-label="Anchor"></a></span></h3>\n<p><strong>Note:</strong> When using <code translate="no" class="notranslate">&lt;b-input-group&gt;</code>, <code translate="no" class="notranslate">&lt;b-form-file&gt;</code>, <code translate="no" class="notranslate">&lt;b-form-radio-group&gt;</code>, <code translate="no" class="notranslate">&lt;b-form-radio&gt;</code>,\n<code translate="no" class="notranslate">&lt;b-form-checkbox-group&gt;</code> or <code translate="no" class="notranslate">&lt;b-form-checkbox&gt;</code> inside a <code translate="no" class="notranslate">&lt;b-form-group&gt;</code>, setting an invalid (or\nvalid) <code translate="no" class="notranslate">state</code> on the <code translate="no" class="notranslate">input</code> alone will <strong>not</strong> trigger the invalid (or valid) feedback to show\n(due to limitations with the new Bootstrap v4 validation CSS). To get around this, <strong>you must also</strong>\nset the invalid/valid <code translate="no" class="notranslate">state</code> on <code translate="no" class="notranslate">&lt;b-form-group&gt;</code>. Native browser validation will <strong>not</strong> trigger\nthe invalid feedback to show when using one of the above mentioned form controls.</p>\n<h2 id="accessibility"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-label="Anchor"></a></span></h2>\n<p>To enable auto-generation of <code translate="no" class="notranslate">aria-*</code> attributes, you should supply a unique <code translate="no" class="notranslate">id</code> prop to\n<code translate="no" class="notranslate">&lt;b-form-group&gt;</code>. This will associate the help text and feedback text to the <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> and,\nindirectly to its input control(s).</p>\n<p>By default, when no <code translate="no" class="notranslate">label-for</code> value is provided, <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> renders the input control(s)\ninside a an HTML <code translate="no" class="notranslate">&lt;fieldset&gt;</code> element with the label content placed inside the fieldset&#39;s <code translate="no" class="notranslate">&lt;legend&gt;</code>\nelement. By nature of this markup, the legend content is automatically associated to the containing\ninput control(s).</p>\n<p>It is <strong>highly recommended</strong> that you provide a unique <code translate="no" class="notranslate">id</code> prop on your input element and set the\n<code translate="no" class="notranslate">label-for</code> prop to this id, when you have only a single input in the <code translate="no" class="notranslate">&lt;b-form-group&gt;</code>.</p>\n<p>When multiple form controls are placed inside <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> (i.e. a series or radio or checkbox\ninputs, or a series of related inputs), <strong>do not set</strong> the <code translate="no" class="notranslate">label-for</code> prop, as a label can only be\nassociated with a single input. It is best to use the default rendered markup that produces a\n<code translate="no" class="notranslate">&lt;fieldset&gt;</code> + <code translate="no" class="notranslate">&lt;legend&gt;</code> which will describe the group of inputs.</p>\n<p>When placing multiple form controls inside a <code translate="no" class="notranslate">&lt;b-form-group&gt;</code> (and you are not nesting\n<code translate="no" class="notranslate">&lt;b-form-group&gt;</code>components), it is recommended to give each control its own associated <code translate="no" class="notranslate">&lt;label&gt;</code>\n(which may be visually hidden using the <code translate="no" class="notranslate">.sr-only</code> class) and set the labels <code translate="no" class="notranslate">for</code> attribute to the\n<code translate="no" class="notranslate">id</code> of the associated input control. Alternatively, you can set the <code translate="no" class="notranslate">aria-label</code> attribute on each\ninput control instead of using a <code translate="no" class="notranslate">&lt;label&gt;</code>. For <code translate="no" class="notranslate">&lt;b-form-radio&gt;</code> and <code translate="no" class="notranslate">&lt;b-form-checkbox&gt;</code> (or the\ngroup versions), you do not need to set individual labels, as the rendered markup for these types of\ninputs already includes a <code translate="no" class="notranslate">&lt;label&gt;</code> element.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);