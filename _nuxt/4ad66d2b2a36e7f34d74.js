(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{295:function(n,t){n.exports='<h1 id="form-textarea"><span class="bd-content-title">Form textarea</span></h1>\n<p class="bd-lead">Create multi-line text inputs with support for auto height sizing, minimum and maximum number of\nrows, and contextual states.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"text"</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter something..."</span>\n      <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span>\n      <span class="hljs-attr">max-rows</span>=<span class="hljs-string">"6"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">pre</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3 mb-0"</span>&gt;</span>{{ text }}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-textarea.vue --&gt;</span></pre><h2 id="control-sizing"><span class="bd-content-title">Control sizing<a class="anchorjs-link" href="#control-sizing" aria-label="Anchor"></a></span></h2>\n<p>Set text height using the <code translate="no" class="notranslate">size</code> prop to <code translate="no" class="notranslate">sm</code> or <code translate="no" class="notranslate">lg</code> for small or large respectively.</p>\n<p>To control width, place the input inside standard Bootstrap grid column.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"textarea-small"</span>&gt;</span>Small:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-small"</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Small textarea"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"textarea-default"</span>&gt;</span>Default:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-default"</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Default textarea"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"textarea-large"</span>&gt;</span>Large:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-large"</span>\n        <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Large textarea"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-textarea-sizes.vue --&gt;</span></pre><h2 id="displayed-rows"><span class="bd-content-title">Displayed rows<a class="anchorjs-link" href="#displayed-rows" aria-label="Anchor"></a></span></h2>\n<p>To set the height of <code translate="no" class="notranslate">&lt;b-form-textarea&gt;</code>, set the <code translate="no" class="notranslate">rows</code> prop to the desired number of rows. If no\nvalue is provided to <code translate="no" class="notranslate">rows</code>, then it will default to <code translate="no" class="notranslate">2</code> (the browser default and minimum acceptable\nvalue). Setting it to null or a value below 2 will result in the default of <code translate="no" class="notranslate">2</code> being used.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n    <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-rows"</span>\n    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Tall textarea"</span>\n    <span class="hljs-attr">rows</span>=<span class="hljs-string">"8"</span>\n  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-textarea-rows.vue --&gt;</span></pre><h3 id="disable-resize-handle"><span class="bd-content-title">Disable resize handle<a class="anchorjs-link" href="#disable-resize-handle" aria-label="Anchor"></a></span></h3>\n<p>Some web browsers will allow the user to re-size the height of the textarea. To disable this\nfeature, set the <code translate="no" class="notranslate">no-resize</code> prop to <code translate="no" class="notranslate">true</code>.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n    <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-no-resize"</span>\n    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Fixed height textarea"</span>\n    <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span>\n    <span class="hljs-attr">no-resize</span>\n  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-textarea-no-resize.vue --&gt;</span></pre><h3 id="auto-height"><span class="bd-content-title">Auto height<a class="anchorjs-link" href="#auto-height" aria-label="Anchor"></a></span></h3>\n<p><code translate="no" class="notranslate">&lt;b-form-textarea&gt;</code> can also automatically adjust its height (text rows) to fit the content, even as\nthe user enters or deletes text. The height of the textarea will either grow or shrink to fit the\ncontent (grow to a maximum of <code translate="no" class="notranslate">max-rows</code> or shrink to a minimum of <code translate="no" class="notranslate">rows</code>).</p>\n<p>To set the initial minimum height (in rows), set the <code translate="no" class="notranslate">rows</code> prop to the desired number of lines (or\nleave it at the default of <code translate="no" class="notranslate">2</code>), And then set maximum rows that the text area will grow to (before\nshowing a scrollbar) by setting the <code translate="no" class="notranslate">max-rows</code> prop to the maximum number of lines of text.</p>\n<p>To make the height <code translate="no" class="notranslate">sticky</code> (i.e. never shrink), set the <code translate="no" class="notranslate">no-auto-shrink</code> prop to <code translate="no" class="notranslate">true</code>. The\n<code translate="no" class="notranslate">no-auto-shrink</code> props has no effect if <code translate="no" class="notranslate">max-rows</code> is not set or is equal to or less than <code translate="no" class="notranslate">rows</code>.</p>\n<p>Note that the resize handle of the textarea (if supported by the browser) will automatically be\ndisabled in auto-height mode.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"textarea-auto-height"</span>&gt;</span>Auto height:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-auto-height"</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Auto height textarea"</span>\n        <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span>\n        <span class="hljs-attr">max-rows</span>=<span class="hljs-string">"8"</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"textarea-no-auto-shrink"</span>&gt;</span>No auto-shrink:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"10"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-no-auto-shrink"</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Auto height (no-shrink) textarea"</span>\n        <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span>\n        <span class="hljs-attr">max-rows</span>=<span class="hljs-string">"8"</span>\n        <span class="hljs-attr">no-auto-shrink</span>\n      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-textarea-auto-height.vue --&gt;</span></pre><h4 id="auto-height-implementation-note"><span class="bd-content-title">Auto height implementation note<a class="anchorjs-link" href="#auto-height-implementation-note" aria-label="Anchor"></a></span></h4>\n<p>Auto-height works by computing the resulting height via CSS queries, hence the input has to be in\ndocument (DOM) and visible (not hidden via <code translate="no" class="notranslate">display: none</code>). Initial height is computed on mount. If\nthe <code translate="no" class="notranslate">b-form-text-area</code> is visually hidden on mount, the auto height cannot be computed.</p>\n<p>In situations where the text area may initially be hidden visually (i.e. in non-lazy <code translate="no" class="notranslate">b-tab</code> components\nor non-lazy static <code translate="no" class="notranslate">b-modal</code>), you may want to use <code translate="no" class="notranslate">v-if</code> to delay mouting (lazy mount), or delay setting\nthe value of <code translate="no" class="notranslate">b-form-textarea</code> until it&#39;s visually hidden parent is shown.</p>\n<h2 id="contextual-states"><span class="bd-content-title">Contextual states<a class="anchorjs-link" href="#contextual-states" aria-label="Anchor"></a></span></h2>\n<p>Bootstrap includes validation styles for <code translate="no" class="notranslate">valid</code> and <code translate="no" class="notranslate">invalid</code> states on most form controls.</p>\n<p>Generally speaking, you&#39;ll want to use a particular state for specific types of feedback:</p>\n<ul>\n<li><code translate="no" class="notranslate">&#39;invalid&#39;</code> (or <code translate="no" class="notranslate">false</code>) is great for when there&#39;s a blocking or required field. A user must fill\nin this field properly to submit the form.</li>\n<li><code translate="no" class="notranslate">&#39;valid&#39;</code> (or <code translate="no" class="notranslate">true</code>) is ideal for situations when you have per-field validation throughout a form\nand want to encourage a user through the rest of the fields.</li>\n<li><code translate="no" class="notranslate">null</code> Displays no validation state</li>\n</ul>\n<p>To apply one of the contextual state icons on <code translate="no" class="notranslate">&lt;b-form-textarea&gt;</code>, set the <code translate="no" class="notranslate">state</code> prop to:</p>\n<ul>\n<li>The string <code translate="no" class="notranslate">&#39;invalid&#39;</code> or Boolean <code translate="no" class="notranslate">false</code> to apply invalid styling</li>\n<li>The string <code translate="no" class="notranslate">&#39;valid&#39;</code> or Boolean <code translate="no" class="notranslate">true</code> to apply valid styling</li>\n<li><code translate="no" class="notranslate">null</code> for no validation contextual state</li>\n</ul>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-state"</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"text"</span>\n      <span class="hljs-attr">:state</span>=<span class="hljs-string">"text.length &gt;= 10"</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Enter at least 10 characters"</span>\n      <span class="hljs-attr">rows</span>=<span class="hljs-string">"3"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-textarea-state.vue --&gt;</span></pre><h3 id="conveying-contextual-state-to-assistive-technologies-and-colorblind-users"><span class="bd-content-title">Conveying contextual state to assistive technologies and colorblind users<a class="anchorjs-link" href="#conveying-contextual-state-to-assistive-technologies-and-colorblind-users" aria-label="Anchor"></a></span></h3>\n<p>Using these contextual states to denote the state of a form control only provides a visual,\ncolor-based indication, which will not be conveyed to users of assistive technologies - such as\nscreen readers - or to colorblind users.</p>\n<p>Ensure that an alternative indication of state is also provided. For instance, you could include a\nhint about state in the form control&#39;s <code translate="no" class="notranslate">&lt;label&gt;</code> text itself, or by providing an additional help\ntext block.</p>\n<h3 id="aria-invalid-attribute"><span class="bd-content-title"><code translate="no" class="notranslate">aria-invalid</code> attribute<a class="anchorjs-link" href="#aria-invalid-attribute" aria-label="Anchor"></a></span></h3>\n<p>When <code translate="no" class="notranslate">&lt;b-form-textarea&gt;</code> has an invalid contextual state (i.e. <code translate="no" class="notranslate">&#39;invalid&#39;</code> or <code translate="no" class="notranslate">false</code>) you may also\nwant to set the prop <code translate="no" class="notranslate">aria-invalid</code> to <code translate="no" class="notranslate">true</code>, or one of the supported values:</p>\n<ul>\n<li><code translate="no" class="notranslate">false</code>: No errors (default)</li>\n<li><code translate="no" class="notranslate">true</code> or <code translate="no" class="notranslate">&#39;true&#39;</code>: The value has failed validation.</li>\n<li><code translate="no" class="notranslate">&#39;grammar&#39;</code>: A grammatical error has been detected.</li>\n<li><code translate="no" class="notranslate">&#39;spelling&#39;</code> A spelling error has been detected.</li>\n</ul>\n<p>If the <code translate="no" class="notranslate">state</code> prop is set to <code translate="no" class="notranslate">false</code> (or <code translate="no" class="notranslate">&#39;invalid&#39;</code>), and the <code translate="no" class="notranslate">aria-invalid</code> prop is not\nexplicitly set, <code translate="no" class="notranslate">&lt;b-form-textarea&gt;</code> will automatically set the <code translate="no" class="notranslate">aria-invalid</code> attribute to <code translate="no" class="notranslate">&#39;true&#39;</code>.</p>\n<h2 id="formatter-support"><span class="bd-content-title">Formatter support<a class="anchorjs-link" href="#formatter-support" aria-label="Anchor"></a></span></h2>\n<p>Refer to the <a href="/docs/components/form-input"><code translate="no" class="notranslate">&lt;b-form-input&gt;</code></a> documentation regarding usage of the\noptional formatter feature.</p>\n<h2 id="readonly-plain-text"><span class="bd-content-title">Readonly plain text<a class="anchorjs-link" href="#readonly-plain-text" aria-label="Anchor"></a></span></h2>\n<p>If you want to have <code translate="no" class="notranslate">&lt;b-form-textarea readonly&gt;</code> elements in your form styled as plain text, set the\n<code translate="no" class="notranslate">plaintext</code> prop (no need to set <code translate="no" class="notranslate">readonly</code> as it will be set automatically) to remove the default\nform field styling and preserve the correct text size, margin, padding and height.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"textarea-plaintext"</span> <span class="hljs-attr">plaintext</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"text"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-textarea</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">text</span>: <span class="hljs-string">"This is some text.\\nIt is read only and doesn\'t look like an input."</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-form-textarea-plaintext.vue --&gt;</span></pre><h2 id="v-model-modifiers"><span class="bd-content-title"><code translate="no" class="notranslate">v-model</code> modifiers<a class="anchorjs-link" href="#v-model-modifiers" aria-label="Anchor"></a></span></h2>\n<p>Vue does not officially support <code translate="no" class="notranslate">.lazy</code>, <code translate="no" class="notranslate">.trim</code>, and <code translate="no" class="notranslate">.number</code> modifiers on the <code translate="no" class="notranslate">v-model</code> of custom\ncomponent based inputs, and may generate a bad user experience. Avoid using Vue&#39;s native modifiers.</p>\n<p>To get around this, <code translate="no" class="notranslate">&lt;b-for-textarea&gt;</code> and <code translate="no" class="notranslate">&lt;b-form-input&gt;</code> have two boolean props <code translate="no" class="notranslate">trim</code> and\n<code translate="no" class="notranslate">number</code> which emulate the native Vue <code translate="no" class="notranslate">v-model</code> modifiers <code translate="no" class="notranslate">.trim</code> and <code translate="no" class="notranslate">.number</code> respectively.\nEmulation of the <code translate="no" class="notranslate">.lazy</code> modifier is <em>not</em> supported (listen for <code translate="no" class="notranslate">change</code> or <code translate="no" class="notranslate">blur</code> events instead).</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>The <code translate="no" class="notranslate">number</code> prop takes precedence over the <code translate="no" class="notranslate">trim</code> prop (i.e. <code translate="no" class="notranslate">trim</code> will have no effect when\n<code translate="no" class="notranslate">number</code> is set).</li>\n<li>When using the <code translate="no" class="notranslate">number</code> prop, and if the value can be parsed as a number (via <code translate="no" class="notranslate">parseFloat</code>) it\nwill return a value of type <code translate="no" class="notranslate">Number</code> to the <code translate="no" class="notranslate">v-model</code>, otherwise the original input value is\nreturned as type <code translate="no" class="notranslate">String</code>. This is the same behaviour as the native <code translate="no" class="notranslate">.number</code> modifier.</li>\n<li>The <code translate="no" class="notranslate">trim</code> and <code translate="no" class="notranslate">number</code> modifier props do not affect the value returned by the <code translate="no" class="notranslate">input</code> or <code translate="no" class="notranslate">change</code>\nevents. These events will always return the string value of the content of <code translate="no" class="notranslate">&lt;textarea&gt;</code> after\noptional formatting (which may not match the value returned via the <code translate="no" class="notranslate">v-model</code> <code translate="no" class="notranslate">update</code> event,\nwhich handles the modifiers).</li>\n</ul>\n<h2 id="autofocus"><span class="bd-content-title">Autofocus<a class="anchorjs-link" href="#autofocus" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.21</span></p>\n<p>When the <code translate="no" class="notranslate">autofocus</code> prop is set, the textarea will be auto-focused when it is inserted into the\ndocument, or re-activated when inside a Vue <code translate="no" class="notranslate">&lt;keep-alive&gt;</code> component. Note that this prop <strong>does\nnot</strong> set the <code translate="no" class="notranslate">autofocus</code> attribute on the textarea.</p>\n<h2 id="native-and-custom-events"><span class="bd-content-title">Native and custom events<a class="anchorjs-link" href="#native-and-custom-events" aria-label="Anchor"></a></span></h2>\n<p>All native events (other than the custom <code translate="no" class="notranslate">input</code> and <code translate="no" class="notranslate">change</code> events) are supported, without the\nneed for the <code translate="no" class="notranslate">.native</code> modifier.</p>\n<p>The custom <code translate="no" class="notranslate">input</code> and <code translate="no" class="notranslate">change</code> events receive a single argument of the current <code translate="no" class="notranslate">value</code> (after any\nformatting has been applied), and are triggered by user interaction.</p>\n<p>The custom <code translate="no" class="notranslate">update</code> event is passed the input value, and is emitted whenever the <code translate="no" class="notranslate">v-model</code> needs\nupdating (it is emitted before <code translate="no" class="notranslate">input</code>, <code translate="no" class="notranslate">change</code>. and <code translate="no" class="notranslate">blur</code> as needed).</p>\n<p>You can always access the native <code translate="no" class="notranslate">input</code> and <code translate="no" class="notranslate">change</code> events by using the <code translate="no" class="notranslate">.native</code> modifier.</p>\n<h2 id="exposed-input-properties-and-methods"><span class="bd-content-title">Exposed input properties and methods<a class="anchorjs-link" href="#exposed-input-properties-and-methods" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate">&lt;b-form-input&gt;</code> exposes several of the native input element&#39;s properties and methods on the\ncomponent reference (i.e. assign a <code translate="no" class="notranslate">ref</code> to your <code translate="no" class="notranslate">&lt;b-form-input ref=&quot;foo&quot; ...&gt;</code> and use\n<code translate="no" class="notranslate">this.$refs[&#39;foo&#39;].propertyName</code> or <code translate="no" class="notranslate">this.$refs[&#39;foo&#39;].methodName(...)</code>).</p>\n<h3 id="input-properties"><span class="bd-content-title">Input properties<a class="anchorjs-link" href="#input-properties" aria-label="Anchor"></a></span></h3>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate">.selectionStart</code></td>\n<td>Read/Write</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.selectionEnd</code></td>\n<td>Read/Write</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.selectionDirection</code></td>\n<td>Read/Write</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.validity</code></td>\n<td>Read only</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.validationMessage</code></td>\n<td>Read only</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.willValidate</code></td>\n<td>Read only</td>\n</tr>\n</tbody></table>\n</div><h3 id="input-methods"><span class="bd-content-title">Input methods<a class="anchorjs-link" href="#input-methods" aria-label="Anchor"></a></span></h3>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method</th>\n<th>Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate">.focus()</code></td>\n<td>Focus the input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.blur()</code></td>\n<td>Remove focus from the input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.select()</code></td>\n<td>Selects all text within the input</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.setSelectionRange()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.setRangeText()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.setCustomValidity()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.checkValidity()</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate">.reportValidity()</code></td>\n<td></td>\n</tr>\n</tbody></table>\n</div><p>Refer to <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement">https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement</a> for more information on\nthese methods and properties. Support will vary based on input type.</p>\n<h2 id="component-alias"><span class="bd-content-title">Component alias<a class="anchorjs-link" href="#component-alias" aria-label="Anchor"></a></span></h2>\n<p>You can use <code translate="no" class="notranslate">&lt;b-form-textarea&gt;</code> by it&#39;s shorter alias <code translate="no" class="notranslate">&lt;b-textarea&gt;</code>.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);