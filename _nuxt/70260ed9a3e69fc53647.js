(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{416:function(n,t){n.exports='<h1 id="popover" class="bv-no-focus-ring"><span class="bd-content-title">Popover</span></h1>\n<p class="bd-lead">The Popover feature, which provides a tooltip-like behavior, can be easily applied to any\ninteractive element via the <code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code> component or <a href="/docs/directives/popover" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">v-b-popover</code></a>\ndirective.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center my-3"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.top</span>=<span class="hljs-string">"\'I am popover directive content!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover Title"</span>&gt;</span>\n    Hover Me\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-target-1"</span>&gt;</span>\n    Hover Me\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-target-1"</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">"hover"</span> <span class="hljs-attr">placement</span>=<span class="hljs-string">"top"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span>Popover Title<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    I am popover <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>component<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> content!\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover.vue --&gt;</span></pre><h2 id="overview" class="bv-no-focus-ring"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-labelledby="overview"></a></span></h2>\n<p>Things to know when using popover component:</p>\n<ul>\n<li>Popovers rely on the 3rd party library <a href="https://popper.js.org/" target="_blank" rel="noopener">Popper.js</a> for positioning.</li>\n<li>Popovers require BootstrapVue&#39;s custom SCSS/CSS in order to function correctly, and for variants.</li>\n<li>Specify <code translate="no" class="notranslate text-nowrap">container</code> as <code translate="no" class="notranslate text-nowrap">null</code> (default, appends to <code translate="no" class="notranslate text-nowrap">&lt;body&gt;</code>) to avoid rendering problems in more\ncomplex components (like input groups, button groups, etc). You can use <code translate="no" class="notranslate text-nowrap">container</code> to optionally\nspecify a different element to append the rendered popover to.</li>\n<li>Triggering popovers on hidden elements will not work.</li>\n<li>Popovers for <code translate="no" class="notranslate text-nowrap">disabled</code> elements must be triggered on a wrapper element.</li>\n<li>When triggered from hyperlinks that span multiple lines, popovers will be centered. Use\n<code translate="no" class="notranslate text-nowrap">white-space: nowrap;</code> on your <code translate="no" class="notranslate text-nowrap">&lt;a&gt;</code>s, <code translate="no" class="notranslate text-nowrap">&lt;b-link&gt;</code>s and <code translate="no" class="notranslate text-nowrap">&lt;router-link&gt;</code>s to avoid this behavior.</li>\n</ul>\n<p>The target element <strong>must</strong> exist in the document before <code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code> is mounted. If the target\nelement is not found during mount, the popover will never open. Always place your <code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code>\ncomponent lower in the DOM than your target element.</p>\n<h2 id="positioning" class="bv-no-focus-ring"><span class="bd-content-title">Positioning<a class="anchorjs-link" href="#positioning" aria-labelledby="positioning"></a></span></h2>\n<p>Twelve options are available for positioning: <code translate="no" class="notranslate text-nowrap">top</code>, <code translate="no" class="notranslate text-nowrap">topleft</code>, <code translate="no" class="notranslate text-nowrap">topright</code>, <code translate="no" class="notranslate text-nowrap">right</code>, <code translate="no" class="notranslate text-nowrap">righttop</code>,\n<code translate="no" class="notranslate text-nowrap">rightbottom</code>, <code translate="no" class="notranslate text-nowrap">bottom</code>, <code translate="no" class="notranslate text-nowrap">bottomleft</code>, <code translate="no" class="notranslate text-nowrap">bottomright</code>, <code translate="no" class="notranslate text-nowrap">left</code>, <code translate="no" class="notranslate text-nowrap">lefttop</code>, and <code translate="no" class="notranslate text-nowrap">leftbottom</code> aligned.\nPositioning is relative to the trigger element.</p>\n<div class="bd-example bd-example-popover-static">\n  <div class="popover b-popover bs-popover-top bs-popover-top-docs">\n    <div class="arrow" style="left: calc(50% - 8px)"></div>\n    <h3 class="popover-header">Popover top</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-top bs-popover-top-docs">\n    <div class="arrow" style="right: 0px"></div>\n    <h3 class="popover-header">Popover topleft</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-top bs-popover-top-docs">\n    <div class="arrow" style="left: 0px"></div>\n    <h3 class="popover-header">Popover topright</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="popover b-popover bs-popover-right bs-popover-right-docs">\n    <div class="arrow" style="top: calc(50% - 4px)"></div>\n    <h3 class="popover-header">Popover right</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-right bs-popover-right-docs">\n    <div class="arrow" style="bottom: 0px"></div>\n    <h3 class="popover-header">Popover righttop</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-right bs-popover-right-docs">\n    <div class="arrow" style="top: 0px"></div>\n    <h3 class="popover-header">Popover rightbottom</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs">\n    <div class="arrow" style="left: calc(50% - 8px)"></div>\n    <h3 class="popover-header">Popover bottom</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs">\n    <div class="arrow" style="right: 0px"></div>\n    <h3 class="popover-header">Popover bottomleft</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-bottom bs-popover-bottom-docs">\n    <div class="arrow" style="left: 0px"></div>\n    <h3 class="popover-header">Popover bottomright</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="popover b-popover bs-popover-left bs-popover-left-docs">\n    <div class="arrow" style="top: calc(50% - 4px)"></div>\n    <h3 class="popover-header">Popover left</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-left bs-popover-left-docs">\n    <div class="arrow" style="bottom: 0px"></div>\n    <h3 class="popover-header">Popover lefttop</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n  <div class="popover b-popover bs-popover-left bs-popover-left-docs">\n    <div class="arrow" style="top: 0px"></div>\n    <h3 class="popover-header">Popover leftbottom</h3>\n    <div class="popover-body">\n      Sed posuere consectetur est at lobortis. Aenean eu leo quam. Pellentesque ornare sem lacinia\n      quam venenatis vestibulum.\n    </div>\n  </div>\n\n  <div class="clearfix"></div>\n</div>\n\n<h2 id="triggers" class="bv-no-focus-ring"><span class="bd-content-title">Triggers<a class="anchorjs-link" href="#triggers" aria-labelledby="triggers"></a></span></h2>\n<p>Popovers can be triggered (opened/closed) via any combination of <code translate="no" class="notranslate text-nowrap">click</code>, <code translate="no" class="notranslate text-nowrap">hover</code> and <code translate="no" class="notranslate text-nowrap">focus</code>. The\ndefault trigger is <code translate="no" class="notranslate text-nowrap">click</code>. Or a trigger of <code translate="no" class="notranslate text-nowrap">manual</code> can be specified, where the popover can only be\nopened or closed <a href="#programmatically-disabling-popover" class="font-weight-bold">programmatically</a>.</p>\n<p>If a popover has more than one trigger, then all triggers must be cleared before the popover will\nclose. I.e. if a popover has the trigger <code translate="no" class="notranslate text-nowrap">focus click</code>, and it was opened by <code translate="no" class="notranslate text-nowrap">focus</code>, and the user\nthen clicks the trigger element, they must click it again <strong>and</strong> move focus to close the popover.</p>\n<h3 id="caveats-with-focus-trigger-on-button-elements" class="bv-no-focus-ring"><span class="bd-content-title">Caveats with <code translate="no" class="notranslate text-nowrap">focus</code> trigger on <code translate="no" class="notranslate text-nowrap">&lt;button&gt;</code> elements<a class="anchorjs-link" href="#caveats-with-focus-trigger-on-button-elements" aria-labelledby="caveats-with-focus-trigger-on-button-elements"></a></span></h3>\n<p>For proper cross-browser and cross-platform behavior when using only the <code translate="no" class="notranslate text-nowrap">focus</code> trigger, you must\nuse an element that renders the <code translate="no" class="notranslate text-nowrap">&lt;a&gt;</code> tag, not the <code translate="no" class="notranslate text-nowrap">&lt;button&gt;</code> tag, and you also must include a\n<code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code> attribute.</p>\n<p>The following will generate an <code translate="no" class="notranslate text-nowrap">&lt;a&gt;</code> that looks like a button:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n  <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span>\n  <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"0"</span>\n  <span class="hljs-attr">v-b-popover.focus</span>=<span class="hljs-string">"\'Popover content\'"</span>\n  <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover title"</span>\n&gt;</span>\n  Link button with popover directive\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"link-button"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"0"</span>&gt;</span>\n  Link button with popover component\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"link-button"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover title"</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">"focus"</span>&gt;</span>\n  Popover content\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span></pre><h3 id="dismiss-on-next-click-self-dismissing" class="bv-no-focus-ring"><span class="bd-content-title">Dismiss on next click (self-dismissing)<a class="anchorjs-link" href="#dismiss-on-next-click-self-dismissing" aria-labelledby="dismiss-on-next-click-self-dismissing"></a></span></h3>\n<p>Use the <code translate="no" class="notranslate text-nowrap">focus</code> trigger by itself to dismiss popovers on the next click that the user makes. <code translate="no" class="notranslate text-nowrap">focus</code>\nalso makes the popover activate on both <code translate="no" class="notranslate text-nowrap">focus</code> and <code translate="no" class="notranslate text-nowrap">click</code> (as a click makes the element receive\nfocus on most browsers, assuming it is in the tab sequence of the page).</p>\n<p>You can, however, specify your trigger as <code translate="no" class="notranslate text-nowrap">click blur</code>, which will make only a click activate the\npopover, and either a click on the element, <em>or</em> losing focus to another element or part of the\ndocument will close the popover.</p>\n<p>The special <code translate="no" class="notranslate text-nowrap">blur</code> trigger <strong>must</strong> be used in combination with the <code translate="no" class="notranslate text-nowrap">click</code> trigger.</p>\n<h2 id="b-popover-component-basic-usage" class="bv-no-focus-ring"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code> Component basic usage<a class="anchorjs-link" href="#b-popover-component-basic-usage" aria-labelledby="b-popover-component-basic-usage"></a></span></h2>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-3"</span>&gt;</span>Placement<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>\n        <span class="hljs-attr">v-for</span>=<span class="hljs-string">"placement in placements"</span>\n        <span class="hljs-attr">:key</span>=<span class="hljs-string">"placement"</span>\n        <span class="hljs-attr">md</span>=<span class="hljs-string">"4"</span>\n        <span class="hljs-attr">class</span>=<span class="hljs-string">"py-4 text-center"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">"`popover-1-${placement}`"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>{{ placement }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n          <span class="hljs-attr">:target</span>=<span class="hljs-string">"`popover-1-${placement}`"</span>\n          <span class="hljs-attr">:placement</span>=<span class="hljs-string">"placement"</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover!"</span>\n          <span class="hljs-attr">triggers</span>=<span class="hljs-string">"hover focus"</span>\n          <span class="hljs-attr">:content</span>=<span class="hljs-string">"`Placement ${placement}`"</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-3"</span>&gt;</span>Content via properties or slots<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-4 text-center"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-2"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Using properties<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n          <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-2"</span>\n          <span class="hljs-attr">title</span>=<span class="hljs-string">"Prop Examples"</span>\n          <span class="hljs-attr">triggers</span>=<span class="hljs-string">"hover focus"</span>\n          <span class="hljs-attr">content</span>=<span class="hljs-string">"Embedding content using properties is easy"</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-4 text-center"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-3"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Using slots<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-3"</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">"hover focus"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span>Content via Slots<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n          Embedding content <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-danger"</span>&gt;</span>using slots<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> affords you\n          <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>greater <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>control.<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span> and basic HTML support.\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">placements</span>: [\n          <span class="hljs-string">\'topright\'</span>,\n          <span class="hljs-string">\'top\'</span>,\n          <span class="hljs-string">\'topleft\'</span>,\n          <span class="hljs-string">\'bottomright\'</span>,\n          <span class="hljs-string">\'bottom\'</span>,\n          <span class="hljs-string">\'bottomleft\'</span>,\n          <span class="hljs-string">\'righttop\'</span>,\n          <span class="hljs-string">\'right\'</span>,\n          <span class="hljs-string">\'lefttop\'</span>,\n          <span class="hljs-string">\'rightbottom\'</span>,\n          <span class="hljs-string">\'left\'</span>,\n          <span class="hljs-string">\'leftbottom\'</span>\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-placements.vue --&gt;</span></pre><h3 id="component-options-via-props" class="bv-no-focus-ring"><span class="bd-content-title">Component options via props<a class="anchorjs-link" href="#component-options-via-props" aria-labelledby="component-options-via-props"></a></span></h3>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Prop</th>\n<th>Default</th>\n<th>Description</th>\n<th>Supported values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">target</code></td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>Element string ID, or a reference to an element or component, that you want to trigger the popover. <strong>Required</strong></td>\n<td>Any valid in-document unique element ID, or in-document element/component reference</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">title</code></td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>Popover title (text only, no HTML). If HTML or reactivity is required, use the <code translate="no" class="notranslate text-nowrap">title</code> named slot</td>\n<td>Plain text</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">content</code></td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>Popover content (text only, no HTML). If HTML or reactivity is required, use the default slot</td>\n<td>Plain text</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">placement</code></td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;right&#39;</code></td>\n<td>Positioning of the popover, relative to the trigger element.</td>\n<td><code translate="no" class="notranslate text-nowrap">auto</code>, <code translate="no" class="notranslate text-nowrap">top</code>, <code translate="no" class="notranslate text-nowrap">bottom</code>, <code translate="no" class="notranslate text-nowrap">left</code>, <code translate="no" class="notranslate text-nowrap">right</code>, <code translate="no" class="notranslate text-nowrap">topleft</code>, <code translate="no" class="notranslate text-nowrap">topright</code>, <code translate="no" class="notranslate text-nowrap">bottomleft</code>, <code translate="no" class="notranslate text-nowrap">bottomright</code>, <code translate="no" class="notranslate text-nowrap">lefttop</code>, <code translate="no" class="notranslate text-nowrap">leftbottom</code>, <code translate="no" class="notranslate text-nowrap">righttop</code>, <code translate="no" class="notranslate text-nowrap">rightbottom</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">fallback-placement</code></td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;flip&#39;</code></td>\n<td>Auto-flip placement behaviour of the popover, relative to the trigger element.</td>\n<td><code translate="no" class="notranslate text-nowrap">flip</code>, <code translate="no" class="notranslate text-nowrap">clockwise</code>, <code translate="no" class="notranslate text-nowrap">counterclockwise</code>, or an array of valid placements evaluated from left to right</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">disabled</code></td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>Programmatic control of the Popover display state. Recommended to use with <a href="https://vuejs.org/v2/guide/components.html#sync-Modifier" target="_blank" rel="noopener">sync modifier</a>.</td>\n<td><code translate="no" class="notranslate text-nowrap">true</code>, <code translate="no" class="notranslate text-nowrap">false</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">triggers</code></td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;click&#39;</code></td>\n<td>Space separated list of event(s), which will trigger open/close of popover using built-in handling</td>\n<td><code translate="no" class="notranslate text-nowrap">hover</code>, <code translate="no" class="notranslate text-nowrap">focus</code>, <code translate="no" class="notranslate text-nowrap">click</code>. Note <code translate="no" class="notranslate text-nowrap">blur</code> is a special use case to close popover on next click.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">no-fade</code></td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>Disable fade animation when set to <code translate="no" class="notranslate text-nowrap">true</code></td>\n<td><code translate="no" class="notranslate text-nowrap">true</code> or <code translate="no" class="notranslate text-nowrap">false</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">delay</code></td>\n<td><code translate="no" class="notranslate text-nowrap">50</code></td>\n<td>Delay showing and hiding of popover by specified number of milliseconds. Can also be defined as an object in the form of <code translate="no" class="notranslate text-nowrap">{ show: 100, hide: 400 }</code> allowing different show and hide delays</td>\n<td><code translate="no" class="notranslate text-nowrap">0</code> and up, integers only.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">offset</code></td>\n<td><code translate="no" class="notranslate text-nowrap">0</code></td>\n<td>Shift the center of the popover by specified number of pixels. Also affects the position of the popover arrow.</td>\n<td>Any negative or positive integer</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">container</code></td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>Element string ID to append rendered popover into. If <code translate="no" class="notranslate text-nowrap">null</code> or element not found, popover is appended to <code translate="no" class="notranslate text-nowrap">&lt;body&gt;</code> (default)</td>\n<td>Any valid in-document unique element ID.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">boundary</code></td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;scrollParent&#39;</code></td>\n<td>The container that the popover will be constrained visually. The default should suffice in most cases, but you may need to change this if your target element is in a small container with overflow scroll</td>\n<td><code translate="no" class="notranslate text-nowrap">&#39;scrollParent&#39;</code> (default), <code translate="no" class="notranslate text-nowrap">&#39;viewport&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;window&#39;</code>, or a reference to an HTML element.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">boundary-padding</code></td>\n<td><code translate="no" class="notranslate text-nowrap">5</code></td>\n<td>Amount of pixel used to define a minimum distance between the boundaries and the popover. This makes sure the popover always has a little padding between the edges of its container.</td>\n<td>Any positive number</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">variant</code></td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>Contextual color variant for the popover</td>\n<td>Any contextual theme color variant name</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">custom-class</code></td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>A custom classname to apply to the popover outer wrapper element</td>\n<td>A string</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">id</code></td>\n<td><code translate="no" class="notranslate text-nowrap">null</code></td>\n<td>An ID to use on the popover root element. If none is provided, one will automatically be generated. If you do provide an ID, it <em>must</em> be guaranteed to be unique on the rendered page.</td>\n<td>A valid unique element ID string</td>\n</tr>\n</tbody></table>\n</div><h3 id="variants-and-custom-class" class="bv-no-focus-ring"><span class="bd-content-title">Variants and custom class<a class="anchorjs-link" href="#variants-and-custom-class" aria-labelledby="variants-and-custom-class"></a></span></h3>\n<p>BootstrapVue&#39;s popovers support contextual color variants via our custom CSS, via the <code translate="no" class="notranslate text-nowrap">variant</code>\nprop:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-button-variant"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">"0"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-button-variant"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">"focus"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span>Danger!<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    Danger variant popover\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-variant.vue --&gt;</span></pre><p>Bootstrap default theme variants are: <code translate="no" class="notranslate text-nowrap">danger</code>, <code translate="no" class="notranslate text-nowrap">warning</code>, <code translate="no" class="notranslate text-nowrap">success</code>, <code translate="no" class="notranslate text-nowrap">primary</code>, <code translate="no" class="notranslate text-nowrap">secondary</code>,\n<code translate="no" class="notranslate text-nowrap">info</code>, <code translate="no" class="notranslate text-nowrap">light</code>, and <code translate="no" class="notranslate text-nowrap">dark</code>. You can change or add additional variants via Bootstrap\n<a href="/docs/reference/theming" class="font-weight-bold">SCSS variables</a></p>\n<p>A custom class can be applied to the popover outer wrapper <code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code> by using the <code translate="no" class="notranslate text-nowrap">custom-class</code> prop:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"my-button"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"my-button"</span> <span class="hljs-attr">custom-class</span>=<span class="hljs-string">"my-popover-class"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span>Popover Title<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    Popover content\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><p><code translate="no" class="notranslate text-nowrap">variant</code> and <code translate="no" class="notranslate text-nowrap">custom-class</code> are reactive and can be changed while the popover is open.</p>\n<p>Refer to the <a href="/docs/directives/popover" class="font-weight-bold">popover directive</a> docs on applying variants and custom\nclass to the directive version.</p>\n<h3 id="programmatically-show-and-hide-popover" class="bv-no-focus-ring"><span class="bd-content-title">Programmatically show and hide popover<a class="anchorjs-link" href="#programmatically-show-and-hide-popover" aria-labelledby="programmatically-show-and-hide-popover"></a></span></h3>\n<p>You can manually control the visibility of a popover via the syncable Boolean <code translate="no" class="notranslate text-nowrap">show</code> prop. Setting\nit to <code translate="no" class="notranslate text-nowrap">true</code> will show the popover, while setting it to <code translate="no" class="notranslate text-nowrap">false</code> will hide the popover.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-flex flex-column text-md-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-button-sync"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"show = !show"</span>&gt;</span>Toggle Popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">"show"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-button-sync"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>&gt;</span>\n        Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-sync.vue --&gt;</span></pre><p>Programmatic control can also be affected by submitting <code translate="no" class="notranslate text-nowrap">&#39;open&#39;</code> and <code translate="no" class="notranslate text-nowrap">&#39;close&#39;</code> events to the popover\nby reference.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-flex flex-column text-md-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-button-event"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onOpen"</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onClose"</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"popover"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-button-event"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>&gt;</span>\n      Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      onOpen() {\n        <span class="hljs-keyword">this</span>.$refs.popover.$emit(<span class="hljs-string">\'open\'</span>)\n      },\n      onClose() {\n        <span class="hljs-keyword">this</span>.$refs.popover.$emit(<span class="hljs-string">\'close\'</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-event.vue --&gt;</span></pre><p>To make the popover shown on initial render, simply add the <code translate="no" class="notranslate text-nowrap">show</code> prop on <code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code>:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-button-open"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">show</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-button-open"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>&gt;</span>\n    I start <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>open<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-show-open.vue --&gt;</span></pre><p>A popover which is opened programmatically via the &#39;show&#39; property or by an event call can only be\nclosed programmatically. Built-in triggers will work inadequately, because trigger event will try to\nopen the popover even though it is already opened.</p>\n<p>In the below example, when the first Popover is opened with the &#39;open&#39; event, it will take two\nbutton clicks to close it. Play with the below demo to understand this. When you desire graceful\nhandling of both programmatic control of the Popover component as well as user interaction triggers,\nyou should disable built-in triggers and handle control yourself as demonstrated by the second\nPopover.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-flex flex-column text-md-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-manual-1"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"button"</span>&gt;</span>Unreliable<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-manual-1"</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">"pop1"</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">"click"</span>&gt;</span>\n        I can be stubborn sometimes.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-manual-2"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"button"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"pop2 = !pop2"</span>&gt;</span>\n        Comfortably Numb\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-manual-2"</span> <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">"pop2"</span> <span class="hljs-attr">triggers</span>=<span class="hljs-string">""</span>&gt;</span>\n        I do believe it\'s working, good.\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"popOpen"</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"popClose"</span>&gt;</span>Close<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"popToggle"</span>&gt;</span>Toggle<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">pop1</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">pop2</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      popOpen() {\n        <span class="hljs-keyword">this</span>.pop1 = <span class="hljs-keyword">this</span>.pop2 = <span class="hljs-literal">true</span>\n      },\n      popClose() {\n        <span class="hljs-keyword">this</span>.pop1 = <span class="hljs-keyword">this</span>.pop2 = <span class="hljs-literal">false</span>\n      },\n      popToggle() {\n        <span class="hljs-keyword">this</span>.pop1 = !<span class="hljs-keyword">this</span>.pop1\n        <span class="hljs-keyword">this</span>.pop2 = !<span class="hljs-keyword">this</span>.pop2\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-advanced-caution.vue --&gt;</span></pre><p>You can also use <code translate="no" class="notranslate text-nowrap">$root</code> events to trigger the showing and hiding of popover(s). See the <strong>Hiding\nand showing popovers via $root events</strong> section below for details.</p>\n<h3 id="programmatically-disabling-popover" class="bv-no-focus-ring"><span class="bd-content-title">Programmatically disabling popover<a class="anchorjs-link" href="#programmatically-disabling-popover" aria-labelledby="programmatically-disabling-popover"></a></span></h3>\n<p>You can disable popover via the syncable Boolean prop <code translate="no" class="notranslate text-nowrap">disabled</code> (default value is <code translate="no" class="notranslate text-nowrap">false</code>) Setting\nit to <code translate="no" class="notranslate text-nowrap">true</code> will disable the popover. If the popover is currently visible when disabled is set to\n<code translate="no" class="notranslate text-nowrap">false</code>, it will remain visible until it is enabled or programmatically closed. If the popover is\ndisabled/enabled via $root events (see below), your <code translate="no" class="notranslate text-nowrap">disabled</code> value will be updated as long as you\nhave provided the <code translate="no" class="notranslate text-nowrap">.sync</code> prop modifier.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-flex flex-column text-md-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-button-disable"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"disabled = !disabled"</span>&gt;</span>\n        {{ disabled ? \'Enable\' : \'Disable\' }} Popover by prop\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"disableByRef"</span>&gt;</span>\n        {{ disabled ? \'Enable\' : \'Disable\' }} Popover by $ref event\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n        <span class="hljs-attr">:disabled.sync</span>=<span class="hljs-string">"disabled"</span>\n        <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-button-disable"</span>\n        <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>\n        <span class="hljs-attr">ref</span>=<span class="hljs-string">"popover"</span>\n      &gt;</span>\n        Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      disableByRef() {\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.disabled) {\n          <span class="hljs-keyword">this</span>.$refs.popover.$emit(<span class="hljs-string">\'enable\'</span>)\n        } <span class="hljs-keyword">else</span> {\n          <span class="hljs-keyword">this</span>.$refs.popover.$emit(<span class="hljs-string">\'disable\'</span>)\n        }\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-disable.vue --&gt;</span></pre><p>Programmatic control can also be affected by submitting <code translate="no" class="notranslate text-nowrap">&#39;enable&#39;</code> and <code translate="no" class="notranslate text-nowrap">&#39;disable&#39;</code> events to the\npopover by reference.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-flex flex-column text-md-center"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-button-disable-event"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>I have a popover<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"p-2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onEnable"</span>&gt;</span>Enable<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"px-1"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onDisable"</span>&gt;</span>Disable<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"popover"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-button-disable-event"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>&gt;</span>\n      Hello <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>World!<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      onEnable() {\n        <span class="hljs-keyword">this</span>.$refs.popover.$emit(<span class="hljs-string">\'enable\'</span>)\n      },\n      onDisable() {\n        <span class="hljs-keyword">this</span>.$refs.popover.$emit(<span class="hljs-string">\'disable\'</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-disabled-event.vue --&gt;</span></pre><p>When disabled, the popover can be opened programmatically (either via the <code translate="no" class="notranslate text-nowrap">show</code> prop, methods or\nevents).</p>\n<p>You can also use <code translate="no" class="notranslate text-nowrap">$root</code> events to trigger disabling and enabling of popover(s). See the <strong>Disabling\nand enabling popovers via $root events</strong> section below for details.</p>\n<h2 id="v-b-popover-directive-usage" class="bv-no-focus-ring"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">v-b-popover</code> Directive usage<a class="anchorjs-link" href="#v-b-popover-directive-usage" aria-labelledby="v-b-popover-directive-usage"></a></span></h2>\n<p>Just need quick popovers without too much markup? Use the\n<a href="/docs/directives/popover" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">v-b-popover</code> directive</a>:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.top</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Title"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Top<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.right</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Title"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Right<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.left</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Title"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Left<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"py-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover.hover.bottom</span>=<span class="hljs-string">"\'Popover!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Title"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Bottom<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-directive-placement.vue --&gt;</span></pre><p>Refer to the <a href="/docs/directives/popover" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">v-b-popover</code> directive</a> documentation for detailed\ninformation on the directive usage.</p>\n<h2 id="advanced-b-popover-usage-with-reactive-content" class="bv-no-focus-ring"><span class="bd-content-title">Advanced <code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code> usage with reactive content<a class="anchorjs-link" href="#advanced-b-popover-usage-with-reactive-content" aria-labelledby="advanced-b-popover-usage-with-reactive-content"></a></span></h2>\n<p>You can even make your <code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code> content interactive. Just remember not to use the <code translate="no" class="notranslate text-nowrap">focus</code> or\ntriggers (use only <code translate="no" class="notranslate text-nowrap">click</code>).</p>\n<p>If you absolutely must use a trigger other than <code translate="no" class="notranslate text-nowrap">click</code> (or want to disable closing of the popover\nwhen the trigger element is clicked a second time), then you can either:</p>\n<ul>\n<li>Listen for the <code translate="no" class="notranslate text-nowrap">hide</code> event on the <code translate="no" class="notranslate text-nowrap">&lt;b-popover&gt;</code> element, and call the <code translate="no" class="notranslate text-nowrap">preventDefault()</code> method\n(when appropriate) on the <code translate="no" class="notranslate text-nowrap">BvEvent</code> object passed to your <code translate="no" class="notranslate text-nowrap">hide</code> handler;</li>\n<li>Disable your trigger element (if possible) as soon as the popover begins to open (via the <code translate="no" class="notranslate text-nowrap">show</code>\nevent), and re-enable it when appropriate (i.e. via the <code translate="no" class="notranslate text-nowrap">hide</code> or <code translate="no" class="notranslate text-nowrap">hidden</code> event).</li>\n</ul>\n<p>For practical purposes, <strong>interactive content popovers should be minimal</strong>. The maximum width of the\npopover is hard coded by Bootstrap v4 CSS to <code translate="no" class="notranslate text-nowrap">276px</code>. Tall popovers on small screens can be harder\nto deal with on mobile devices (such as smart-phones).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"my-container"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-3"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Our triggering (target) element --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-reactive-1"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"button"</span>&gt;</span>\n        Reactive Content Using Slots\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Output from the popover interaction --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Returned values:"</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"input1Return &amp;&amp; input2Return"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-text"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"max-width: 20rem;"</span>&gt;</span>\n        Name: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input1Return }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n        Color: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input2Return }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Our popover title and content render container --&gt;</span>\n    <span class="hljs-comment">&lt;!-- We use placement \'auto\' so popover fits in the best spot on viewport --&gt;</span>\n    <span class="hljs-comment">&lt;!-- We specify the same container as the trigger button, so that popover is close to button --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-popover</span>\n      <span class="hljs-attr">target</span>=<span class="hljs-string">"popover-reactive-1"</span>\n      <span class="hljs-attr">triggers</span>=<span class="hljs-string">"click"</span>\n      <span class="hljs-attr">:show.sync</span>=<span class="hljs-string">"popoverShow"</span>\n      <span class="hljs-attr">placement</span>=<span class="hljs-string">"auto"</span>\n      <span class="hljs-attr">container</span>=<span class="hljs-string">"my-container"</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">"popover"</span>\n      @<span class="hljs-attr">show</span>=<span class="hljs-string">"onShow"</span>\n      @<span class="hljs-attr">shown</span>=<span class="hljs-string">"onShown"</span>\n      @<span class="hljs-attr">hidden</span>=<span class="hljs-string">"onHidden"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onClose"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"close"</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Close"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-inline-block"</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        Interactive Content\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Name"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"popover-input-1"</span>\n          <span class="hljs-attr">label-cols</span>=<span class="hljs-string">"3"</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">"input1state"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">"Enter your name"</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">"This field is required"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">ref</span>=<span class="hljs-string">"input1"</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-input-1"</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">"input1"</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">"input1state"</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Color"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"popover-input-2"</span>\n          <span class="hljs-attr">label-cols</span>=<span class="hljs-string">"3"</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">"input2state"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">"Pick a color"</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">"This field is required"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">"popover-input-2"</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">"input2"</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">"input2state"</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">"options"</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-alert</span> <span class="hljs-attr">show</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"small"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Current Values:<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n          Name: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input1 }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n          Color: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{ input2 }}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-alert</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onClose"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span>&gt;</span>Cancel<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"onOk"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Ok<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-popover</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">input1</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">input1state</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">input2</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">input2state</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">options</span>: [{ <span class="hljs-attr">text</span>: <span class="hljs-string">\'- Choose 1 -\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'\'</span> }, <span class="hljs-string">\'Red\'</span>, <span class="hljs-string">\'Green\'</span>, <span class="hljs-string">\'Blue\'</span>],\n        <span class="hljs-attr">input1Return</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">input2Return</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">popoverShow</span>: <span class="hljs-literal">false</span>\n      }\n    },\n    <span class="hljs-attr">watch</span>: {\n      input1(val) {\n        <span class="hljs-keyword">if</span> (val) {\n          <span class="hljs-keyword">this</span>.input1state = <span class="hljs-literal">true</span>\n        }\n      },\n      input2(val) {\n        <span class="hljs-keyword">if</span> (val) {\n          <span class="hljs-keyword">this</span>.input2state = <span class="hljs-literal">true</span>\n        }\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      onClose() {\n        <span class="hljs-keyword">this</span>.popoverShow = <span class="hljs-literal">false</span>\n      },\n      onOk() {\n        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.input1) {\n          <span class="hljs-keyword">this</span>.input1state = <span class="hljs-literal">false</span>\n        }\n        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.input2) {\n          <span class="hljs-keyword">this</span>.input2state = <span class="hljs-literal">false</span>\n        }\n        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.input1 &amp;&amp; <span class="hljs-keyword">this</span>.input2) {\n          <span class="hljs-keyword">this</span>.onClose()\n          <span class="hljs-comment">// Return our popover form results</span>\n          <span class="hljs-keyword">this</span>.input1Return = <span class="hljs-keyword">this</span>.input1\n          <span class="hljs-keyword">this</span>.input2Return = <span class="hljs-keyword">this</span>.input2\n        }\n      },\n      onShow() {\n        <span class="hljs-comment">// This is called just before the popover is shown</span>\n        <span class="hljs-comment">// Reset our popover form variables</span>\n        <span class="hljs-keyword">this</span>.input1 = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.input2 = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.input1state = <span class="hljs-literal">null</span>\n        <span class="hljs-keyword">this</span>.input2state = <span class="hljs-literal">null</span>\n        <span class="hljs-keyword">this</span>.input1Return = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.input2Return = <span class="hljs-string">\'\'</span>\n      },\n      onShown() {\n        <span class="hljs-comment">// Called just after the popover has been shown</span>\n        <span class="hljs-comment">// Transfer focus to the first input</span>\n        <span class="hljs-keyword">this</span>.focusRef(<span class="hljs-keyword">this</span>.$refs.input1)\n      },\n      onHidden() {\n        <span class="hljs-comment">// Called just after the popover has finished hiding</span>\n        <span class="hljs-comment">// Bring focus back to the button</span>\n        <span class="hljs-keyword">this</span>.focusRef(<span class="hljs-keyword">this</span>.$refs.button)\n      },\n      focusRef(ref) {\n        <span class="hljs-comment">// Some references may be a component, functional component, or plain element</span>\n        <span class="hljs-comment">// This handles that check before focusing, assuming a `focus()` method exists</span>\n        <span class="hljs-comment">// We do this in a double `$nextTick()` to ensure components have</span>\n        <span class="hljs-comment">// updated &amp; popover positioned first</span>\n        <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n            ;(ref.$el || ref).focus()\n          })\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-popover-advanced.vue --&gt;</span></pre><h2 id="global-root-instance-events" class="bv-no-focus-ring"><span class="bd-content-title">&#39;Global&#39; $root instance events<a class="anchorjs-link" href="#global-root-instance-events" aria-labelledby="global-root-instance-events"></a></span></h2>\n<p>Using <code translate="no" class="notranslate text-nowrap">$root</code> instance it is possible to emit and listen events somewhere out of a component, where\n<code translate="no" class="notranslate text-nowrap">&lt;b-collapse&gt;</code> is used. In short, <code translate="no" class="notranslate text-nowrap">$root</code> behaves like a global event emitters and listener. Details\nabout <code translate="no" class="notranslate text-nowrap">$root</code> instance can be found in\n<a href="https://vuejs.org/v2/guide/components-edge-cases.html#Accessing-the-Root-Instance" target="_blank" rel="noopener">the official Vue docs</a>.</p>\n<h3 id="hiding-and-showing-popovers-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Hiding and showing popovers via $root events<a class="anchorjs-link" href="#hiding-and-showing-popovers-via-root-events" aria-labelledby="hiding-and-showing-popovers-via-root-events"></a></span></h3>\n<p>You can close (hide) <strong>all open popovers</strong> by emitting the <code translate="no" class="notranslate text-nowrap">bv::hide::popover</code> event on $root:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::hide::popover\'</span>)</pre><p>To close a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover (if one\nwas provided via the <code translate="no" class="notranslate text-nowrap">id</code> prop), as the first argument:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::hide::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To open (show) a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover\n(if one was provided via the <code translate="no" class="notranslate text-nowrap">id</code> prop), as the first argument when emitting the <code translate="no" class="notranslate text-nowrap">bv::show::popover</code>\nevent:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::show::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To open all popovers simultaneously, omit the <code translate="no" class="notranslate text-nowrap">id</code> argument when emitting the <code translate="no" class="notranslate text-nowrap">bv::show::popover</code>\nevent.</p>\n<p>These events work for both the component <strong>and</strong> directive versions of popover.</p>\n<p><strong>Note:</strong> <em>The <strong>trigger element</strong> must exist in the DOM and be in a visible state in order for the\npopover to instantiate and show.</em></p>\n<h3 id="disabling-and-enabling-popovers-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Disabling and enabling popovers via $root events<a class="anchorjs-link" href="#disabling-and-enabling-popovers-via-root-events" aria-labelledby="disabling-and-enabling-popovers-via-root-events"></a></span></h3>\n<p>You can disable <strong>all</strong> popovers by emitting the <code translate="no" class="notranslate text-nowrap">bv::disable::popover</code> event on $root:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::disable::popover\'</span>)</pre><p>To disable a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover (if\none was provided via the <code translate="no" class="notranslate text-nowrap">id</code> prop), as the first argument:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::disable::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To enable a <strong>specific popover</strong>, pass the trigger element&#39;s <code translate="no" class="notranslate text-nowrap">id</code>, or the <code translate="no" class="notranslate text-nowrap">id</code> of the popover (if\none was provided via the <code translate="no" class="notranslate text-nowrap">id</code> prop), as the first argument when emitting the <code translate="no" class="notranslate text-nowrap">bv::enable::popover</code>\nevent:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::enable::popover\'</span>, <span class="hljs-string">\'my-trigger-button-id\'</span>)</pre><p>To enable all popovers simultaneously, omit the <code translate="no" class="notranslate text-nowrap">id</code> argument when emitting the\n<code translate="no" class="notranslate text-nowrap">bv::enable::popover</code> event.</p>\n<p>These events work for both the component and directive versions of popover.</p>\n<p><strong>Note:</strong> <em>The <strong>trigger element</strong> must exist in the DOM in order for the popover to be enabled or\ndisabled.</em></p>\n<h3 id="listening-to-popover-changes-via-root-events" class="bv-no-focus-ring"><span class="bd-content-title">Listening to popover changes via $root events<a class="anchorjs-link" href="#listening-to-popover-changes-via-root-events" aria-labelledby="listening-to-popover-changes-via-root-events"></a></span></h3>\n<p>To listen to any popover opening, use:</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  mounted() {\n    <span class="hljs-keyword">this</span>.$root.$on(<span class="hljs-string">\'bv::popover::show\'</span>, bvEventObj =&gt; {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'bvEventObj:\'</span>, bvEventObj)\n    })\n  }\n}</pre><p>Refer to the <a href="/docs/components/popover#component-reference" class="font-weight-bold">Events</a> section of documentation for the\nfull list of events.</p>\n<h2 id="accessibility" class="bv-no-focus-ring"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-labelledby="accessibility"></a></span></h2>\n<p>Popovers, in their current implementation, are not overly accessible when used as interactive\ncomponents. Content may not be actively read to screen reader users, and the popover markup might\nnot be located close to the trigger element in the DOM (as popovers usually get appended to the end\nof <code translate="no" class="notranslate text-nowrap">&lt;body&gt;</code>).</p>\n<p>When using popovers as interactive component, you should transfer focus into the popover if\npossible. When the popover is closed, you should return focus back to your triggering element\n(assuming <code translate="no" class="notranslate text-nowrap">focus</code> is not used as a trigger method), as we have done in the above example.</p>\n<p>You may also want to implement focus containment in the popover content while the user is\ninteracting with it (keeping focus inside the popover until it is closed by the user).</p>\n<h3 id="making-popovers-work-for-keyboard-and-assistive-technology-users" class="bv-no-focus-ring"><span class="bd-content-title">Making popovers work for keyboard and assistive technology users<a class="anchorjs-link" href="#making-popovers-work-for-keyboard-and-assistive-technology-users" aria-labelledby="making-popovers-work-for-keyboard-and-assistive-technology-users"></a></span></h3>\n<p>To allow keyboard users to activate your popovers, you should only add them to HTML elements that\nare traditionally keyboard-focusable and interactive (such as links or form controls). Although\narbitrary HTML elements (such as <code translate="no" class="notranslate text-nowrap">&lt;span&gt;</code>s) can be made focusable by adding the <code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code>\nattribute, this will add potentially annoying and confusing tab stops on non-interactive elements\nfor keyboard users, and most assistive technologies currently do not announce the popover&#39;s content\nin this situation. Additionally, do not rely solely on <code translate="no" class="notranslate text-nowrap">hover</code> as the trigger for your popovers, as\nthis will make them impossible to trigger for keyboard users.</p>\n<p>While you can insert rich, structured HTML and/or components in popovers via slots, we strongly\nrecommend that you avoid adding an excessive amount of content. The way popovers currently work is\nthat, once displayed, their content is tied to the trigger element with the <code translate="no" class="notranslate text-nowrap">aria-describedby</code>\nattribute. As a result, the entirety of the popover&#39;s content will be announced (read) to assistive\ntechnology users as one long, uninterrupted stream.</p>\n<p>Additionally, while it is possible to also include interactive controls (such as form elements or\nlinks) in your popover, be aware that currently the popover does not manage keyboard focus order.\nWhen a keyboard user opens a popover, focus remains on the triggering element, and as the popover\nusually does not immediately follow the trigger in the document&#39;s structure, there is no guarantee\nthat moving forward/pressing <kbd class="notranslate" translate="no">TAB</kbd> will move a keyboard user into the popover itself. In\nshort, simply adding interactive controls to a popover is likely to make these controls\nunreachable/unusable for keyboard users and users of assistive technologies, or at the very least\nmake for an illogical overall focus order. <strong>In these cases, consider using a <code translate="no" class="notranslate text-nowrap">&lt;b-modal&gt;</code> dialog\ninstead</strong>.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);