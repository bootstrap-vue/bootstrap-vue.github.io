(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{311:function(n,t){n.exports='<h1 id="tables"><span class="bd-content-title">Tables</span></h1>\n<p class="bd-lead">For displaying tabular data, <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> supports pagination, filtering, sorting, custom\nrendering, various style options, events, and asynchronous data. For simple display of tabular\ndata without all the fancy features, BootstrapVue provides lightweight alternative components\n<a href="#light-weight-tables" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code></a> and <a href="#simple-tables" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code></a>.</p>\n<p><strong>Example: Basic usage</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table.vue --&gt;</span></pre><h2 id="items-record-data"><span class="bd-content-title">Items (record data)<a class="anchorjs-link" href="#items-record-data" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">items</code> is the table data in array format, where each record (row) data are keyed objects. Example\nformat:</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> items = [\n  { <span class="hljs-attr">age</span>: <span class="hljs-number">32</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Cyndi\'</span> },\n  { <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Havij\'</span> },\n  { <span class="hljs-attr">age</span>: <span class="hljs-number">42</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Robert\'</span> }\n]</pre><p><code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> automatically samples the first row to extract field names (the keys in the record\ndata). Field names are automatically &quot;humanized&quot; by converting <code translate="no" class="notranslate text-nowrap">kebab-case</code>, <code translate="no" class="notranslate text-nowrap">snake_case</code>, and\n<code translate="no" class="notranslate text-nowrap">camelCase</code> to individual words and capitalizes each word. Example conversions:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">first_name</code> becomes <code translate="no" class="notranslate text-nowrap">First Name</code></li>\n<li><code translate="no" class="notranslate text-nowrap">last-name</code> becomes <code translate="no" class="notranslate text-nowrap">Last Name</code></li>\n<li><code translate="no" class="notranslate text-nowrap">age</code> becomes <code translate="no" class="notranslate text-nowrap">Age</code></li>\n<li><code translate="no" class="notranslate text-nowrap">YEAR</code> remains <code translate="no" class="notranslate text-nowrap">YEAR</code></li>\n<li><code translate="no" class="notranslate text-nowrap">isActive</code> becomes <code translate="no" class="notranslate text-nowrap">Is Active</code></li>\n</ul>\n<p>These titles will be displayed in the table header, in the order they appear in the <strong>first</strong> record\nof data. See the <a href="#fields-column-definitions" class="font-weight-bold">Fields</a> section below for customizing how field\nheadings appear.</p>\n<p><strong>Note:</strong> Field order is not guaranteed. Fields will typically appear in the order they were defined\nin the first row, but this may not always be the case depending on the version of browser in use.\nSee section <a href="#fields-column-definitions" class="font-weight-bold">Fields (column definitions)</a> below to see how to guarantee\nthe order of fields, and to override the headings generated.</p>\n<p>Record data may also have additional special reserved name keys for colorizing rows and individual\ncells (variants), and for triggering additional row detail. The supported optional item record\nmodifier properties (make sure your field keys do not conflict with these names):</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">_cellVariants</code></td>\n<td>Object</td>\n<td>Bootstrap contextual state applied to individual cells. Keyed by field (See the <a href="/docs/reference/color-variants" class="font-weight-bold">Color Variants</a> for supported values). These variants map to classes <code translate="no" class="notranslate text-nowrap">table-${variant}</code> or <code translate="no" class="notranslate text-nowrap">bg-${variant}</code> (when the <code translate="no" class="notranslate text-nowrap">dark</code> prop is set).</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">_rowVariant</code></td>\n<td>String</td>\n<td>Bootstrap contextual state applied to the entire row (See the <a href="/docs/reference/color-variants" class="font-weight-bold">Color Variants</a> for supported values). These variants map to classes <code translate="no" class="notranslate text-nowrap">table-${variant}</code> or <code translate="no" class="notranslate text-nowrap">bg-${variant}</code> (when the <code translate="no" class="notranslate text-nowrap">dark</code> prop is set)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">_showDetails</code></td>\n<td>Boolean</td>\n<td>Used to trigger the display of the <code translate="no" class="notranslate text-nowrap">row-details</code> scoped slot. See section <a href="#row-details-support" class="font-weight-bold">Row details support</a> below for additional information</td>\n</tr>\n</tbody></table>\n</div><p><strong>Example: Using variants for table cells</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span>,\n            <span class="hljs-attr">_rowVariant</span>: <span class="hljs-string">\'danger\'</span>\n          },\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Thor\'</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'MacDonald\'</span>,\n            <span class="hljs-attr">_cellVariants</span>: { <span class="hljs-attr">age</span>: <span class="hljs-string">\'info\'</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'warning\'</span> }\n          },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dick\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Dunlap\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-variants.vue --&gt;</span></pre><p><code translate="no" class="notranslate text-nowrap">items</code> can also be a reference to a <em>provider</em> function, which returns an <code translate="no" class="notranslate text-nowrap">Array</code> of items data.\nProvider functions can also be asynchronous:</p>\n<ul>\n<li>By returning <code translate="no" class="notranslate text-nowrap">null</code> (or <code translate="no" class="notranslate text-nowrap">undefined</code>) and calling a callback, when the data is ready, with the data\narray as the only argument to the callback,</li>\n<li>By returning a <code translate="no" class="notranslate text-nowrap">Promise</code> that resolves to an array.</li>\n</ul>\n<p>See the <a href="#using-items-provider-functions" class="font-weight-bold">&quot;Using Items Provider functions&quot;</a> section below for more\ndetails.</p>\n<h3 id="table-item-notes-and-warnings"><span class="bd-content-title">Table item notes and warnings<a class="anchorjs-link" href="#table-item-notes-and-warnings" aria-label="Anchor"></a></span></h3>\n<ul>\n<li>Avoid manipulating record data in place, as changes to the underlying items data will cause either\nthe row or entire table to be re-rendered. See <a href="#primary-key" class="font-weight-bold">Primary Key</a>, below, for ways to\nminimize Vue&#39;s re-rendering of rows.</li>\n<li><code translate="no" class="notranslate text-nowrap">items</code> array records should be a simple object and <strong>must</strong> avoid placing data that may have\ncircular references in the values within a row. <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> serializes the row data into strings\nfor sorting and filtering, and circular references will cause stack overflows to occur and your\napp to crash!</li>\n</ul>\n<h2 id="fields-column-definitions"><span class="bd-content-title">Fields (column definitions)<a class="anchorjs-link" href="#fields-column-definitions" aria-label="Anchor"></a></span></h2>\n<p>The <code translate="no" class="notranslate text-nowrap">fields</code> prop is used to customize the table columns headings, and in which order the columns of\ndata are displayed. The field object keys (i.e. <code translate="no" class="notranslate text-nowrap">age</code> or <code translate="no" class="notranslate text-nowrap">first_name</code> as shown below) are used to\nextract the value from each item (record) row, and to provide additional features such as enabling\n<a href="#sorting" class="font-weight-bold">sorting</a> on the column, etc.</p>\n<p>Fields can be provided as a <em>simple array</em>, an <em>array of objects</em>, or an <em>object</em>. <strong>Internally the\nfields data will be normalized into the <em>array of objects</em> format</strong>. Events or slots that include\nthe column <code translate="no" class="notranslate text-nowrap">field</code> data will be in the normalized field object format (array of objects for\n<code translate="no" class="notranslate text-nowrap">fields</code>, or an object for an individual <code translate="no" class="notranslate text-nowrap">field</code>).</p>\n<h3 id="fields-as-a-simple-array"><span class="bd-content-title">Fields as a simple array<a class="anchorjs-link" href="#fields-as-a-simple-array" aria-label="Anchor"></a></span></h3>\n<p>Fields can be a simple array, for defining the order of the columns, and which columns to display.\n<strong>(field order is guaranteed)</strong>:</p>\n<p><strong>Example: Using <code translate="no" class="notranslate text-nowrap">array</code> fields definition</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-comment">// Note `isActive` is left out and will not appear in the rendered table</span>\n        fields: [<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>, <span class="hljs-string">\'age\'</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-fields-array.vue --&gt;</span></pre><h3 id="fields-as-an-array-of-objects"><span class="bd-content-title">Fields as an array of objects<a class="anchorjs-link" href="#fields-as-an-array-of-objects" aria-label="Anchor"></a></span></h3>\n<p>Fields can be a an array of objects, providing additional control over the fields (such as sorting,\nformatting, etc). Only columns (keys) that appear in the fields array will be shown <strong>(field order\nis guaranteed)</strong>:</p>\n<p><strong>Example: Using array of objects fields definition</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-comment">// Note \'isActive\' is left out and will not appear in the rendered table</span>\n        fields: [\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">\'last_name\'</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>\n          },\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">\'first_name\'</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">false</span>\n          },\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">\'age\'</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'Person age\'</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-comment">// Variant applies to the whole column, including the header and footer</span>\n            variant: <span class="hljs-string">\'danger\'</span>\n          }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-fields-array-of-objects.vue --&gt;</span></pre><h3 id="fields-as-an-object"><span class="bd-content-title">Fields as an object<a class="anchorjs-link" href="#fields-as-an-object" aria-label="Anchor"></a></span></h3>\n<p>Also, fields can be a an object providing similar control over the fields as the <em>array of objects</em>\nabove does. Only columns listed in the fields object will be shown. The order of the fields will\ntypically be in the order they were defined in the object, although <strong>field order is not guaranteed\n(this may cause issues with Server Side Rendering and client rehydration)</strong>.</p>\n<p><strong>Example: Using object fields definition</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">small</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-comment">// Note \'age\' is left out and will not appear in the rendered table</span>\n        fields: {\n          <span class="hljs-attr">last_name</span>: {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'Person last name\'</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>\n          },\n          <span class="hljs-attr">first_name</span>: {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'Person first name\'</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">false</span>\n          },\n          <span class="hljs-attr">city</span>: {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">\'address.city\'</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'City\'</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>\n          },\n          <span class="hljs-string">\'address.country\'</span>: {\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'Country\'</span>,\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>\n          }\n        },\n        <span class="hljs-attr">items</span>: [\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span>,\n            <span class="hljs-attr">address</span>: { <span class="hljs-attr">country</span>: <span class="hljs-string">\'USA\'</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">\'New York\'</span> }\n          },\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span>,\n            <span class="hljs-attr">address</span>: { <span class="hljs-attr">country</span>: <span class="hljs-string">\'Canada\'</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">\'Toronto\'</span> }\n          },\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span>,\n            <span class="hljs-attr">address</span>: { <span class="hljs-attr">country</span>: <span class="hljs-string">\'Australia\'</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">\'Sydney\'</span> }\n          },\n          {\n            <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span>,\n            <span class="hljs-attr">address</span>: { <span class="hljs-attr">country</span>: <span class="hljs-string">\'England\'</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">\'London\'</span> }\n          }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-fields-object.vue --&gt;</span></pre><p><strong>Notes:</strong></p>\n<ul>\n<li>if a <code translate="no" class="notranslate text-nowrap">key</code> property is defined in the field definition, it will take precedence over the key used\nto define the field.</li>\n</ul>\n<h3 id="field-definition-reference"><span class="bd-content-title">Field definition reference<a class="anchorjs-link" href="#field-definition-reference" aria-label="Anchor"></a></span></h3>\n<p>The following field properties are recognized:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">key</code></td>\n<td>String</td>\n<td>The key for selecting data from the record in the items array. Required when setting the <code translate="no" class="notranslate text-nowrap">fields</code> via an array of objects.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">label</code></td>\n<td>String</td>\n<td>Appears in the columns table header (and footer if <code translate="no" class="notranslate text-nowrap">foot-clone</code> is set). Defaults to the field&#39;s key (in humanized format) if not provided. It&#39;s possible to use empty labels by assigning an empty string <code translate="no" class="notranslate text-nowrap">&quot;&quot;</code> but be sure you also set <code translate="no" class="notranslate text-nowrap">headerTitle</code> to provide non-sighted users a hint about the column contents.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">headerTitle</code></td>\n<td>String</td>\n<td>Text to place on the fields header <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> attribute <code translate="no" class="notranslate text-nowrap">title</code>. Defaults to no <code translate="no" class="notranslate text-nowrap">title</code> attribute.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">headerAbbr</code></td>\n<td>String</td>\n<td>Text to place on the fields header <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> attribute <code translate="no" class="notranslate text-nowrap">abbr</code>. Set this to the unabbreviated version of the label (or title) if label (or title) is an abbreviation. Defaults to no <code translate="no" class="notranslate text-nowrap">abbr</code> attribute.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">class</code></td>\n<td>String or Array</td>\n<td>Class name (or array of class names) to add to <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> <strong>and</strong> <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code> in the column.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">formatter</code></td>\n<td>String or Function</td>\n<td>A formatter callback function or name of a method in your component, can be used instead of (or in conjunction with) scoped field slots. Refer to <a href="#custom-data-rendering" class="font-weight-bold">Custom Data Rendering</a> for more details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">sortable</code></td>\n<td>Boolean</td>\n<td>Enable sorting on this column. Refer to the <a href="#sorting" class="font-weight-bold">Sorting</a> Section for more details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">sortDirection</code></td>\n<td>String</td>\n<td>Set the initial sort direction on this column when it becomes sorted. Refer to the <a href="#Change-initial-sort-direction" class="font-weight-bold">Change initial sort direction</a> Section for more details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">sortByFormatted</code></td>\n<td>Boolean</td>\n<td><span class="badge badge-info small">NEW in 2.0.0-rc.28</span> Sort the column by the result of the field&#39;s <code translate="no" class="notranslate text-nowrap">formatter</code> callback function. Default is <code translate="no" class="notranslate text-nowrap">false</code>. Has no effect if the field does not have a <code translate="no" class="notranslate text-nowrap">formatter</code>. Refer to the <a href="#sorting" class="font-weight-bold">Sorting</a> Section for more details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">filterByFormatted</code></td>\n<td>Boolean</td>\n<td><span class="badge badge-info small">NEW in 2.0.0-rc.28</span> Filter the column by the result of the field&#39;s <code translate="no" class="notranslate text-nowrap">formatter</code> callback function. Default is <code translate="no" class="notranslate text-nowrap">false</code>. Has no effect if the field does not have a <code translate="no" class="notranslate text-nowrap">formatter</code>. Refer to the <a href="#filtering" class="font-weight-bold">Filtering</a> section for more details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">tdClass</code></td>\n<td>String or Array or Function</td>\n<td>Class name (or array of class names) to add to <code translate="no" class="notranslate text-nowrap">&lt;tbody&gt;</code> data <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code> cells in the column. If custom classes per cell are required, a callback function can be specified instead.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">thClass</code></td>\n<td>String or Array</td>\n<td>Class name (or array of class names) to add to this field&#39;s <code translate="no" class="notranslate text-nowrap">&lt;thead&gt;</code>/<code translate="no" class="notranslate text-nowrap">&lt;tfoot&gt;</code> heading <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> cell.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">thStyle</code></td>\n<td>Object</td>\n<td>JavaScript object representing CSS styles you would like to apply to the table <code translate="no" class="notranslate text-nowrap">&lt;thead&gt;</code>/<code translate="no" class="notranslate text-nowrap">&lt;tfoot&gt;</code> field <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code>.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">variant</code></td>\n<td>String</td>\n<td>Apply contextual class to all the <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> <strong>and</strong> <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code> in the column - <code translate="no" class="notranslate text-nowrap">active</code>, <code translate="no" class="notranslate text-nowrap">success</code>, <code translate="no" class="notranslate text-nowrap">info</code>, <code translate="no" class="notranslate text-nowrap">warning</code>, <code translate="no" class="notranslate text-nowrap">danger</code>. These variants map to classes <code translate="no" class="notranslate text-nowrap">thead-${variant}</code> (in the header), <code translate="no" class="notranslate text-nowrap">table-${variant}</code> (in the body), or <code translate="no" class="notranslate text-nowrap">bg-${variant}</code> (when the prop <code translate="no" class="notranslate text-nowrap">dark</code> is set).</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">tdAttr</code></td>\n<td>Object or Function</td>\n<td>JavaScript object representing additional attributes to apply to the <code translate="no" class="notranslate text-nowrap">&lt;tbody&gt;</code> field <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code> cell. If custom attributes per cell are required, a callback function can be specified instead.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">isRowHeader</code></td>\n<td>Boolean</td>\n<td>When set to <code translate="no" class="notranslate text-nowrap">true</code>, the field&#39;s item data cell will be rendered with <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> rather than the default of <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code>.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">stickyColumn</code></td>\n<td>Boolean</td>\n<td><span class="badge badge-info small">NEW in 2.0.0-rc.28</span> When set to <code translate="no" class="notranslate text-nowrap">true</code>, and the table in in <a href="#responsive-tables" class="font-weight-bold">responsive</a> mode or has <a href="#sticky-headers" class="font-weight-bold">sticky headers</a>, will cause the column to become fixed to the left when the table&#39;s horizontal scrollbar is scrolled. See <a href="#sticky-columns" class="font-weight-bold">Sticky columns</a> for more details</td>\n</tr>\n</tbody></table>\n</div><p><strong>Notes:</strong></p>\n<ul>\n<li>Field properties, if not present, default to <code translate="no" class="notranslate text-nowrap">null</code> (falsey) unless otherwise stated above.</li>\n<li><code translate="no" class="notranslate text-nowrap">class</code>, <code translate="no" class="notranslate text-nowrap">thClass</code>, <code translate="no" class="notranslate text-nowrap">tdClass</code> etc. will not work with classes that are defined in scoped CSS,\nunless you are using VueLoader&#39;s\n<a href="https://vue-loader.vuejs.org/guide/scoped-css.html#child-component-root-elements" target="_blank" rel="noopener">Deep selector</a>.</li>\n<li>For information on the syntax supported by <code translate="no" class="notranslate text-nowrap">thStyle</code>, see\n<a href="https://vuejs.org/v2/guide/class-and-style.html#Binding-Inline-Styles" target="_blank" rel="noopener">Class and Style Bindings</a>\nin the Vue.js guide.</li>\n<li>Any additional properties added to the field objects will be left intact - so you can access them\nvia the named scoped slots for custom data, header, and footer rendering.</li>\n</ul>\n<p>For information and usage about scoped slots and formatters, refer to the\n<a href="#custom-data-rendering" class="font-weight-bold">Custom Data Rendering</a> section below.</p>\n<p>Feel free to mix and match simple array and object array together:</p>\n\x3c!-- eslint-disable no-unused-vars --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">const</span> fields = [\n  { <span class="hljs-attr">key</span>: <span class="hljs-string">\'first_name\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'First\'</span> },\n  { <span class="hljs-attr">key</span>: <span class="hljs-string">\'last_name\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Last\'</span> },\n  <span class="hljs-string">\'age\'</span>,\n  <span class="hljs-string">\'sex\'</span>\n]</pre><h2 id="primary-key"><span class="bd-content-title">Primary key<a class="anchorjs-link" href="#primary-key" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> provides an additional prop <code translate="no" class="notranslate text-nowrap">primary-key</code>, which you can use to identify the <em>name</em> of\nthe field key that <em>uniquely</em> identifies the row.</p>\n<p>The value specified by the primary column key <strong>must be</strong> either a <code translate="no" class="notranslate text-nowrap">string</code> or <code translate="no" class="notranslate text-nowrap">number</code>, and <strong>must\nbe unique</strong> across all rows in the table.</p>\n<p>The primary key column does not need to appear in the displayed fields.</p>\n<h3 id="table-row-id-generation"><span class="bd-content-title">Table row ID generation<a class="anchorjs-link" href="#table-row-id-generation" aria-label="Anchor"></a></span></h3>\n<p>When provided, the <code translate="no" class="notranslate text-nowrap">primary-key</code> will generate a unique ID for each item row <code translate="no" class="notranslate text-nowrap">&lt;tr&gt;</code> element. The ID\nwill be in the format of <code translate="no" class="notranslate text-nowrap">{table-id}__row_{primary-key-value}</code>, where <code translate="no" class="notranslate text-nowrap">{table-id}</code> is the unique ID\nof the <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and <code translate="no" class="notranslate text-nowrap">{primary-key-value}</code> is the value of the item&#39;s field value for the field\nspecified by <code translate="no" class="notranslate text-nowrap">primary-key</code>.</p>\n<h3 id="table-render-and-transition-optimization"><span class="bd-content-title">Table render and transition optimization<a class="anchorjs-link" href="#table-render-and-transition-optimization" aria-label="Anchor"></a></span></h3>\n<p>The <code translate="no" class="notranslate text-nowrap">primary-key</code> is also used by <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> to help Vue optimize the rendering of table rows.\nInternally, the value of the field key specified by the <code translate="no" class="notranslate text-nowrap">primary-key</code> prop is used as the Vue <code translate="no" class="notranslate text-nowrap">:key</code>\nvalue for each rendered item row <code translate="no" class="notranslate text-nowrap">&lt;tr&gt;</code> element.</p>\n<p>If you are seeing rendering issue (i.e. tooltips hiding or unexpected subcomponent re-usage when\nitem data changes or data is sorted/filtered/edited) or table row transitions are not working,\nsetting the <code translate="no" class="notranslate text-nowrap">primary-key</code> prop (if you have a unique identifier per row) can alleviate these issues.</p>\n<p>Specifying the <code translate="no" class="notranslate text-nowrap">primary-key</code> column is handy if you are using 3rd party table transitions or drag\nand drop plugins, as they rely on having a consistent and unique per row <code translate="no" class="notranslate text-nowrap">:key</code> value.</p>\n<p>If <code translate="no" class="notranslate text-nowrap">primary-key</code> is not provided, <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> will auto-generate keys based on the displayed row&#39;s\nindex number (i.e. position in the <em>displayed</em> table rows). This may cause GUI issues such as sub\ncomponents/elements that are rendering with previous results (i.e. being re-used by Vue&#39;s render\npatch optimization routines). Specifying a <code translate="no" class="notranslate text-nowrap">primary-key</code> column can alleviate this issue (or you can\nplace a unique <code translate="no" class="notranslate text-nowrap">:key</code> on your element/components in your custom formatted field slots).</p>\n<p>Refer to the <a href="#table-body-transition-support" class="font-weight-bold">Table body transition support</a> section for additional\ndetails.</p>\n<h2 id="table-style-options"><span class="bd-content-title">Table style options<a class="anchorjs-link" href="#table-style-options" aria-label="Anchor"></a></span></h2>\n<h3 id="table-styling"><span class="bd-content-title">Table styling<a class="anchorjs-link" href="#table-styling" aria-label="Anchor"></a></span></h3>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> provides several props to alter the style of the table:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">striped</code></td>\n<td>Boolean</td>\n<td>Add zebra-striping to the table rows within the <code translate="no" class="notranslate text-nowrap">&lt;tbody&gt;</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">bordered</code></td>\n<td>Boolean</td>\n<td>For borders on all sides of the table and cells.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">borderless</code></td>\n<td>Boolean</td>\n<td>removes inner borders from table.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">outlined</code></td>\n<td>Boolean</td>\n<td>For a thin border on all sides of the table. Has no effect if <code translate="no" class="notranslate text-nowrap">bordered</code> is set.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">small</code></td>\n<td>Boolean</td>\n<td>To make tables more compact by cutting cell padding in half.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">hover</code></td>\n<td>Boolean</td>\n<td>To enable a hover highlighting state on table rows within a <code translate="no" class="notranslate text-nowrap">&lt;tbody&gt;</code></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">dark</code></td>\n<td>Boolean</td>\n<td>Invert the colors — with light text on dark backgrounds (equivalent to Bootstrap v4 class <code translate="no" class="notranslate text-nowrap">.table-dark</code>)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">fixed</code></td>\n<td>Boolean</td>\n<td>Generate a table with equal fixed-width columns (<code translate="no" class="notranslate text-nowrap">table-layout: fixed;</code>)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">responsive</code></td>\n<td>Boolean or String</td>\n<td>Generate a responsive table to make it scroll horizontally. Set to <code translate="no" class="notranslate text-nowrap">true</code> for an always responsive table, or set it to one of the breakpoints <code translate="no" class="notranslate text-nowrap">&#39;sm&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;md&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;lg&#39;</code>, or <code translate="no" class="notranslate text-nowrap">&#39;xl&#39;</code> to make the table responsive (horizontally scroll) only on screens smaller than the breakpoint. See <a href="#responsive-tables" class="font-weight-bold">Responsive tables</a> below for details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">sticky-header</code></td>\n<td>Boolean or String</td>\n<td><span class="badge badge-info small">NEW in 2.0.0-rc.28</span> Generates a vertically scrollable table with sticky headers. Set to <code translate="no" class="notranslate text-nowrap">true</code> to enable sticky headers (default table max-height of <code translate="no" class="notranslate text-nowrap">300px</code>), or set it to a string containing a height (with CSS units) to specify a maximum height other than <code translate="no" class="notranslate text-nowrap">300px</code>. See the <a href="#sticky-headers" class="font-weight-bold">Sticky header</a> section below for details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">stacked</code></td>\n<td>Boolean or String</td>\n<td>Generate a responsive stacked table. Set to <code translate="no" class="notranslate text-nowrap">true</code> for an always stacked table, or set it to one of the breakpoints <code translate="no" class="notranslate text-nowrap">&#39;sm&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;md&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;lg&#39;</code>, or <code translate="no" class="notranslate text-nowrap">&#39;xl&#39;</code> to make the table visually stacked only on screens smaller than the breakpoint. See <a href="#stacked-tables" class="font-weight-bold">Stacked tables</a> below for details.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">caption-top</code></td>\n<td>Boolean</td>\n<td>If the table has a caption, and this prop is set to <code translate="no" class="notranslate text-nowrap">true</code>, the caption will be visually placed above the table. If <code translate="no" class="notranslate text-nowrap">false</code> (the default), the caption will be visually placed below the table.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">table-variant</code></td>\n<td>String</td>\n<td><span class="badge badge-info small">NEW in 2.0.0-rc.28</span> Give the table an overall theme color variant.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">head-variant</code></td>\n<td>String</td>\n<td>Use <code translate="no" class="notranslate text-nowrap">&#39;light&#39;</code> or <code translate="no" class="notranslate text-nowrap">&#39;dark&#39;</code> to make table header appear light or dark gray, respectively</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">foot-variant</code></td>\n<td>String</td>\n<td>Use <code translate="no" class="notranslate text-nowrap">&#39;light&#39;</code> or <code translate="no" class="notranslate text-nowrap">&#39;dark&#39;</code> to make table footer appear light or dark gray, respectively. If not set, <code translate="no" class="notranslate text-nowrap">head-variant</code> will be used. Has no effect if <code translate="no" class="notranslate text-nowrap">foot-clone</code> is not set</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">foot-clone</code></td>\n<td>Boolean</td>\n<td>Turns on the table footer, and defaults with the same contents a the table header</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">no-footer-sorting</code></td>\n<td>Boolean</td>\n<td>When <code translate="no" class="notranslate text-nowrap">foot-clone</code> is true and the table is sortable, disables the sorting icons and click behaviour on the footer heading cells. Refer to the <a href="#sorting" class="font-weight-bold">Sorting</a> section below for more details.</td>\n</tr>\n</tbody></table>\n</div><p><strong>Note:</strong> table style options <code translate="no" class="notranslate text-nowrap">fixed</code>, <code translate="no" class="notranslate text-nowrap">stacked</code>, and <code translate="no" class="notranslate text-nowrap">caption-top</code>, and the table sorting feature,\nrequires BootstrapVue&#39;s custom CSS.</p>\n<p><strong>Example: Basic table styles</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Table Options"</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"striped"</span> <span class="hljs-attr">inline</span>&gt;</span>Striped<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"bordered"</span> <span class="hljs-attr">inline</span>&gt;</span>Bordered<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"borderless"</span> <span class="hljs-attr">inline</span>&gt;</span>Borderless<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"outlined"</span> <span class="hljs-attr">inline</span>&gt;</span>Outlined<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">inline</span>&gt;</span>Small<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"hover"</span> <span class="hljs-attr">inline</span>&gt;</span>Hover<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"dark"</span> <span class="hljs-attr">inline</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"fixed"</span> <span class="hljs-attr">inline</span>&gt;</span>Fixed<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"footClone"</span> <span class="hljs-attr">inline</span>&gt;</span>Foot Clone<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Head Variant"</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"headVariant"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-lg-2"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"null"</span> <span class="hljs-attr">inline</span>&gt;</span>None<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"light"</span> <span class="hljs-attr">inline</span>&gt;</span>Light<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-radio</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"dark"</span> <span class="hljs-attr">inline</span>&gt;</span>Dark<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-radio-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Table Variant"</span> <span class="hljs-attr">label-for</span>=<span class="hljs-string">"table-style-variant"</span> <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"2"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">"tableVariant"</span>\n        <span class="hljs-attr">:options</span>=<span class="hljs-string">"tableVariants"</span>\n        <span class="hljs-attr">id</span>=<span class="hljs-string">"table-style-variant"</span>\n      &gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"first"</span>&gt;</span>-- None --<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:striped</span>=<span class="hljs-string">"striped"</span>\n      <span class="hljs-attr">:bordered</span>=<span class="hljs-string">"bordered"</span>\n      <span class="hljs-attr">:borderless</span>=<span class="hljs-string">"borderless"</span>\n      <span class="hljs-attr">:outlined</span>=<span class="hljs-string">"outlined"</span>\n      <span class="hljs-attr">:small</span>=<span class="hljs-string">"small"</span>\n      <span class="hljs-attr">:hover</span>=<span class="hljs-string">"hover"</span>\n      <span class="hljs-attr">:dark</span>=<span class="hljs-string">"dark"</span>\n      <span class="hljs-attr">:fixed</span>=<span class="hljs-string">"fixed"</span>\n      <span class="hljs-attr">:foot-clone</span>=<span class="hljs-string">"footClone"</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>\n      <span class="hljs-attr">:head-variant</span>=<span class="hljs-string">"headVariant"</span>\n      <span class="hljs-attr">:table-variant</span>=<span class="hljs-string">"tableVariant"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>, <span class="hljs-string">\'age\'</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> }\n        ],\n        <span class="hljs-attr">tableVariants</span>: [\n          <span class="hljs-string">\'primary\'</span>,\n          <span class="hljs-string">\'secondary\'</span>,\n          <span class="hljs-string">\'info\'</span>,\n          <span class="hljs-string">\'danger\'</span>,\n          <span class="hljs-string">\'warning\'</span>,\n          <span class="hljs-string">\'success\'</span>,\n          <span class="hljs-string">\'light\'</span>,\n          <span class="hljs-string">\'dark\'</span>\n        ],\n        <span class="hljs-attr">striped</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">bordered</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">borderless</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">outlined</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">small</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">hover</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">dark</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">fixed</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">footClone</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">headVariant</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">tableVariant</span>: <span class="hljs-string">\'\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-bordered.vue --&gt;</span></pre><h3 id="row-styling"><span class="bd-content-title">Row styling<a class="anchorjs-link" href="#row-styling" aria-label="Anchor"></a></span></h3>\n<p>You can also style every row using the <code translate="no" class="notranslate text-nowrap">tbody-tr-class</code> prop</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">tbodyTrClass</code></td>\n<td>String, Array or Function</td>\n<td>Classes to be applied to every row on the table. If a function is given, it will be called as <code translate="no" class="notranslate text-nowrap">tbodyTrClass( item, type )</code> and it may return an <code translate="no" class="notranslate text-nowrap">Array</code>, <code translate="no" class="notranslate text-nowrap">Object</code> or <code translate="no" class="notranslate text-nowrap">String</code>.</td>\n</tr>\n</tbody></table>\n</div><p><strong>Example: Basic row styles</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">:tbody-tr-class</span>=<span class="hljs-string">"rowClass"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>, <span class="hljs-string">\'age\'</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">\'awesome\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      rowClass(item, type) {\n        <span class="hljs-keyword">if</span> (!item) <span class="hljs-keyword">return</span>\n        <span class="hljs-keyword">if</span> (item.status === <span class="hljs-string">\'awesome\'</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'table-success\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-styled-row.vue --&gt;</span></pre><h3 id="responsive-tables"><span class="bd-content-title">Responsive tables<a class="anchorjs-link" href="#responsive-tables" aria-label="Anchor"></a></span></h3>\n<p>Responsive tables allow tables to be scrolled horizontally with ease. Make any table responsive\nacross all viewports by setting the prop <code translate="no" class="notranslate text-nowrap">responsive</code> to <code translate="no" class="notranslate text-nowrap">true</code>. Or, pick a maximum breakpoint with\nwhich to have a responsive table up to by setting the prop <code translate="no" class="notranslate text-nowrap">responsive</code> to one of the breakpoint\nvalues: <code translate="no" class="notranslate text-nowrap">sm</code>, <code translate="no" class="notranslate text-nowrap">md</code>, <code translate="no" class="notranslate text-nowrap">lg</code>, or <code translate="no" class="notranslate text-nowrap">xl</code>.</p>\n<p><strong>Example: Always responsive table</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">responsive</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- We are using utility class `text-nowrap` to help illustrate horizontal scrolling --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"HEAD[]"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-nowrap"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span>{{ scope.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[]"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-nowrap"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span>{{ scope.value }}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          {\n            <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 4\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 5\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 6\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 7\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 8\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 9\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 10\'</span>: <span class="hljs-string">\'table cell\'</span>\n          },\n          {\n            <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 4\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 5\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 6\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 7\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 8\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 9\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 10\'</span>: <span class="hljs-string">\'table cell\'</span>\n          },\n          {\n            <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 4\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 5\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 6\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 7\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 8\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 9\'</span>: <span class="hljs-string">\'table cell\'</span>,\n            <span class="hljs-string">\'heading 10\'</span>: <span class="hljs-string">\'table cell\'</span>\n          }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-responsive.vue --&gt;</span></pre><p><strong>Responsive table notes:</strong></p>\n<ul>\n<li><em>Possible vertical clipping/truncation</em>. Responsive tables make use of <code translate="no" class="notranslate text-nowrap">overflow-y: hidden</code>, which\nclips off any content that goes beyond the bottom or top edges of the table. In particular, this\nmay clip off dropdown menus and other third-party widgets.</li>\n</ul>\n<h3 id="stacked-tables"><span class="bd-content-title">Stacked tables<a class="anchorjs-link" href="#stacked-tables" aria-label="Anchor"></a></span></h3>\n<p>An alternative to responsive tables, BootstrapVue includes the stacked table option (using custom\nSCSS/CSS), which allow tables to be rendered in a visually stacked format. Make any table stacked\nacross <em>all viewports</em> by setting the prop <code translate="no" class="notranslate text-nowrap">stacked</code> to <code translate="no" class="notranslate text-nowrap">true</code>. Or, alternatively, set a breakpoint\nat which the table will return to normal table format by setting the prop <code translate="no" class="notranslate text-nowrap">stacked</code> to one of the\nbreakpoint values <code translate="no" class="notranslate text-nowrap">&#39;sm&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;md&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;lg&#39;</code>, or <code translate="no" class="notranslate text-nowrap">&#39;xl&#39;</code>.</p>\n<p>Column header labels will be rendered to the left of each field value using a CSS <code translate="no" class="notranslate text-nowrap">::before</code> pseudo\nelement, with a width of 40%.</p>\n<p>The prop <code translate="no" class="notranslate text-nowrap">stacked</code> takes precedence over the <code translate="no" class="notranslate text-nowrap">responsive</code> prop, <a href="#sticky-headers" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">sticky-header</code></a>\nprops, and the <a href="#sticky-columns" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">stickyColumn</code></a> field definition property.</p>\n<p><strong>Example: Always stacked table</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">stacked</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-stacked.vue --&gt;</span></pre><p><strong>Note: When the table is visually stacked:</strong></p>\n<ul>\n<li>The table header (and table footer) will be hidden.</li>\n<li>Custom rendered header slots will not be shown, rather, the fields&#39; <code translate="no" class="notranslate text-nowrap">label</code> will be used.</li>\n<li>The table <strong>cannot</strong> be sorted by clicking the rendered field labels. You will need to provide an\nexternal control to select the field to sort by and the sort direction. See the\n<a href="#sorting" class="font-weight-bold">Sorting</a> section below for sorting control information, as well as the\n<a href="#complete-example" class="font-weight-bold">complete example</a> at the bottom of this page for an example of controlling\nsorting via the use of form controls.</li>\n<li>The slots <code translate="no" class="notranslate text-nowrap">top-row</code> and <code translate="no" class="notranslate text-nowrap">bottom-row</code> will be hidden when visually stacked.</li>\n<li>The table caption, if provided, will always appear at the top of the table when visually stacked.</li>\n<li>In an always stacked table, the table header and footer, and the fixed top and bottom row slots\nwill not be rendered.</li>\n</ul>\n<p>BootstrapVue&#39;s custom CSS is required in order to support stacked tables.</p>\n<h3 id="table-caption"><span class="bd-content-title">Table caption<a class="anchorjs-link" href="#table-caption" aria-label="Anchor"></a></span></h3>\n<p>Add an optional caption to your table via the prop <code translate="no" class="notranslate text-nowrap">caption</code> or the named slot <code translate="no" class="notranslate text-nowrap">table-caption</code> (the\nslot takes precedence over the prop). The default Bootstrap v4 styling places the caption at the\nbottom of the table:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"table-caption"</span>&gt;</span>This is a table caption.<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>, <span class="hljs-string">\'age\'</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-caption.vue --&gt;</span></pre><p>You can have the caption placed at the top of the table by setting the <code translate="no" class="notranslate text-nowrap">caption-top</code> prop to <code translate="no" class="notranslate text-nowrap">true</code>:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">caption-top</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"table-caption"</span>&gt;</span>This is a table caption at the top.<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>, <span class="hljs-string">\'age\'</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-caption-top.vue --&gt;</span></pre><p>You can also use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/caption-side" target="_blank" rel="noopener">custom CSS</a> to\ncontrol the caption positioning.</p>\n<h3 id="table-colgroup"><span class="bd-content-title">Table colgroup<a class="anchorjs-link" href="#table-colgroup" aria-label="Anchor"></a></span></h3>\n<p>Use the named slot <code translate="no" class="notranslate text-nowrap">table-colgroup</code> to specify <code translate="no" class="notranslate text-nowrap">&lt;colgroup&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;col&gt;</code> elements for optional\ngrouping and styling of table columns. Note the styles available via <code translate="no" class="notranslate text-nowrap">&lt;col&gt;</code> elements are limited.\nRefer to <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup" target="_blank" rel="noopener">MDN</a> for details and\nusage of <code translate="no" class="notranslate text-nowrap">&lt;colgroup&gt;</code></p>\n<p>Slot <code translate="no" class="notranslate text-nowrap">table-colgroup</code> can be optionally scoped, receiving an object with the following properties:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">columns</code></td>\n<td>Number</td>\n<td>The number of columns in the rendered table</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">fields</code></td>\n<td>Array</td>\n<td>Array of field definition objects (normalized to the <a href="#fields-as-an-array-of-objects" class="font-weight-bold">array of objects</a> format)</td>\n</tr>\n</tbody></table>\n</div><p>When provided, the content of the <code translate="no" class="notranslate text-nowrap">table-colgroup</code> slot will be placed <em>inside</em> of a <code translate="no" class="notranslate text-nowrap">&lt;colgroup&gt;</code>\nelement. there is no need to provide your own outer <code translate="no" class="notranslate text-nowrap">&lt;colgroup&gt;</code> element. When a series of table\ncolumns should be grouped for assistive technology reasons (for conveying logical column\nassociations, use a <code translate="no" class="notranslate text-nowrap">&lt;col span=&quot;#&quot;&gt;</code> element (with <code translate="no" class="notranslate text-nowrap">#</code> replaced with the number of grouped columns)\nto group the series of columns.</p>\n<p><strong>Tip:</strong> In some situations when trying to set column widths via <code translate="no" class="notranslate text-nowrap">style</code> or <code translate="no" class="notranslate text-nowrap">class</code> on the <code translate="no" class="notranslate text-nowrap">&lt;col&gt;</code>\nelement, you may find that placing the table in <code translate="no" class="notranslate text-nowrap">fixed</code> header width (table fixed layout mode) mode,\ncombined with <code translate="no" class="notranslate text-nowrap">responsive</code> (horizontal scrolling) mode will help, although you will need to have\nexplicit widths, or minimum widths, via a style or a class for each column&#39;s respective <code translate="no" class="notranslate text-nowrap">&lt;col&gt;</code>\nelement. For example:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">fixed</span> <span class="hljs-attr">responsive</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">...</span> &gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"table-colgroup"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">col</span>\n      <span class="hljs-attr">v-for</span>=<span class="hljs-string">"field in scope.fields"</span>\n      <span class="hljs-attr">:key</span>=<span class="hljs-string">"field.key"</span>\n      <span class="hljs-attr">:style</span>=<span class="hljs-string">"{ width: field.key === \'foo\' ? \'120px\' : \'180px\' }"</span>\n    &gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- additional table slots here if needed --&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span></pre><h3 id="table-busy-state"><span class="bd-content-title">Table busy state<a class="anchorjs-link" href="#table-busy-state" aria-label="Anchor"></a></span></h3>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> provides a <code translate="no" class="notranslate text-nowrap">busy</code> prop that will flag the table as busy, which you can set to <code translate="no" class="notranslate text-nowrap">true</code>\njust before you update your items, and then set it to <code translate="no" class="notranslate text-nowrap">false</code> once you have your items. When in the\nbusy state, the table will have the attribute <code translate="no" class="notranslate text-nowrap">aria-busy=&quot;true&quot;</code>.</p>\n<p>During the busy state, the table will be rendered in a &quot;muted&quot; look (<code translate="no" class="notranslate text-nowrap">opacity: 0.6</code>), using the\nfollowing custom CSS:</p>\n<pre class="hljs css text-monospace p-2 notranslate" translate="no"><span class="hljs-comment">/* Busy table styling */</span>\n<span class="hljs-selector-tag">table</span><span class="hljs-selector-class">.b-table</span><span class="hljs-selector-attr">[aria-busy=\'true\']</span> {\n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.6</span>;\n}</pre><p>You can override this styling using your own CSS.</p>\n<p>You may optionally provide a <code translate="no" class="notranslate text-nowrap">table-busy</code> slot to show a custom loading message or spinner whenever\nthe table&#39;s busy state is <code translate="no" class="notranslate text-nowrap">true</code>. The slot will be placed in a <code translate="no" class="notranslate text-nowrap">&lt;tr&gt;</code> element with class\n<code translate="no" class="notranslate text-nowrap">b-table-busy-slot</code>, which has one single <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code> with a <code translate="no" class="notranslate text-nowrap">colspan</code> set to the number of fields.</p>\n<p><strong>Example of <code translate="no" class="notranslate text-nowrap">table-busy</code> slot usage:</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleBusy"</span>&gt;</span>Toggle Busy State<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:busy</span>=<span class="hljs-string">"isBusy"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span> <span class="hljs-attr">outlined</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"table-busy"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center text-danger my-2"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-spinner</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"align-middle"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-spinner</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">isBusy</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'MacDonald\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span> },\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> },\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span> },\n          { <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      toggleBusy() {\n        <span class="hljs-keyword">this</span>.isBusy = !<span class="hljs-keyword">this</span>.isBusy\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-busy-slot.vue --&gt;</span></pre><p>Also see the <a href="#using-items-provider-functions" class="font-weight-bold">Using Items Provider Functions</a> below for additional\ninformation on the <code translate="no" class="notranslate text-nowrap">busy</code> state.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>All click related and hover events, and sort-changed events will <strong>not</strong> be emitted when the table\nis in the <code translate="no" class="notranslate text-nowrap">busy</code> state.</li>\n<li>Busy styling and slot are not available in the <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code> component.</li>\n</ul>\n<h2 id="custom-data-rendering"><span class="bd-content-title">Custom data rendering<a class="anchorjs-link" href="#custom-data-rendering" aria-label="Anchor"></a></span></h2>\n<p>Custom rendering for each data field in a row is possible using either\n<a href="http://vuejs.org/v2/guide/components.html#Scoped-Slots" target="_blank" rel="noopener">scoped slots</a> or formatter callback\nfunction.</p>\n<h3 id="scoped-field-slots"><span class="bd-content-title">Scoped field slots<a class="anchorjs-link" href="#scoped-field-slots" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">CHANGED in 2.0.0-rc.28</span></p>\n<p>Scoped field slots give you greater control over how the record data appears. If you want to add an\nextra field which does not exist in the records, just add it to the <code translate="no" class="notranslate text-nowrap">fields</code> array, And then\nreference the field(s) in the scoped slot(s). Scoped field slots use the following naming syntax:\n<code translate="no" class="notranslate text-nowrap">&#39;[&#39; + field key + &#39;]&#39;</code>.</p>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.28</span> You can use the default <em>fall-back</em>\nscoped slot <code translate="no" class="notranslate text-nowrap">&#39;[]&#39;</code> to format any cells that do not have an explicit scoped slot provided.</p>\n<p><span class="badge badge-warning small">DEPRECATION in 2.0.0-rc.28</span> Versions prior to\n<code translate="no" class="notranslate text-nowrap">2.0.0-rc.28</code> did not surround the field key with square brackets, which could cause slot name\ncollisions (i.e. if you had a field key <code translate="no" class="notranslate text-nowrap">default</code>). Using the old field slot names has been\ndeprecated in favour of the new bracketed syntax, and support will be removed in a future release.\nUsers are encouraged to switch to the new bracketed syntax.</p>\n<p><strong>Example: Custom data rendering with scoped slots</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">small</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- A virtual column --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[index]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        {{ data.index + 1 }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A custom formatted column --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[name]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ data.value.last }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>, {{ data.value.first }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A virtual composite column --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[nameage]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        {{ data.item.name.first }} is {{ data.item.age }} years old\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- Optional default data cell scoped slot --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>{{ data.value }}<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [\n          <span class="hljs-comment">// A virtual column that doesn\'t exist in items</span>\n          <span class="hljs-string">\'index\'</span>,\n          <span class="hljs-comment">// A column that needs custom formatting</span>\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'name\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Full Name\'</span> },\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">\'age\'</span>,\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">\'sex\'</span>,\n          <span class="hljs-comment">// A virtual column made up from two fields</span>\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'nameage\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'First name and age\'</span> }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'John\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Doe\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Male\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">42</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Jane\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Doe\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Female\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Rubin\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Kincade\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Male\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">73</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Shirley\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Partridge\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Female\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">62</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-data-slots.vue --&gt;</span></pre><p>The slot&#39;s scope variable (<code translate="no" class="notranslate text-nowrap">data</code> in the above sample) will have the following properties:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">index</code></td>\n<td>Number</td>\n<td>The row number (indexed from zero) relative to the <em>displayed</em> rows</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">item</code></td>\n<td>Object</td>\n<td>The entire raw record data (i.e. <code translate="no" class="notranslate text-nowrap">items[index]</code>) for this row (before any formatter is applied)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">value</code></td>\n<td>Any</td>\n<td>The value for this key in the record (<code translate="no" class="notranslate text-nowrap">null</code> or <code translate="no" class="notranslate text-nowrap">undefined</code> if a virtual column), or the output of the field&#39;s <a href="#formatter-callback" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">formatter</code> function</a></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">unformatted</code></td>\n<td>Any</td>\n<td>The raw value for this key in the item record (<code translate="no" class="notranslate text-nowrap">null</code> or <code translate="no" class="notranslate text-nowrap">undefined</code> if a virtual column), before being passed to the field&#39;s <a href="#formatter-callback" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">formatter</code> function</a></td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">detailsShowing</code></td>\n<td>Boolean</td>\n<td>Will be <code translate="no" class="notranslate text-nowrap">true</code> if the row&#39;s <code translate="no" class="notranslate text-nowrap">row-details</code> scoped slot is visible. See section <a href="#row-details-support" class="font-weight-bold">Row details support</a> below for additional information</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">toggleDetails</code></td>\n<td>Function</td>\n<td>Can be called to toggle the visibility of the rows <code translate="no" class="notranslate text-nowrap">row-details</code> scoped slot. See section <a href="#row-details-support" class="font-weight-bold">Row details support</a> below for additional information</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">rowSelected</code></td>\n<td>Boolean</td>\n<td>Will be <code translate="no" class="notranslate text-nowrap">true</code> if the row has been selected. See section <a href="#row-select-support" class="font-weight-bold">Row select support</a> for additional information</td>\n</tr>\n</tbody></table>\n</div><p><strong>Notes:</strong></p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">index</code> will not always be the actual row&#39;s index number, as it is computed after filtering,\nsorting and pagination have been applied to the original table data. The <code translate="no" class="notranslate text-nowrap">index</code> value will refer\nto the <strong>displayed row number</strong>. This number will align with the indexes from the optional\n<a href="#v-model-binding" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">v-model</code> bound</a> variable.</li>\n</ul>\n<h4 id="displaying-raw-html"><span class="bd-content-title">Displaying raw HTML<a class="anchorjs-link" href="#displaying-raw-html" aria-label="Anchor"></a></span></h4>\n<p>By default <code translate="no" class="notranslate text-nowrap">b-table</code> escapes HTML tags in items data and results of formatter functions, if you need\nto display raw HTML code in <code translate="no" class="notranslate text-nowrap">b-table</code>, you should use <code translate="no" class="notranslate text-nowrap">v-html</code> directive on an element in a in\nscoped field slot.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[html]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">"data.value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="xml">\n  export default {\n    data() {\n      return {\n        items: [\n          {\n            text: \'This is <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>escaped<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> content\',\n            html: \'This is <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>raw <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color:red"</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\'\n          }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-html-data-slots.vue --&gt;</span></pre><p class="alert alert-danger">\n  <strong>Warning:</strong> Be cautious of using the <code class="notranslate" translate="no">v-html</code> method to display user\n  supplied content,  as it may make your application vulnerable to\n  <a class="alert-link" href="https://en.wikipedia.org/wiki/Cross-site_scripting">\n  <abbr title="Cross Site Scripting Attacks">XSS attacks</abbr></a>, if you do not first\n  <a class="alert-link" href="https://en.wikipedia.org/wiki/HTML_sanitization">sanitize</a> the\n  user supplied string.\n</p>\n\n<h3 id="formatter-callback"><span class="bd-content-title">Formatter callback<a class="anchorjs-link" href="#formatter-callback" aria-label="Anchor"></a></span></h3>\n<p>Optionally, you can customize field output by using a formatter callback function. To enable this,\nthe field&#39;s <code translate="no" class="notranslate text-nowrap">formatter</code> property is used. The value of this property may be String or function\nreference. In case of a String value, the function must be defined at the parent component&#39;s\nmethods. When providing <code translate="no" class="notranslate text-nowrap">formatter</code> as a <code translate="no" class="notranslate text-nowrap">Function</code>, it must be declared at global scope (window or\nas global mixin at Vue, or as an anonymous function), unless it has been bound to a <code translate="no" class="notranslate text-nowrap">this</code> context.</p>\n<p>The callback function accepts three arguments - <code translate="no" class="notranslate text-nowrap">value</code>, <code translate="no" class="notranslate text-nowrap">key</code>, and <code translate="no" class="notranslate text-nowrap">item</code>, and should return the\nformatted value as a string (HTML strings are not supported)</p>\n<p><strong>Example: Custom data rendering with formatter callback function</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[name]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        <span class="hljs-comment">&lt;!-- `data.value` is the value after formatted by the Formatter --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">"`#${data.value.replace(/[^a-z]+/i,\'-\').toLowerCase()}`"</span>&gt;</span>{{ data.value }}<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [\n          {\n            <span class="hljs-comment">// A column that needs custom formatting,</span>\n            <span class="hljs-comment">// calling formatter \'fullName\' in this app</span>\n            key: <span class="hljs-string">\'name\'</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'Full Name\'</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-string">\'fullName\'</span>\n          },\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">\'age\'</span>,\n          {\n            <span class="hljs-comment">// A regular column with custom formatter</span>\n            key: <span class="hljs-string">\'sex\'</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n              <span class="hljs-keyword">return</span> value.charAt(<span class="hljs-number">0</span>).toUpperCase()\n            }\n          },\n          {\n            <span class="hljs-comment">// A virtual column with custom formatter</span>\n            key: <span class="hljs-string">\'birthYear\'</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'Calculated Birth Year\'</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-function">(<span class="hljs-params">value, key, item</span>) =&gt;</span> {\n              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getFullYear() - item.age\n            }\n          }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'John\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Doe\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Male\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">42</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Jane\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Doe\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Female\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Rubin\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Kincade\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'male\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">73</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Shirley\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Partridge\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'female\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">62</span> }\n        ]\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      fullName(value) {\n        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${value.first}</span> <span class="hljs-subst">${value.last}</span>`</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-data-formatter.vue --&gt;</span></pre><h2 id="header-and-footer-custom-rendering-via-scoped-slots"><span class="bd-content-title">Header and Footer custom rendering via scoped slots<a class="anchorjs-link" href="#header-and-footer-custom-rendering-via-scoped-slots" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">CHANGED in 2.0.0-rc.28</span></p>\n<p>It is also possible to provide custom rendering for the tables <code translate="no" class="notranslate text-nowrap">thead</code> and <code translate="no" class="notranslate text-nowrap">tfoot</code> elements. Note by\ndefault the table footer is not rendered unless <code translate="no" class="notranslate text-nowrap">foot-clone</code> is set to <code translate="no" class="notranslate text-nowrap">true</code>.</p>\n<p>Scoped slots for the header and footer cells uses a special naming convention of\n<code translate="no" class="notranslate text-nowrap">&#39;HEAD[&lt;fieldkey&gt;]&#39;</code> and <code translate="no" class="notranslate text-nowrap">&#39;FOOT[&lt;fieldkey&gt;]&#39;</code> respectively. if a <code translate="no" class="notranslate text-nowrap">&#39;FOOT[...]&#39;</code> slot for a field is\nnot provided, but a <code translate="no" class="notranslate text-nowrap">&#39;HEAD[...]&#39;</code> slot is provided, then the footer will use the <code translate="no" class="notranslate text-nowrap">&#39;HEAD[...]&#39;</code> slot\ncontent.</p>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.28</span> You can use a default <em>fall-back</em>\nscoped slot <code translate="no" class="notranslate text-nowrap">&#39;HEAD[]&#39;</code> or <code translate="no" class="notranslate text-nowrap">&#39;FOOT[]&#39;</code> to format any header or footer cells that do not have an\nexplicit scoped slot provided.</p>\n<p><span class="badge badge-warning small">DEPRECATION in 2.0.0-rc.28</span> Versions prior to\n<code translate="no" class="notranslate text-nowrap">2.0.0-rc.28</code> used slot names <code translate="no" class="notranslate text-nowrap">&#39;HEAD_&lt;key&gt;&#39;</code> and <code translate="no" class="notranslate text-nowrap">&#39;FOOT_&lt;key&gt;&#39;</code>. Using the old slot names has been\ndeprecated in favour of the new bracketed syntax, and support will be removed in a future release.\nUsers are encouraged to switch to the new bracketed syntax.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">foot-clone</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- A custom formatted data column cell --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[name]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        {{ data.value.first }} {{ data.value.last }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A custom formatted header cell for field \'name\' --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"HEAD[name]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-info"</span>&gt;</span>{{ data.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- A custom formatted footer cell for field \'name\' --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"FOOT[name]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-danger"</span>&gt;</span>{{ data.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-comment">&lt;!-- Default fall-back custom formatted footer cell --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"FOOT[]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>{{ data.label }}<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [\n          <span class="hljs-comment">// A column that needs custom formatting</span>\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'name\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Full Name\'</span> },\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">\'age\'</span>,\n          <span class="hljs-comment">// A regular column</span>\n          <span class="hljs-string">\'sex\'</span>\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'John\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Doe\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Male\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">42</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Jane\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Doe\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Female\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">36</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Rubin\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Kincade\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Male\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">73</span> },\n          { <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Shirley\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Partridge\'</span> }, <span class="hljs-attr">sex</span>: <span class="hljs-string">\'Female\'</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">62</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-head-foot-slots.vue --&gt;</span></pre><p>The slots can be optionally scoped (<code translate="no" class="notranslate text-nowrap">data</code> in the above example), and will have the following\nproperties:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">column</code></td>\n<td>String</td>\n<td>The fields&#39;s <code translate="no" class="notranslate text-nowrap">key</code> value</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">field</code></td>\n<td>Object</td>\n<td>the field&#39;s object (from the <code translate="no" class="notranslate text-nowrap">fields</code> prop)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">label</code></td>\n<td>String</td>\n<td>The fields label value (also available as <code translate="no" class="notranslate text-nowrap">data.field.label</code>)</td>\n</tr>\n</tbody></table>\n</div><p>When placing inputs, buttons, selects or links within a <code translate="no" class="notranslate text-nowrap">HEAD[...]</code> or <code translate="no" class="notranslate text-nowrap">FOOT[...]</code> slot, note that\n<code translate="no" class="notranslate text-nowrap">head-clicked</code> event will not be emitted when the input, select, textarea is clicked (unless they\nare disabled). <code translate="no" class="notranslate text-nowrap">head-clicked</code> will never be emitted when clicking on links or buttons inside the\nscoped slots (even when disabled)</p>\n<h3 id="adding-additional-rows-to-the-header"><span class="bd-content-title">Adding additional rows to the header<a class="anchorjs-link" href="#adding-additional-rows-to-the-header" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">ENHANCED in 2.0.0-rc.28</span></p>\n<p>If you wish to add additional rows to the header you may do so via the <code translate="no" class="notranslate text-nowrap">thead-top</code> slot. This slot\nis inserted before the header cells row, and is not automatically encapsulated by <code translate="no" class="notranslate text-nowrap">&lt;tr&gt;..&lt;/tr&gt;</code>\ntags. It is recommended to use the BootstrapVue <a href="#table-helper-components" class="font-weight-bold">table helper components</a>,\nrather than native browser table child elements.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>\n      <span class="hljs-attr">responsive</span>=<span class="hljs-string">"sm"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"thead-top"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"data"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>&amp;nbsp;<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"secondary"</span>&gt;</span>Type 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span>Type 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span>&gt;</span>Type 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">\'Stephen Hawking\'</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">\'Johnny Appleseed\'</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">\'George Washington\'</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">\'Albert Einstein\'</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n          { <span class="hljs-attr">name</span>: <span class="hljs-string">\'Isaac Newton\'</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">type1</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2a</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type2b</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">type2c</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">type3</span>: <span class="hljs-literal">false</span> },\n        ],\n        <span class="hljs-attr">fields</span>: [\n          <span class="hljs-string">\'name\'</span>,\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'id\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'ID\'</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'type1\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Type 1\'</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'type2a\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Type 2A\'</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'type2b\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Type 2B\'</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'type2c\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Type 2C\'</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'type3\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Type 3\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-thead-top-slot.vue --&gt;</span></pre><p>Slot <code translate="no" class="notranslate text-nowrap">thead-top</code> can be optionally scoped, receiving an object with the following properties:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">columns</code></td>\n<td>Number</td>\n<td>The number of columns in the rendered table</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">fields</code></td>\n<td>Array</td>\n<td>Array of field definition objects (normalized to the array of objects format)</td>\n</tr>\n</tbody></table>\n</div><h2 id="custom-empty-and-emptyfiltered-rendering-via-slots"><span class="bd-content-title">Custom empty and emptyfiltered rendering via slots<a class="anchorjs-link" href="#custom-empty-and-emptyfiltered-rendering-via-slots" aria-label="Anchor"></a></span></h2>\n<p>Aside from using <code translate="no" class="notranslate text-nowrap">empty-text</code>, <code translate="no" class="notranslate text-nowrap">empty-filtered-text</code>, <code translate="no" class="notranslate text-nowrap">empty-html</code>, and <code translate="no" class="notranslate text-nowrap">empty-filtered-html</code>, it is\nalso possible to provide custom rendering for tables that have no data to display using named slots.</p>\n<p>In order for these slots to be shown, the <code translate="no" class="notranslate text-nowrap">show-empty</code> attribute must be set and <code translate="no" class="notranslate text-nowrap">items</code> must be\neither falsy or an array of length 0.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">show-empty</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"empty"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>{{ scope.emptyText }}<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"emptyfiltered"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>{{ scope.emptyFilteredText }}<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><p>The slot can optionally be scoped. The slot&#39;s scope (<code translate="no" class="notranslate text-nowrap">scope</code> in the above example) will have the\nfollowing properties:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">emptyHtml</code></td>\n<td>String</td>\n<td>The <code translate="no" class="notranslate text-nowrap">empty-html</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">emptyText</code></td>\n<td>String</td>\n<td>The <code translate="no" class="notranslate text-nowrap">empty-text</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">emptyFilteredHtml</code></td>\n<td>String</td>\n<td>The <code translate="no" class="notranslate text-nowrap">empty-filtered-html</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">emptyFilteredText</code></td>\n<td>String</td>\n<td>The <code translate="no" class="notranslate text-nowrap">empty-filtered-text</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">fields</code></td>\n<td>Array</td>\n<td>The <code translate="no" class="notranslate text-nowrap">fields</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">items</code></td>\n<td>Array</td>\n<td>The <code translate="no" class="notranslate text-nowrap">items</code> prop. Exposed here to check null vs []</td>\n</tr>\n</tbody></table>\n</div><h2 id="advanced-features"><span class="bd-content-title">Advanced features<a class="anchorjs-link" href="#advanced-features" aria-label="Anchor"></a></span></h2>\n<h3 id="sticky-headers"><span class="bd-content-title">Sticky headers<a class="anchorjs-link" href="#sticky-headers" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.28</span></p>\n<p>Use the <code translate="no" class="notranslate text-nowrap">sticky-header</code> prop to enable a vertically scrolling table with headers that remain fixed\n(sticky) as the table body scrolls. Setting the prop to <code translate="no" class="notranslate text-nowrap">true</code> (or no explicit value) will generate\na table that has a maximum height of <code translate="no" class="notranslate text-nowrap">300px</code>. To specify a maximum height other than <code translate="no" class="notranslate text-nowrap">300px</code>, set\nthe <code translate="no" class="notranslate text-nowrap">sticky-header</code> prop to a valid CSS height (including units), i.e. <code translate="no" class="notranslate text-nowrap">sticky-header=&quot;200px&quot;</code>.\nTables with <code translate="no" class="notranslate text-nowrap">sticky-header</code> enabled will also automatically become always responsive horizontally,\nregardless of the <a href="#responsive-tables" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">responsive</code></a> prop setting, if the table is wider than the\navailable horizontal space.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">sticky-header</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">head-variant</span>=<span class="hljs-string">"light"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> },\n          { <span class="hljs-string">\'heading 1\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 2\'</span>: <span class="hljs-string">\'table cell\'</span>, <span class="hljs-string">\'heading 3\'</span>: <span class="hljs-string">\'table cell\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-sticky-header.vue --&gt;</span></pre><p><strong>Sticky header notes:</strong></p>\n<ul>\n<li>The <code translate="no" class="notranslate text-nowrap">sticky-header</code> prop has no effect if the table has the <a href="#stacked-tables" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">stacked</code></a> prop set.</li>\n<li>Sticky header tables are wrapped inside a vertically scrollable <code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code> with a maximum height set.</li>\n<li>BootstrapVue&#39;s custom CSS is required in order to support <code translate="no" class="notranslate text-nowrap">sticky-header</code>.</li>\n<li>Bootstrap v4 uses the CSS style <code translate="no" class="notranslate text-nowrap">border-collapse: collapsed</code> on table elements. This prevents the\nborders on the sticky header from &quot;sticking&quot; to the header, and hence the borders will scroll when\nthe body scrolls.</li>\n<li>The sticky header feature uses CSS style <code translate="no" class="notranslate text-nowrap">position: sticky</code> to position the headings.</li>\n<li>Internet Explorer does not support <code translate="no" class="notranslate text-nowrap">position: sticky</code>, hence for IE11 the table headings will\nscroll with the table body.</li>\n</ul>\n<h3 id="sticky-columns"><span class="bd-content-title">Sticky columns<a class="anchorjs-link" href="#sticky-columns" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.28</span></p>\n<p>Columns can be made sticky, where they stick to the left of the table when the table has a\nhorizontal scrollbar. To make a column a sticky column, set the <code translate="no" class="notranslate text-nowrap">stickyColumn</code> prop in the\n<a href="#field-definition-reference" class="font-weight-bold">field&#39;s header definition</a>. Sticky columns will only work when the\ntable has either the <code translate="no" class="notranslate text-nowrap">sticky-header</code> prop set and/or the <a href="#responsive-tables" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">responsive</code></a> prop is\nset.</p>\n<p><strong>Example: Sticky columns and headers</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"stickyHeader"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>Sticky header<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:sticky-header</span>=<span class="hljs-string">"stickyHeader"</span> <span class="hljs-attr">responsive</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- We are using utility class `text-nowrap` to help illustrate horizontal scrolling --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"HEAD[id]"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-nowrap"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span>Row ID<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"HEAD[]"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-nowrap"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span>\n        Heading {{ scope.label }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">stickyHeader</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'id\'</span>, <span class="hljs-attr">stickyColumn</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">isRowHeader</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">variant</span>: <span class="hljs-string">\'primary\'</span> },\n          <span class="hljs-string">\'a\'</span>,\n          <span class="hljs-string">\'b\'</span>,\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'c\'</span>, <span class="hljs-attr">stickyColumn</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">variant</span>: <span class="hljs-string">\'info\'</span> },\n          <span class="hljs-string">\'d\'</span>,\n          <span class="hljs-string">\'e\'</span>,\n          <span class="hljs-string">\'f\'</span>,\n          <span class="hljs-string">\'g\'</span>,\n          <span class="hljs-string">\'h\'</span>,\n          <span class="hljs-string">\'i\'</span>,\n          <span class="hljs-string">\'j\'</span>,\n          <span class="hljs-string">\'k\'</span>,\n          <span class="hljs-string">\'l\'</span>\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> },\n          { <span class="hljs-attr">id</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">e</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">h</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">i</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">j</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">k</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">l</span>: <span class="hljs-number">11</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- table-sticky-columns.vue --&gt;</span></pre><p><strong>Sticky column notes:</strong></p>\n<ul>\n<li>Sticky columns has no effect if the table has the <a href="#stacked-tables" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">stacked</code></a> prop set.</li>\n<li>Sticky columns tables require either the <code translate="no" class="notranslate text-nowrap">sticky-header</code> and/or <code translate="no" class="notranslate text-nowrap">responsive</code> modes, and are\nwrapped inside a horizontally scrollable <code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code>.</li>\n<li>When you have multiple columns that are set as <code translate="no" class="notranslate text-nowrap">stickyColumn</code>, the columns will stack over each\nother visually, and the left-most sticky columns may &quot;peek&quot; out from under the next sticky column.\nTo get around this behaviour, make sure your latter stickyColumns are the same width or wider than\nprevious sticky columns.</li>\n<li>Bootstrap v4 uses the CSS style <code translate="no" class="notranslate text-nowrap">border-collapse: collapsed</code> on table elements. This prevents any\nleft or right borders on the sticky columns from &quot;sticking&quot; to the column, and hence those borders\nwill scroll when the body scrolls.</li>\n<li>BootstrapVue&#39;s custom CSS is required in order to support sticky columns.</li>\n<li>The sticky column feature uses CSS style <code translate="no" class="notranslate text-nowrap">position: sticky</code> to position the column cells.</li>\n<li>Internet Explorer does not support <code translate="no" class="notranslate text-nowrap">position: sticky</code>, hence for IE11 the sticky column will\nscroll with the table body.</li>\n</ul>\n<h3 id="row-details-support"><span class="bd-content-title">Row details support<a class="anchorjs-link" href="#row-details-support" aria-label="Anchor"></a></span></h3>\n<p>If you would optionally like to display additional record information (such as columns not specified\nin the fields definition array), you can use the scoped slot <code translate="no" class="notranslate text-nowrap">row-details</code>, in combination with the\nspecial item record Boolean property <code translate="no" class="notranslate text-nowrap">_showDetails</code>.</p>\n<p>If the record has it&#39;s <code translate="no" class="notranslate text-nowrap">_showDetails</code> property set to <code translate="no" class="notranslate text-nowrap">true</code>, <strong>and</strong> a <code translate="no" class="notranslate text-nowrap">row-details</code> scoped slot\nexists, a new row will be shown just below the item, with the rendered contents of the <code translate="no" class="notranslate text-nowrap">row-details</code>\nscoped slot.</p>\n<p>In the scoped field slot, you can toggle the visibility of the row&#39;s <code translate="no" class="notranslate text-nowrap">row-details</code> scoped slot by\ncalling the <code translate="no" class="notranslate text-nowrap">toggleDetails</code> function passed to the field&#39;s scoped slot variable. You can use the\nscoped fields slot variable <code translate="no" class="notranslate text-nowrap">detailsShowing</code> to determine the visibility of the <code translate="no" class="notranslate text-nowrap">row-details</code> slot.</p>\n<p><strong>Note:</strong> If manipulating the <code translate="no" class="notranslate text-nowrap">_showDetails</code> property directly on the item data (i.e. not via the\n<code translate="no" class="notranslate text-nowrap">toggleDetails</code> function reference), the <code translate="no" class="notranslate text-nowrap">_showDetails</code> properly <strong>must</strong> exist in the items data\nfor proper reactive detection of changes to it&#39;s value. Read more about\n<a href="https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats" target="_blank" rel="noopener">Vue&#39;s reactivity limitations</a>.</p>\n<p><strong>Available <code translate="no" class="notranslate text-nowrap">row-details</code> scoped variable properties:</strong></p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">item</code></td>\n<td>Object</td>\n<td>The entire row record data object</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">index</code></td>\n<td>Number</td>\n<td>The current visible row number</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">fields</code></td>\n<td>Array</td>\n<td>The normalized fields definition array (in the <em>array of objects</em> format)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">toggleDetails</code></td>\n<td>Function</td>\n<td>Function to toggle visibility of the row&#39;s details slot</td>\n</tr>\n</tbody></table>\n</div><p>In the following example, we show two methods of toggling the visibility of the details: one via a\nbutton, and one via a checkbox. We also have the third row details defaulting to have details\ninitially showing.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span> <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span> <span class="hljs-attr">striped</span> <span class="hljs-attr">responsive</span>=<span class="hljs-string">"sm"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[show_details]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"row"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"row.toggleDetails"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mr-2"</span>&gt;</span>\n          {{ row.detailsShowing ? \'Hide\' : \'Show\'}} Details\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n        <span class="hljs-comment">&lt;!-- As `row.showDetails` is one-way, we call the toggleDetails function on @change --&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"row.detailsShowing"</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">"row.toggleDetails"</span>&gt;</span>\n          Details via check\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"row-details"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"row"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-sm-right"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Age:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>{{ row.item.age }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-sm-right"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Is Active:<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>{{ row.item.isActive }}<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"row.toggleDetails"</span>&gt;</span>Hide Details<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>, <span class="hljs-string">\'show_details\'</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          {\n            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,\n            <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>,\n            <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>,\n            <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span>,\n            <span class="hljs-attr">_showDetails</span>: <span class="hljs-literal">true</span>\n          },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-details.vue --&gt;</span></pre><h3 id="row-select-support"><span class="bd-content-title">Row select support<a class="anchorjs-link" href="#row-select-support" aria-label="Anchor"></a></span></h3>\n<p>You can make rows selectable, by using the <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> prop <code translate="no" class="notranslate text-nowrap">selectable</code>.</p>\n<p>Users can easily change the selecting mode by setting the <code translate="no" class="notranslate text-nowrap">select-mode</code> prop.</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">multi</code>: each click will select/deselect the row (default mode)</li>\n<li><code translate="no" class="notranslate text-nowrap">single</code>: only a single row can be selected at one time</li>\n<li><code translate="no" class="notranslate text-nowrap">range</code>: any row clicked is selected, any other deselected. the SHIFT key selects a range of rows,\nand CTRL/CMD click will toggle the selected row.</li>\n</ul>\n<p>When a table is <code translate="no" class="notranslate text-nowrap">selectable</code> and the user clicks on a row, <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> will emit the <code translate="no" class="notranslate text-nowrap">row-selected</code>\nevent, passing a single argument which is the complete list of selected items. <strong>Treat this argument\nas read-only.</strong></p>\n<p>Rows can also be programmatically selected and unselected via the following exposed methods on the\n<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> instance (i.e. via a reference to the table instance via <code translate="no" class="notranslate text-nowrap">this.$refs</code>):</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">selectRow(index)</code></td>\n<td>Selects a row with the given <code translate="no" class="notranslate text-nowrap">index</code> number.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">unselectRow(index)</code></td>\n<td>Unselects a row with the given <code translate="no" class="notranslate text-nowrap">index</code> number.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">selectAllRows()</code></td>\n<td>Selects all rows in the table, except in <code translate="no" class="notranslate text-nowrap">single</code> mode in which case only the first row is selected.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">clearSelected()</code></td>\n<td>Unselects all rows.</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">isRowSelected(index)</code></td>\n<td>Returns <code translate="no" class="notranslate text-nowrap">true</code> if the row with the given <code translate="no" class="notranslate text-nowrap">index</code> is selected, otherwise it returns <code translate="no" class="notranslate text-nowrap">false</code>.</td>\n</tr>\n</tbody></table>\n</div><p>Programmatic selection notes:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">index</code> the zero-based index of the table&#39;s <strong>visible rows</strong>, after filtering, sorting, and\npagination have been applied.</li>\n<li>In <code translate="no" class="notranslate text-nowrap">single</code> mode, <code translate="no" class="notranslate text-nowrap">selectRow(index)</code> will unselect any previous selected row.</li>\n<li>Attempting to <code translate="no" class="notranslate text-nowrap">selectRow(index)</code> or <code translate="no" class="notranslate text-nowrap">unselectRow(index)</code> on a non-existent row will be ignored.</li>\n<li>The table must be <code translate="no" class="notranslate text-nowrap">selectable</code> for any of these methods to have effect.</li>\n</ul>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"Selection mode:"</span> <span class="hljs-attr">label-cols-md</span>=<span class="hljs-string">"4"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"selectMode"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"modes"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">"selectableTable"</span>\n      <span class="hljs-attr">selectable</span>\n      <span class="hljs-attr">:select-mode</span>=<span class="hljs-string">"selectMode"</span>\n      <span class="hljs-attr">selected-variant</span>=<span class="hljs-string">"success"</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>\n      @<span class="hljs-attr">row-selected</span>=<span class="hljs-string">"onRowSelected"</span>\n      <span class="hljs-attr">responsive</span>=<span class="hljs-string">"sm"</span>\n    &gt;</span>\n      <span class="hljs-comment">&lt;!-- Example scoped slot for select state illustrative purposes --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[selected]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"{ rowSelected }"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"rowSelected"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span>&amp;check;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sr-only"</span>&gt;</span>Selected<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-else</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span>&amp;nbsp;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"sr-only"</span>&gt;</span>Not selected<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"selectAllRows"</span>&gt;</span>Select all<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"clearSelected"</span>&gt;</span>Clear selected<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"selectThirdRow"</span>&gt;</span>Select 3rd row<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"unselectThirdRow"</span>&gt;</span>Unselect 3rd row<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      Selected Rows:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>\n      {{ selected }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">modes</span>: [<span class="hljs-string">\'multi\'</span>, <span class="hljs-string">\'single\'</span>, <span class="hljs-string">\'range\'</span>],\n        <span class="hljs-attr">fields</span>: [<span class="hljs-string">\'selected\'</span>, <span class="hljs-string">\'isActive\'</span>, <span class="hljs-string">\'age\'</span>, <span class="hljs-string">\'first_name\'</span>, <span class="hljs-string">\'last_name\'</span>],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span> }\n        ],\n        <span class="hljs-attr">selectMode</span>: <span class="hljs-string">\'multi\'</span>,\n        <span class="hljs-attr">selected</span>: []\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      onRowSelected(items) {\n        <span class="hljs-keyword">this</span>.selected = items\n      },\n      selectAllRows() {\n        <span class="hljs-keyword">this</span>.$refs.selectableTable.selectAllRows()\n      },\n      clearSelected() {\n        <span class="hljs-keyword">this</span>.$refs.selectableTable.clearSelected()\n      },\n      selectThirdRow() {\n        <span class="hljs-comment">// Rows are indexed from 0, so the third row is index 2</span>\n        <span class="hljs-keyword">this</span>.$refs.selectableTable.selectRow(<span class="hljs-number">2</span>)\n      },\n      unselectThirdRow() {\n        <span class="hljs-comment">// Rows are indexed from 0, so the third row is index 2</span>\n        <span class="hljs-keyword">this</span>.$refs.selectableTable.unselectRow(<span class="hljs-number">2</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-selectable.vue --&gt;</span></pre><p>When a table is selectable, it will have class <code translate="no" class="notranslate text-nowrap">b-table-selectable</code>, and one of the following three\nclasses (depending on which mode is in use), on the <code translate="no" class="notranslate text-nowrap">&lt;table&gt;</code> element:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">b-table-select-single</code></li>\n<li><code translate="no" class="notranslate text-nowrap">b-table-select-multi</code></li>\n<li><code translate="no" class="notranslate text-nowrap">b-table-select-range</code></li>\n</ul>\n<p>When at least one row is selected the class <code translate="no" class="notranslate text-nowrap">b-table-selecting</code> will be active on the <code translate="no" class="notranslate text-nowrap">&lt;table&gt;</code>\nelement.</p>\n<p>Use the prop <code translate="no" class="notranslate text-nowrap">selected-variant</code> to apply a Bootstrap theme color to the selected row(s). Note, due\nto the order that the table variants are defined in Bootstrap&#39;s CSS, any row-variant&#39;s may take\nprecedence over the <code translate="no" class="notranslate text-nowrap">selected-variant</code>. You can set <code translate="no" class="notranslate text-nowrap">selected-variant</code> to an empty string if you\nwill be using other means to convey that a row is selected (such as a scoped field slot in the above\nexample).</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>Paging, filtering, or sorting will clear the selection. The <code translate="no" class="notranslate text-nowrap">row-selected</code> event will be emitted\nwith an empty array if needed.</li>\n<li>Selected rows will have a class of <code translate="no" class="notranslate text-nowrap">b-row-selected</code> added to them.</li>\n<li>When the table is in <code translate="no" class="notranslate text-nowrap">selectable</code> mode, all data item <code translate="no" class="notranslate text-nowrap">&lt;tr&gt;</code> elements will be in the document tab\nsequence (<code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code>) for <a href="#accessibility" class="font-weight-bold">accessibility</a> reasons, and will have the attribute\n<code translate="no" class="notranslate text-nowrap">aria-selected</code> set to either <code translate="no" class="notranslate text-nowrap">&#39;true&#39;</code> or <code translate="no" class="notranslate text-nowrap">&#39;false&#39;</code> depending on the selected state of the row.</li>\n<li>When a table is <code translate="no" class="notranslate text-nowrap">selectable</code>, the table will have the attribute <code translate="no" class="notranslate text-nowrap">aria-multiselect</code> set to either\n<code translate="no" class="notranslate text-nowrap">&#39;false&#39;</code> for <code translate="no" class="notranslate text-nowrap">single</code> mode, and <code translate="no" class="notranslate text-nowrap">&#39;true&#39;</code> for either <code translate="no" class="notranslate text-nowrap">multi</code> or <code translate="no" class="notranslate text-nowrap">range</code> modes.</li>\n</ul>\n<h3 id="table-body-transition-support"><span class="bd-content-title">Table body transition support<a class="anchorjs-link" href="#table-body-transition-support" aria-label="Anchor"></a></span></h3>\n<p>Vue transitions and animations are optionally supported on the <code translate="no" class="notranslate text-nowrap">&lt;tbody&gt;</code> element via the use of\nVue&#39;s <code translate="no" class="notranslate text-nowrap">&lt;transition-group&gt;</code> component internally. Three props are available for transitions support\n(all three default to undefined):</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">tbody-transition-props</code></td>\n<td>Object</td>\n<td>Object of transition-group properties</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">tbody-transition-handlers</code></td>\n<td>Object</td>\n<td>Object of transition-group event handlers</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">primary-key</code></td>\n<td>String</td>\n<td>String specifying the field to use as a unique row key (required)</td>\n</tr>\n</tbody></table>\n</div><p>To enable transitions you need to specify <code translate="no" class="notranslate text-nowrap">tbody-transition-props</code> and/or\n<code translate="no" class="notranslate text-nowrap">tbody-transition-handlers</code>, and must specify which field key to use as a unique key via the\n<code translate="no" class="notranslate text-nowrap">primary-key</code> prop. Your data <strong>must have</strong> a column (specified by the <code translate="no" class="notranslate text-nowrap">primary-key</code> prop) that has\na <strong>unique value per row</strong> in order for transitions to work properly. The <code translate="no" class="notranslate text-nowrap">primary-key</code> field&#39;s\n<em>value</em> can either be a unique string or number. The field specified does not need to appear in the\nrendered table output, but it <strong>must</strong> exist in each row of your items data.</p>\n<p>You must also provide CSS to handle your transitions (if using CSS transitions) in your project.</p>\n<p>For more information of Vue&#39;s list rendering transitions, see the\n<a href="https://vuejs.org/v2/guide/transitions.html#List-Move-Transitions" target="_blank" rel="noopener">Vue JS official docs</a>.</p>\n<p>In the example below, we have used the following custom CSS:</p>\n<pre class="hljs css text-monospace p-2 notranslate" translate="no"><span class="hljs-selector-tag">table</span><span class="hljs-selector-id">#table-transition-example</span> <span class="hljs-selector-class">.flip-list-move</span> {\n  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">1s</span>;\n}</pre><pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"table-transition-example"</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>\n      <span class="hljs-attr">striped</span>\n      <span class="hljs-attr">small</span>\n      <span class="hljs-attr">primary-key</span>=<span class="hljs-string">"a"</span>\n      <span class="hljs-attr">:tbody-transition-props</span>=<span class="hljs-string">"transProps"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">transProps</span>: {\n          <span class="hljs-comment">// Transition name</span>\n          name: <span class="hljs-string">\'flip-list\'</span>\n        },\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">\'Two\'</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">\'Moose\'</span> },\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">\'Three\'</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">\'Dog\'</span> },\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">\'Four\'</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">\'Cat\'</span> },\n          { <span class="hljs-attr">a</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">\'One\'</span>, <span class="hljs-attr">c</span>: <span class="hljs-string">\'Mouse\'</span> }\n        ],\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'a\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'b\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'c\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-transitions.vue --&gt;</span></pre><h3 id="v-model-binding"><span class="bd-content-title"><code translate="no" class="notranslate text-nowrap">v-model</code> binding<a class="anchorjs-link" href="#v-model-binding" aria-label="Anchor"></a></span></h3>\n<p>If you bind a variable to the <code translate="no" class="notranslate text-nowrap">v-model</code> prop, the contents of this variable will be the currently\ndisplayed item records (zero based index, up to <code translate="no" class="notranslate text-nowrap">page-size</code> - 1). This variable (the <code translate="no" class="notranslate text-nowrap">value</code> prop)\nshould usually be treated as readonly.</p>\n<p>The records within the <code translate="no" class="notranslate text-nowrap">v-model</code> are a filtered/paginated <em>shallow copy</em> of <code translate="no" class="notranslate text-nowrap">items</code>, and hence any\nchanges to a record&#39;s properties in the <code translate="no" class="notranslate text-nowrap">v-model</code> will be reflected in the original <code translate="no" class="notranslate text-nowrap">items</code> array\n(except when <code translate="no" class="notranslate text-nowrap">items</code> is set to a provider function). Deleting a record from the <code translate="no" class="notranslate text-nowrap">v-model</code> array will\n<strong>not</strong> remove the record from the original items array nor will it remove it from the displayed\nrows.</p>\n<p><strong>Note:</strong> Do not bind any value directly to the <code translate="no" class="notranslate text-nowrap">value</code> prop. Use the <code translate="no" class="notranslate text-nowrap">v-model</code> binding.</p>\n<h2 id="sorting"><span class="bd-content-title">Sorting<a class="anchorjs-link" href="#sorting" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">ENHANCED in v2.0.0-rc.25</span></p>\n<p>As mentioned in the <a href="#fields-column-definitions" class="font-weight-bold">Fields</a> section above, you can make columns\nsortable. Clicking on a sortable column header will sort the column in ascending direction (smallest\nfirst), while clicking on it again will switch the direction of sorting. Clicking on a non-sortable\ncolumn will clear the sorting. The prop <code translate="no" class="notranslate text-nowrap">no-sort-reset</code> can be used to disable this feature.</p>\n<p>You can control which column is pre-sorted and the order of sorting (ascending or descending). To\npre-specify the column to be sorted, set the <code translate="no" class="notranslate text-nowrap">sort-by</code> prop to the field&#39;s key. Set the sort\ndirection by setting <code translate="no" class="notranslate text-nowrap">sort-desc</code> to either <code translate="no" class="notranslate text-nowrap">true</code> (for descending) or <code translate="no" class="notranslate text-nowrap">false</code> (for ascending, the\ndefault).</p>\n<ul>\n<li><strong>Ascending</strong>: Items are sorted lowest to highest (i.e. <code translate="no" class="notranslate text-nowrap">A</code> to <code translate="no" class="notranslate text-nowrap">Z</code>) and will be displayed with the\nlowest value in the first row with progressively higher values in the following rows. The header\nindicator arrow will point in the direction of lowest to highest. (i.e. down for ascending).</li>\n<li><strong>Descending</strong>: Items are sorted highest to lowest (i.e. <code translate="no" class="notranslate text-nowrap">Z</code> to <code translate="no" class="notranslate text-nowrap">A</code>) and will be displayed with\nthe highest value in the first row with progressively lower values in the following rows. The\nheader indicator arrow will point in the direction of lowest to highest (i.e. up for descending).</li>\n</ul>\n<p>The props <code translate="no" class="notranslate text-nowrap">sort-by</code> and <code translate="no" class="notranslate text-nowrap">sort-desc</code> can be turned into <em>two-way</em> (syncable) props by adding the\n<code translate="no" class="notranslate text-nowrap">.sync</code> modifier. Your bound variables will then be updated accordingly based on the current sort\ncriteria. See the <a href="http://vuejs.org/v2/guide/components.html#sync-Modifier" target="_blank" rel="noopener">Vue docs</a> for details on\nthe <code translate="no" class="notranslate text-nowrap">.sync</code> prop modifier.</p>\n<p>Setting <code translate="no" class="notranslate text-nowrap">sort-by</code> to a column that is not defined in the fields as <code translate="no" class="notranslate text-nowrap">sortable</code> will result in the\ntable not being sorted.</p>\n<p>When the prop <code translate="no" class="notranslate text-nowrap">foot-clone</code> is set, the footer headings will also allow sorting by clicking, even if\nyou have custom formatted footer field headers. To disable the sort icons and sorting via heading\nclicks in the footer, set the <code translate="no" class="notranslate text-nowrap">no-footer-sorting</code> prop to true.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>\n      <span class="hljs-attr">:sort-by.sync</span>=<span class="hljs-string">"sortBy"</span>\n      <span class="hljs-attr">:sort-desc.sync</span>=<span class="hljs-string">"sortDesc"</span>\n      <span class="hljs-attr">responsive</span>=<span class="hljs-string">"sm"</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      Sorting By: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ sortBy }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>, Sort Direction:\n      <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{{ sortDesc ? \'Descending\' : \'Ascending\' }}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">sortBy</span>: <span class="hljs-string">\'age\'</span>,\n        <span class="hljs-attr">sortDesc</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'last_name\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'first_name\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'age\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'isActive\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">false</span> }\n        ],\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Macdonald\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Shaw\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Wilson\'</span> },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">first_name</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last_name</span>: <span class="hljs-string">\'Carney\'</span> }\n        ]\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-sorting.vue --&gt;</span></pre><h3 id="sort-compare-routine"><span class="bd-content-title">Sort-compare routine<a class="anchorjs-link" href="#sort-compare-routine" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">ENHANCED in v2.0.0-rc.28</span></p>\n<p>The internal built-in default <code translate="no" class="notranslate text-nowrap">sort-compare</code> function sorts the specified field <code translate="no" class="notranslate text-nowrap">key</code> based on the\ndata in the underlying record object (or by formatted value if a field has a formatter function, and\nthe field has its <code translate="no" class="notranslate text-nowrap">sortByFormatted</code> property is set to <code translate="no" class="notranslate text-nowrap">true</code>). The field value is first stringified\nif it is an object and then sorted.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>The built-in <code translate="no" class="notranslate text-nowrap">sort-compare</code> routine <strong>cannot</strong> sort based on the custom rendering of the field\ndata: scoped slots are used only for <em>presentation only</em>, and do not affect the underlying data.</li>\n<li><span class="badge badge-info small">NEW in v2.0.0-rc.25</span>\n<span class="badge badge-warning small">CHANGED in v2.0.0-rc.28</span> Fields that have a\n<a href="#formatter-callback" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">formatter</code> function</a> (virtual field or regular field) can be sorted by the\nvalue returned via the formatter function if the <a href="#field-definition-reference" class="font-weight-bold">field</a> property\n<code translate="no" class="notranslate text-nowrap">sortByFormatted</code> is set to <code translate="no" class="notranslate text-nowrap">true</code>. The default is <code translate="no" class="notranslate text-nowrap">false</code> which will sort by the original field\nvalue. This is only applicable for the built-in sort-compare routine.</li>\n<li><span class="badge badge-info small">NEW in v2.0.0-rc.28</span> By default, the internal sorting\nroutine will sort <code translate="no" class="notranslate text-nowrap">null</code>, <code translate="no" class="notranslate text-nowrap">undefined</code>, or empty string values first (less than any other values).\nTo sort so that <code translate="no" class="notranslate text-nowrap">null</code>, <code translate="no" class="notranslate text-nowrap">undefined</code> or empty string values appear last (greater than any other\nvalue), set the <code translate="no" class="notranslate text-nowrap">sort-null-last</code> prop to <code translate="no" class="notranslate text-nowrap">true</code>.</li>\n</ul>\n<p>For customizing the sort-compare handling, refer to the\n<a href="#custom-sort-compare-routine" class="font-weight-bold">Custom sort-compare routine</a> section below.</p>\n<h3 id="internal-sorting-and-locale-handling"><span class="bd-content-title">Internal sorting and locale handling<a class="anchorjs-link" href="#internal-sorting-and-locale-handling" aria-label="Anchor"></a></span></h3>\n<p>The internal sort-compare routine uses\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener"><code translate="no" class="notranslate text-nowrap">String.prototype.localeCompare()</code></a>\nfor comparing the stringified column value (if values being compared are not both <code translate="no" class="notranslate text-nowrap">Number</code> or both\n<code translate="no" class="notranslate text-nowrap">Date</code> types). The browser native <code translate="no" class="notranslate text-nowrap">localeCompare()</code> method accepts a <code translate="no" class="notranslate text-nowrap">locale</code> string (or array of\nlocale strings) and an <code translate="no" class="notranslate text-nowrap">options</code> object for controlling how strings are sorted. The default options\nare <code translate="no" class="notranslate text-nowrap">{ numeric: true }</code>, and the locale is <code translate="no" class="notranslate text-nowrap">undefined</code> (which uses the browser default locale).</p>\n<p><span class="badge badge-info small">NEW in v2.0.0-rc.25</span> You can change the locale (or\nlocales) via the <code translate="no" class="notranslate text-nowrap">sort-compare-locale</code> prop to set the locale(s) for sorting, as well as pass sort\noptions via the <code translate="no" class="notranslate text-nowrap">sort-compare-options</code> prop.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">sort-compare-locale</code> prop defaults to <code translate="no" class="notranslate text-nowrap">undefined</code>, which uses the browser (or Node.js runtime)\ndefault locale. The prop <code translate="no" class="notranslate text-nowrap">sort-compare-locale</code> can either accept a\n<a href="http://tools.ietf.org/html/rfc5646" target="_blank" rel="noopener">BCP 47 language tag</a> string or an <em>array</em> of such tags. For\nmore details on locales, please see\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation" target="_blank" rel="noopener">Locale identification and negotiation</a>\non MDN.</p>\n<p>The <code translate="no" class="notranslate text-nowrap">sort-compare-options</code> prop accepts an object containing any of the following properties:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">localeMatcher</code>: The locale matching algorithm to use. Possible values are <code translate="no" class="notranslate text-nowrap">&#39;lookup&#39;</code> and\n<code translate="no" class="notranslate text-nowrap">&#39;best fit&#39;</code>. The default is <code translate="no" class="notranslate text-nowrap">&#39;best fit&#39;</code>. For information about this option, see the\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation" target="_blank" rel="noopener">MDN Intl page</a>\nfor details.</li>\n<li><code translate="no" class="notranslate text-nowrap">sensitivity</code>: Which differences in the strings should lead to <em>non-zero</em> compare result values.\nPossible values are:<ul>\n<li><code translate="no" class="notranslate text-nowrap">&#39;base&#39;</code>: Only strings that differ in base letters compare as unequal. Examples: <code translate="no" class="notranslate text-nowrap">a ≠ b</code>,\n<code translate="no" class="notranslate text-nowrap">a = á</code>, <code translate="no" class="notranslate text-nowrap">a = A</code>.</li>\n<li><code translate="no" class="notranslate text-nowrap">&#39;accent&#39;</code>: Only strings that differ in base letters or accents and other diacritic marks\ncompare as unequal. Examples: <code translate="no" class="notranslate text-nowrap">a ≠ b</code>, <code translate="no" class="notranslate text-nowrap">a ≠ á</code>, <code translate="no" class="notranslate text-nowrap">a = A</code>.</li>\n<li><code translate="no" class="notranslate text-nowrap">&#39;case&#39;</code>: Only strings that differ in base letters or case compare as unequal. Examples:\n<code translate="no" class="notranslate text-nowrap">a ≠ b</code>, <code translate="no" class="notranslate text-nowrap">a = á</code>, <code translate="no" class="notranslate text-nowrap">a ≠ A</code>.</li>\n<li><code translate="no" class="notranslate text-nowrap">&#39;variant&#39;</code>: <strong>(default)</strong> Strings that differ in base letters, accents and other diacritic\nmarks, or case compare as unequal. Other differences <em>may also</em> be taken into consideration.\nExamples: <code translate="no" class="notranslate text-nowrap">a ≠ b</code>, <code translate="no" class="notranslate text-nowrap">a ≠ á</code>, <code translate="no" class="notranslate text-nowrap">a ≠ A</code>.</li>\n</ul>\n</li>\n<li><code translate="no" class="notranslate text-nowrap">ignorePunctuation</code>: Whether punctuation should be ignored. Possible values are <code translate="no" class="notranslate text-nowrap">true</code> and\n<code translate="no" class="notranslate text-nowrap">false</code>. The default is <code translate="no" class="notranslate text-nowrap">false</code>.</li>\n<li><code translate="no" class="notranslate text-nowrap">numeric</code>: Whether numeric collation should be used, such that <code translate="no" class="notranslate text-nowrap">&#39;1&#39; &lt; &#39;2&#39; &lt; &#39;10&#39;</code>. Possible values\nare <code translate="no" class="notranslate text-nowrap">true</code> and <code translate="no" class="notranslate text-nowrap">false</code>. The default is <code translate="no" class="notranslate text-nowrap">false</code>. Note that implementations (browsers, runtimes) are\nnot required to support this property, and therefore it might be ignored.</li>\n<li><code translate="no" class="notranslate text-nowrap">caseFirst</code>: Whether upper case or lower case should sort first. Possible values are <code translate="no" class="notranslate text-nowrap">&#39;upper&#39;</code>,\n<code translate="no" class="notranslate text-nowrap">&#39;lower&#39;</code>, or <code translate="no" class="notranslate text-nowrap">&#39;false&#39;</code> (use the locale&#39;s default). The default is <code translate="no" class="notranslate text-nowrap">&#39;false&#39;</code>. Implementations are\nnot required to support this property.</li>\n<li><code translate="no" class="notranslate text-nowrap">&#39;usage&#39;</code>: <strong>Always</strong> set to <code translate="no" class="notranslate text-nowrap">&#39;sort&#39;</code> by <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code></li>\n</ul>\n<p><strong>Example 1:</strong> If you want to sort German words, set <code translate="no" class="notranslate text-nowrap">sort-compare-locale=&quot;de&quot;</code> (in German, <code translate="no" class="notranslate text-nowrap">ä</code>\nsorts <em>before</em> <code translate="no" class="notranslate text-nowrap">z</code>) or Swedish set <code translate="no" class="notranslate text-nowrap">sort-compare-locale=&quot;sv&quot;</code> (in Swedish, <code translate="no" class="notranslate text-nowrap">ä</code> sorts <em>after</em> <code translate="no" class="notranslate text-nowrap">z</code>)</p>\n<p><strong>Example 2:</strong> To compare numbers that are strings numerically, and to ignore case and accents:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:sort-compare-options</span>=<span class="hljs-string">"{ numeric: true, sensitivity: \'base\' }"</span> <span class="hljs-attr">...</span>&gt;</span></pre><p><strong>Notes:</strong></p>\n<ul>\n<li>Refer to\n<a href="https://developer.mozilla.org/enUS/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener">MDN <code translate="no" class="notranslate text-nowrap">String.prototype.localeCompare()</code> documentation</a>\nfor details on the options object property values.</li>\n<li>Refer to\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument" target="_blank" rel="noopener">MDN locales documentation</a>\nfor details on locale values.</li>\n<li>Not all browsers (or Node.js) support the <code translate="no" class="notranslate text-nowrap">locale</code> and <code translate="no" class="notranslate text-nowrap">options</code> with\n<code translate="no" class="notranslate text-nowrap">String.prototype.localeCompare()</code>. Refer to <a href="https://caniuse.com/#feat=localecompare" target="_blank" rel="noopener">Can I Use</a>\nfor browser support. For Node.js, you may need to add in\n<a href="https://nodejs.org/api/intl.html" target="_blank" rel="noopener">Intl support</a> for handling locales, other than the default, to\nprevent <a href="https://ssr.vuejs.org/guide/hydration.html" target="_blank" rel="noopener">SSR hydration mismatch errors</a>.</li>\n</ul>\n<h3 id="custom-sort-compare-routine"><span class="bd-content-title">Custom sort-compare routine<a class="anchorjs-link" href="#custom-sort-compare-routine" aria-label="Anchor"></a></span></h3>\n<p>You can provide your own custom sort compare routine by passing a function reference to the prop\n<code translate="no" class="notranslate text-nowrap">sort-compare</code>. The <code translate="no" class="notranslate text-nowrap">sort-compare</code> routine is passed seven (7) arguments, of which the last 4 are\noptional:</p>\n<ul>\n<li>the first two arguments (<code translate="no" class="notranslate text-nowrap">a</code> and <code translate="no" class="notranslate text-nowrap">b</code>) are the <em>record objects</em> for the rows being compared</li>\n<li>the third argument is the field <code translate="no" class="notranslate text-nowrap">key</code> being sorted on (<code translate="no" class="notranslate text-nowrap">sortBy</code>)</li>\n<li>the fourth argument (<code translate="no" class="notranslate text-nowrap">sortDesc</code>) is the order <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> will be displaying the records (<code translate="no" class="notranslate text-nowrap">true</code>\nfor descending, <code translate="no" class="notranslate text-nowrap">false</code> for ascending)</li>\n<li>the fifth argument is a reference to the field&#39;s <a href="#formatter-callback" class="font-weight-bold">formatter function</a> (or\n<code translate="no" class="notranslate text-nowrap">undefined</code> if no field formatter). You will need to call this method to get the formatted field\nvalue: <code translate="no" class="notranslate text-nowrap">valA = formatter(a[key], key, a)</code> and <code translate="no" class="notranslate text-nowrap">valB = formatter(b[key], key, b)</code>, if you need to\nsort by the formatted value. This will be <code translate="no" class="notranslate text-nowrap">undefined</code> if the field&#39;s <code translate="no" class="notranslate text-nowrap">sortByFormatted</code> property is\nnot <code translate="no" class="notranslate text-nowrap">true</code></li>\n<li>the sixth argument is the value of the <code translate="no" class="notranslate text-nowrap">sort-compare-options</code> prop (default is\n<code translate="no" class="notranslate text-nowrap">{ numeric: true }</code>)</li>\n<li>the seventh argument is the value of the <code translate="no" class="notranslate text-nowrap">sort-compare-locale</code> prop (default is <code translate="no" class="notranslate text-nowrap">undefined</code>)</li>\n</ul>\n<p>The sixth and seventh arguments can be used if you are using the\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" target="_blank" rel="noopener"><code translate="no" class="notranslate text-nowrap">String.prototype.localeCompare()</code></a>\nmethod to compare strings.</p>\n<p>In most typical situations, you only need to use the first three arguments. The fourth argument -\nsorting direction - should not normally be used, as <code translate="no" class="notranslate text-nowrap">b-table</code> will handle the direction, and this\nvalue is typically only needed when special handling of how <code translate="no" class="notranslate text-nowrap">null</code> and/or <code translate="no" class="notranslate text-nowrap">undefined</code> values are\nsorted (i.e. sorting <code translate="no" class="notranslate text-nowrap">null</code>/<code translate="no" class="notranslate text-nowrap">undefined</code> first or last).</p>\n<p>The routine should return either <code translate="no" class="notranslate text-nowrap">-1</code> (or a negative value) for <code translate="no" class="notranslate text-nowrap">a[key] &lt; b[key]</code> , <code translate="no" class="notranslate text-nowrap">0</code> for\n<code translate="no" class="notranslate text-nowrap">a[key] === b[key]</code>, or <code translate="no" class="notranslate text-nowrap">1</code> (or a positive value) for <code translate="no" class="notranslate text-nowrap">a[key] &gt; b[key]</code>.</p>\n<p>Your custom sort-compare routine can also return <code translate="no" class="notranslate text-nowrap">null</code> or <code translate="no" class="notranslate text-nowrap">false</code>, to fall back to the <em>built-in\nsort-compare routine</em> for the particular <code translate="no" class="notranslate text-nowrap">key</code>. You can use this feature (i.e. by returning <code translate="no" class="notranslate text-nowrap">null</code>)\nto have your custom sort-compare routine handle <em>only</em> certain fields (keys) such as the special\ncase of virtual (scoped slot) columns, and have the internal (built in) sort-compare handle all\nother fields.</p>\n<p>The default sort-compare routine works similar to the following. Note the fourth argument (sorting\ndirection) is <strong>not</strong> used in the sort comparison:</p>\n\x3c!-- eslint-disable no-unused-vars, no-undef --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sortCompare</span>(<span class="hljs-params">aRow, bRow, key, sortDesc, formatter, compareOptions, compareLocale</span>) </span>{\n  <span class="hljs-keyword">const</span> a = aRow[key] <span class="hljs-comment">// or use Lodash `_.get()`</span>\n  <span class="hljs-keyword">const</span> b = bRow[key]\n  <span class="hljs-keyword">if</span> (\n    (<span class="hljs-keyword">typeof</span> a === <span class="hljs-string">\'number\'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> b === <span class="hljs-string">\'number\'</span>) ||\n    (a <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span> &amp;&amp; b <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Date</span>)\n  ) {\n    <span class="hljs-comment">// If both compared fields are native numbers or both are native dates</span>\n    <span class="hljs-keyword">return</span> a &lt; b ? <span class="hljs-number">-1</span> : a &gt; b ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-comment">// Otherwise stringify the field data and use String.prototype.localeCompare</span>\n    <span class="hljs-keyword">return</span> toString(a).localeCompare(toString(b), compareLocale, compareOptions)\n  }\n}\n\n<span class="hljs-comment">// Helper function to stringify the values of an Object</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toString</span>(<span class="hljs-params">value</span>) </span>{\n  <span class="hljs-keyword">if</span> (value === <span class="hljs-literal">null</span> || <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">\'undefined\'</span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">\'\'</span>\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) {\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.keys(value)\n      .sort()\n      .map(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> toString(value[key]))\n      .join(<span class="hljs-string">\' \'</span>)\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>(value)\n  }\n}</pre><h3 id="disable-local-sorting"><span class="bd-content-title">Disable local sorting<a class="anchorjs-link" href="#disable-local-sorting" aria-label="Anchor"></a></span></h3>\n<p>If you want to handle sorting entirely in your app, you can disable the local sorting in <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code>\nby setting the prop <code translate="no" class="notranslate text-nowrap">no-local-sorting</code> to true, while still maintaining the sortable header\nfunctionality (via <code translate="no" class="notranslate text-nowrap">sort-changed</code> or <code translate="no" class="notranslate text-nowrap">context-changed</code> events as well as syncable props).</p>\n<p>You can use the syncable props <code translate="no" class="notranslate text-nowrap">sort-by.sync</code> and <code translate="no" class="notranslate text-nowrap">sort-desc.sync</code> to detect changes in sorting\ncolumn and direction.</p>\n<p>Also, When a sortable column header (or footer) is clicked, the event <code translate="no" class="notranslate text-nowrap">sort-changed</code> will be emitted\nwith a single argument containing the context object of <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code>. See the\n<a href="#detection-of-sorting-change" class="font-weight-bold">Detection of sorting change</a> section below for details about the\nsort-changed event and the context object.</p>\n<p>When <code translate="no" class="notranslate text-nowrap">no-local-sorting</code> is true, the <code translate="no" class="notranslate text-nowrap">sort-compare</code> prop has no effect.</p>\n<h3 id="change-initial-sort-direction"><span class="bd-content-title">Change initial sort direction<a class="anchorjs-link" href="#change-initial-sort-direction" aria-label="Anchor"></a></span></h3>\n<p>Control the order in which ascending and descending sorting is applied when a sortable column header\nis clicked, by using the <code translate="no" class="notranslate text-nowrap">sort-direction</code> prop. The default value <code translate="no" class="notranslate text-nowrap">&#39;asc&#39;</code> applies ascending sort\nfirst (when a column is not currently sorted). To reverse the behavior and sort in descending\ndirection first, set it to <code translate="no" class="notranslate text-nowrap">&#39;desc&#39;</code>.</p>\n<p>If you don&#39;t want the current sorting direction to change when clicking another sortable column\nheader, set <code translate="no" class="notranslate text-nowrap">sort-direction</code> to <code translate="no" class="notranslate text-nowrap">&#39;last&#39;</code>. This will maintain the sorting direction of the previously\nsorted column.</p>\n<p>For individual column initial sort direction (which applies when the column transitions from\nunsorted to sorted), specify the property <code translate="no" class="notranslate text-nowrap">sortDirection</code> in <code translate="no" class="notranslate text-nowrap">fields</code>. See the\n<a href="#complete-example" class="font-weight-bold">Complete Example</a> below for an example of using this feature.</p>\n<h2 id="filtering"><span class="bd-content-title">Filtering<a class="anchorjs-link" href="#filtering" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">ENHANCED in 2.0.0-rc.28</span></p>\n<p>Filtering, when used, is applied by default to the <strong>original items</strong> array data. <code translate="no" class="notranslate text-nowrap">b-table</code> provides\nseveral options for how data is filtered.</p>\n<p>It is currently not possible to filter based on result of formatting via\n<a href="#scoped-field-slots" class="font-weight-bold">scoped field slots</a>.</p>\n<h3 id="built-in-filtering"><span class="bd-content-title">Built in filtering<a class="anchorjs-link" href="#built-in-filtering" aria-label="Anchor"></a></span></h3>\n<p>The item&#39;s row data values are stringified (see the sorting section above for how stringification is\ndone) and the filter searches that stringified data (excluding any of the special properties that\nbegin with an underscore <code translate="no" class="notranslate text-nowrap">&#39;_&#39;</code>). The stringification also, by default, includes any data not shown\nin the presented columns.</p>\n<p>With the default built-in filter function, The <code translate="no" class="notranslate text-nowrap">filter</code> prop value can either be a string or a\n<code translate="no" class="notranslate text-nowrap">RegExp</code> object (regular expressions should <em>not</em> have the <code translate="no" class="notranslate text-nowrap">/g</code> global flag set).</p>\n<p>If the stringified row contains the provided string value or matches the RegExp expression then it\nis included in the displayed results.</p>\n<p>Set the <code translate="no" class="notranslate text-nowrap">filter</code> prop to <code translate="no" class="notranslate text-nowrap">null</code> or an empty string to clear the current filter.</p>\n<h3 id="built-in-filtering-options"><span class="bd-content-title">Built in filtering options<a class="anchorjs-link" href="#built-in-filtering-options" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.28</span></p>\n<p>There are several options for controlling what data the filter is applied against.</p>\n<ul>\n<li>The <code translate="no" class="notranslate text-nowrap">filter-ignored-fields</code> prop accepts an array of <em>top-level</em> (immediate properties of the row\ndata) field keys that should be ignored when filtering.</li>\n<li>The <code translate="no" class="notranslate text-nowrap">filter-included-fields</code> prop accepts an array of <em>top-level</em> (immediate properties of the row\ndata) field keys that should used when filtering. All other field keys not included in this array\nwill be ignored. This feature can be handy when you want to filter on specific columns. If the\nspecified array is empty, then <em>all</em> fields are included, except those specified via the prop\n<code translate="no" class="notranslate text-nowrap">filter-ignored-fields</code>. If a field key is specified in both <code translate="no" class="notranslate text-nowrap">filter-ignored-fields</code> and\n<code translate="no" class="notranslate text-nowrap">filter-included-fields</code>, then <code translate="no" class="notranslate text-nowrap">filter-included-fields</code> takes precedence.</li>\n<li>Normally, <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> filters based on the stringified record data. If the field has a <code translate="no" class="notranslate text-nowrap">formatter</code>\nfunction specified, you can optionally filter based on the result of the formatter by setting the\n<a href="#field-definition-reference" class="font-weight-bold">field definition property</a> <code translate="no" class="notranslate text-nowrap">filterByFormatted</code> to <code translate="no" class="notranslate text-nowrap">true</code>. If the\nfield does not have a formatter function, this option is ignored.</li>\n</ul>\n<p>The props <code translate="no" class="notranslate text-nowrap">filter-ignored-fields</code> and <code translate="no" class="notranslate text-nowrap">filter-included-fields</code>, and the field definition property\n<code translate="no" class="notranslate text-nowrap">filterByFormatted</code> have no effect when using a <a href="#custom-filter-function" class="font-weight-bold">custom filter function</a>,\nor <a href="#using-items-provider-functions" class="font-weight-bold">items provider</a> based filtering.</p>\n<h3 id="custom-filter-function"><span class="bd-content-title">Custom filter function<a class="anchorjs-link" href="#custom-filter-function" aria-label="Anchor"></a></span></h3>\n<p>You can also use a custom filter function, by setting the prop <code translate="no" class="notranslate text-nowrap">filter-function</code> to a reference of\ncustom filter test function. The filter function will be passed two arguments:</p>\n<ul>\n<li>the original item row record data object. <strong>Treat this argument as read-only.</strong></li>\n<li>the content of the <code translate="no" class="notranslate text-nowrap">filter</code> prop (could be a string, RegExp, array, or object)</li>\n</ul>\n<p>The function should return <code translate="no" class="notranslate text-nowrap">true</code> if the record matches your criteria or <code translate="no" class="notranslate text-nowrap">false</code> if the record is to\nbe filtered out.</p>\n<p>For proper reactive updates to the displayed data, when not filtering you should set the <code translate="no" class="notranslate text-nowrap">filter</code>\nprop to <code translate="no" class="notranslate text-nowrap">null</code> or an empty string (and not an empty object or array). The filter function will not\nbe called when the <code translate="no" class="notranslate text-nowrap">filter</code> prop is a falsey value.</p>\n<p>The display of the <code translate="no" class="notranslate text-nowrap">empty-filter-text</code> relies on the truthiness of the <code translate="no" class="notranslate text-nowrap">filter</code> prop.</p>\n<p><strong>Deprecation Notice:</strong> Passing a filter function via the <code translate="no" class="notranslate text-nowrap">filter</code> prop is deprecated and should be\navoided. Use the <code translate="no" class="notranslate text-nowrap">filter-function</code> prop instead.</p>\n<h3 id="filter-events"><span class="bd-content-title">Filter events<a class="anchorjs-link" href="#filter-events" aria-label="Anchor"></a></span></h3>\n<p>When local filtering is applied, and the resultant number of items change, <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> will emit the\n<code translate="no" class="notranslate text-nowrap">filtered</code> event with a two arguments:</p>\n<ul>\n<li>an array reference which is the complete list of items passing the filter routine. <strong>Treat this\nargument as read-only.</strong></li>\n<li>the number of records that passed the filter test (the length of the first argument)</li>\n</ul>\n<p>Setting the prop <code translate="no" class="notranslate text-nowrap">filter</code> to null or an empty string will clear local items filtering.</p>\n<h3 id="filtering-notes"><span class="bd-content-title">Filtering notes<a class="anchorjs-link" href="#filtering-notes" aria-label="Anchor"></a></span></h3>\n<p>See the <a href="#complete-example" class="font-weight-bold">Complete Example</a> below for an example of using the <code translate="no" class="notranslate text-nowrap">filter</code> feature.</p>\n<h2 id="pagination"><span class="bd-content-title">Pagination<a class="anchorjs-link" href="#pagination" aria-label="Anchor"></a></span></h2>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> supports built in pagination of item data. You can control how many rows are displayed\nat a time by setting the <code translate="no" class="notranslate text-nowrap">per-page</code> prop to the maximum number of rows you would like displayed, and\nuse the <code translate="no" class="notranslate text-nowrap">current-page</code> prop to specify which page to display (starting from page <code translate="no" class="notranslate text-nowrap">1</code>). If you set\n<code translate="no" class="notranslate text-nowrap">current-page</code> to a value larger than the computed number of pages, then no rows will be shown.</p>\n<p>You can use the <a href="/docs/components/pagination" class="font-weight-bold"><code translate="no" class="notranslate text-nowrap">&lt;b-pagination&gt;</code></a> component in conjunction with\n<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> for providing control over pagination.</p>\n<p>Setting <code translate="no" class="notranslate text-nowrap">per-page</code> to <code translate="no" class="notranslate text-nowrap">0</code> (default) will disable the local items pagination feature.</p>\n<h2 id="using-items-provider-functions"><span class="bd-content-title">Using items provider functions<a class="anchorjs-link" href="#using-items-provider-functions" aria-label="Anchor"></a></span></h2>\n<p>As mentioned under the <a href="#items-record-data" class="font-weight-bold">Items</a> prop section, it is possible to use a function to\nprovide the row data (items), by specifying a function reference via the <code translate="no" class="notranslate text-nowrap">items</code> prop.</p>\n<p>The provider function is called with the following signature:</p>\n\x3c!-- eslint-disable no-undef --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no">provider(ctx, [callback])</pre><p>The <code translate="no" class="notranslate text-nowrap">ctx</code> is the context object associated with the table state, and contains the following five\nproperties:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">currentPage</code></td>\n<td>Number</td>\n<td>The current page number (starting from 1, the value of the <code translate="no" class="notranslate text-nowrap">current-page</code> prop)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">perPage</code></td>\n<td>Number</td>\n<td>The maximum number of rows per page to display (the value of the <code translate="no" class="notranslate text-nowrap">per-page</code> prop)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">filter</code></td>\n<td>String or RegExp or Object</td>\n<td>the value of the <code translate="no" class="notranslate text-nowrap">filter</code> prop</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">sortBy</code></td>\n<td>String</td>\n<td>The current column key being sorted, or an empty string if not sorting</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">sortDesc</code></td>\n<td>Boolean</td>\n<td>The current sort direction (<code translate="no" class="notranslate text-nowrap">true</code> for descending, <code translate="no" class="notranslate text-nowrap">false</code> for ascending)</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">apiUrl</code></td>\n<td>String</td>\n<td>the value provided to the <code translate="no" class="notranslate text-nowrap">api-url</code> prop. <code translate="no" class="notranslate text-nowrap">null</code> if none provided.</td>\n</tr>\n</tbody></table>\n</div><p>The second argument <code translate="no" class="notranslate text-nowrap">callback</code> is an optional parameter for when using the callback asynchronous\nmethod.</p>\n<p><strong>Example: returning an array of data (synchronous):</strong></p>\n\x3c!-- eslint-disable no-unused-vars, prefer-const --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params">ctx</span>) </span>{\n  <span class="hljs-keyword">let</span> items = []\n\n  <span class="hljs-comment">// Perform any items processing needed</span>\n\n  <span class="hljs-comment">// Must return an array</span>\n  <span class="hljs-keyword">return</span> items || []\n}</pre><p><strong>Example: Using callback to return data (asynchronous):</strong></p>\n\x3c!-- eslint-disable no-unused-vars, standard/no-callback-literal --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params">ctx, callback</span>) </span>{\n  <span class="hljs-keyword">const</span> params = <span class="hljs-string">\'?page=\'</span> + ctx.currentPage + <span class="hljs-string">\'&amp;size=\'</span> + ctx.perPage\n\n  <span class="hljs-keyword">this</span>.fetchData(<span class="hljs-string">\'/some/url\'</span> + params)\n    .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> {\n      <span class="hljs-comment">// Pluck the array of items off our axios response</span>\n      <span class="hljs-keyword">const</span> items = data.items\n      <span class="hljs-comment">// Provide the array of items to the callback</span>\n      callback(items)\n    })\n    .catch(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n      callback([])\n    })\n\n  <span class="hljs-comment">// Must return null or undefined to signal b-table that callback is being used</span>\n  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>\n}</pre><p><strong>Example: Using a Promise to return data (asynchronous):</strong></p>\n\x3c!-- eslint-disable no-unused-vars, no-undef --\x3e\n\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myProvider</span>(<span class="hljs-params">ctx</span>) </span>{\n  <span class="hljs-keyword">const</span> promise = axios.get(<span class="hljs-string">\'/some/url?page=\'</span> + ctx.currentPage + <span class="hljs-string">\'&amp;size=\'</span> + ctx.perPage)\n\n  <span class="hljs-comment">// Must return a promise that resolves to an array of items</span>\n  <span class="hljs-keyword">return</span> promise.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> {\n    <span class="hljs-comment">// Pluck the array of items off our axios response</span>\n    <span class="hljs-keyword">const</span> items = data.items\n    <span class="hljs-comment">// Must return an array of items or an empty array if an error occurred</span>\n    <span class="hljs-keyword">return</span> items || []\n  })\n}</pre><h3 id="automated-table-busy-state"><span class="bd-content-title">Automated table busy state<a class="anchorjs-link" href="#automated-table-busy-state" aria-label="Anchor"></a></span></h3>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> automatically tracks/controls it&#39;s <code translate="no" class="notranslate text-nowrap">busy</code> state when items provider functions are used,\nhowever it also provides a <code translate="no" class="notranslate text-nowrap">busy</code> prop that can be used either to override the inner <code translate="no" class="notranslate text-nowrap">busy</code> state,\nor to monitor <code translate="no" class="notranslate text-nowrap">&lt;b-pagination&gt;</code>&#39;s current busy state in your application using the 2-way <code translate="no" class="notranslate text-nowrap">.sync</code>\nmodifier.</p>\n<p><strong>Note:</strong> in order to allow <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> fully track it&#39;s <code translate="no" class="notranslate text-nowrap">busy</code> state, the custom items provider\nfunction should handle errors from data sources and return an empty array to <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code>.</p>\n<p><strong>Example: usage of busy state</strong></p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"my-table"</span>\n      <span class="hljs-attr">:busy.sync</span>=<span class="hljs-string">"isBusy"</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">"myProvider"</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>\n      <span class="hljs-attr">...</span>\n    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data () {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">isBusy</span>: <span class="hljs-literal">false</span>\n      }\n    }\n    methods: {\n      myProvider (ctx) {\n        <span class="hljs-comment">// Here we don\'t set isBusy prop, so busy state will be</span>\n        <span class="hljs-comment">// handled by table itself</span>\n        <span class="hljs-comment">// this.isBusy = true</span>\n        <span class="hljs-keyword">let</span> promise = axios.get(<span class="hljs-string">\'/some/url\'</span>)\n\n        <span class="hljs-keyword">return</span> promise.then(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n          <span class="hljs-keyword">const</span> items = data.items\n          <span class="hljs-comment">// Here we could override the busy state, setting isBusy to false</span>\n          <span class="hljs-comment">// this.isBusy = false</span>\n          <span class="hljs-keyword">return</span>(items)\n        }).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> {\n          <span class="hljs-comment">// Here we could override the busy state, setting isBusy to false</span>\n          <span class="hljs-comment">// this.isBusy = false</span>\n          <span class="hljs-comment">// Returning an empty array, allows table to correctly handle</span>\n          <span class="hljs-comment">// internal busy state in case of error</span>\n          <span class="hljs-keyword">return</span> []\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></pre><p><strong>Notes:</strong></p>\n<ul>\n<li>If you manually place the table in the <code translate="no" class="notranslate text-nowrap">busy</code> state, the items provider will <strong>not</strong> be\ncalled/refreshed until the <code translate="no" class="notranslate text-nowrap">busy</code> state has been set to <code translate="no" class="notranslate text-nowrap">false</code>.</li>\n<li>All click related and hover events, and sort-changed events will <strong>not</strong> be emitted when in the\n<code translate="no" class="notranslate text-nowrap">busy</code> state (either set automatically during provider update, or when manually set).</li>\n</ul>\n<h3 id="provider-paging-filtering-and-sorting"><span class="bd-content-title">Provider paging, filtering, and sorting<a class="anchorjs-link" href="#provider-paging-filtering-and-sorting" aria-label="Anchor"></a></span></h3>\n<p>By default, the items provider function is responsible for <strong>all paging, filtering, and sorting</strong> of\nthe data, before passing it to <code translate="no" class="notranslate text-nowrap">b-table</code> for display.</p>\n<p>You can disable provider paging, filtering, and sorting (individually) by setting the following\n<code translate="no" class="notranslate text-nowrap">b-table</code> prop(s) to <code translate="no" class="notranslate text-nowrap">true</code>:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code translate="no" class="notranslate text-nowrap">no-provider-paging</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>When <code translate="no" class="notranslate text-nowrap">true</code> enables the use of <code translate="no" class="notranslate text-nowrap">b-table</code> local data pagination</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">no-provider-sorting</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>When <code translate="no" class="notranslate text-nowrap">true</code> enables the use of <code translate="no" class="notranslate text-nowrap">b-table</code> local sorting</td>\n</tr>\n<tr>\n<td><code translate="no" class="notranslate text-nowrap">no-provider-filtering</code></td>\n<td>Boolean</td>\n<td><code translate="no" class="notranslate text-nowrap">false</code></td>\n<td>When <code translate="no" class="notranslate text-nowrap">true</code> enables the use of <code translate="no" class="notranslate text-nowrap">b-table</code> local filtering</td>\n</tr>\n</tbody></table>\n</div><p>When <code translate="no" class="notranslate text-nowrap">no-provider-paging</code> is <code translate="no" class="notranslate text-nowrap">false</code> (default), you should only return at maximum, <code translate="no" class="notranslate text-nowrap">perPage</code> number\nof records.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> needs reference to your pagination and filtering values in order to trigger the\ncalling of the provider function. So be sure to bind to the <code translate="no" class="notranslate text-nowrap">per-page</code>, <code translate="no" class="notranslate text-nowrap">current-page</code> and\n<code translate="no" class="notranslate text-nowrap">filter</code> props on <code translate="no" class="notranslate text-nowrap">b-table</code> to trigger the provider update function call (unless you have the\nrespective <code translate="no" class="notranslate text-nowrap">no-provider-*</code> prop set to <code translate="no" class="notranslate text-nowrap">true</code>).</li>\n<li>The <code translate="no" class="notranslate text-nowrap">no-local-sorting</code> prop has no effect when <code translate="no" class="notranslate text-nowrap">items</code> is a provider function.</li>\n</ul>\n<h3 id="force-refreshing-of-table-data"><span class="bd-content-title">Force refreshing of table data<a class="anchorjs-link" href="#force-refreshing-of-table-data" aria-label="Anchor"></a></span></h3>\n<p>You may also trigger the refresh of the provider function by emitting the event <code translate="no" class="notranslate text-nowrap">refresh::table</code> on\n<code translate="no" class="notranslate text-nowrap">$root</code> with the single argument being the <code translate="no" class="notranslate text-nowrap">id</code> of your <code translate="no" class="notranslate text-nowrap">b-table</code>. You must have a unique ID on your\ntable for this to work.</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::refresh::table\'</span>, <span class="hljs-string">\'my-table\'</span>)</pre><p>Or by calling the <code translate="no" class="notranslate text-nowrap">refresh()</code> method on the table reference</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"table"</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">this</span>.$refs.table.refresh()</pre><p><strong>Note:</strong> If the table is in the <code translate="no" class="notranslate text-nowrap">busy</code> state (i.e. a provider update is currently running), the\nrefresh will wait until the current update is completed. If there is currently a refresh pending and\na new refresh is requested, then only one refresh will occur.</p>\n<h3 id="detection-of-sorting-change"><span class="bd-content-title">Detection of sorting change<a class="anchorjs-link" href="#detection-of-sorting-change" aria-label="Anchor"></a></span></h3>\n<p>By listening on <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> <code translate="no" class="notranslate text-nowrap">sort-changed</code> event, you can detect when the sorting key and direction\nhave changed.</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> @<span class="hljs-attr">sort-changed</span>=<span class="hljs-string">"sortingChanged"</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><p>The <code translate="no" class="notranslate text-nowrap">sort-changed</code> event provides a single argument of the table&#39;s current state context object.\nThis context object has the same format as used by items provider functions.</p>\n<pre class="hljs js text-monospace p-2 notranslate" translate="no"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    sortingChanged(ctx) {\n      <span class="hljs-comment">// ctx.sortBy   ==&gt; Field key for sorting by (or null for no sorting)</span>\n      <span class="hljs-comment">// ctx.sortDesc ==&gt; true if sorting descending, false otherwise</span>\n    }\n  }\n}</pre><p>You can also obtain the current sortBy and sortDesc values by using the <code translate="no" class="notranslate text-nowrap">:sort-by.sync</code> and\n<code translate="no" class="notranslate text-nowrap">:sort-desc.sync</code> two-way props respectively (see section <a href="#sorting" class="font-weight-bold">Sorting</a> above for details).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span> <span class="hljs-attr">:sort-by.sync</span>=<span class="hljs-string">"mySortBy"</span> <span class="hljs-attr">:sort-desc.sync</span>=<span class="hljs-string">"mySortDesc"</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><h3 id="server-side-rendering"><span class="bd-content-title">Server side rendering<a class="anchorjs-link" href="#server-side-rendering" aria-label="Anchor"></a></span></h3>\n<p>Special care must be taken when using server side rendering (SSR) and an <code translate="no" class="notranslate text-nowrap">items</code> provider function.\nMake sure you handle any special situations that may be needed server side when fetching your data!</p>\n<p>When <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> is mounted in the document, it will automatically trigger a provider update call.</p>\n<h2 id="light-weight-tables"><span class="bd-content-title">Light-weight tables<a class="anchorjs-link" href="#light-weight-tables" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">NEW in v2.0.0-rc.23</span></p>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code> provides a great alternative to <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> if you just need simple display of\ntabular data. The <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code> component provides all of the styling and formatting features of\n<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> (including row details and stacked support), while <strong>excluding</strong> the following features:</p>\n<ul>\n<li>Filtering</li>\n<li>Sorting</li>\n<li>Pagination</li>\n<li>Items provider support</li>\n<li>Selectable rows</li>\n<li>Busy table state and styling</li>\n<li>Fixed top and bottom rows</li>\n<li>Empty row support</li>\n</ul>\n<h3 id="table-lite-as-a-plugin"><span class="bd-content-title">Table lite as a plugin<a class="anchorjs-link" href="#table-lite-as-a-plugin" aria-label="Anchor"></a></span></h3>\n<p>The <code translate="no" class="notranslate text-nowrap">TablePlugin</code> includes <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code>. For convenience, BootstrapVue also provides a\n<code translate="no" class="notranslate text-nowrap">TableLitePlugin</code> which installs only <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code>. <code translate="no" class="notranslate text-nowrap">TableLitePlugin</code> is available as a top\nlevel named export.</p>\n<h2 id="simple-tables"><span class="bd-content-title">Simple tables<a class="anchorjs-link" href="#simple-tables" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">NEW in v2.0.0-rc.28</span></p>\n<p>The <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> component gives the user complete control over the rendering of the table\ncontent, while providing basic Bootstrap v4 table styling. <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> is a wrapper component\naround the <code translate="no" class="notranslate text-nowrap">&lt;table&gt;</code> element. Inside the component, via the <code translate="no" class="notranslate text-nowrap">default</code> slot, you can use any or all\nof the BootstrapVue <a href="#table-helper-components" class="font-weight-bold">table helper components</a>: <code translate="no" class="notranslate text-nowrap">&lt;b-thead&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-tfoot&gt;</code>,\n<code translate="no" class="notranslate text-nowrap">&lt;b-tbody&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-tr&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-th&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-td&gt;</code>, and the HTML5 elements <code translate="no" class="notranslate text-nowrap">&lt;caption&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;colgroup&gt;</code> and\n<code translate="no" class="notranslate text-nowrap">&lt;col&gt;</code>. Contrary to the component&#39;s name, one can create simple or complex table layouts with\n<code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code>.</p>\n<p><code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> provides basic styling options via props: <code translate="no" class="notranslate text-nowrap">striped</code>, <code translate="no" class="notranslate text-nowrap">bordered</code>, <code translate="no" class="notranslate text-nowrap">borderless</code>,\n<code translate="no" class="notranslate text-nowrap">outlined</code>, <code translate="no" class="notranslate text-nowrap">small</code>, <code translate="no" class="notranslate text-nowrap">hover</code>, <code translate="no" class="notranslate text-nowrap">dark</code>, <code translate="no" class="notranslate text-nowrap">fixed</code>, <code translate="no" class="notranslate text-nowrap">responsive</code> and <code translate="no" class="notranslate text-nowrap">sticky-header</code>. Note that <code translate="no" class="notranslate text-nowrap">stacked</code>\nmode is available but requires some additional markup to generate the cell headings, as described in\nthe <a href="#simple-tables-and-stacked-mode" class="font-weight-bold">Simple tables and stacked mode</a> section below. Sticky columns\nare also supported, but also require a bit of additional markup to specify which columns are to be\nsticky. See below for more information on using <a href="#simple-tables-and-sticky-columns" class="font-weight-bold">sticky columns</a>.</p>\n<p>Since <code translate="no" class="notranslate text-nowrap">b-table-simple</code> is just a wrapper component, of which you will need to render content inside,\nit does not provide any of the advanced features of <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> (i.e. row events, head events,\nsorting, pagination, filtering, foot-clone, etc).</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table-simple</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">small</span> <span class="hljs-attr">caption-top</span> <span class="hljs-attr">responsive</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>Items sold in August, grouped by Country and City:<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-thead</span> <span class="hljs-attr">head-variant</span>=<span class="hljs-string">"dark"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>Region<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span>Clothes<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>Accessories<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Country<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>City<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Trousers<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Skirts<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Dresses<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Bracelets<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Rings<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-thead</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tbody</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"3"</span>&gt;</span>Belgium<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-right"</span>&gt;</span>Antwerp<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>72<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-right"</span>&gt;</span>Gent<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>46<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"warning"</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>50<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-right"</span>&gt;</span>Brussels<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>51<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>27<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"2"</span>&gt;</span>The Netherlands<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-right"</span>&gt;</span>Amsterdam<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>89<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>34<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>85<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-right"</span>&gt;</span>Utrecht<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>36<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"warning"</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tfoot</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"7"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"secondary"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-right"</span>&gt;</span>\n          Total Rows: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tfoot</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-table-simple</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-simple.vue --&gt;</span></pre><p>When in <code translate="no" class="notranslate text-nowrap">responsive</code> or <code translate="no" class="notranslate text-nowrap">sticky-header</code> mode, the <code translate="no" class="notranslate text-nowrap">&lt;table&gt;</code> element is wrapped inside a <code translate="no" class="notranslate text-nowrap">&lt;div&gt;</code>\nelement. If you need to apply additional classes to the <code translate="no" class="notranslate text-nowrap">&lt;table&gt;</code> element, use the <code translate="no" class="notranslate text-nowrap">table-classes</code>\nprop.</p>\n<p>Any additional attributes given to <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> will always be applied to the <code translate="no" class="notranslate text-nowrap">&lt;table&gt;</code>\nelement.</p>\n<h3 id="simple-tables-and-stacked-mode"><span class="bd-content-title">Simple tables and stacked mode<a class="anchorjs-link" href="#simple-tables-and-stacked-mode" aria-label="Anchor"></a></span></h3>\n<p>A bit of additional markup is required on your <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> body cells when the table is in\nstacked mode. Specifically, BootstrapVue uses a special data attribute to create the cell&#39;s heading,\nof which you can supply to <code translate="no" class="notranslate text-nowrap">&lt;b-td&gt;</code> or <code translate="no" class="notranslate text-nowrap">&lt;b-th&gt;</code> via the <code translate="no" class="notranslate text-nowrap">stacked-heading</code> prop. Only plain strings\nare supported (not HTML markup), as we use the pseudo element <code translate="no" class="notranslate text-nowrap">::before</code> and css <code translate="no" class="notranslate text-nowrap">content</code> property.</p>\n<p>Here is the same table as above, set to be always stacked, which has the extra markup to handle\nstacked mode (specifically for generating the cell headings):</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-table-simple</span> <span class="hljs-attr">hover</span> <span class="hljs-attr">small</span> <span class="hljs-attr">caption-top</span> <span class="hljs-attr">stacked</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>Items sold in August, grouped by Country and City:<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-thead</span> <span class="hljs-attr">head-variant</span>=<span class="hljs-string">"dark"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>Region<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span>Clothes<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>Accessories<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Country<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>City<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Trousers<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Skirts<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Dresses<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Bracelets<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Rings<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-thead</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tbody</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>Belgium (3 Cities)<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"City"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-left"</span>&gt;</span>Antwerp<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Trousers"</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Skirts"</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Dresses"</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Bracelets"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>72<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Rings"</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"City"</span>&gt;</span>Gent<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Trousers"</span>&gt;</span>46<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Skirts"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"warning"</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Dresses"</span>&gt;</span>50<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Bracelets"</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Rings"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"City"</span>&gt;</span>Brussels<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Trousers"</span>&gt;</span>51<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Skirts"</span>&gt;</span>27<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Dresses"</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Bracelets"</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Rings"</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-center"</span>&gt;</span>The Netherlands (2 Cities)<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"City"</span>&gt;</span>Amsterdam<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Trousers"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span>&gt;</span>89<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Skirts"</span>&gt;</span>34<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Dresses"</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Bracelets"</span>&gt;</span>85<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Rings"</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"City"</span>&gt;</span>Utrecht<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Trousers"</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Skirts"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Clothes: Dresses"</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Bracelets"</span>&gt;</span>36<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">stacked-heading</span>=<span class="hljs-string">"Accessories: Rings"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"warning"</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tfoot</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"7"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"secondary"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-right"</span>&gt;</span>\n          Total Rows: <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tfoot</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-table-simple</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-simple-stacked.vue --&gt;</span></pre><p>Like <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code>, table headers (<code translate="no" class="notranslate text-nowrap">&lt;thead&gt;</code>) and footers (<code translate="no" class="notranslate text-nowrap">&lt;tfoot&gt;</code>) are\nvisually hidden when the table is visually stacked. If you need a header or footer, you can do so by\ncreating an extra <code translate="no" class="notranslate text-nowrap">&lt;b-tr&gt;</code> inside of the <code translate="no" class="notranslate text-nowrap">&lt;b-tbody&gt;</code> component (or in a second <code translate="no" class="notranslate text-nowrap">&lt;b-tbody&gt;</code>\ncomponent), and set a role of <code translate="no" class="notranslate text-nowrap">columnheader</code> on the child <code translate="no" class="notranslate text-nowrap">&lt;b-th&gt;</code> cells, and use Bootstrap v4\n<a href="/docs/reference/utility-classes" class="font-weight-bold">responsive display utility classes</a> to hide the extra row (or\n<code translate="no" class="notranslate text-nowrap">&lt;b-tbody&gt;</code>) above a certain breakpoint when the table is no longer visually stacked (the breakpoint\nshould match the stacked table breakpoint you have set), i.e. <code translate="no" class="notranslate text-nowrap">&lt;b-tr class=&quot;d-md-none&quot;&gt;</code> would hide\nthe row on medium and wider screens, while <code translate="no" class="notranslate text-nowrap">&lt;b-tbody class=&quot;d-md-none&quot;&gt;</code> would hide the row group on\nmedium and wider screens.</p>\n<p><strong>Note:</strong> stacked mode with <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> requires that you use the BootstrapVue\n<a href="#table-helper-components" class="font-weight-bold">table helper components</a>. Use of the regular <code translate="no" class="notranslate text-nowrap">&lt;tbody&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;tr&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code>\nand <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> element tags will not work as expected, nor will they automatically apply any of the\nrequired accessibility attributes.</p>\n<h3 id="simple-tables-and-sticky-columns"><span class="bd-content-title">Simple tables and sticky columns<a class="anchorjs-link" href="#simple-tables-and-sticky-columns" aria-label="Anchor"></a></span></h3>\n<p>Sticky columns are supported with <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code>, but you will need to set the <code translate="no" class="notranslate text-nowrap">sticky-column</code>\nprop on each table cell (in the <code translate="no" class="notranslate text-nowrap">thead</code>, <code translate="no" class="notranslate text-nowrap">tbody</code>, and <code translate="no" class="notranslate text-nowrap">tfoot</code> row groups) in the column that is to\nbe sticky. For example:</p>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">b-table-simple</span> <span class="hljs-attr">responsive</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-thead</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 4<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-thead</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tbody</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Row Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Row Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-td</span>&gt;</span>Cell<span class="hljs-tag">&lt;/<span class="hljs-name">b-td</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tbody</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-tfoot</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-tr</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span> <span class="hljs-attr">sticky-column</span>&gt;</span>Sticky Column Footer<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 1<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 2<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 3<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-th</span>&gt;</span>Heading 4<span class="hljs-tag">&lt;/<span class="hljs-name">b-th</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-tr</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-tfoot</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-table-responsive</span>&gt;</span></pre><p>As with <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code>, sticky columns are not supported when the <code translate="no" class="notranslate text-nowrap">stacked</code> prop\nis set on <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code>.</p>\n<h3 id="table-simple-as-a-plugin"><span class="bd-content-title">Table simple as a plugin<a class="anchorjs-link" href="#table-simple-as-a-plugin" aria-label="Anchor"></a></span></h3>\n<p>The <code translate="no" class="notranslate text-nowrap">TablePlugin</code> includes <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> and all of the helper components. For convenience,\nBootstrapVue also provides a <code translate="no" class="notranslate text-nowrap">TableSimplePlugin</code> which installs <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> and all of the\nhelper components. <code translate="no" class="notranslate text-nowrap">TableSimplePlugin</code> is available as a top level named export.</p>\n<h2 id="table-helper-components"><span class="bd-content-title">Table helper components<a class="anchorjs-link" href="#table-helper-components" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">NEW in v2.0.0-rc.28</span></p>\n<p>BootstrapVue provides additional helper child components when using <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code>, or the named\nslots <code translate="no" class="notranslate text-nowrap">top-row</code>, <code translate="no" class="notranslate text-nowrap">bottom-row</code>, and <code translate="no" class="notranslate text-nowrap">thead-top</code> (all of which accept table child elements). The\nhelper components are as follows:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">b-tbody</code></li>\n<li><code translate="no" class="notranslate text-nowrap">b-thead</code></li>\n<li><code translate="no" class="notranslate text-nowrap">b-tfoot</code></li>\n<li><code translate="no" class="notranslate text-nowrap">b-tr</code></li>\n<li><code translate="no" class="notranslate text-nowrap">b-td</code></li>\n<li><code translate="no" class="notranslate text-nowrap">b-th</code></li>\n</ul>\n<p>These components are optimized to handle converting variants to the appropriate classes (such as\nhandling table <code translate="no" class="notranslate text-nowrap">dark</code> mode), and automatically applying certain accessibility attributes (i.e.\n<code translate="no" class="notranslate text-nowrap">role</code>s and <code translate="no" class="notranslate text-nowrap">scope</code>s) and can handle the stacked table and sticky-header requirements. Components\n<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code> use these helper components internally.</p>\n<p>In the <a href="#simple-tables" class="font-weight-bold">Simple tables</a> example, we are using the helper components <code translate="no" class="notranslate text-nowrap">&lt;b-thead&gt;</code>,\n<code translate="no" class="notranslate text-nowrap">&lt;b-tbody&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-tr&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-th&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-tr&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-tfoot&gt;</code>. While you can use regular table child\nelements (i.e. <code translate="no" class="notranslate text-nowrap">&lt;tbody&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;tr&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;td&gt;</code>, etc) within <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code>, and the named slots\n<code translate="no" class="notranslate text-nowrap">top-row</code>, <code translate="no" class="notranslate text-nowrap">bottom-row</code>, and <code translate="no" class="notranslate text-nowrap">thead-top</code>, it is recommended to use these BootstrapVue table <code translate="no" class="notranslate text-nowrap">&lt;b-t*&gt;</code>\nhelper components. Note that there are no helper components for <code translate="no" class="notranslate text-nowrap">&lt;caption&gt;</code> or <code translate="no" class="notranslate text-nowrap">&lt;colgroup&gt;</code>+<code translate="no" class="notranslate text-nowrap">&lt;col&gt;</code>,\nso you may these two HTML5 elements directly in <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code>.</p>\n<ul>\n<li>Table helper components <code translate="no" class="notranslate text-nowrap">&lt;b-tr&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-td&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-th&gt;</code> all accept a <code translate="no" class="notranslate text-nowrap">variant</code> prop, which will\napply one of the Bootstrap theme colors (custom theme colors are supported via\n<a href="/docs/reference/theming" class="font-weight-bold">theming</a>.) and will automatically adjust to use the correct variant\nclass based on the table&#39;s <code translate="no" class="notranslate text-nowrap">dark</code> mode.</li>\n<li>The helper components <code translate="no" class="notranslate text-nowrap">&lt;b-thead&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-tfoot&gt;</code> accept a <code translate="no" class="notranslate text-nowrap">head-variant</code> and <code translate="no" class="notranslate text-nowrap">foot-variant</code> prop\nrespectively. Supported values are <code translate="no" class="notranslate text-nowrap">&#39;dark&#39;</code>, <code translate="no" class="notranslate text-nowrap">&#39;light&#39;</code> or <code translate="no" class="notranslate text-nowrap">null</code> (<code translate="no" class="notranslate text-nowrap">null</code> uses the default table\nbackground). These variants also control the text color (light text for <code translate="no" class="notranslate text-nowrap">&#39;dark&#39;</code> variant, and dark\ntext for the <code translate="no" class="notranslate text-nowrap">&#39;light&#39;</code> variant).</li>\n<li>Accessibility attributes <code translate="no" class="notranslate text-nowrap">role</code> and <code translate="no" class="notranslate text-nowrap">scope</code> are automatically set on <code translate="no" class="notranslate text-nowrap">&lt;b-th&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-td&gt;</code>\ncomponents based on their location (thead, tbody, or tfoot) and their <code translate="no" class="notranslate text-nowrap">rowspan</code> or <code translate="no" class="notranslate text-nowrap">colspan</code>\nprops. You can override the automatic <code translate="no" class="notranslate text-nowrap">scope</code> and <code translate="no" class="notranslate text-nowrap">role</code> values by setting the appropriate\nattribute on the helper component.</li>\n<li>For <code translate="no" class="notranslate text-nowrap">&lt;b-tbody&gt;</code>, <code translate="no" class="notranslate text-nowrap">&lt;b-thead&gt;</code>, and <code translate="no" class="notranslate text-nowrap">&lt;b-tfoot&gt;</code> helper components, the appropriate default <code translate="no" class="notranslate text-nowrap">role</code> of\n<code translate="no" class="notranslate text-nowrap">&#39;rowgroup&#39;</code> will be applied, unless you override the role by supplying a <code translate="no" class="notranslate text-nowrap">role</code> attribute.</li>\n<li>For the <code translate="no" class="notranslate text-nowrap">&lt;b-tr&gt;</code> helper component, the appropriate default <code translate="no" class="notranslate text-nowrap">role</code> of <code translate="no" class="notranslate text-nowrap">&#39;row&#39;</code> will be applied,\nunless you override the role by supplying a <code translate="no" class="notranslate text-nowrap">role</code> attribute. <code translate="no" class="notranslate text-nowrap">&lt;b-tr&gt;</code> does not add a <code translate="no" class="notranslate text-nowrap">scope</code>.</li>\n<li>The <code translate="no" class="notranslate text-nowrap">&lt;b-tbody&gt;</code> element supports rendering a Vue <code translate="no" class="notranslate text-nowrap">&lt;transition-group&gt;</code> when either, or both, of the\n<code translate="no" class="notranslate text-nowrap">tbody-transition-props</code> and <code translate="no" class="notranslate text-nowrap">tbody-transition-handlers</code> props are used. See the\n<a href="#table-body-transition-support" class="font-weight-bold">Table body transition support</a> section for more details.</li>\n</ul>\n<h2 id="accessibility"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-label="Anchor"></a></span></h2>\n<p>The <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code> components, when using specific features, will attempt to\nprovide the best accessibility markup possible.</p>\n<p>When using <code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> with the helper table components, elements will have the appropriate\nroles applied by default, of which you can optionally override. When using click handlers on the\n<code translate="no" class="notranslate text-nowrap">&lt;b-table-simple&gt;</code> helper components, you will need to apply appropriate <code translate="no" class="notranslate text-nowrap">aria-*</code> attributes, and\nset <code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code> to make the click actions accessible to screen reader and keyboard-only users.\nYou should also listen for <code translate="no" class="notranslate text-nowrap">@keydown.enter.prevent</code> to handle users pressing <kbd class="notranslate" translate="no">ENTER</kbd> to\ntrigger your click on cells or rows (required for accessibility for keyboard-only users).</p>\n<h3 id="heading-accessibility"><span class="bd-content-title">Heading accessibility<a class="anchorjs-link" href="#heading-accessibility" aria-label="Anchor"></a></span></h3>\n<p>When a column (field) is sortable (<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> only) or there is a <code translate="no" class="notranslate text-nowrap">head-clicked</code> listener\nregistered, the header (and footer) <code translate="no" class="notranslate text-nowrap">&lt;th&gt;</code> cells will be placed into the document tab sequence (via\n<code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code>) for accessibility by keyboard-only and screen reader users, so that the user may\ntrigger a click (by pressing <kbd class="notranslate" translate="no">ENTER</kbd> on the header cells.</p>\n<h3 id="data-row-accessibility"><span class="bd-content-title">Data row accessibility<a class="anchorjs-link" href="#data-row-accessibility" aria-label="Anchor"></a></span></h3>\n<p>When the table is in <code translate="no" class="notranslate text-nowrap">selectable</code> mode (<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> only), or if there is a <code translate="no" class="notranslate text-nowrap">row-clicked</code> event\nlistener registered (<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code>), all data item rows (<code translate="no" class="notranslate text-nowrap">&lt;tr&gt;</code> elements) will be\nplaced into the document tab sequence (via <code translate="no" class="notranslate text-nowrap">tabindex=&quot;0&quot;</code>) to allow keyboard-only and screen reader\nusers the ability to click the rows by pressing <kbd class="notranslate" translate="no">ENTER</kbd>.</p>\n<p>When the table items rows are placed in the document tab sequence (<code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and\n<code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code>), they will also support basic keyboard navigation when focused:</p>\n<ul>\n<li><kbd class="notranslate" translate="no">DOWN</kbd> will move to the next row</li>\n<li><kbd class="notranslate" translate="no">UP</kbd> will move to the previous row</li>\n<li><kbd class="notranslate" translate="no">END</kbd> or <kbd class="notranslate" translate="no">DOWN</kbd>+<kbd class="notranslate" translate="no">SHIFT</kbd> will move to the last row</li>\n<li><kbd class="notranslate" translate="no">HOME</kbd> or <kbd class="notranslate" translate="no">UP</kbd>+<kbd class="notranslate" translate="no">SHIFT</kbd> will move to the first row</li>\n<li><kbd class="notranslate" translate="no">ENTER</kbd> or <kbd class="notranslate" translate="no">SPACE</kbd> to click the row.</li>\n<li><kbd class="notranslate" translate="no">SHIFT</kbd> and <kbd class="notranslate" translate="no">CTRL</kbd> modifiers will also work (depending on the table selectable\nmode, for <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> only).</li>\n</ul>\n<h3 id="row-event-accessibility"><span class="bd-content-title">Row event accessibility<a class="anchorjs-link" href="#row-event-accessibility" aria-label="Anchor"></a></span></h3>\n<p>Note the following row based events/actions (available with <code translate="no" class="notranslate text-nowrap">&lt;b-table&gt;</code> and <code translate="no" class="notranslate text-nowrap">&lt;b-table-lite&gt;</code>) are\nnot considered accessible, and should only be used if the functionality is non critical or can be\nprovided via other means:</p>\n<ul>\n<li><code translate="no" class="notranslate text-nowrap">row-dblclicked</code></li>\n<li><code translate="no" class="notranslate text-nowrap">row-contextmenu</code></li>\n<li><code translate="no" class="notranslate text-nowrap">row-hovered</code></li>\n<li><code translate="no" class="notranslate text-nowrap">row-unhovered</code></li>\n<li><code translate="no" class="notranslate text-nowrap">row-middle-clicked</code></li>\n</ul>\n<p>Note that the <code translate="no" class="notranslate text-nowrap">row-middle-clicked</code> event is not supported in all browsers (i.e. IE, Safari and most\nmobile browsers). When listening for <code translate="no" class="notranslate text-nowrap">row-middle-clicked</code> events originating on elements that do not\nsupport input or navigation, you will often want to explicitly prevent other default actions mapped\nto the down action of the middle mouse button. On Windows this is usually autoscroll, and on macOS\nand Linux this is usually clipboard paste. This can be done by preventing the default behaviour of\nthe <code translate="no" class="notranslate text-nowrap">mousedown</code> or <code translate="no" class="notranslate text-nowrap">pointerdown</code> event.</p>\n<p>Additionally, you may need to avoid opening a default system or browser context menu after a right\nclick. Due to timing differences between operating systems, this too is not a preventable default\nbehaviour of <code translate="no" class="notranslate text-nowrap">row-middle-clicked</code>. Instead, this can be done by preventing the default behaviour of\nthe <code translate="no" class="notranslate text-nowrap">row-contextmenu</code> event.</p>\n<p>It is recommended you test your app in as many browser and device variants as possible to ensure\nyour app handles the various inconsistencies with events.</p>\n<h2 id="complete-example"><span class="bd-content-title">Complete example<a class="anchorjs-link" href="#complete-example" aria-label="Anchor"></a></span></h2>\n<pre class="hljs html text-monospace p-2 notranslate" translate="no"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- User Interface controls --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Sort"</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">"sm"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"sortBySelect"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"sortBy"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"sortBySelect"</span> <span class="hljs-attr">:options</span>=<span class="hljs-string">"sortOptions"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"w-75"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"first"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>&gt;</span>-- none --<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"sortDesc"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"!sortBy"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"w-25"</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"false"</span>&gt;</span>Asc<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"true"</span>&gt;</span>Desc<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Initial sort"</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">"sm"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"initialSortSelect"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">"sortDirection"</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">"initialSortSelect"</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">"[\'asc\', \'desc\', \'last\']"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Filter"</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">"sm"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"filterInput"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filter"</span>\n              <span class="hljs-attr">type</span>=<span class="hljs-string">"search"</span>\n              <span class="hljs-attr">id</span>=<span class="hljs-string">"filterInput"</span>\n              <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"Type to Search"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-input-group-append</span>&gt;</span>\n              <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">"!filter"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"filter = \'\'"</span>&gt;</span>Clear<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n            <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group-append</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-input-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">lg</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Filter On"</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"3"</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">"sm"</span>\n          <span class="hljs-attr">description</span>=<span class="hljs-string">"Leave all unchecked to filter on all data"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterOn"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-1"</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"name"</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"age"</span>&gt;</span>Age<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-checkbox</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"isActive"</span>&gt;</span>Active<span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-checkbox-group</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"5"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Per page"</span>\n          <span class="hljs-attr">label-cols-sm</span>=<span class="hljs-string">"6"</span>\n          <span class="hljs-attr">label-cols-md</span>=<span class="hljs-string">"4"</span>\n          <span class="hljs-attr">label-cols-lg</span>=<span class="hljs-string">"3"</span>\n          <span class="hljs-attr">label-align-sm</span>=<span class="hljs-string">"right"</span>\n          <span class="hljs-attr">label-size</span>=<span class="hljs-string">"sm"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"perPageSelect"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">"perPage"</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">"perPageSelect"</span>\n            <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n            <span class="hljs-attr">:options</span>=<span class="hljs-string">"pageOptions"</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">sm</span>=<span class="hljs-string">"7"</span> <span class="hljs-attr">md</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-pagination</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">"currentPage"</span>\n          <span class="hljs-attr">:total-rows</span>=<span class="hljs-string">"totalRows"</span>\n          <span class="hljs-attr">:per-page</span>=<span class="hljs-string">"perPage"</span>\n          <span class="hljs-attr">align</span>=<span class="hljs-string">"fill"</span>\n          <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"my-0"</span>\n        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-pagination</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Main table element --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-table</span>\n      <span class="hljs-attr">show-empty</span>\n      <span class="hljs-attr">small</span>\n      <span class="hljs-attr">stacked</span>=<span class="hljs-string">"md"</span>\n      <span class="hljs-attr">:items</span>=<span class="hljs-string">"items"</span>\n      <span class="hljs-attr">:fields</span>=<span class="hljs-string">"fields"</span>\n      <span class="hljs-attr">:current-page</span>=<span class="hljs-string">"currentPage"</span>\n      <span class="hljs-attr">:per-page</span>=<span class="hljs-string">"perPage"</span>\n      <span class="hljs-attr">:filter</span>=<span class="hljs-string">"filter"</span>\n      <span class="hljs-attr">:filterIncludedFields</span>=<span class="hljs-string">"filterOn"</span>\n      <span class="hljs-attr">:sort-by.sync</span>=<span class="hljs-string">"sortBy"</span>\n      <span class="hljs-attr">:sort-desc.sync</span>=<span class="hljs-string">"sortDesc"</span>\n      <span class="hljs-attr">:sort-direction</span>=<span class="hljs-string">"sortDirection"</span>\n      @<span class="hljs-attr">filtered</span>=<span class="hljs-string">"onFiltered"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[name]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"row"</span>&gt;</span>\n        {{ row.value.first }} {{ row.value.last }}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"[actions]"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"row"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"info(row.item, row.index, $event.target)"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mr-1"</span>&gt;</span>\n          Info modal\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"row.toggleDetails"</span>&gt;</span>\n          {{ row.detailsShowing ? \'Hide\' : \'Show\' }} Details\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"row-details"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"row"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-card</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value, key) in row.item"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"key"</span>&gt;</span>{{ key }}: {{ value }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-card</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-table</span>&gt;</span>\n\n    <span class="hljs-comment">&lt;!-- Info modal --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">"infoModal.id"</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"infoModal.title"</span> <span class="hljs-attr">ok-only</span> @<span class="hljs-attr">hide</span>=<span class="hljs-string">"resetInfoModal"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span>{{ infoModal.content }}<span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">items</span>: [\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Dickerson\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Macdonald\'</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Shaw\'</span> } },\n          {\n            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>,\n            <span class="hljs-attr">age</span>: <span class="hljs-number">9</span>,\n            <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Mini\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Navarro\'</span> },\n            <span class="hljs-attr">_rowVariant</span>: <span class="hljs-string">\'success\'</span>\n          },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">89</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Geneva\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Wilson\'</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Jami\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Carney\'</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">27</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Essie\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Dunlap\'</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">40</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Thor\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Macdonald\'</span> } },\n          {\n            <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-attr">age</span>: <span class="hljs-number">87</span>,\n            <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Larsen\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Shaw\'</span> },\n            <span class="hljs-attr">_cellVariants</span>: { <span class="hljs-attr">age</span>: <span class="hljs-string">\'danger\'</span>, <span class="hljs-attr">isActive</span>: <span class="hljs-string">\'warning\'</span> }\n          },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">26</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Mitzi\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Navarro\'</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Genevieve\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Wilson\'</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">38</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'John\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Carney\'</span> } },\n          { <span class="hljs-attr">isActive</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>, <span class="hljs-attr">name</span>: { <span class="hljs-attr">first</span>: <span class="hljs-string">\'Dick\'</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">\'Dunlap\'</span> } }\n        ],\n        <span class="hljs-attr">fields</span>: [\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'name\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Person Full name\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">sortDirection</span>: <span class="hljs-string">\'desc\'</span> },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'age\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Person age\'</span>, <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">class</span>: <span class="hljs-string">\'text-center\'</span> },\n          {\n            <span class="hljs-attr">key</span>: <span class="hljs-string">\'isActive\'</span>,\n            <span class="hljs-attr">label</span>: <span class="hljs-string">\'is Active\'</span>,\n            <span class="hljs-attr">formatter</span>: <span class="hljs-function">(<span class="hljs-params">value, key, item</span>) =&gt;</span> {\n              <span class="hljs-keyword">return</span> value ? <span class="hljs-string">\'Yes\'</span> : <span class="hljs-string">\'No\'</span>\n            },\n            <span class="hljs-attr">sortable</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-attr">sortByFormatted</span>: <span class="hljs-literal">true</span>,\n            <span class="hljs-attr">filterByFormatted</span>: <span class="hljs-literal">true</span>\n          },\n          { <span class="hljs-attr">key</span>: <span class="hljs-string">\'actions\'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">\'Actions\'</span> }\n        ],\n        <span class="hljs-attr">totalRows</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">currentPage</span>: <span class="hljs-number">1</span>,\n        <span class="hljs-attr">perPage</span>: <span class="hljs-number">5</span>,\n        <span class="hljs-attr">pageOptions</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>],\n        <span class="hljs-attr">sortBy</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">sortDesc</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">sortDirection</span>: <span class="hljs-string">\'asc\'</span>,\n        <span class="hljs-attr">filter</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">filterOn</span>: [],\n        <span class="hljs-attr">infoModal</span>: {\n          <span class="hljs-attr">id</span>: <span class="hljs-string">\'info-modal\'</span>,\n          <span class="hljs-attr">title</span>: <span class="hljs-string">\'\'</span>,\n          <span class="hljs-attr">content</span>: <span class="hljs-string">\'\'</span>\n        }\n      }\n    },\n    <span class="hljs-attr">computed</span>: {\n      sortOptions() {\n        <span class="hljs-comment">// Create an options list from our fields</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.fields\n          .filter(<span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> f.sortable)\n          .map(<span class="hljs-function"><span class="hljs-params">f</span> =&gt;</span> {\n            <span class="hljs-keyword">return</span> { <span class="hljs-attr">text</span>: f.label, <span class="hljs-attr">value</span>: f.key }\n          })\n      }\n    },\n    mounted() {\n      <span class="hljs-comment">// Set the initial number of items</span>\n      <span class="hljs-keyword">this</span>.totalRows = <span class="hljs-keyword">this</span>.items.length\n    },\n    <span class="hljs-attr">methods</span>: {\n      info(item, index, button) {\n        <span class="hljs-keyword">this</span>.infoModal.title = <span class="hljs-string">`Row index: <span class="hljs-subst">${index}</span>`</span>\n        <span class="hljs-keyword">this</span>.infoModal.content = <span class="hljs-built_in">JSON</span>.stringify(item, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>)\n        <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::show::modal\'</span>, <span class="hljs-keyword">this</span>.infoModal.id, button)\n      },\n      resetInfoModal() {\n        <span class="hljs-keyword">this</span>.infoModal.title = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.infoModal.content = <span class="hljs-string">\'\'</span>\n      },\n      onFiltered(filteredItems) {\n        <span class="hljs-comment">// Trigger pagination to update the number of buttons/pages due to filtering</span>\n        <span class="hljs-keyword">this</span>.totalRows = filteredItems.length\n        <span class="hljs-keyword">this</span>.currentPage = <span class="hljs-number">1</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-table-complete.vue --&gt;</span></pre>\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);