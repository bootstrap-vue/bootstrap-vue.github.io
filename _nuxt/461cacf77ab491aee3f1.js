(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{536:function(n,l){n.exports='<h1 id="modals"><span class="bd-content-title">Modals</span></h1>\n<p class="bd-lead">Modals are streamlined, but flexible dialog prompts powered by JavaScript and CSS. They support a\nnumber of use cases from user notification to completely custom content and feature a handful of\nhelpful sub-components, sizes, variants, accessibility, and more.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-1</span>&gt;</span>Launch demo modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-1"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"BootstrapVue"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span>&gt;</span>Hello from modal!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal.vue --&gt;</span></pre><h2 id="overview"><span class="bd-content-title">Overview<a class="anchorjs-link" href="#overview" aria-label="Anchor"></a></span></h2>\n<p><code>&lt;b-modal&gt;</code>, by default, has an <strong>OK</strong> and <strong>Cancel</strong> buttons in the footer. These buttons can be\ncustomized by setting various props on the component. You can customize the size of the buttons,\ndisable buttons, hide the <strong>Cancel</strong> button (i.e. OK Only), choose a variant (e.g. <code>danger</code> for a\nred OK button) using the <code>ok-variant</code> and <code>cancel-variant</code> props, and provide custom button content\nusing the <code>ok-title</code> and <code>cancel-title</code> props, or using the named slots <code>modal-ok</code> and\n<code>modal-cancel</code>.</p>\n<p><code>&lt;b-modal&gt;</code> supports close on ESC (enabled by default), close on backdrop click (enabled by\ndefault), and the <code>X</code> close button in the header (enabled by default). These features may be\ndisabled by setting the the props <code>no-close-on-esc</code>, <code>no-close-on-backdrop</code>, and <code>hide-header-close</code>\nrespectively.</p>\n<p>You can override the modal title via the named slot <code>modal-title</code>, override the header completely\nvia the <code>modal-header</code> slot, and override the footer completely via the <code>modal-footer</code> slot.</p>\n<p><strong>Note</strong>: when using the <code>modal-footer</code> slot, the default <strong>OK</strong> and <strong>Cancel</strong> buttons will not be\npresent. Also, if you use the <code>modal-header</code> slot, the default header <code>X</code> close button will not be\npresent, nor can you use the <code>modal-title</code> slot.</p>\n<p><span class="badge badge-warning small">CHANGED in 2.0.0-rc.20</span> Modals will not render their\ncontent in the document until they are shown (lazily rendered). Modals, when visible, are rendered\n<strong>appended to the <code>&lt;body&gt;</code> element</strong>. The placement of the <code>&lt;b-modal&gt;</code> component will not affect\nlayout, as it always renders as a placeholder comment node (<code>&lt;!----&gt;</code>). You can revert to the\nbehaviour of previous BootstrapVue versions via the use of the\n<a href="#lazy-loading-and-static-modals"><code>static</code> prop</a>.</p>\n<h2 id="toggle-modal-visibility"><span class="bd-content-title">Toggle modal visibility<a class="anchorjs-link" href="#toggle-modal-visibility" aria-label="Anchor"></a></span></h2>\n<p>There are several methods that you can employ to toggle the visibility of <code>&lt;b-modal&gt;</code>.</p>\n<h3 id="using-v-b-modal-directive"><span class="bd-content-title">Using <code>v-b-modal</code> directive<a class="anchorjs-link" href="#using-v-b-modal-directive" aria-label="Anchor"></a></span></h3>\n<p>Other elements can easily show modals using the <code>v-b-modal</code> directive.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Using modifiers --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.my-modal</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- Using value --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal</span>=<span class="hljs-string">"\'my-modal\'"</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-comment">&lt;!-- The modal --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"my-modal"</span>&gt;</span>Hello From My Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-directive.vue --&gt;</span></pre><p>This approach will automatically return focus to the trigger element once the modal closes (similar\nto default Bootstrap functionality). Other approaches for toggling modal visibility may require\nadditional code to implement this accessibility feature.</p>\n<p>See the <a href="#accessibility">Accessibility</a> section below for details.</p>\n<h3 id="using-thisbvmodalshow-and-thisbvmodalhide-instance-methods"><span class="bd-content-title">Using <code>this.$bvModal.show()</code> and <code>this.$bvModal.hide()</code> instance methods<a class="anchorjs-link" href="#using-thisbvmodalshow-and-thisbvmodalhide-instance-methods" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.19</span></p>\n<p>When BootstrapVue is installed as a plugin, or the <samp>ModalPlugin</samp> plugin is used,\nBoostrapVue will inject a <code>$bvModal</code> object on every Vue instance (components, apps).\n<code>this.$bvModal</code> exposes several methods, of which two are for showing and hiding modals:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>this.$bvModal.show(id)</code></td>\n<td>Show the modal with the specified <code>id</code></td>\n</tr>\n<tr>\n<td><code>this.$bvModal.hide(id)</code></td>\n<td>Hide the modal with the specified <code>id</code></td>\n</tr>\n</tbody></table>\n</div><p>Both methods return immediately after being called.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"show-btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$bvModal.show(\'bv-modal-example\')"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bv-modal-example"</span> <span class="hljs-attr">hide-footer</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"modal-title"</span>&gt;</span>\n      Using <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>$bvModal<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> Methods\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-block text-center"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello From This Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span> <span class="hljs-attr">block</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$bvModal.hide(\'bv-modal-example\')"</span>&gt;</span>Close Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-bv-modal-hide-show.vue --&gt;</span></pre><h3 id="using-show-hide-and-toggle-component-methods"><span class="bd-content-title">Using <code>show()</code>, <code>hide()</code>, and <code>toggle()</code> component methods<a class="anchorjs-link" href="#using-show-hide-and-toggle-component-methods" aria-label="Anchor"></a></span></h3>\n<p>You can access modal using <code>ref</code> attribute and then call the <code>show()</code>, <code>hide()</code> or <code>toggle()</code>\nmethods.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"show-btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showModal"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"toggle-btn"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span>&gt;</span>Toggle Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"my-modal"</span> <span class="hljs-attr">hide-footer</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Using Component Methods"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-block text-center"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Hello From My Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-danger"</span> <span class="hljs-attr">block</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hideModal"</span>&gt;</span>Close Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-2"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-warning"</span> <span class="hljs-attr">block</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span>&gt;</span>Toggle Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    <span class="hljs-attr">methods</span>: {\n      showModal() {\n        <span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">\'my-modal\'</span>].show()\n      },\n      hideModal() {\n        <span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">\'my-modal\'</span>].hide()\n      },\n      toggleModal() {\n        <span class="hljs-comment">// We pass the ID of the button that we want to return focus to</span>\n        <span class="hljs-comment">// when the modal has hidden</span>\n        <span class="hljs-keyword">this</span>.$refs[<span class="hljs-string">\'my-modal\'</span>].toggle(<span class="hljs-string">\'#toggle-btn\'</span>)\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-methods.vue --&gt;</span></pre><p>The <code>hide()</code> method accepts an optional string <code>trigger</code> argument for defining what triggered the\nmodal to close. See section <a href="#prevent-closing">Prevent Closing</a> below for details.</p>\n<p><strong>Note:</strong> It is recommended to use the <code>this.$bvModal.show()</code> and <code>this.$bvModal.hide()</code> methods\n(mentioned in the previous section) instead of using <code>$ref</code> methods.</p>\n<h3 id="using-v-model-property"><span class="bd-content-title">Using <code>v-model</code> property<a class="anchorjs-link" href="#using-v-model-property" aria-label="Anchor"></a></span></h3>\n<p><code>v-model</code> property is always automatically synced with <code>&lt;b-modal&gt;</code> visible state and you can\nshow/hide using <code>v-model</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"modalShow = !modalShow"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"modalShow"</span>&gt;</span>Hello From Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">modalShow</span>: <span class="hljs-literal">false</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-v-model.vue --&gt;</span></pre><p>When using the <code>v-model</code> prop, <strong>do not</strong> use the <code>visible</code> prop at the same time.</p>\n<h3 id="using-scoped-slot-scope-methods"><span class="bd-content-title">Using scoped slot scope methods<a class="anchorjs-link" href="#using-scoped-slot-scope-methods" aria-label="Anchor"></a></span></h3>\n<p>Refer to the <a href="#custom-rendering-with-slots">Custom rendering with slots</a> section on using the\nvarious methods passed to scoped slots for closing modals.</p>\n<h3 id="emitting-events-on-root"><span class="bd-content-title">Emitting events on $root<a class="anchorjs-link" href="#emitting-events-on-root" aria-label="Anchor"></a></span></h3>\n<p>You can emit <code>bv::show::modal</code>, <code>bv::hide::modal</code>, and <code>bv::toggle::modal</code> events on <code>$root</code> with\nthe first argument set to the modal&#39;s id. An optional second argument can specify the element to\nreturn focus to once the modal is closed. The second argument can be a CSS selector, an element\nreference, or a component reference (the root element of the component will be focused).</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showModal"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"btnShow"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"btnToggle"</span>&gt;</span>Toggle Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-1"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"d-block"</span>&gt;</span>Hello From My Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hideModal"</span>&gt;</span>Close Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"toggleModal"</span>&gt;</span>Toggle Me<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><pre class="hljs js text-monospace p-2"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    showModal() {\n      <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::show::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#btnShow\'</span>)\n    },\n    hideModal() {\n      <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::hide::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#btnShow\'</span>)\n    },\n    toggleModal() {\n      <span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::toggle::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#btnToggle\'</span>)\n    }\n  }\n}</pre><p><strong>Note:</strong> It is recommended to use the <code>this.$bvModal.show()</code> and <code>this.$bvModal.hide()</code> methods\n(mentioned in a previous section) instead of emitting <code>$root</code> events.</p>\n<h3 id="prevent-closing"><span class="bd-content-title">Prevent closing<a class="anchorjs-link" href="#prevent-closing" aria-label="Anchor"></a></span></h3>\n<p>To prevent <code>&lt;b-modal&gt;</code> from closing (for example when validation fails). you can call the\n<code>.preventDefault()</code> method of the event object passed to your <code>ok</code> (<strong>OK</strong> button), <code>cancel</code>\n(<strong>Cancel</strong> button), <code>close</code> (modal header close button) and <code>hide</code> event handlers. Note that\n<code>.preventDefault()</code>, when used, <strong>must</strong> be called synchronously, as async is not supported.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-prevent-closing</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mt-3"</span>&gt;</span>\n      Submitted Names:\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"submittedNames.length === 0"</span>&gt;</span>--<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-0 pl-3"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"name in submittedNames"</span>&gt;</span>{{ name }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span>\n      <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-prevent-closing"</span>\n      <span class="hljs-attr">ref</span>=<span class="hljs-string">"modal"</span>\n      <span class="hljs-attr">title</span>=<span class="hljs-string">"Submit Your Name"</span>\n      @<span class="hljs-attr">show</span>=<span class="hljs-string">"resetModal"</span>\n      @<span class="hljs-attr">hidden</span>=<span class="hljs-string">"resetModal"</span>\n      @<span class="hljs-attr">ok</span>=<span class="hljs-string">"handleOk"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"form"</span> @<span class="hljs-attr">submit.stop.prevent</span>=<span class="hljs-string">"handleSubmit"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-form-group</span>\n          <span class="hljs-attr">:state</span>=<span class="hljs-string">"nameState"</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">"Name"</span>\n          <span class="hljs-attr">label-for</span>=<span class="hljs-string">"name-input"</span>\n          <span class="hljs-attr">invalid-feedback</span>=<span class="hljs-string">"Name is required"</span>\n        &gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>\n            <span class="hljs-attr">id</span>=<span class="hljs-string">"name-input"</span>\n            <span class="hljs-attr">v-model</span>=<span class="hljs-string">"name"</span>\n            <span class="hljs-attr">:state</span>=<span class="hljs-string">"nameState"</span>\n            <span class="hljs-attr">required</span>\n          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-form-group</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">nameState</span>: <span class="hljs-literal">null</span>,\n        <span class="hljs-attr">submittedNames</span>: []\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      checkFormValidity() {\n        <span class="hljs-keyword">const</span> valid = <span class="hljs-keyword">this</span>.$refs.form.checkValidity()\n        <span class="hljs-keyword">this</span>.nameState = valid ? <span class="hljs-string">\'valid\'</span> : <span class="hljs-string">\'invalid\'</span>\n        <span class="hljs-keyword">return</span> valid\n      },\n      resetModal() {\n        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.nameState = <span class="hljs-literal">null</span>\n      },\n      handleOk(bvModalEvt) {\n        <span class="hljs-comment">// Prevent modal from closing</span>\n        bvModalEvt.preventDefault()\n        <span class="hljs-comment">// Trigger submit handler</span>\n        <span class="hljs-keyword">this</span>.handleSubmit()\n      },\n      handleSubmit() {\n        <span class="hljs-comment">// Exit when the form isn\'t valid</span>\n        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.checkFormValidity()) {\n          <span class="hljs-keyword">return</span>\n        }\n        <span class="hljs-comment">// Push the name to submitted names</span>\n        <span class="hljs-keyword">this</span>.submittedNames.push(<span class="hljs-keyword">this</span>.name)\n        <span class="hljs-comment">// Hide the modal manually</span>\n        <span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n          <span class="hljs-keyword">this</span>.$refs.modal.hide()\n        })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-prevent-closing.vue --&gt;</span></pre><p><strong>Note</strong>: events <code>ok</code>, <code>cancel</code>, and <code>close</code> are emitted by modal&#39;s built in <strong>OK</strong>, <strong>Cancel</strong>, and\nheader close (<strong>X</strong>) buttons respectively. These events will not be emitted, by default, if you have\nprovided your own buttons in the <code>modal-footer</code> slot or have hidden the footer. In this case use the\n<code>hide</code> event to control cancelling of the modal close. Event <code>hide</code> is always emitted, even if <code>ok</code>,\n<code>cancel</code>, and <code>close</code> are emitted.</p>\n<p>The <code>ok</code>, <code>cancel</code>, <code>close</code> and <code>hide</code> event object (<code>BvModalEvent</code>) contains several properties and\nmethods:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Property or Method</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>preventDefault()</code></td>\n<td>Method</td>\n<td>When called prevents the modal from closing</td>\n</tr>\n<tr>\n<td><code>trigger</code></td>\n<td>Property</td>\n<td>Will be one of: <code>ok</code> (Default <strong>OK</strong> Clicked), <code>cancel</code> (Default <strong>Cancel</strong> clicked), <code>esc</code> (if the <kbd>ESC</kbd> key was pressed), <code>backdrop</code> (if the backdrop was clicked), <code>headerclose</code> (if the header X button was clicked), the first argument provided to the <code>hide()</code> method, or <code>null</code> otherwise.</td>\n</tr>\n<tr>\n<td><code>target</code></td>\n<td>Property</td>\n<td>A reference to the modal element</td>\n</tr>\n<tr>\n<td><code>vueTarget</code></td>\n<td>property</td>\n<td>A reference to the modal&#39;s Vue VM instance</td>\n</tr>\n<tr>\n<td><code>componentId</code></td>\n<td>property</td>\n<td>The modal&#39;s ID</td>\n</tr>\n</tbody></table>\n</div><p>You can set the value of <code>trigger</code> by passing an argument to the component&#39;s <code>hide()</code> method for\nadvanced control (i.e. detecting what button or action triggered the modal to hide).</p>\n<p><strong>Note:</strong> <code>ok</code>, <code>cancel</code>, or <code>close</code> events will be only emitted when the argument to <code>hide()</code> is\nstrictly <code>&#39;ok&#39;</code>, <code>&#39;cancel&#39;</code>, or <code>&#39;headerclose&#39;</code> respectively. The argument passed to <code>hide()</code> will\nbe placed into the <code>trigger</code> property of the event object.</p>\n<h2 id="modal-content"><span class="bd-content-title">Modal content<a class="anchorjs-link" href="#modal-content" aria-label="Anchor"></a></span></h2>\n<h3 id="using-the-grid"><span class="bd-content-title">Using the grid<a class="anchorjs-link" href="#using-the-grid" aria-label="Anchor"></a></span></h3>\n<p>Utilize the Bootstrap grid system within a modal by nesting <code>&lt;b-container fluid&gt;</code> within the\nmodal-body. Then, use the normal grid system <code>&lt;b-row&gt;</code> (or <code>&lt;b-form-row&gt;</code>) and <code>&lt;b-col&gt;</code> as you\nwould anywhere else.</p>\n<h3 id="tooltips-and-popovers"><span class="bd-content-title">Tooltips and popovers<a class="anchorjs-link" href="#tooltips-and-popovers" aria-label="Anchor"></a></span></h3>\n<p>Tooltips and popovers can be placed within modals as needed. When modals are closed, any tooltips\nand popovers within are also automatically dismissed. Tooltips and popovers are automatically\nappended to the modal element (to ensure correct z-indexing), although you can override where they\nare appended by specifying a container ID (refer to tooltip and popover docs for details).</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modalPopover</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modalPopover"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Modal with Popover"</span> <span class="hljs-attr">ok-only</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      This\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-popover</span>=<span class="hljs-string">"\'Popover inside a modal!\'"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Popover"</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      triggers a popover on click.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n      This <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">v-b-tooltip</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Tooltip in a modal!"</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> will show a tooltip on\n      hover.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-popover.vue --&gt;</span></pre><h2 id="lazy-loading-and-static-modals"><span class="bd-content-title">Lazy loading and static modals<a class="anchorjs-link" href="#lazy-loading-and-static-modals" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.20</span></p>\n<p>By default, modals will not render their content in the document until they are shown (lazily\nrendered). Modals that, when visible, are rendered appended to the <code>&lt;body&gt;</code> element. The <code>&lt;b-modal&gt;</code>\ncomponent will not affect layout, as they render as a placeholder comment node (<code>&lt;!----&gt;</code>) in the\nDOM position they are placed. Due to the portalling process, it can take two or more <code>$nextTick</code>s to\nrender changes of the content into the target.</p>\n<p>Modals can be rendered <em>in-place</em> in the document (i.e. where the <code>&lt;b-modal&gt;</code> component is placed in\nthe document) by setting the <code>static</code> prop to <code>true</code>. Note that the content of the modal will be\nrendered in the DOM even if the modal is not visible/shown when <code>static</code> is <code>true</code>. To make <code>static</code>\nmodals lazy rendered, also set the <code>lazy</code> prop to <code>true</code>. The modal will then appear in the document\n<em>only</em> when it is visible. Note, when in <code>static</code> mode, placement of the <code>&lt;b-modal&gt;</code> component <em>may\naffect layout</em> of your document and the modal.</p>\n<p>The <code>lazy</code> prop will have no effect if the prop <code>static</code> is not <code>true</code> (non-static modals will\n<em>always</em> be lazily rendered).</p>\n<h2 id="styling-options-and-customization"><span class="bd-content-title">Styling, options, and customization<a class="anchorjs-link" href="#styling-options-and-customization" aria-label="Anchor"></a></span></h2>\n<h3 id="modal-sizing"><span class="bd-content-title">Modal sizing<a class="anchorjs-link" href="#modal-sizing" aria-label="Anchor"></a></span></h3>\n<p>Modals have three optional sizes, available via the prop <code>size</code>. These sizes kick in at certain\nbreakpoints to avoid horizontal scrollbars on narrower viewports. Valid optional sizes are <code>sm</code>,\n<code>lg</code>, and <code>xl</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-xl</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>xl modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-lg</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>lg modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-sm</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>sm modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-xl"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"xl"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Extra Large Modal"</span>&gt;</span>Hello Extra Large Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-lg"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Large Modal"</span>&gt;</span>Hello Large Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-sm"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Small Modal"</span>&gt;</span>Hello Small Modal!<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-sizes.vue --&gt;</span></pre><p>The <code>size</code> prop maps the size to the <code>.modal-&lt;size&gt;</code> classes.</p>\n<h3 id="scrolling-long-content"><span class="bd-content-title">Scrolling long content<a class="anchorjs-link" href="#scrolling-long-content" aria-label="Anchor"></a></span></h3>\n<p>When modals become too long for the user&#39;s viewport or device, they scroll independent of the page\nitself. Try the demo below to see what we mean.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-tall</span>&gt;</span>Launch overflowing modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-tall"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Overflowing Content"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"i in 20"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span>&gt;</span>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\n      in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-scroll-overflow.vue --&gt;</span></pre><p>You can also create a scrollable modal that allows the scrolling of the modal body by setting the\nprop <code>scrollable</code> to <code>true</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-scrollable</span>&gt;</span>Launch scrolling modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-scrollable"</span> <span class="hljs-attr">scrollable</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Scrollable Content"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"i in 20"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"i"</span>&gt;</span>\n      Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\n      in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-scrollable-content.vue --&gt;</span></pre><h3 id="vertically-centered-modal"><span class="bd-content-title">Vertically centered modal<a class="anchorjs-link" href="#vertically-centered-modal" aria-label="Anchor"></a></span></h3>\n<p>Vertically center your modal in the viewport by setting the <code>centered</code> prop.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-center</span>&gt;</span>Launch centered modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-center"</span> <span class="hljs-attr">centered</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"BootstrapVue"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-4"</span>&gt;</span>Vertically centered modal!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-center-vertically.vue --&gt;</span></pre><p>Feel free to mix vertically <code>centered</code> with <code>scrollable</code>.</p>\n<h3 id="variants"><span class="bd-content-title">Variants<a class="anchorjs-link" href="#variants" aria-label="Anchor"></a></span></h3>\n<p>Control the header, footer, and body background and text variants by setting the\n<code>header-bg-variant</code>, <code>header-text-variant</code>, <code>body-bg-variant</code>, <code>body-text-variant</code>,\n<code>footer-bg-variant</code>, and <code>footer-text-variant</code> props. Use any of the standard Bootstrap variants\nsuch as <code>danger</code>, <code>warning</code>, <code>info</code>, <code>success</code>, <code>dark</code>, <code>light</code>, etc.</p>\n<p>The variants for the bottom border of the header and top border of the footer can be controlled by\nthe <code>header-border-variant</code> and <code>footer-border-variant</code> props respectively.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"show=true"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>&gt;</span>Show Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">"show"</span>\n      <span class="hljs-attr">title</span>=<span class="hljs-string">"Modal Variants"</span>\n      <span class="hljs-attr">:header-bg-variant</span>=<span class="hljs-string">"headerBgVariant"</span>\n      <span class="hljs-attr">:header-text-variant</span>=<span class="hljs-string">"headerTextVariant"</span>\n      <span class="hljs-attr">:body-bg-variant</span>=<span class="hljs-string">"bodyBgVariant"</span>\n      <span class="hljs-attr">:body-text-variant</span>=<span class="hljs-string">"bodyTextVariant"</span>\n      <span class="hljs-attr">:footer-bg-variant</span>=<span class="hljs-string">"footerBgVariant"</span>\n      <span class="hljs-attr">:footer-text-variant</span>=<span class="hljs-string">"footerTextVariant"</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-container</span> <span class="hljs-attr">fluid</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1 text-center"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Background<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span>Header<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"headerBgVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"headerTextVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span>Body<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"bodyBgVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"bodyTextVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-row</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"3"</span>&gt;</span>Footer<span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"footerBgVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">b-col</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">b-form-select</span>\n              <span class="hljs-attr">v-model</span>=<span class="hljs-string">"footerTextVariant"</span>\n              <span class="hljs-attr">:options</span>=<span class="hljs-string">"variants"</span>\n            &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-select</span>&gt;</span>\n          <span class="hljs-tag">&lt;/<span class="hljs-name">b-col</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-row</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-container</span>&gt;</span>\n\n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"modal-footer"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"w-100"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"float-left"</span>&gt;</span>Modal Footer Content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>\n          <span class="hljs-attr">variant</span>=<span class="hljs-string">"primary"</span>\n          <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>\n          <span class="hljs-attr">class</span>=<span class="hljs-string">"float-right"</span>\n          @<span class="hljs-attr">click</span>=<span class="hljs-string">"show=false"</span>\n        &gt;</span>\n          Close\n        <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,\n        <span class="hljs-attr">variants</span>: [<span class="hljs-string">\'primary\'</span>, <span class="hljs-string">\'secondary\'</span>, <span class="hljs-string">\'success\'</span>, <span class="hljs-string">\'warning\'</span>, <span class="hljs-string">\'danger\'</span>, <span class="hljs-string">\'info\'</span>, <span class="hljs-string">\'light\'</span>, <span class="hljs-string">\'dark\'</span>],\n        <span class="hljs-attr">headerBgVariant</span>: <span class="hljs-string">\'dark\'</span>,\n        <span class="hljs-attr">headerTextVariant</span>: <span class="hljs-string">\'light\'</span>,\n        <span class="hljs-attr">bodyBgVariant</span>: <span class="hljs-string">\'light\'</span>,\n        <span class="hljs-attr">bodyTextVariant</span>: <span class="hljs-string">\'dark\'</span>,\n        <span class="hljs-attr">footerBgVariant</span>: <span class="hljs-string">\'warning\'</span>,\n        <span class="hljs-attr">footerTextVariant</span>: <span class="hljs-string">\'dark\'</span>\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-variants.vue --&gt;</span></pre><p>You can also apply arbitrary classes to the modal dialog container, content (modal window itself),\nheader, body and footer via the <code>modal-class</code>, <code>content-class</code>, <code>header-class</code>, <code>body-class</code> and\n<code>footer-class</code> props, respectively. The props accept either a string or array of strings.</p>\n<h3 id="disable-open-and-close-animation"><span class="bd-content-title">Disable open and close animation<a class="anchorjs-link" href="#disable-open-and-close-animation" aria-label="Anchor"></a></span></h3>\n<p>To disable the fading transition/animation when modal opens and closes, just set the prop <code>no-fade</code>\non the <code>&lt;b-modal&gt;</code> component.</p>\n<h3 id="disabling-built-in-buttons"><span class="bd-content-title">Disabling built-in buttons<a class="anchorjs-link" href="#disabling-built-in-buttons" aria-label="Anchor"></a></span></h3>\n<p>You can disable the built-in footer buttons programmatically.</p>\n<p>You can disable the <strong>Cancel</strong> and <strong>OK</strong> buttons individually by setting the <code>cancel-disabled</code> and\n<code>ok-disabled</code> props, respectively, to <code>true</code>. Set the prop to <code>false</code> to re-enable the button.</p>\n<p>To disable both <strong>Cancel</strong> and <strong>OK</strong> buttons at the same time, simply set the <code>busy</code> prop to\n<code>true</code>. Set it to <code>false</code> to re-enable both buttons.</p>\n<h3 id="custom-rendering-with-slots"><span class="bd-content-title">Custom rendering with slots<a class="anchorjs-link" href="#custom-rendering-with-slots" aria-label="Anchor"></a></span></h3>\n<p><span class="badge badge-info small">ENHANCED in 2.0.0-rc.19</span></p>\n<p><code>&lt;b-modal&gt;</code> provides several named slots (of which some are optionally scoped) that you can use to\ncustomize the content of various sections of the modal.</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Slot</th>\n<th>Optionally Scoped</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td>Yes</td>\n<td>Main content of the modal</td>\n</tr>\n<tr>\n<td><code>modal-title</code></td>\n<td>Yes</td>\n<td>Content to place in the modal&#39;s title</td>\n</tr>\n<tr>\n<td><code>modal-header</code></td>\n<td>Yes</td>\n<td>Content to place in the header. Replaces the entire header including the close button</td>\n</tr>\n<tr>\n<td><code>modal-footer</code></td>\n<td>Yes</td>\n<td>Content to place in the footer. Replaces the entire footer including the button(s)</td>\n</tr>\n<tr>\n<td><code>modal-ok</code></td>\n<td>No</td>\n<td>Content to place inside the footer OK button</td>\n</tr>\n<tr>\n<td><code>modal-cancel</code></td>\n<td>No</td>\n<td>Content to place inside the footer CANCEL button</td>\n</tr>\n<tr>\n<td><code>modal-header-close</code></td>\n<td>No</td>\n<td>Content to place inside the header CLOSE (<code>x</code>) button</td>\n</tr>\n</tbody></table>\n</div><p>The scope available to the slots that support optional scoping are:</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method or Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ok()</code></td>\n<td>Closes the modal and fires the <code>ok</code> and <code>hide</code> events, with <code>bvModalEvent.trigger = &#39;ok&#39;</code></td>\n</tr>\n<tr>\n<td><code>cancel()</code></td>\n<td>Closes the modal and fires the <code>cancel</code> and <code>hide</code> events, with <code>bvModalEvent.trigger = &#39;cancel&#39;</code></td>\n</tr>\n<tr>\n<td><code>close()</code></td>\n<td>Closes the modal and fires the <code>close</code> and <code>hide</code> events, with <code>bvModalEvent.trigger = &#39;headerclose&#39;</code></td>\n</tr>\n<tr>\n<td><code>hide(trigger)</code></td>\n<td>Closes the modal and fires the <code>hide</code> event, with the <code>bvModalEvent.trigger = trigger</code> (trigger is optional)</td>\n</tr>\n<tr>\n<td><code>visible</code></td>\n<td>The visibility state of the modal. <code>true</code> if the modal is visible and <code>false</code> if not visible</td>\n</tr>\n</tbody></table>\n</div><h4 id="example-modal-using-custom-scoped-slots"><span class="bd-content-title">Example modal using custom scoped slots<a class="anchorjs-link" href="#example-modal-using-custom-scoped-slots" aria-label="Anchor"></a></span></h4>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$bvModal.show(\'modal-scoped\')"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-scoped"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"modal-header"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"{ close }"</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Emulate built in modal header close button action --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"close()"</span>&gt;</span>\n        Close Modal\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>Modal Header<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"default"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"{ hide }"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Modal Body with button<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hide()"</span>&gt;</span>Hide Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"modal-footer"</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"{ ok, cancel, hide }"</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Custom Footer<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Emulate built in modal footer ok and cancel button actions --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"success"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"ok()"</span>&gt;</span>\n        OK\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"danger"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"cancel()"</span>&gt;</span>\n        Cancel\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n      <span class="hljs-comment">&lt;!-- Button with custom close trigger value --&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">variant</span>=<span class="hljs-string">"outline-secondary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"hide(\'forget\')"</span>&gt;</span>\n        Forget it\n      <span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-scoped-slots.vue --&gt;</span></pre><h2 id="multiple-modal-support"><span class="bd-content-title">Multiple modal support<a class="anchorjs-link" href="#multiple-modal-support" aria-label="Anchor"></a></span></h2>\n<p>Unlike native Bootstrap v4, BootstrapVue supports multiple modals opened at the same time.</p>\n<p>To disable stacking for a specific modal, just set the prop <code>no-stacking</code> on the <code>&lt;b-modal&gt;</code>\ncomponent. This will hide the modal before another modal is shown.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-multi-1</span>&gt;</span>Open First Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-multi-1"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"lg"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"First Modal"</span> <span class="hljs-attr">ok-only</span> <span class="hljs-attr">no-stacking</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-2"</span>&gt;</span>First Modal<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-multi-2</span>&gt;</span>Open Second Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-multi-2"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Second Modal"</span> <span class="hljs-attr">ok-only</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-2"</span>&gt;</span>Second Modal<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> <span class="hljs-attr">v-b-modal.modal-multi-3</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span>&gt;</span>Open Third Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"modal-multi-3"</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"sm"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"Third Modal"</span> <span class="hljs-attr">ok-only</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-1"</span>&gt;</span>Third Modal<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-multiple.vue --&gt;</span></pre><p><strong>Notes:</strong></p>\n<ul>\n<li>Avoid nesting a <code>&lt;b-modal&gt;</code> <em>inside</em> another <code>&lt;b-modal&gt;</code>, as it may get &quot;constrained&quot; to the\nboundaries of the parent modal dialog (specifically when static modals are used).</li>\n<li>The opaque backdrop will appear progressively darker for each modal that is opened. This is\nexpected behaviour as each backdrop is opened over top the other modals and backdrops.</li>\n</ul>\n<h2 id="modal-message-boxes"><span class="bd-content-title">Modal message boxes<a class="anchorjs-link" href="#modal-message-boxes" aria-label="Anchor"></a></span></h2>\n<p><span class="badge badge-info small">NEW in 2.0.0-rc.19</span></p>\n<p>BootstrapVue provides a few built in Message Box methods on the exposed <code>this.$bvModal</code> object.\nThese methods provide a way to generate simple OK and Confirm style modal messages, from anywhere in\nyour app without having to explicitly place a <code>&lt;b-modal&gt;</code> component in your pages.</p>\n<div class="table-responsive-sm"><table class="b-table table table-bordered table-striped bv-docs-table">\n<thead class="thead-default">\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>this.$bvModal.msgBoxOk(message, options)</code></td>\n<td>Open a modal with <code>message</code> as the content and a single OK button</td>\n</tr>\n<tr>\n<td><code>this.$bvModal.msgBoxConfirm(message, options)</code></td>\n<td>Open a modal with <code>message</code> as the content and CANCEL and OK buttons</td>\n</tr>\n</tbody></table>\n</div><p>The <code>options</code> argument is an optional configuration object for adding titles and styling the Message\nBox modal. The object properties correspond to <code>&lt;b-modal&gt;</code> props, except in <samp>camelCase</samp>\nformat instead of <samp>kebab-case</samp>.</p>\n<p>Both methods return a <code>Promise</code> (requires a polyfill for IE 11 and older browser support) which\nresolve into a value when the modal hides. <code>.msgBoxOk()</code> always resolves to the value <code>true</code>, while\n<code>.msgBoxConfirm()</code> resolves to either <code>true</code> (OK button pressed), <code>false</code> (CANCEL button pressed),\nor <code>null</code> (if the modal was closed via backdrop click, <kbd>ESC</kbd> press, or some other means.</p>\n<p>If <code>message</code> is not provided, both methods will return immediately with the value <code>undefined</code>.</p>\n<p>You can use either the <code>.then(..).catch(...)</code> or async <code>await</code> code styles (async <code>await</code> requires\nmodern browsers or a transpiler).</p>\n<h3 id="ok-message-box"><span class="bd-content-title">OK message box<a class="anchorjs-link" href="#ok-message-box" aria-label="Anchor"></a></span></h3>\n<p>Example OK Message boxes</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxOne"</span>&gt;</span>Simple msgBoxOk<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxOne) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxTwo"</span>&gt;</span>msgBoxOk with options<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxTwo) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">boxOne</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">boxTwo</span>: <span class="hljs-string">\'\'</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      showMsgBoxOne() {\n        <span class="hljs-keyword">this</span>.boxOne = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxOk(<span class="hljs-string">\'Action completed\'</span>)\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxOne = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      },\n      showMsgBoxTwo() {\n        <span class="hljs-keyword">this</span>.boxTwo = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxOk(<span class="hljs-string">\'Data was submitted successfully\'</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">\'Confirmation\'</span>,\n          <span class="hljs-attr">size</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">buttonSize</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">okVariant</span>: <span class="hljs-string">\'success\'</span>,\n          <span class="hljs-attr">headerClass</span>: <span class="hljs-string">\'p-2 border-bottom-0\'</span>,\n          <span class="hljs-attr">footerClass</span>: <span class="hljs-string">\'p-2 border-top-0\'</span>,\n          <span class="hljs-attr">centered</span>: <span class="hljs-literal">true</span>\n        })\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxTwo = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-msg-box-ok.vue --&gt;</span></pre><h3 id="confirm-message-box"><span class="bd-content-title">Confirm message box<a class="anchorjs-link" href="#confirm-message-box" aria-label="Anchor"></a></span></h3>\n<p>Example Confirm Message boxes</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-2"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxOne"</span>&gt;</span>Simple msgBoxConfirm<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxOne) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"mb-1"</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"showMsgBoxTwo"</span>&gt;</span>msgBoxConfirm with options<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n     Return value: {{ String(boxTwo) }}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">\n  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n    data() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">boxOne</span>: <span class="hljs-string">\'\'</span>,\n        <span class="hljs-attr">boxTwo</span>: <span class="hljs-string">\'\'</span>\n      }\n    },\n    <span class="hljs-attr">methods</span>: {\n      showMsgBoxOne() {\n        <span class="hljs-keyword">this</span>.boxOne = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxConfirm(<span class="hljs-string">\'Are you sure?\'</span>)\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxOne = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      },\n      showMsgBoxTwo() {\n        <span class="hljs-keyword">this</span>.boxTwo = <span class="hljs-string">\'\'</span>\n        <span class="hljs-keyword">this</span>.$bvModal.msgBoxConfirm(<span class="hljs-string">\'Please confirm that you want to delete everything.\'</span>, {\n          <span class="hljs-attr">title</span>: <span class="hljs-string">\'Please Confirm\'</span>,\n          <span class="hljs-attr">size</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">buttonSize</span>: <span class="hljs-string">\'sm\'</span>,\n          <span class="hljs-attr">okVariant</span>: <span class="hljs-string">\'danger\'</span>,\n          <span class="hljs-attr">okTitle</span>: <span class="hljs-string">\'YES\'</span>,\n          <span class="hljs-attr">cancelTitle</span>: <span class="hljs-string">\'NO\'</span>,\n          <span class="hljs-attr">footerClass</span>: <span class="hljs-string">\'p-2\'</span>,\n          <span class="hljs-attr">hideHeaderClose</span>: <span class="hljs-literal">false</span>,\n          <span class="hljs-attr">centered</span>: <span class="hljs-literal">true</span>\n        })\n          .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> {\n            <span class="hljs-keyword">this</span>.boxTwo = value\n          })\n          .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> {\n            <span class="hljs-comment">// An error occurred</span>\n          })\n      }\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-comment">&lt;!-- b-modal-msg-box-confirm.vue --&gt;</span></pre><h3 id="message-box-notes"><span class="bd-content-title">Message box notes<a class="anchorjs-link" href="#message-box-notes" aria-label="Anchor"></a></span></h3>\n<ul>\n<li>Message Boxes require <code>Promise</code> support in the browser. If targeting your app for older browsers,\nsuch as IE 11, please include a polyfill that provides <code>Promise</code> support. If <code>Promise</code> support is\nnot detected, then the message box methods will immediately return <code>undefined</code>.</li>\n<li>Message Boxes are an extension of the <code>&lt;b-modal&gt;</code> component, and hence support the majority of\n<code>&lt;b-modal&gt;</code> props (using <samp>camelCase</samp> format), with the exception of the following\nprops: <code>lazy</code>, <code>static</code>, <code>busy</code>, <code>visible</code>, <code>noStacking</code>, <code>okOnly</code>, <code>okDisabled</code>, and\n<code>cancelDisabled</code>.</li>\n<li>When a <code>title</code> (or <code>titleHtml</code>) <em>is not</em> provided in the options, the header will not be shown.</li>\n<li>When a <code>title</code> (or <code>titleHtml</code>) <em>is</em> provided in the options, the header close button is not shown\nby default. You can enable the header close button by setting <code>hideHeaderClose: false</code> in the\noptions.</li>\n<li>Message Boxes will throw an error (promise rejection) if they are closed/destroyed before they are\nhidden. Always include a <code>.catch(error =&gt; { /* handler code */ })</code> reject handler, event if using\nthe async <code>await</code> style code.</li>\n<li>When using Vue Router (or similar), Message Boxes will close and reject if the route changes\nbefore the modal hides.</li>\n<li>Message boxes cannot be generated during Server Side Rendering (SSR).</li>\n<li>The Message Box <code>message</code> currently does not support HTML strings, however, you can pass an array\nof <code>VNodes</code> as the <code>message</code> for fine grained control of the markup. You can use Vue&#39;s\n<a href="https://vuejs.org/v2/guide/render-function.html#createElement-Arguments"><code>this.$createElement</code></a>\nmethod to generate VNodes. This can also be done for the modal title (by passing VNodes to the\n<code>title</code> option), OK button text (via the <code>okTitle</code> option), and the CANCEL button text (via the\n<code>cancelTitle</code> option).</li>\n<li>The <code>this.$bvModal</code> injection is only available when using the full BootstrapVue plugin or the\nModal plugin. It is not available if importing just the <code>b-modal</code> component.</li>\n<li>A new <code>$bvModal</code> injection (mixin) is created for each Vue virtual machine (i.e. each instantiated\ncomponent), and is not usable via direct access to the <code>Vue.prototype</code>, as it needs access to the\ninstance&#39;s <code>this</code> and <code>$root</code> contexts.</li>\n</ul>\n<h2 id="listening-to-modal-changes-via-root-events"><span class="bd-content-title">Listening to modal changes via $root events<a class="anchorjs-link" href="#listening-to-modal-changes-via-root-events" aria-label="Anchor"></a></span></h2>\n<p>To listen to any modal opening, use:</p>\n<pre class="hljs js text-monospace p-2"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  mounted() {\n    <span class="hljs-keyword">this</span>.$root.$on(<span class="hljs-string">\'bv::modal::show\'</span>, (bvEvent, modalId) =&gt; {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Modal is about to be shown\'</span>, bvEvent, modalId)\n    })\n  }\n}</pre><p>Refer to the <a href="/docs/components/modal#component-reference">Events</a> section of documentation for the\nfull list of events emitted.</p>\n<h2 id="accessibility"><span class="bd-content-title">Accessibility<a class="anchorjs-link" href="#accessibility" aria-label="Anchor"></a></span></h2>\n<p><code>&lt;b-modal&gt;</code> provides several accessibility features, including auto focus, return focus, and\nkeyboard (tab) <em>focus containment</em>.</p>\n<p>For <code>aria-labelledby</code> and <code>aria-described</code> by attributes to appear on the modal, you <strong>must</strong> supply\nan <code>id</code> attribute on <code>&lt;b-modal&gt;</code>. <code>aria-labelledby</code> will not be present if you have the header\nhidden.</p>\n<h3 id="auto-focus-on-open"><span class="bd-content-title">Auto focus on open<a class="anchorjs-link" href="#auto-focus-on-open" aria-label="Anchor"></a></span></h3>\n<p><code>&lt;b-modal&gt;</code> will autofocus the modal container when opened.</p>\n<p>You can pre-focus an element within the <code>&lt;b-modal&gt;</code> by listening to the <code>&lt;b-modal&gt;</code> <code>shown</code> event,\nand call the element&#39;s <code>focus()</code> method. <code>&lt;b-modal&gt;</code> will not attempt to autofocus if an element\nalready has focus within the <code>&lt;b-modal&gt;</code>.</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">b-modal</span> @<span class="hljs-attr">shown</span>=<span class="hljs-string">"focusMyElement"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span>&gt;</span>I Don\'t Have Focus<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Element to gain focus when modal is opened --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"focusThis"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">b-form-input</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b-form-input</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">b-modal</span>&gt;</span></pre><pre class="hljs js text-monospace p-2"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">methods</span>: {\n    focusMyElement(e) {\n      <span class="hljs-keyword">this</span>.$refs.focusThis.focus()\n    }\n  }\n}</pre><p>Note: it is not recommended to autofocus an input inside a modal for accessibility reasons, as\nscreen reader users will not know the context of where the input is. It is best to let <code>&lt;b-modal&gt;</code>\nfocus the modal container.</p>\n<h3 id="returning-focus-to-the-triggering-element"><span class="bd-content-title">Returning focus to the triggering element<a class="anchorjs-link" href="#returning-focus-to-the-triggering-element" aria-label="Anchor"></a></span></h3>\n<p>For accessibility reasons, it is desirable to return focus to the element that triggered the opening\nof the modal, when the modal closes.</p>\n<p><code>&lt;b-modal&gt;</code> will try and automatically determine which element had focus before the modal was\nopened, and will return the focus to that element when the modal has hidden if possible. However,\nseveral methods and options are provided to allow you to specify the element to return focus to once\nthe modal has hidden.</p>\n<h4 id="specify-return-focus-element-via-the-return-focus-prop"><span class="bd-content-title">Specify return focus element via the <code>return-focus</code> prop<a class="anchorjs-link" href="#specify-return-focus-element-via-the-return-focus-prop" aria-label="Anchor"></a></span></h4>\n<p>You can also specify an element to return focus to, when modal closes, by setting the <code>return-focus</code>\nprop to one of the following:</p>\n<ul>\n<li>A CSS Query Selector string (or an element ID prepended with <code>#</code>)</li>\n<li>A component reference (which is mounted on a focusable element, such as <code>&lt;b-button&gt;</code>)</li>\n<li>A reference to a DOM element that is focusable</li>\n</ul>\n<p>If the passed in element is not focusable, then the browser will determine what has focus (usually\n<code>&lt;body&gt;</code>, which is not desirable)</p>\n<p>This method for returning focus is handy when you use the <code>&lt;b-modal&gt;</code> methods <code>show()</code> and <code>hide()</code>,\nor the <code>v-model</code> prop. Note this property takes precedence over other methods of specifying the\nreturn focus element.</p>\n<h4 id="auto-return-focus"><span class="bd-content-title">Auto return focus<a class="anchorjs-link" href="#auto-return-focus" aria-label="Anchor"></a></span></h4>\n<p>When <code>&lt;b-modal&gt;</code> is opened via the <code>v-b-modal</code> directive on an element, focus will be returned to\nthis element automatically when <code>&lt;b-modal&gt;</code> closes, unless an element has been specified via the\n<code>return-focus</code> prop.</p>\n<h4 id="specify-return-focus-via-event"><span class="bd-content-title">Specify return focus via event<a class="anchorjs-link" href="#specify-return-focus-via-event" aria-label="Anchor"></a></span></h4>\n<p>When using the <code>bv::show::modal</code> event (emitted on <code>$root</code>), you can specify a second argument which\nis the element to return focus to. This argument accepts the same types as the <code>return-focus</code> prop.</p>\n<pre class="hljs js text-monospace p-2"><span class="hljs-keyword">this</span>.$root.$emit(<span class="hljs-string">\'bv::show::modal\'</span>, <span class="hljs-string">\'modal-1\'</span>, <span class="hljs-string">\'#focusThisOnClose\'</span>)</pre><p><em>Tip:</em> if using a click event (or similar) to trigger modal to open, pass the event&#39;s <code>target</code>\nproperty:</p>\n<pre class="hljs html text-monospace p-2"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">b-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"$root.$emit(\'bv::show::modal\', \'modal-1\', $event.target)"</span>&gt;</span>Open Modal<span class="hljs-tag">&lt;/<span class="hljs-name">b-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></pre><p><strong>Note:</strong> If the <code>&lt;b-modal&gt;</code> has the <code>return-focus</code> prop set, then the element specified via the\nevent will be ignored.</p>\n<h3 id="keyboard-navigation"><span class="bd-content-title">Keyboard navigation<a class="anchorjs-link" href="#keyboard-navigation" aria-label="Anchor"></a></span></h3>\n<p>When tabbing through elements within a <code>&lt;b-modal&gt;</code>, if focus attempts to leave the modal into the\ndocument, it will be brought back into the modal.</p>\n<p>In some circumstances, you may need to disable the enforce focus feature. You can do this by setting\nthe prop <code>no-enforce-focus</code>.</p>\n\x3c!-- Component reference added automatically from component package.json --\x3e\n'}}]);
//# sourceMappingURL=461cacf77ab491aee3f1.js.map