{"version":3,"sources":["webpack:///./src/components/toast/README.md"],"names":["module","exports"],"mappings":"4EAAAA,EAAAC,QAAA","file":"6f8835ccafb3f6c47712.js","sourcesContent":["module.exports = \"<h1 id=\\\"toasts\\\"><span class=\\\"bd-content-title\\\">Toasts</span></h1>\\n<p class=\\\"bd-lead\\\">Push notifications to your visitors with a <code>&lt;b-toast&gt;</code> and <code>&lt;b-toaster&gt;</code>, lightweight components\\nwhich are easily customizable for generating alert messages.</p>\\n<p>Toasts are lightweight notifications designed to mimic the push notifications that have been\\npopularized by mobile and desktop operating systems.</p>\\n<p>Toasts are intended to be small interruptions to your visitors or users, and therefore should\\ncontain minimal, to-the-point, non-interactive content.</p>\\n<p class=\\\"alert alert-warning mb-0\\\" role=\\\"alert\\\">\\n  <strong>BETA warning</strong><br>\\n  Toasts are in their preliminary stages of being developed,\\n  and usage and custom CSS is subject to change in future releases.\\n</p>\\n\\n<h2 id=\\\"overview\\\"><span class=\\\"bd-content-title\\\">Overview<a class=\\\"anchorjs-link\\\" href=\\\"#overview\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>To encourage extensible and predictable toasts, we recommend providing a header (title) and body.\\nToast headers use the style <code>&#39;display: flex&#39;</code>, allowing easy alignment of content thanks to\\nBootstrap&#39;s <a href=\\\"/docs/reference/utility-classes\\\">margin and flexbox utility classes</a>.</p>\\n<p>Toasts are slightly translucent, too, so they blend over whatever they might appear over. For\\nbrowsers that support the <code>backdrop-filter</code> CSS property, they also attempt to blur the elements\\nunder the toast.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"p-3 bg-secondary progress-bar-striped\\\"</span> <span class=\\\"hljs-attr\\\">style</span>=<span class=\\\"hljs-string\\\">\\\"min-height: 150px;\\\"</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-toast</span> <span class=\\\"hljs-attr\\\">title</span>=<span class=\\\"hljs-string\\\">\\\"BootstrapVue\\\"</span> <span class=\\\"hljs-attr\\\">visible</span> <span class=\\\"hljs-attr\\\">static</span> <span class=\\\"hljs-attr\\\">no-auto-hide</span>&gt;</span>\\n      Hello, world! This is a toast message.\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-toast</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- toast-intro.vue --&gt;</span></pre><p><strong>Note:</strong> we are using the <code>static</code> prop in the above example to render the toast in-pace in the\\ndocument, rather than transporting it to a <code>&lt;b-toaster&gt;</code> target container. And we have added classes\\n<code>bg-secondary</code> and <code>progress-bar-striped</code> to the outer <code>&lt;div&gt;</code> for illustrative purposes of toast\\ntransparency only.</p>\\n<h3 id=\\\"toast-features-and-notes\\\"><span class=\\\"bd-content-title\\\">Toast features and notes<a class=\\\"anchorjs-link\\\" href=\\\"#toast-features-and-notes\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li>Toasts can be generated on demand via the injection <code>this.$bvToast</code> object, or manually created\\nusing the <code>&lt;b-toast&gt;</code> component.</li>\\n<li>Toasts will auto hide after a default of 5 seconds (5000ms). The duration can be changed via the\\n<code>auto-hide-delay</code> prop (value is specified in milliseconds), and disabled with the <code>no-auto-hide</code>\\nprop.</li>\\n<li>When auto-hide is enabled, and you hover over the toast, the auto-hide countdown will be paused\\nuntil you unhover the toast. You can disabled this feature by setting the <code>no-hover-pause</code> prop\\nto <code>true</code>.</li>\\n<li>Toasts include a close button on their top right to allow users to manually dismiss them. The\\nclose button can be removed via the <code>no-close-button</code> prop.</li>\\n<li>Titles are optional, but should be included, titles are rendered inside a <code>&lt;strong&gt;</code> element,\\nunless using the <code>toast-title</code> slot.</li>\\n<li>If you disable the auto-hide feature, avoid hiding the close button, or if you hide the close\\nbutton be sure to allow the toast to auto-dismiss.</li>\\n<li>Toast transparency can be disabled by setting the <code>solid</code> prop to <code>true</code>.</li>\\n<li>Toasts will show inside a named <code>&lt;b-toaster&gt;</code> target component. BootstrapVue comes with several\\npre-defined toaster targets. Toasts will check for the named toaster in the document before they\\nare shown, and will dynamically create the named toaster target if one is not found.</li>\\n<li>Toaster targets are defined completely with CSS for controlling the positioning of the contained\\n<code>&lt;b-toast&gt;</code> components.</li>\\n<li>Toasts can can targeted to any named toaster.</li>\\n<li>Toasts are wrapped in a <code>&lt;div&gt;</code> with class <code>b-toast</code> to allow for Vue list-transition support when\\ndisplayed in a toaster component.</li>\\n</ul>\\n<p>BootstrapVue uses <a href=\\\"https://portal-vue.linusb.org/\\\">PortalVue</a> to transport toasts into the toasters.</p>\\n<h2 id=\\\"toasts-on-demand\\\"><span class=\\\"bd-content-title\\\">Toasts on demand<a class=\\\"anchorjs-link\\\" href=\\\"#toasts-on-demand\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>Generate a dynamic toast from anywhere in your app via the <code>this.$bvToast</code> Vue component <em>instance</em>\\ninjection, without the need to place a <a href=\\\"#b-toast-component\\\"><code>&lt;b-toast&gt;</code></a> component in your app.</p>\\n<p>Use the <code>this.$bvToast.toast()</code> method to generate on demand toasts. The method accepts two\\narguments:</p>\\n<ul>\\n<li><code>message</code>: the content of the toast body (either a string, or an array of <code>VNodes</code>)</li>\\n<li><code>options</code>: an optional options object for providing a title and/or additional configuration\\noptions.</li>\\n</ul>\\n<p>The options argument accepts most of the props that the <code>&lt;b-toast&gt;</code> component accepts (with the\\nexception of <code>static</code>, and <code>visible</code>) in <samp>camelCase</samp> name format instead of\\n<samp>kebab-case</samp>.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast()\\\"</span>&gt;</span>Show Toast<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast(true)\\\"</span>&gt;</span>Show Toast (appended)<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"javascript\\\">\\n  <span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n    data() {\\n      <span class=\\\"hljs-keyword\\\">return</span> {\\n        <span class=\\\"hljs-attr\\\">toastCount</span>: <span class=\\\"hljs-number\\\">0</span>\\n      }\\n    },\\n    <span class=\\\"hljs-attr\\\">methods</span>: {\\n      makeToast(append = <span class=\\\"hljs-literal\\\">false</span>) {\\n        <span class=\\\"hljs-keyword\\\">this</span>.toastCount++\\n        <span class=\\\"hljs-keyword\\\">this</span>.$bvToast.toast(<span class=\\\"hljs-string\\\">`This is toast number <span class=\\\"hljs-subst\\\">${<span class=\\\"hljs-keyword\\\">this</span>.toastCount}</span>`</span>, {\\n          <span class=\\\"hljs-attr\\\">title</span>: <span class=\\\"hljs-string\\\">'BootstrapVue Toast'</span>,\\n          <span class=\\\"hljs-attr\\\">autoHideDelay</span>: <span class=\\\"hljs-number\\\">5000</span>,\\n          <span class=\\\"hljs-attr\\\">appendToast</span>: append\\n        })\\n      }\\n    }\\n  }\\n</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- toasts-bv-toast-example.vue --&gt;</span></pre><p>Once a toast which was generated using <code>this.$bvToast.toast()</code> has been hidden, it will\\nautomatically be destroyed and removed from the document.</p>\\n<p><strong>Notes:</strong></p>\\n<ul>\\n<li>The <code>this.$bvToast</code> injection is only available when using the full <code>BootstrapVue</code> plugin or the\\n<code>Toast</code> plugin. It is not available if importing just the <code>b-toast</code> or <code>b-toaster</code> components.</li>\\n<li>A new <code>$bvToast</code> injection (mixin) is created for each Vue virtual machine (i.e. each instantiated\\ncomponent), and is not usable via direct access to the <code>Vue.prototype</code>, as it needs access to the\\ninstance&#39;s <code>this</code> and <code>$root</code> contexts.</li>\\n</ul>\\n<h2 id=\\\"options\\\"><span class=\\\"bd-content-title\\\">Options<a class=\\\"anchorjs-link\\\" href=\\\"#options\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>Toasts have various options that can control their style and behaviour. Options are available both\\nas props on the <code>&lt;b-toast&gt;</code> component and as properties of the options object passed to\\n<code>this.$bvToast.toast()</code>. When passing options to <code>this.$bvToast.toast()</code>, use the\\n<samp>camelCase</samp> version of the component prop name, i.e. use <code>noAutoHide</code> instead of\\n<code>no-auto-hide</code>.</p>\\n<h3 id=\\\"transparency\\\"><span class=\\\"bd-content-title\\\">Transparency<a class=\\\"anchorjs-link\\\" href=\\\"#transparency\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>Toasts have a semi-transparent background by default. To disable the default transparency, just set\\nthe <code>solid</code> prop to <code>true</code></p>\\n<h3 id=\\\"variants\\\"><span class=\\\"bd-content-title\\\">Variants<a class=\\\"anchorjs-link\\\" href=\\\"#variants\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>BootstrapVue toasts provide custom CSS to define color variants. Variants follow the standard\\nBootstrap V4 variant names. If you have custom SCSS defined Bootstrap color variants, the toast\\ncustom SCSS will automatically create toast variants for you.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast()\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>Default<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"primary\\\"</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast('primary')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>Primary<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"secondary\\\"</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast('secondary')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>Secondary<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"danger\\\"</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast('danger')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>Danger<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"warning\\\"</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast('warning')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>Warning<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"success\\\"</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast('success')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>Success<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"info\\\"</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"makeToast('info')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>Info<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"javascript\\\">\\n  <span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n    <span class=\\\"hljs-attr\\\">methods</span>: {\\n      makeToast(variant = <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">this</span>.$bvToast.toast(<span class=\\\"hljs-string\\\">'Toast body content'</span>, {\\n          <span class=\\\"hljs-attr\\\">title</span>: <span class=\\\"hljs-string\\\">`Variant <span class=\\\"hljs-subst\\\">${variant || <span class=\\\"hljs-string\\\">'default'</span>}</span>`</span>,\\n          <span class=\\\"hljs-attr\\\">variant</span>: variant,\\n          <span class=\\\"hljs-attr\\\">solid</span>: <span class=\\\"hljs-literal\\\">true</span>\\n        })\\n      }\\n    }\\n  }\\n</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- toast-variants.vue --&gt;</span></pre><h3 id=\\\"toaster-target\\\"><span class=\\\"bd-content-title\\\">Toaster target<a class=\\\"anchorjs-link\\\" href=\\\"#toaster-target\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>BootstrapVue comes with the following &quot;built-in&quot; toaster names (and associated styles defined in\\nSCSS):</p>\\n<ul>\\n<li><code>b-toaster-top-right</code></li>\\n<li><code>b-toaster-top-left</code></li>\\n<li><code>b-toaster-top-center</code></li>\\n<li><code>b-toaster-top-full</code></li>\\n<li><code>b-toaster-bottom-right</code></li>\\n<li><code>b-toaster-bottom-left</code></li>\\n<li><code>b-toaster-bottom-center</code></li>\\n<li><code>b-toaster-bottom-full</code></li>\\n</ul>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-top-right')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-top-right<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-top-left')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-top-left<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-top-center')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-top-center<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-top-full')\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-top-full<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-bottom-right', true)\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-bottom-right<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-bottom-left', true)\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-bottom-left<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-bottom-center', true)\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-bottom-center<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast('b-toaster-bottom-full', true)\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mb-2\\\"</span>&gt;</span>b-toaster-bottom-full<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"javascript\\\">\\n  <span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n    data() {\\n      <span class=\\\"hljs-keyword\\\">return</span> {\\n        <span class=\\\"hljs-attr\\\">counter</span>: <span class=\\\"hljs-number\\\">0</span>\\n      }\\n    },\\n    <span class=\\\"hljs-attr\\\">methods</span>: {\\n      toast(toaster, append = <span class=\\\"hljs-literal\\\">false</span>) {\\n        <span class=\\\"hljs-keyword\\\">this</span>.counter++\\n        <span class=\\\"hljs-keyword\\\">this</span>.$bvToast.toast(<span class=\\\"hljs-string\\\">`Toast <span class=\\\"hljs-subst\\\">${<span class=\\\"hljs-keyword\\\">this</span>.counter}</span> body content`</span>, {\\n          <span class=\\\"hljs-attr\\\">title</span>: <span class=\\\"hljs-string\\\">`Toaster <span class=\\\"hljs-subst\\\">${toaster}</span>`</span>,\\n          <span class=\\\"hljs-attr\\\">toaster</span>: toaster,\\n          <span class=\\\"hljs-attr\\\">solid</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n          <span class=\\\"hljs-attr\\\">appendToast</span>: append\\n        })\\n      }\\n    }\\n  }\\n</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- toast-targets.vue --&gt;</span></pre><p><strong>Notes:</strong></p>\\n<ul>\\n<li>Toaster target names that have not been defined in CSS will render at the bottom of the\\ndocument, stacked and not positioned (appended to <code>&lt;body&gt;</code> inside a <code>&lt;b-toaster&gt;</code> with class name\\nand ID set to the toaster target name). The only default styling the toaster will have is a\\n<code>z-index</code> of <code>1100</code>.</li>\\n<li>Avoid using <code>b-toaster-top-*</code> toasters together, or <code>b-toaster-bottom-*</code> toasters togehter, at the\\nsame time in your app as notifications could be obscured/overlap on small screens (i.e. <code>xs</code>).</li>\\n</ul>\\n<h3 id=\\\"prepend-and-append\\\"><span class=\\\"bd-content-title\\\">Prepend and append<a class=\\\"anchorjs-link\\\" href=\\\"#prepend-and-append\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>Toasts default to prepending themselves to the top of the toasts shown in the specified toaster in\\nthe order they were created. To append new toasts to the bottom, set the <code>append-toast</code> prop to\\n<code>true</code>.</p>\\n<h3 id=\\\"auto-hide\\\"><span class=\\\"bd-content-title\\\">Auto-hide<a class=\\\"anchorjs-link\\\" href=\\\"#auto-hide\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>Change to auto hide delay time via the <code>auto-hide-delay</code> prop (value is in milliseconds), which\\ndefaults to <code>5000</code> (minimum value <code>1000</code>). Or, disable the auto-hide feature completely by setting\\nthe <code>no-auto-hide</code> prop to <code>true</code>.</p>\\n<p>When auto-hide is enabled, hovering over the toast will pause the auto-hide timer. When you\\nun-hover the toast, the auto-hide timer will be resumed. You can disable this feature by setting\\nthe <code>no-hover-pause</code> prop to <code>true</code>.</p>\\n<h3 id=\\\"toast-roles\\\"><span class=\\\"bd-content-title\\\">Toast roles<a class=\\\"anchorjs-link\\\" href=\\\"#toast-roles\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>Toasts are rendered with a default <code>role</code> attribute of <code>&#39;alert&#39;</code> and <code>aria-live</code> attribute of\\n<code>&#39;assertive&#39;</code>. For toasts that are meant for a casual notification, set the <code>is-status</code> prop to\\n<code>true</code>, which will change the <code>role</code> and <code>aria-live</code> attributes to <code>&#39;status&#39;</code> and <code>&#39;polite&#39;</code>\\nrespectively.</p>\\n<p>For more information, please the the <a href=\\\"#accessibility\\\">Accessibility</a> section below.</p>\\n<h3 id=\\\"links\\\"><span class=\\\"bd-content-title\\\">Links<a class=\\\"anchorjs-link\\\" href=\\\"#links\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<p>Optionally convert the toast body to a link (<code>&lt;a&gt;</code>) or <code>&lt;router-link&gt;</code> (or <code>&lt;nuxt-link&gt;</code>) via the\\n<code>href</code> and <code>to</code> props respectively. When set, the entire toast body becomes a link.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"toast()\\\"</span>&gt;</span>Toast with link<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"javascript\\\">\\n  <span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n    <span class=\\\"hljs-attr\\\">methods</span>: {\\n      toast() {\\n        <span class=\\\"hljs-keyword\\\">this</span>.$bvToast.toast(<span class=\\\"hljs-string\\\">`Toast with action link`</span>, {\\n          <span class=\\\"hljs-attr\\\">href</span>: <span class=\\\"hljs-string\\\">'#foo'</span>,\\n          <span class=\\\"hljs-attr\\\">title</span>: <span class=\\\"hljs-string\\\">'Example'</span>\\n        }) \\n      }\\n    }\\n  }\\n</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- toast-link.vue --&gt;</span></pre><h2 id=\\\"b-toast-component\\\"><span class=\\\"bd-content-title\\\"><code>&lt;b-toast&gt;</code> component<a class=\\\"anchorjs-link\\\" href=\\\"#b-toast-component\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>When you have a custom component that would like to display just a single toast at a time, use the\\n<code>&lt;b-toast&gt;</code> component. The <code>&lt;b-toast&gt;</code> component can be placed anywhere in your custom component or\\napp, and does not render an element (they render a comment placeholder node which will not affect\\nlayout).</p>\\n<p>The toast can be made visible via a <code>v-model</code> (which is tied to the <code>visible</code> prop), or shown using\\nthe component&#39;s <code>show()</code> and <code>hide()</code> instance methods, or via the <code>this.$bvToast.show(id)</code> and\\n<code>this.$bvToast.hide(id)</code> methods (requires that a unique ID be set on the <code>&lt;b-toast&gt;</code> component).</p>\\n<p>Toasts, by default will be paced into the <code>b-toaster-top-right</code> <code>&lt;b-toaster&gt;</code> component. The toaster\\nspecified by the <code>toaster</code> prop will be created on demand if it doesn&#39;t already exist in document.</p>\\n<p>You can force a <code>&lt;b-toast&gt;</code> to appear in-place in the document by setting the <code>static</code> prop to\\n<code>true</code>. you still need to show and hide the toast, but it will not be transported into a toaster\\ncomponent.</p>\\n<pre class=\\\"hljs html text-monospace p-2\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-button</span> @<span class=\\\"hljs-attr\\\">click</span>=<span class=\\\"hljs-string\\\">\\\"$bvToast.show('my-toast')\\\"</span>&gt;</span>Show toast<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-button</span>&gt;</span>\\n\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-toast</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"my-toast\\\"</span> <span class=\\\"hljs-attr\\\">variant</span>=<span class=\\\"hljs-string\\\">\\\"warning\\\"</span> <span class=\\\"hljs-attr\\\">solid</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">slot</span>=<span class=\\\"hljs-string\\\">\\\"toast-title\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"d-flex flex-grow-1 align-items-baseline\\\"</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">b-img</span> <span class=\\\"hljs-attr\\\">blank</span> <span class=\\\"hljs-attr\\\">blank-color</span>=<span class=\\\"hljs-string\\\">\\\"#ff5555\\\"</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mr-2\\\"</span> <span class=\\\"hljs-attr\\\">width</span>=<span class=\\\"hljs-string\\\">\\\"12\\\"</span> <span class=\\\"hljs-attr\\\">height</span>=<span class=\\\"hljs-string\\\">\\\"12\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-img</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">strong</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"mr-auto\\\"</span>&gt;</span>Notice!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">strong</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">small</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">\\\"text-muted mr-2\\\"</span>&gt;</span>42 seconds ago<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">small</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n      This is the content of the toast.\\n      It is short and to the point.\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">b-toast</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n\\n<span class=\\\"hljs-comment\\\">&lt;!-- toast-component.vue --&gt;</span></pre><h3 id=\\\"slots\\\"><span class=\\\"bd-content-title\\\">Slots<a class=\\\"anchorjs-link\\\" href=\\\"#slots\\\" aria-label=\\\"Anchor\\\"></a></span></h3>\\n<ul>\\n<li><code>toast-title</code>: Content to replace the default title element.</li>\\n<li><code>default</code>: Content of the toast body</li>\\n</ul>\\n<p>Both slots are optionally scoped with the following scope:</p>\\n<div class=\\\"table-responsive-sm\\\"><table class=\\\"b-table table table-bordered table-striped bv-docs-table\\\">\\n<thead class=\\\"thead-default\\\">\\n<tr>\\n<th>Method or property</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>hide()</code></td>\\n<td>Hides the toast when called. Useful if you are providing your own close button.</td>\\n</tr>\\n</tbody></table>\\n</div><p>Slots are only available when using the <code>&lt;b-toast&gt;</code> component.</p>\\n<h2 id=\\\"b-toaster-target-component\\\"><span class=\\\"bd-content-title\\\"><code>&lt;b-toaster&gt;</code> target component<a class=\\\"anchorjs-link\\\" href=\\\"#b-toaster-target-component\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>The <code>&lt;b-toaster&gt;</code> component provides a container where toasts will appear (the <em>Toaster</em>). Toasters\\nrequire a unique name, and toasts can be targeted to appear in a specific named toaster.</p>\\n<p>In most cases you will not need to directly use this component, as <code>&lt;b-toast&gt;</code> will automatically\\ninsert a <code>&lt;b-toaster&gt;</code> component (appended to <code>&lt;body&gt;</code>) with the requested toaster name if one is\\nnot found in the document. But sometimes you may want to explicitly place a toaster in your app.</p>\\n<p>The toaster <code>name</code> becomes the ID of the inserted container, and will also be used a class name on\\nthe rendered toaster container.</p>\\n<p>Toaster positioning and the positioning of toasts inside the toaster is driven completely by CSS\\nclasses (based on the name of the toaster)</p>\\n<p>The following &quot;built-in&quot; toaster names (and associated styles) are defined in BootstrapVue&#39;s custom\\nSCSS:</p>\\n<ul>\\n<li><code>b-toaster-top-right</code></li>\\n<li><code>b-toaster-top-left</code></li>\\n<li><code>b-toaster-top-center</code></li>\\n<li><code>b-toaster-top-full</code></li>\\n<li><code>b-toaster-bottom-right</code></li>\\n<li><code>b-toaster-bottom-left</code></li>\\n<li><code>b-toaster-bottom-center</code></li>\\n<li><code>b-toaster-bottom-full</code></li>\\n</ul>\\n<p>The above toasters place the toasts in a stacked (columnar format), fixed within the viewport\\n(meaning they will always be in view regardless of viewport scroll position). If there are more\\ntoasts than can fit on the viewport screen, some will be visually hidden offscreen until other\\ntoasts are closed/hidden.</p>\\n<p><code>&lt;b-toast&gt;</code> uses the <code>b-toaster-top-right</code> toaster by default.</p>\\n<p><strong>Notes:</strong></p>\\n<ul>\\n<li>If a <code>&lt;b-toaster&gt;</code> with the same name already exists in document (either auto-created by\\n<code>&lt;b-toast&gt;</code>, <code>this.$bvToast.toast()</code>, or manually placed), then <code>&lt;b-toaster&gt;</code> will just render\\nan empty <code>&lt;div&gt;</code> element and issue a console warning.</li>\\n<li>If manually placing a <code>&lt;b-toaster&gt;</code> component, make sure it is placed as the last element in\\nbottom of your app root element, so that it will be available to all pages in your app.</li>\\n<li>Toasters that get destroyed will be auto re-created if a new toast targeted for the  toaster\\nname is shown.</li>\\n<li>In the majority of use cases, you should not need to manually place/create a <code>&lt;b-toaster&gt;</code>\\ncomponent in your app, as they will be auto generated on demand if needed.  But if you need to\\noverride any of the toaster default settings, ensure that you place the toaster in your app in\\na location that will not be destroyed due to changes in the route.</li>\\n</ul>\\n<h2 id=\\\"accessibility\\\"><span class=\\\"bd-content-title\\\">Accessibility<a class=\\\"anchorjs-link\\\" href=\\\"#accessibility\\\" aria-label=\\\"Anchor\\\"></a></span></h2>\\n<p>Toasts are intended to be small interruptions to your visitors or users, so to help those with\\nscreen readers and similar assistive technologies, toasts are wrapped in an aria-live region.\\nChanges to live regions (such as injecting/updating a toast component) are automatically announced\\nby screen readers without needing to move the user’s focus or otherwise interrupt the user.\\nAdditionally, <code>aria-atomic=&quot;true&quot;</code> is automatically set to ensure that the entire toast is always\\nannounced as a single (atomic) unit, rather than announcing what was changed (which could lead to\\nproblems if you only update part of the toast’s content, or if displaying the same toast content at\\na later point in time).</p>\\n<p>If the information needed is important for the process, e.g. for a list of errors in a form, then\\nuse the <a href=\\\"/docs/components/alert\\\"><code>&lt;b-alert&gt;</code></a> component instead of <code>&lt;b-toast&gt;</code>.</p>\\n<p><code>&lt;b-toast&gt;</code>, by default, sets the attributes <code>role</code> to <code>&#39;alert&#39;</code> and <code>aria-live</code> to <code>&#39;assertive&#39;</code>.\\nIf it’s an important message like an error, this default setting is appropriate, otherwise set the\\nprop <code>is-status</code> to <code>true</code> to change the attributes <code>role</code> to <code>&#39;status&#39;</code> and <code>aria-live</code> to\\n<code>&#39;polite&#39;</code>.</p>\\n<p>When setting prop <code>auto-hide</code> to <code>false</code>, you must have a close button to allow users to dismiss the\\ntoast. If you have set prop <code>no-close-button</code> to true, you must provide your own close button.</p>\\n\";"],"sourceRoot":""}